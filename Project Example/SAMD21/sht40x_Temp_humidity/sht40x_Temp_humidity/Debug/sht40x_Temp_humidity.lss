
sht40x_Temp_humidity.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004d04  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000064  20000000  00004d04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000138  20000064  00004d68  00020064  2**2
                  ALLOC
  3 .stack        00002004  2000019c  00004ea0  00020064  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0002396d  00000000  00000000  000200e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003021  00000000  00000000  00043a52  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000c13e  00000000  00000000  00046a73  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b38  00000000  00000000  00052bb1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000bc0  00000000  00000000  000536e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00019066  00000000  00000000  000542a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000e9e5  00000000  00000000  0006d30f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0008651b  00000000  00000000  0007bcf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000023bc  00000000  00000000  00102210  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 21 00 20 25 01 00 00 21 01 00 00 21 01 00 00     .!. %...!...!...
	...
      2c:	21 01 00 00 00 00 00 00 00 00 00 00 21 01 00 00     !...........!...
      3c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      4c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      5c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      6c:	21 01 00 00 21 01 00 00 21 01 00 00 95 12 00 00     !...!...!.......
      7c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      8c:	21 01 00 00 21 01 00 00 00 00 00 00 00 00 00 00     !...!...........
      9c:	21 01 00 00 21 01 00 00 21 01 00 00 21 01 00 00     !...!...!...!...
      ac:	21 01 00 00 00 00 00 00                             !.......

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00004d04 	.word	0x00004d04

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00004d04 	.word	0x00004d04
     10c:	00004d04 	.word	0x00004d04
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	4b01      	ldr	r3, [pc, #4]	; (11c <atmel_start_init+0x8>)
     118:	4798      	blx	r3
}
     11a:	bd10      	pop	{r4, pc}
     11c:	0000033d 	.word	0x0000033d

00000120 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     120:	e7fe      	b.n	120 <Dummy_Handler>
	...

00000124 <Reset_Handler>:
{
     124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if (pSrc != pDest) {
     126:	4a23      	ldr	r2, [pc, #140]	; (1b4 <Reset_Handler+0x90>)
     128:	4b23      	ldr	r3, [pc, #140]	; (1b8 <Reset_Handler+0x94>)
     12a:	429a      	cmp	r2, r3
     12c:	d009      	beq.n	142 <Reset_Handler+0x1e>
     12e:	4b22      	ldr	r3, [pc, #136]	; (1b8 <Reset_Handler+0x94>)
     130:	4a20      	ldr	r2, [pc, #128]	; (1b4 <Reset_Handler+0x90>)
     132:	e003      	b.n	13c <Reset_Handler+0x18>
                        *pDest++ = *pSrc++;
     134:	6811      	ldr	r1, [r2, #0]
     136:	6019      	str	r1, [r3, #0]
     138:	3304      	adds	r3, #4
     13a:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     13c:	491f      	ldr	r1, [pc, #124]	; (1bc <Reset_Handler+0x98>)
     13e:	428b      	cmp	r3, r1
     140:	d3f8      	bcc.n	134 <Reset_Handler+0x10>
                        *pDest++ = *pSrc++;
     142:	4b1f      	ldr	r3, [pc, #124]	; (1c0 <Reset_Handler+0x9c>)
     144:	e002      	b.n	14c <Reset_Handler+0x28>
                *pDest++ = 0;
     146:	2200      	movs	r2, #0
     148:	601a      	str	r2, [r3, #0]
     14a:	3304      	adds	r3, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     14c:	4a1d      	ldr	r2, [pc, #116]	; (1c4 <Reset_Handler+0xa0>)
     14e:	4293      	cmp	r3, r2
     150:	d3f9      	bcc.n	146 <Reset_Handler+0x22>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     152:	4a1d      	ldr	r2, [pc, #116]	; (1c8 <Reset_Handler+0xa4>)
     154:	21ff      	movs	r1, #255	; 0xff
     156:	4b1d      	ldr	r3, [pc, #116]	; (1cc <Reset_Handler+0xa8>)
     158:	438b      	bics	r3, r1
     15a:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     15c:	39fd      	subs	r1, #253	; 0xfd
     15e:	2390      	movs	r3, #144	; 0x90
     160:	005b      	lsls	r3, r3, #1
     162:	4a1b      	ldr	r2, [pc, #108]	; (1d0 <Reset_Handler+0xac>)
     164:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     166:	4a1b      	ldr	r2, [pc, #108]	; (1d4 <Reset_Handler+0xb0>)
     168:	78d3      	ldrb	r3, [r2, #3]
     16a:	2503      	movs	r5, #3
     16c:	43ab      	bics	r3, r5
     16e:	2402      	movs	r4, #2
     170:	4323      	orrs	r3, r4
     172:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     174:	78d3      	ldrb	r3, [r2, #3]
     176:	270c      	movs	r7, #12
     178:	43bb      	bics	r3, r7
     17a:	2608      	movs	r6, #8
     17c:	4333      	orrs	r3, r6
     17e:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     180:	4b15      	ldr	r3, [pc, #84]	; (1d8 <Reset_Handler+0xb4>)
     182:	7b98      	ldrb	r0, [r3, #14]
     184:	2230      	movs	r2, #48	; 0x30
     186:	4390      	bics	r0, r2
     188:	2220      	movs	r2, #32
     18a:	4310      	orrs	r0, r2
     18c:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     18e:	7b99      	ldrb	r1, [r3, #14]
     190:	43b9      	bics	r1, r7
     192:	4331      	orrs	r1, r6
     194:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     196:	7b9a      	ldrb	r2, [r3, #14]
     198:	43aa      	bics	r2, r5
     19a:	4322      	orrs	r2, r4
     19c:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     19e:	4a0f      	ldr	r2, [pc, #60]	; (1dc <Reset_Handler+0xb8>)
     1a0:	6851      	ldr	r1, [r2, #4]
     1a2:	2380      	movs	r3, #128	; 0x80
     1a4:	430b      	orrs	r3, r1
     1a6:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1a8:	4b0d      	ldr	r3, [pc, #52]	; (1e0 <Reset_Handler+0xbc>)
     1aa:	4798      	blx	r3
        main();
     1ac:	4b0d      	ldr	r3, [pc, #52]	; (1e4 <Reset_Handler+0xc0>)
     1ae:	4798      	blx	r3
     1b0:	e7fe      	b.n	1b0 <Reset_Handler+0x8c>
     1b2:	46c0      	nop			; (mov r8, r8)
     1b4:	00004d04 	.word	0x00004d04
     1b8:	20000000 	.word	0x20000000
     1bc:	20000064 	.word	0x20000064
     1c0:	20000064 	.word	0x20000064
     1c4:	2000019c 	.word	0x2000019c
     1c8:	e000ed00 	.word	0xe000ed00
     1cc:	00000000 	.word	0x00000000
     1d0:	41007000 	.word	0x41007000
     1d4:	41005000 	.word	0x41005000
     1d8:	41004800 	.word	0x41004800
     1dc:	41004000 	.word	0x41004000
     1e0:	00003de9 	.word	0x00003de9
     1e4:	0000135d 	.word	0x0000135d

000001e8 <I2C_0_PORT_init>:
static uint8_t USART_0_buffer[USART_0_BUFFER_SIZE];

struct i2c_m_sync_desc I2C_0;

void I2C_0_PORT_init(void)
{
     1e8:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     1ea:	4b13      	ldr	r3, [pc, #76]	; (238 <I2C_0_PORT_init+0x50>)
     1ec:	2050      	movs	r0, #80	; 0x50
     1ee:	5c19      	ldrb	r1, [r3, r0]
     1f0:	2204      	movs	r2, #4
     1f2:	4391      	bics	r1, r2
     1f4:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1f6:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1f8:	2501      	movs	r5, #1
     1fa:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1fc:	2401      	movs	r4, #1
     1fe:	4321      	orrs	r1, r4
     200:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     202:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     204:	3818      	subs	r0, #24
     206:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     208:	260f      	movs	r6, #15
     20a:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     20c:	2602      	movs	r6, #2
     20e:	4331      	orrs	r1, r6
     210:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     212:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     214:	2151      	movs	r1, #81	; 0x51
     216:	5c5e      	ldrb	r6, [r3, r1]
     218:	4396      	bics	r6, r2
     21a:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     21c:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     21e:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     220:	4322      	orrs	r2, r4
     222:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     224:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     226:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     228:	3942      	subs	r1, #66	; 0x42
     22a:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     22c:	2120      	movs	r1, #32
     22e:	430a      	orrs	r2, r1
     230:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     232:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
}
     234:	bd70      	pop	{r4, r5, r6, pc}
     236:	46c0      	nop			; (mov r8, r8)
     238:	41004400 	.word	0x41004400

0000023c <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     23c:	4a05      	ldr	r2, [pc, #20]	; (254 <I2C_0_CLOCK_init+0x18>)
     23e:	6a13      	ldr	r3, [r2, #32]
     240:	2108      	movs	r1, #8
     242:	430b      	orrs	r3, r1
     244:	6213      	str	r3, [r2, #32]
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     246:	4b04      	ldr	r3, [pc, #16]	; (258 <I2C_0_CLOCK_init+0x1c>)
     248:	4a04      	ldr	r2, [pc, #16]	; (25c <I2C_0_CLOCK_init+0x20>)
     24a:	805a      	strh	r2, [r3, #2]
     24c:	4a04      	ldr	r2, [pc, #16]	; (260 <I2C_0_CLOCK_init+0x24>)
     24e:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     250:	4770      	bx	lr
     252:	46c0      	nop			; (mov r8, r8)
     254:	40000400 	.word	0x40000400
     258:	40000c00 	.word	0x40000c00
     25c:	00004015 	.word	0x00004015
     260:	00004313 	.word	0x00004313

00000264 <I2C_0_init>:

void I2C_0_init(void)
{
     264:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     266:	4b04      	ldr	r3, [pc, #16]	; (278 <I2C_0_init+0x14>)
     268:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM1);
     26a:	4904      	ldr	r1, [pc, #16]	; (27c <I2C_0_init+0x18>)
     26c:	4804      	ldr	r0, [pc, #16]	; (280 <I2C_0_init+0x1c>)
     26e:	4b05      	ldr	r3, [pc, #20]	; (284 <I2C_0_init+0x20>)
     270:	4798      	blx	r3
	I2C_0_PORT_init();
     272:	4b05      	ldr	r3, [pc, #20]	; (288 <I2C_0_init+0x24>)
     274:	4798      	blx	r3
}
     276:	bd10      	pop	{r4, pc}
     278:	0000023d 	.word	0x0000023d
     27c:	42000c00 	.word	0x42000c00
     280:	20000114 	.word	0x20000114
     284:	00000479 	.word	0x00000479
     288:	000001e9 	.word	0x000001e9

0000028c <USART_0_CLOCK_init>:
     28c:	4a04      	ldr	r2, [pc, #16]	; (2a0 <USART_0_CLOCK_init+0x14>)
     28e:	6a13      	ldr	r3, [r2, #32]
     290:	2180      	movs	r1, #128	; 0x80
     292:	430b      	orrs	r3, r1
     294:	6213      	str	r3, [r2, #32]
     296:	4a03      	ldr	r2, [pc, #12]	; (2a4 <USART_0_CLOCK_init+0x18>)
     298:	4b03      	ldr	r3, [pc, #12]	; (2a8 <USART_0_CLOCK_init+0x1c>)
     29a:	805a      	strh	r2, [r3, #2]
void USART_0_CLOCK_init()
{

	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     29c:	4770      	bx	lr
     29e:	46c0      	nop			; (mov r8, r8)
     2a0:	40000400 	.word	0x40000400
     2a4:	00004019 	.word	0x00004019
     2a8:	40000c00 	.word	0x40000c00

000002ac <USART_0_PORT_init>:
 * \brief USART pinmux initialization function
 *
 * Set each required pin to USART functionality
 */
void USART_0_PORT_init()
{
     2ac:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2ae:	4b0f      	ldr	r3, [pc, #60]	; (2ec <USART_0_PORT_init+0x40>)
     2b0:	22c2      	movs	r2, #194	; 0xc2
     2b2:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2b4:	2501      	movs	r5, #1
     2b6:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2b8:	2401      	movs	r4, #1
     2ba:	4321      	orrs	r1, r4
     2bc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2be:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2c0:	20b1      	movs	r0, #177	; 0xb1
     2c2:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     2c4:	3ab3      	subs	r2, #179	; 0xb3
     2c6:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     2c8:	2203      	movs	r2, #3
     2ca:	4311      	orrs	r1, r2
     2cc:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ce:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     2d0:	21c3      	movs	r1, #195	; 0xc3
     2d2:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     2d4:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     2d6:	4322      	orrs	r2, r4
     2d8:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2da:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2dc:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2de:	39b4      	subs	r1, #180	; 0xb4
     2e0:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2e2:	2130      	movs	r1, #48	; 0x30
     2e4:	430a      	orrs	r2, r1
     2e6:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2e8:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB02, PINMUX_PB02D_SERCOM5_PAD0);

	gpio_set_pin_function(PB03, PINMUX_PB03D_SERCOM5_PAD1);
}
     2ea:	bd30      	pop	{r4, r5, pc}
     2ec:	41004400 	.word	0x41004400

000002f0 <USART_0_init>:
 * \brief USART initialization function
 *
 * Enables USART peripheral, clocks and initializes USART driver
 */
void USART_0_init(void)
{
     2f0:	b510      	push	{r4, lr}
     2f2:	b082      	sub	sp, #8
	USART_0_CLOCK_init();
     2f4:	4b06      	ldr	r3, [pc, #24]	; (310 <USART_0_init+0x20>)
     2f6:	4798      	blx	r3
	usart_async_init(&USART_0, SERCOM5, USART_0_buffer, USART_0_BUFFER_SIZE, (void *)NULL);
     2f8:	2300      	movs	r3, #0
     2fa:	9300      	str	r3, [sp, #0]
     2fc:	3310      	adds	r3, #16
     2fe:	4a05      	ldr	r2, [pc, #20]	; (314 <USART_0_init+0x24>)
     300:	4905      	ldr	r1, [pc, #20]	; (318 <USART_0_init+0x28>)
     302:	4806      	ldr	r0, [pc, #24]	; (31c <USART_0_init+0x2c>)
     304:	4c06      	ldr	r4, [pc, #24]	; (320 <USART_0_init+0x30>)
     306:	47a0      	blx	r4
	USART_0_PORT_init();
     308:	4b06      	ldr	r3, [pc, #24]	; (324 <USART_0_init+0x34>)
     30a:	4798      	blx	r3
}
     30c:	b002      	add	sp, #8
     30e:	bd10      	pop	{r4, pc}
     310:	0000028d 	.word	0x0000028d
     314:	20000080 	.word	0x20000080
     318:	42001c00 	.word	0x42001c00
     31c:	200000c4 	.word	0x200000c4
     320:	000006bd 	.word	0x000006bd
     324:	000002ad 	.word	0x000002ad

00000328 <delay_driver_init>:

void delay_driver_init(void)
{
     328:	b510      	push	{r4, lr}
	delay_init(SysTick);
     32a:	4802      	ldr	r0, [pc, #8]	; (334 <delay_driver_init+0xc>)
     32c:	4b02      	ldr	r3, [pc, #8]	; (338 <delay_driver_init+0x10>)
     32e:	4798      	blx	r3
}
     330:	bd10      	pop	{r4, pc}
     332:	46c0      	nop			; (mov r8, r8)
     334:	e000e010 	.word	0xe000e010
     338:	000003dd 	.word	0x000003dd

0000033c <system_init>:

void system_init(void)
{
     33c:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     33e:	4b18      	ldr	r3, [pc, #96]	; (3a0 <system_init+0x64>)
     340:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     342:	22c0      	movs	r2, #192	; 0xc0
     344:	05d2      	lsls	r2, r2, #23
     346:	2380      	movs	r3, #128	; 0x80
     348:	035b      	lsls	r3, r3, #13
     34a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     34c:	6093      	str	r3, [r2, #8]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     34e:	4b15      	ldr	r3, [pc, #84]	; (3a4 <system_init+0x68>)
     350:	2080      	movs	r0, #128	; 0x80
     352:	05c0      	lsls	r0, r0, #23
     354:	6298      	str	r0, [r3, #40]	; 0x28
     356:	4914      	ldr	r1, [pc, #80]	; (3a8 <system_init+0x6c>)
     358:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     35a:	2554      	movs	r5, #84	; 0x54
     35c:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     35e:	2101      	movs	r1, #1
     360:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     362:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     364:	2480      	movs	r4, #128	; 0x80
     366:	03a4      	lsls	r4, r4, #14
     368:	6154      	str	r4, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     36a:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     36c:	6298      	str	r0, [r3, #40]	; 0x28
     36e:	4c0f      	ldr	r4, [pc, #60]	; (3ac <system_init+0x70>)
     370:	629c      	str	r4, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     372:	3501      	adds	r5, #1
     374:	5d5c      	ldrb	r4, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     376:	438c      	bics	r4, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     378:	555c      	strb	r4, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     37a:	2480      	movs	r4, #128	; 0x80
     37c:	04a4      	lsls	r4, r4, #18
     37e:	6194      	str	r4, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     380:	6094      	str	r4, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     382:	6298      	str	r0, [r3, #40]	; 0x28
     384:	4a0a      	ldr	r2, [pc, #40]	; (3b0 <system_init+0x74>)
     386:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     388:	2059      	movs	r0, #89	; 0x59
     38a:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     38c:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     38e:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(LE_RED, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(LE_RED, GPIO_PIN_FUNCTION_OFF);

	I2C_0_init();
     390:	4b08      	ldr	r3, [pc, #32]	; (3b4 <system_init+0x78>)
     392:	4798      	blx	r3
	USART_0_init();
     394:	4b08      	ldr	r3, [pc, #32]	; (3b8 <system_init+0x7c>)
     396:	4798      	blx	r3

	delay_driver_init();
     398:	4b08      	ldr	r3, [pc, #32]	; (3bc <system_init+0x80>)
     39a:	4798      	blx	r3
}
     39c:	bd70      	pop	{r4, r5, r6, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	000008ed 	.word	0x000008ed
     3a4:	41004400 	.word	0x41004400
     3a8:	c0000010 	.word	0xc0000010
     3ac:	c0000020 	.word	0xc0000020
     3b0:	c0000200 	.word	0xc0000200
     3b4:	00000265 	.word	0x00000265
     3b8:	000002f1 	.word	0x000002f1
     3bc:	00000329 	.word	0x00000329

000003c0 <atomic_enter_critical>:
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     3c0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     3c4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     3c6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     3c8:	f3bf 8f5f 	dmb	sy
	__disable_irq();
	__DMB();
}
     3cc:	4770      	bx	lr

000003ce <atomic_leave_critical>:
     3ce:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     3d2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     3d4:	f383 8810 	msr	PRIMASK, r3
}
     3d8:	4770      	bx	lr
	...

000003dc <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     3dc:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     3de:	4b02      	ldr	r3, [pc, #8]	; (3e8 <delay_init+0xc>)
     3e0:	6018      	str	r0, [r3, #0]
     3e2:	4b02      	ldr	r3, [pc, #8]	; (3ec <delay_init+0x10>)
     3e4:	4798      	blx	r3
}
     3e6:	bd10      	pop	{r4, pc}
     3e8:	20000090 	.word	0x20000090
     3ec:	00001311 	.word	0x00001311

000003f0 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     3f0:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     3f2:	4b04      	ldr	r3, [pc, #16]	; (404 <delay_ms+0x14>)
     3f4:	681c      	ldr	r4, [r3, #0]
     3f6:	4b04      	ldr	r3, [pc, #16]	; (408 <delay_ms+0x18>)
     3f8:	4798      	blx	r3
     3fa:	0001      	movs	r1, r0
     3fc:	0020      	movs	r0, r4
     3fe:	4b03      	ldr	r3, [pc, #12]	; (40c <delay_ms+0x1c>)
     400:	4798      	blx	r3
}
     402:	bd10      	pop	{r4, pc}
     404:	20000090 	.word	0x20000090
     408:	000008dd 	.word	0x000008dd
     40c:	0000131d 	.word	0x0000131d

00000410 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     410:	b510      	push	{r4, lr}
     412:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     414:	3814      	subs	r0, #20
     416:	8b84      	ldrh	r4, [r0, #28]
     418:	ab01      	add	r3, sp, #4
     41a:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     41c:	0014      	movs	r4, r2
     41e:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     420:	4a06      	ldr	r2, [pc, #24]	; (43c <i2c_m_sync_write+0x2c>)
     422:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     424:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     426:	0019      	movs	r1, r3
     428:	4b05      	ldr	r3, [pc, #20]	; (440 <i2c_m_sync_write+0x30>)
     42a:	4798      	blx	r3

	if (ret) {
     42c:	2800      	cmp	r0, #0
     42e:	d102      	bne.n	436 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     430:	0020      	movs	r0, r4
     432:	b004      	add	sp, #16
     434:	bd10      	pop	{r4, pc}
		return ret;
     436:	0004      	movs	r4, r0
     438:	e7fa      	b.n	430 <i2c_m_sync_write+0x20>
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	ffff8000 	.word	0xffff8000
     440:	00001019 	.word	0x00001019

00000444 <i2c_m_sync_read>:
{
     444:	b510      	push	{r4, lr}
     446:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     448:	3814      	subs	r0, #20
     44a:	8b84      	ldrh	r4, [r0, #28]
     44c:	ab01      	add	r3, sp, #4
     44e:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     450:	0014      	movs	r4, r2
     452:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     454:	4a06      	ldr	r2, [pc, #24]	; (470 <i2c_m_sync_read+0x2c>)
     456:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     458:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     45a:	0019      	movs	r1, r3
     45c:	4b05      	ldr	r3, [pc, #20]	; (474 <i2c_m_sync_read+0x30>)
     45e:	4798      	blx	r3
	if (ret) {
     460:	2800      	cmp	r0, #0
     462:	d102      	bne.n	46a <i2c_m_sync_read+0x26>
}
     464:	0020      	movs	r0, r4
     466:	b004      	add	sp, #16
     468:	bd10      	pop	{r4, pc}
		return ret;
     46a:	0004      	movs	r4, r0
     46c:	e7fa      	b.n	464 <i2c_m_sync_read+0x20>
     46e:	46c0      	nop			; (mov r8, r8)
     470:	ffff8001 	.word	0xffff8001
     474:	00001019 	.word	0x00001019

00000478 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	0004      	movs	r4, r0
     47c:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     47e:	1e43      	subs	r3, r0, #1
     480:	4198      	sbcs	r0, r3
     482:	b2c0      	uxtb	r0, r0
     484:	225e      	movs	r2, #94	; 0x5e
     486:	4907      	ldr	r1, [pc, #28]	; (4a4 <i2c_m_sync_init+0x2c>)
     488:	4b07      	ldr	r3, [pc, #28]	; (4a8 <i2c_m_sync_init+0x30>)
     48a:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     48c:	0029      	movs	r1, r5
     48e:	0020      	movs	r0, r4
     490:	4b06      	ldr	r3, [pc, #24]	; (4ac <i2c_m_sync_init+0x34>)
     492:	4798      	blx	r3
	if (init_status) {
     494:	2800      	cmp	r0, #0
     496:	d103      	bne.n	4a0 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     498:	4b05      	ldr	r3, [pc, #20]	; (4b0 <i2c_m_sync_init+0x38>)
     49a:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     49c:	4b05      	ldr	r3, [pc, #20]	; (4b4 <i2c_m_sync_init+0x3c>)
     49e:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     4a0:	bd70      	pop	{r4, r5, r6, pc}
     4a2:	46c0      	nop			; (mov r8, r8)
     4a4:	000046e4 	.word	0x000046e4
     4a8:	000007b5 	.word	0x000007b5
     4ac:	00000f69 	.word	0x00000f69
     4b0:	00000445 	.word	0x00000445
     4b4:	00000411 	.word	0x00000411

000004b8 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     4b8:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     4ba:	4b01      	ldr	r3, [pc, #4]	; (4c0 <i2c_m_sync_enable+0x8>)
     4bc:	4798      	blx	r3
}
     4be:	bd10      	pop	{r4, pc}
     4c0:	00000f99 	.word	0x00000f99

000004c4 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     4c4:	0589      	lsls	r1, r1, #22
     4c6:	0d89      	lsrs	r1, r1, #22
     4c8:	2380      	movs	r3, #128	; 0x80
     4ca:	00db      	lsls	r3, r3, #3
     4cc:	401a      	ands	r2, r3
     4ce:	430a      	orrs	r2, r1
     4d0:	8382      	strh	r2, [r0, #28]
}
     4d2:	0010      	movs	r0, r2
     4d4:	4770      	bx	lr

000004d6 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     4d6:	3014      	adds	r0, #20
     4d8:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     4da:	2000      	movs	r0, #0
     4dc:	4770      	bx	lr
	...

000004e0 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     4e0:	b570      	push	{r4, r5, r6, lr}
     4e2:	0004      	movs	r4, r0
     4e4:	000d      	movs	r5, r1
     4e6:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     4e8:	2800      	cmp	r0, #0
     4ea:	d00e      	beq.n	50a <io_write+0x2a>
     4ec:	2900      	cmp	r1, #0
     4ee:	d00a      	beq.n	506 <io_write+0x26>
     4f0:	2001      	movs	r0, #1
     4f2:	2234      	movs	r2, #52	; 0x34
     4f4:	4906      	ldr	r1, [pc, #24]	; (510 <io_write+0x30>)
     4f6:	4b07      	ldr	r3, [pc, #28]	; (514 <io_write+0x34>)
     4f8:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     4fa:	6823      	ldr	r3, [r4, #0]
     4fc:	0032      	movs	r2, r6
     4fe:	0029      	movs	r1, r5
     500:	0020      	movs	r0, r4
     502:	4798      	blx	r3
}
     504:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     506:	2000      	movs	r0, #0
     508:	e7f3      	b.n	4f2 <io_write+0x12>
     50a:	2000      	movs	r0, #0
     50c:	e7f1      	b.n	4f2 <io_write+0x12>
     50e:	46c0      	nop			; (mov r8, r8)
     510:	00004700 	.word	0x00004700
     514:	000007b5 	.word	0x000007b5

00000518 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     518:	b570      	push	{r4, r5, r6, lr}
     51a:	0004      	movs	r4, r0
     51c:	000d      	movs	r5, r1
     51e:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     520:	2800      	cmp	r0, #0
     522:	d00e      	beq.n	542 <io_read+0x2a>
     524:	2900      	cmp	r1, #0
     526:	d00a      	beq.n	53e <io_read+0x26>
     528:	2001      	movs	r0, #1
     52a:	223d      	movs	r2, #61	; 0x3d
     52c:	4906      	ldr	r1, [pc, #24]	; (548 <io_read+0x30>)
     52e:	4b07      	ldr	r3, [pc, #28]	; (54c <io_read+0x34>)
     530:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     532:	6863      	ldr	r3, [r4, #4]
     534:	0032      	movs	r2, r6
     536:	0029      	movs	r1, r5
     538:	0020      	movs	r0, r4
     53a:	4798      	blx	r3
}
     53c:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     53e:	2000      	movs	r0, #0
     540:	e7f3      	b.n	52a <io_read+0x12>
     542:	2000      	movs	r0, #0
     544:	e7f1      	b.n	52a <io_read+0x12>
     546:	46c0      	nop			; (mov r8, r8)
     548:	00004700 	.word	0x00004700
     54c:	000007b5 	.word	0x000007b5

00000550 <usart_transmission_complete>:
 * \brief Process completion of data sending
 *
 * \param[in] device The pointer to device structure
 */
static void usart_transmission_complete(struct _usart_async_device *device)
{
     550:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     552:	3808      	subs	r0, #8

	descr->stat = 0;
     554:	2300      	movs	r3, #0
     556:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.tx_done) {
     558:	6a43      	ldr	r3, [r0, #36]	; 0x24
     55a:	2b00      	cmp	r3, #0
     55c:	d000      	beq.n	560 <usart_transmission_complete+0x10>
		descr->usart_cb.tx_done(descr);
     55e:	4798      	blx	r3
	}
}
     560:	bd10      	pop	{r4, pc}

00000562 <usart_error>:
 * \brief Process error interrupt
 *
 * \param[in] device The pointer to device structure
 */
static void usart_error(struct _usart_async_device *device)
{
     562:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     564:	3808      	subs	r0, #8

	descr->stat = 0;
     566:	2300      	movs	r3, #0
     568:	6303      	str	r3, [r0, #48]	; 0x30
	if (descr->usart_cb.error) {
     56a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
     56c:	2b00      	cmp	r3, #0
     56e:	d000      	beq.n	572 <usart_error+0x10>
		descr->usart_cb.error(descr);
     570:	4798      	blx	r3
	}
}
     572:	bd10      	pop	{r4, pc}

00000574 <usart_fill_rx_buffer>:
{
     574:	b510      	push	{r4, lr}
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     576:	0004      	movs	r4, r0
	ringbuffer_put(&descr->rx, data);
     578:	302c      	adds	r0, #44	; 0x2c
     57a:	4b04      	ldr	r3, [pc, #16]	; (58c <usart_fill_rx_buffer+0x18>)
     57c:	4798      	blx	r3
	if (descr->usart_cb.rx_done) {
     57e:	6a23      	ldr	r3, [r4, #32]
	struct usart_async_descriptor *descr = CONTAINER_OF(device, struct usart_async_descriptor, device);
     580:	3c08      	subs	r4, #8
	if (descr->usart_cb.rx_done) {
     582:	2b00      	cmp	r3, #0
     584:	d001      	beq.n	58a <usart_fill_rx_buffer+0x16>
		descr->usart_cb.rx_done(descr);
     586:	0020      	movs	r0, r4
     588:	4798      	blx	r3
}
     58a:	bd10      	pop	{r4, pc}
     58c:	00000855 	.word	0x00000855

00000590 <usart_async_write>:
{
     590:	b570      	push	{r4, r5, r6, lr}
     592:	0004      	movs	r4, r0
     594:	000e      	movs	r6, r1
     596:	0015      	movs	r5, r2
	ASSERT(descr && buf && length);
     598:	2800      	cmp	r0, #0
     59a:	d01d      	beq.n	5d8 <usart_async_write+0x48>
     59c:	2900      	cmp	r1, #0
     59e:	d01d      	beq.n	5dc <usart_async_write+0x4c>
     5a0:	2a00      	cmp	r2, #0
     5a2:	d11d      	bne.n	5e0 <usart_async_write+0x50>
     5a4:	2000      	movs	r0, #0
     5a6:	223c      	movs	r2, #60	; 0x3c
     5a8:	32ff      	adds	r2, #255	; 0xff
     5aa:	4910      	ldr	r1, [pc, #64]	; (5ec <usart_async_write+0x5c>)
     5ac:	4b10      	ldr	r3, [pc, #64]	; (5f0 <usart_async_write+0x60>)
     5ae:	4798      	blx	r3
	if (descr->tx_por != descr->tx_buffer_length) {
     5b0:	2344      	movs	r3, #68	; 0x44
     5b2:	5ae2      	ldrh	r2, [r4, r3]
     5b4:	3308      	adds	r3, #8
     5b6:	5ae3      	ldrh	r3, [r4, r3]
     5b8:	429a      	cmp	r2, r3
     5ba:	d113      	bne.n	5e4 <usart_async_write+0x54>
	descr->tx_buffer        = (uint8_t *)buf;
     5bc:	64a6      	str	r6, [r4, #72]	; 0x48
	descr->tx_buffer_length = length;
     5be:	234c      	movs	r3, #76	; 0x4c
     5c0:	52e5      	strh	r5, [r4, r3]
	descr->tx_por           = 0;
     5c2:	2200      	movs	r2, #0
     5c4:	3b08      	subs	r3, #8
     5c6:	52e2      	strh	r2, [r4, r3]
	descr->stat             = USART_ASYNC_STATUS_BUSY;
     5c8:	3b43      	subs	r3, #67	; 0x43
     5ca:	6323      	str	r3, [r4, #48]	; 0x30
	_usart_async_enable_byte_sent_irq(&descr->device);
     5cc:	0020      	movs	r0, r4
     5ce:	3008      	adds	r0, #8
     5d0:	4b08      	ldr	r3, [pc, #32]	; (5f4 <usart_async_write+0x64>)
     5d2:	4798      	blx	r3
	return (int32_t)length;
     5d4:	0028      	movs	r0, r5
}
     5d6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && buf && length);
     5d8:	2000      	movs	r0, #0
     5da:	e7e4      	b.n	5a6 <usart_async_write+0x16>
     5dc:	2000      	movs	r0, #0
     5de:	e7e2      	b.n	5a6 <usart_async_write+0x16>
     5e0:	2001      	movs	r0, #1
     5e2:	e7e0      	b.n	5a6 <usart_async_write+0x16>
		return ERR_NO_RESOURCE;
     5e4:	201c      	movs	r0, #28
     5e6:	4240      	negs	r0, r0
     5e8:	e7f5      	b.n	5d6 <usart_async_write+0x46>
     5ea:	46c0      	nop			; (mov r8, r8)
     5ec:	00004714 	.word	0x00004714
     5f0:	000007b5 	.word	0x000007b5
     5f4:	00000f57 	.word	0x00000f57

000005f8 <usart_process_byte_sent>:
{
     5f8:	b570      	push	{r4, r5, r6, lr}
     5fa:	0004      	movs	r4, r0
	if (descr->tx_por != descr->tx_buffer_length) {
     5fc:	0002      	movs	r2, r0
     5fe:	3a08      	subs	r2, #8
     600:	2344      	movs	r3, #68	; 0x44
     602:	5ad3      	ldrh	r3, [r2, r3]
     604:	214c      	movs	r1, #76	; 0x4c
     606:	5a52      	ldrh	r2, [r2, r1]
     608:	4293      	cmp	r3, r2
     60a:	d00d      	beq.n	628 <usart_process_byte_sent+0x30>
		_usart_async_write_byte(&descr->device, descr->tx_buffer[descr->tx_por++]);
     60c:	0002      	movs	r2, r0
     60e:	6c01      	ldr	r1, [r0, #64]	; 0x40
     610:	3a08      	subs	r2, #8
     612:	1c5d      	adds	r5, r3, #1
     614:	2044      	movs	r0, #68	; 0x44
     616:	5215      	strh	r5, [r2, r0]
     618:	5cc9      	ldrb	r1, [r1, r3]
     61a:	0020      	movs	r0, r4
     61c:	4b04      	ldr	r3, [pc, #16]	; (630 <usart_process_byte_sent+0x38>)
     61e:	4798      	blx	r3
		_usart_async_enable_byte_sent_irq(&descr->device);
     620:	0020      	movs	r0, r4
     622:	4b04      	ldr	r3, [pc, #16]	; (634 <usart_process_byte_sent+0x3c>)
     624:	4798      	blx	r3
}
     626:	bd70      	pop	{r4, r5, r6, pc}
		_usart_async_enable_tx_done_irq(&descr->device);
     628:	4b03      	ldr	r3, [pc, #12]	; (638 <usart_process_byte_sent+0x40>)
     62a:	4798      	blx	r3
}
     62c:	e7fb      	b.n	626 <usart_process_byte_sent+0x2e>
     62e:	46c0      	nop			; (mov r8, r8)
     630:	00000f4f 	.word	0x00000f4f
     634:	00000f57 	.word	0x00000f57
     638:	00000f5f 	.word	0x00000f5f

0000063c <usart_async_read>:
{
     63c:	b5f0      	push	{r4, r5, r6, r7, lr}
     63e:	b085      	sub	sp, #20
     640:	0004      	movs	r4, r0
     642:	000d      	movs	r5, r1
     644:	0016      	movs	r6, r2
	ASSERT(descr && buf && length);
     646:	2800      	cmp	r0, #0
     648:	d017      	beq.n	67a <usart_async_read+0x3e>
     64a:	2900      	cmp	r1, #0
     64c:	d017      	beq.n	67e <usart_async_read+0x42>
     64e:	2a00      	cmp	r2, #0
     650:	d117      	bne.n	682 <usart_async_read+0x46>
     652:	2000      	movs	r0, #0
     654:	22ac      	movs	r2, #172	; 0xac
     656:	0052      	lsls	r2, r2, #1
     658:	4912      	ldr	r1, [pc, #72]	; (6a4 <usart_async_read+0x68>)
     65a:	4b13      	ldr	r3, [pc, #76]	; (6a8 <usart_async_read+0x6c>)
     65c:	4798      	blx	r3
	CRITICAL_SECTION_ENTER()
     65e:	a803      	add	r0, sp, #12
     660:	4b12      	ldr	r3, [pc, #72]	; (6ac <usart_async_read+0x70>)
     662:	4798      	blx	r3
	num = ringbuffer_num(&descr->rx);
     664:	3434      	adds	r4, #52	; 0x34
     666:	0020      	movs	r0, r4
     668:	9401      	str	r4, [sp, #4]
     66a:	4b11      	ldr	r3, [pc, #68]	; (6b0 <usart_async_read+0x74>)
     66c:	4798      	blx	r3
     66e:	0007      	movs	r7, r0
	CRITICAL_SECTION_LEAVE()
     670:	a803      	add	r0, sp, #12
     672:	4b10      	ldr	r3, [pc, #64]	; (6b4 <usart_async_read+0x78>)
     674:	4798      	blx	r3
	uint16_t                       was_read = 0;
     676:	2400      	movs	r4, #0
	while ((was_read < num) && (was_read < length)) {
     678:	e00b      	b.n	692 <usart_async_read+0x56>
	ASSERT(descr && buf && length);
     67a:	2000      	movs	r0, #0
     67c:	e7ea      	b.n	654 <usart_async_read+0x18>
     67e:	2000      	movs	r0, #0
     680:	e7e8      	b.n	654 <usart_async_read+0x18>
     682:	2001      	movs	r0, #1
     684:	e7e6      	b.n	654 <usart_async_read+0x18>
		ringbuffer_get(&descr->rx, &buf[was_read++]);
     686:	3401      	adds	r4, #1
     688:	b2a4      	uxth	r4, r4
     68a:	1869      	adds	r1, r5, r1
     68c:	9801      	ldr	r0, [sp, #4]
     68e:	4b0a      	ldr	r3, [pc, #40]	; (6b8 <usart_async_read+0x7c>)
     690:	4798      	blx	r3
	while ((was_read < num) && (was_read < length)) {
     692:	0021      	movs	r1, r4
     694:	42a7      	cmp	r7, r4
     696:	d901      	bls.n	69c <usart_async_read+0x60>
     698:	42b4      	cmp	r4, r6
     69a:	d3f4      	bcc.n	686 <usart_async_read+0x4a>
}
     69c:	0020      	movs	r0, r4
     69e:	b005      	add	sp, #20
     6a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     6a2:	46c0      	nop			; (mov r8, r8)
     6a4:	00004714 	.word	0x00004714
     6a8:	000007b5 	.word	0x000007b5
     6ac:	000003c1 	.word	0x000003c1
     6b0:	00000895 	.word	0x00000895
     6b4:	000003cf 	.word	0x000003cf
     6b8:	00000809 	.word	0x00000809

000006bc <usart_async_init>:
{
     6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6be:	0004      	movs	r4, r0
     6c0:	000d      	movs	r5, r1
     6c2:	0016      	movs	r6, r2
     6c4:	001f      	movs	r7, r3
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     6c6:	2800      	cmp	r0, #0
     6c8:	d026      	beq.n	718 <usart_async_init+0x5c>
     6ca:	2900      	cmp	r1, #0
     6cc:	d026      	beq.n	71c <usart_async_init+0x60>
     6ce:	2a00      	cmp	r2, #0
     6d0:	d026      	beq.n	720 <usart_async_init+0x64>
     6d2:	2b00      	cmp	r3, #0
     6d4:	d126      	bne.n	724 <usart_async_init+0x68>
     6d6:	2000      	movs	r0, #0
     6d8:	223a      	movs	r2, #58	; 0x3a
     6da:	4915      	ldr	r1, [pc, #84]	; (730 <usart_async_init+0x74>)
     6dc:	4b15      	ldr	r3, [pc, #84]	; (734 <usart_async_init+0x78>)
     6de:	4798      	blx	r3
	if (ERR_NONE != ringbuffer_init(&descr->rx, rx_buffer, rx_buffer_length)) {
     6e0:	0020      	movs	r0, r4
     6e2:	3034      	adds	r0, #52	; 0x34
     6e4:	003a      	movs	r2, r7
     6e6:	0031      	movs	r1, r6
     6e8:	4b13      	ldr	r3, [pc, #76]	; (738 <usart_async_init+0x7c>)
     6ea:	4798      	blx	r3
     6ec:	2800      	cmp	r0, #0
     6ee:	d11b      	bne.n	728 <usart_async_init+0x6c>
	init_status = _usart_async_init(&descr->device, hw);
     6f0:	0020      	movs	r0, r4
     6f2:	3008      	adds	r0, #8
     6f4:	0029      	movs	r1, r5
     6f6:	4b11      	ldr	r3, [pc, #68]	; (73c <usart_async_init+0x80>)
     6f8:	4798      	blx	r3
	if (init_status) {
     6fa:	2800      	cmp	r0, #0
     6fc:	d10b      	bne.n	716 <usart_async_init+0x5a>
	descr->io.read  = usart_async_read;
     6fe:	4b10      	ldr	r3, [pc, #64]	; (740 <usart_async_init+0x84>)
     700:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_async_write;
     702:	4b10      	ldr	r3, [pc, #64]	; (744 <usart_async_init+0x88>)
     704:	6023      	str	r3, [r4, #0]
	descr->device.usart_cb.tx_byte_sent = usart_process_byte_sent;
     706:	4b10      	ldr	r3, [pc, #64]	; (748 <usart_async_init+0x8c>)
     708:	60a3      	str	r3, [r4, #8]
	descr->device.usart_cb.rx_done_cb   = usart_fill_rx_buffer;
     70a:	4b10      	ldr	r3, [pc, #64]	; (74c <usart_async_init+0x90>)
     70c:	60e3      	str	r3, [r4, #12]
	descr->device.usart_cb.tx_done_cb   = usart_transmission_complete;
     70e:	4b10      	ldr	r3, [pc, #64]	; (750 <usart_async_init+0x94>)
     710:	6123      	str	r3, [r4, #16]
	descr->device.usart_cb.error_cb     = usart_error;
     712:	4b10      	ldr	r3, [pc, #64]	; (754 <usart_async_init+0x98>)
     714:	6163      	str	r3, [r4, #20]
}
     716:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(descr && hw && rx_buffer && rx_buffer_length);
     718:	2000      	movs	r0, #0
     71a:	e7dd      	b.n	6d8 <usart_async_init+0x1c>
     71c:	2000      	movs	r0, #0
     71e:	e7db      	b.n	6d8 <usart_async_init+0x1c>
     720:	2000      	movs	r0, #0
     722:	e7d9      	b.n	6d8 <usart_async_init+0x1c>
     724:	2001      	movs	r0, #1
     726:	e7d7      	b.n	6d8 <usart_async_init+0x1c>
		return ERR_INVALID_ARG;
     728:	200d      	movs	r0, #13
     72a:	4240      	negs	r0, r0
     72c:	e7f3      	b.n	716 <usart_async_init+0x5a>
     72e:	46c0      	nop			; (mov r8, r8)
     730:	00004714 	.word	0x00004714
     734:	000007b5 	.word	0x000007b5
     738:	000007bd 	.word	0x000007bd
     73c:	00000eb1 	.word	0x00000eb1
     740:	0000063d 	.word	0x0000063d
     744:	00000591 	.word	0x00000591
     748:	000005f9 	.word	0x000005f9
     74c:	00000575 	.word	0x00000575
     750:	00000551 	.word	0x00000551
     754:	00000563 	.word	0x00000563

00000758 <usart_async_enable>:
{
     758:	b510      	push	{r4, lr}
     75a:	0004      	movs	r4, r0
	ASSERT(descr);
     75c:	1e43      	subs	r3, r0, #1
     75e:	4198      	sbcs	r0, r3
     760:	b2c0      	uxtb	r0, r0
     762:	2261      	movs	r2, #97	; 0x61
     764:	4904      	ldr	r1, [pc, #16]	; (778 <usart_async_enable+0x20>)
     766:	4b05      	ldr	r3, [pc, #20]	; (77c <usart_async_enable+0x24>)
     768:	4798      	blx	r3
	_usart_async_enable(&descr->device);
     76a:	0020      	movs	r0, r4
     76c:	3008      	adds	r0, #8
     76e:	4b04      	ldr	r3, [pc, #16]	; (780 <usart_async_enable+0x28>)
     770:	4798      	blx	r3
}
     772:	2000      	movs	r0, #0
     774:	bd10      	pop	{r4, pc}
     776:	46c0      	nop			; (mov r8, r8)
     778:	00004714 	.word	0x00004714
     77c:	000007b5 	.word	0x000007b5
     780:	00000f3d 	.word	0x00000f3d

00000784 <usart_async_get_io_descriptor>:
{
     784:	b570      	push	{r4, r5, r6, lr}
     786:	0004      	movs	r4, r0
     788:	000d      	movs	r5, r1
	ASSERT(descr && io);
     78a:	2800      	cmp	r0, #0
     78c:	d00b      	beq.n	7a6 <usart_async_get_io_descriptor+0x22>
     78e:	2900      	cmp	r1, #0
     790:	d007      	beq.n	7a2 <usart_async_get_io_descriptor+0x1e>
     792:	2001      	movs	r0, #1
     794:	2277      	movs	r2, #119	; 0x77
     796:	4905      	ldr	r1, [pc, #20]	; (7ac <usart_async_get_io_descriptor+0x28>)
     798:	4b05      	ldr	r3, [pc, #20]	; (7b0 <usart_async_get_io_descriptor+0x2c>)
     79a:	4798      	blx	r3
	*io = &descr->io;
     79c:	602c      	str	r4, [r5, #0]
}
     79e:	2000      	movs	r0, #0
     7a0:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     7a2:	2000      	movs	r0, #0
     7a4:	e7f6      	b.n	794 <usart_async_get_io_descriptor+0x10>
     7a6:	2000      	movs	r0, #0
     7a8:	e7f4      	b.n	794 <usart_async_get_io_descriptor+0x10>
     7aa:	46c0      	nop			; (mov r8, r8)
     7ac:	00004714 	.word	0x00004714
     7b0:	000007b5 	.word	0x000007b5

000007b4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     7b4:	2800      	cmp	r0, #0
     7b6:	d100      	bne.n	7ba <assert+0x6>
		__asm("BKPT #0");
     7b8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     7ba:	4770      	bx	lr

000007bc <ringbuffer_init>:

/**
 * \brief Ringbuffer init
 */
int32_t ringbuffer_init(struct ringbuffer *const rb, void *buf, uint32_t size)
{
     7bc:	b570      	push	{r4, r5, r6, lr}
     7be:	0004      	movs	r4, r0
     7c0:	000e      	movs	r6, r1
     7c2:	0015      	movs	r5, r2
	ASSERT(rb && buf && size);
     7c4:	2800      	cmp	r0, #0
     7c6:	d012      	beq.n	7ee <ringbuffer_init+0x32>
     7c8:	2900      	cmp	r1, #0
     7ca:	d012      	beq.n	7f2 <ringbuffer_init+0x36>
     7cc:	2a00      	cmp	r2, #0
     7ce:	d112      	bne.n	7f6 <ringbuffer_init+0x3a>
     7d0:	2000      	movs	r0, #0
     7d2:	2228      	movs	r2, #40	; 0x28
     7d4:	490a      	ldr	r1, [pc, #40]	; (800 <ringbuffer_init+0x44>)
     7d6:	4b0b      	ldr	r3, [pc, #44]	; (804 <ringbuffer_init+0x48>)
     7d8:	4798      	blx	r3

	/*
	 * buf size must be aligned to power of 2
	 */
	if ((size & (size - 1)) != 0) {
     7da:	1e6b      	subs	r3, r5, #1
     7dc:	422b      	tst	r3, r5
     7de:	d10c      	bne.n	7fa <ringbuffer_init+0x3e>
		return ERR_INVALID_ARG;
	}

	/* size - 1 is faster in calculation */
	rb->size        = size - 1;
     7e0:	6063      	str	r3, [r4, #4]
	rb->read_index  = 0;
     7e2:	2300      	movs	r3, #0
     7e4:	60a3      	str	r3, [r4, #8]
	rb->write_index = rb->read_index;
     7e6:	60e3      	str	r3, [r4, #12]
	rb->buf         = (uint8_t *)buf;
     7e8:	6026      	str	r6, [r4, #0]

	return ERR_NONE;
     7ea:	2000      	movs	r0, #0
}
     7ec:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && buf && size);
     7ee:	2000      	movs	r0, #0
     7f0:	e7ef      	b.n	7d2 <ringbuffer_init+0x16>
     7f2:	2000      	movs	r0, #0
     7f4:	e7ed      	b.n	7d2 <ringbuffer_init+0x16>
     7f6:	2001      	movs	r0, #1
     7f8:	e7eb      	b.n	7d2 <ringbuffer_init+0x16>
		return ERR_INVALID_ARG;
     7fa:	200d      	movs	r0, #13
     7fc:	4240      	negs	r0, r0
     7fe:	e7f5      	b.n	7ec <ringbuffer_init+0x30>
     800:	00004734 	.word	0x00004734
     804:	000007b5 	.word	0x000007b5

00000808 <ringbuffer_get>:
/**
 * \brief Get one byte from ringbuffer
 *
 */
int32_t ringbuffer_get(struct ringbuffer *const rb, uint8_t *data)
{
     808:	b570      	push	{r4, r5, r6, lr}
     80a:	0004      	movs	r4, r0
     80c:	000d      	movs	r5, r1
	ASSERT(rb && data);
     80e:	2800      	cmp	r0, #0
     810:	d016      	beq.n	840 <ringbuffer_get+0x38>
     812:	2900      	cmp	r1, #0
     814:	d012      	beq.n	83c <ringbuffer_get+0x34>
     816:	2001      	movs	r0, #1
     818:	2240      	movs	r2, #64	; 0x40
     81a:	490c      	ldr	r1, [pc, #48]	; (84c <ringbuffer_get+0x44>)
     81c:	4b0c      	ldr	r3, [pc, #48]	; (850 <ringbuffer_get+0x48>)
     81e:	4798      	blx	r3

	if (rb->write_index != rb->read_index) {
     820:	68a3      	ldr	r3, [r4, #8]
     822:	68e2      	ldr	r2, [r4, #12]
     824:	429a      	cmp	r2, r3
     826:	d00d      	beq.n	844 <ringbuffer_get+0x3c>
		*data = rb->buf[rb->read_index & rb->size];
     828:	6862      	ldr	r2, [r4, #4]
     82a:	4013      	ands	r3, r2
     82c:	6822      	ldr	r2, [r4, #0]
     82e:	5cd3      	ldrb	r3, [r2, r3]
     830:	702b      	strb	r3, [r5, #0]
		rb->read_index++;
     832:	68a3      	ldr	r3, [r4, #8]
     834:	3301      	adds	r3, #1
     836:	60a3      	str	r3, [r4, #8]
		return ERR_NONE;
     838:	2000      	movs	r0, #0
	}

	return ERR_NOT_FOUND;
}
     83a:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(rb && data);
     83c:	2000      	movs	r0, #0
     83e:	e7eb      	b.n	818 <ringbuffer_get+0x10>
     840:	2000      	movs	r0, #0
     842:	e7e9      	b.n	818 <ringbuffer_get+0x10>
	return ERR_NOT_FOUND;
     844:	200a      	movs	r0, #10
     846:	4240      	negs	r0, r0
     848:	e7f7      	b.n	83a <ringbuffer_get+0x32>
     84a:	46c0      	nop			; (mov r8, r8)
     84c:	00004734 	.word	0x00004734
     850:	000007b5 	.word	0x000007b5

00000854 <ringbuffer_put>:
/**
 * \brief Put one byte to ringbuffer
 *
 */
int32_t ringbuffer_put(struct ringbuffer *const rb, uint8_t data)
{
     854:	b570      	push	{r4, r5, r6, lr}
     856:	0004      	movs	r4, r0
     858:	000d      	movs	r5, r1
	ASSERT(rb);
     85a:	1e43      	subs	r3, r0, #1
     85c:	4198      	sbcs	r0, r3
     85e:	b2c0      	uxtb	r0, r0
     860:	2251      	movs	r2, #81	; 0x51
     862:	490a      	ldr	r1, [pc, #40]	; (88c <ringbuffer_put+0x38>)
     864:	4b0a      	ldr	r3, [pc, #40]	; (890 <ringbuffer_put+0x3c>)
     866:	4798      	blx	r3

	rb->buf[rb->write_index & rb->size] = data;
     868:	6863      	ldr	r3, [r4, #4]
     86a:	68e2      	ldr	r2, [r4, #12]
     86c:	4013      	ands	r3, r2
     86e:	6822      	ldr	r2, [r4, #0]
     870:	54d5      	strb	r5, [r2, r3]

	/*
	 * buffer full strategy: new data will overwrite the oldest data in
	 * the buffer
	 */
	if ((rb->write_index - rb->read_index) > rb->size) {
     872:	68e3      	ldr	r3, [r4, #12]
     874:	68a2      	ldr	r2, [r4, #8]
     876:	1a9a      	subs	r2, r3, r2
     878:	6861      	ldr	r1, [r4, #4]
     87a:	428a      	cmp	r2, r1
     87c:	d901      	bls.n	882 <ringbuffer_put+0x2e>
		rb->read_index = rb->write_index - rb->size;
     87e:	1a59      	subs	r1, r3, r1
     880:	60a1      	str	r1, [r4, #8]
	}

	rb->write_index++;
     882:	3301      	adds	r3, #1
     884:	60e3      	str	r3, [r4, #12]

	return ERR_NONE;
}
     886:	2000      	movs	r0, #0
     888:	bd70      	pop	{r4, r5, r6, pc}
     88a:	46c0      	nop			; (mov r8, r8)
     88c:	00004734 	.word	0x00004734
     890:	000007b5 	.word	0x000007b5

00000894 <ringbuffer_num>:

/**
 * \brief Return the element number of ringbuffer
 */
uint32_t ringbuffer_num(const struct ringbuffer *const rb)
{
     894:	b510      	push	{r4, lr}
     896:	0004      	movs	r4, r0
	ASSERT(rb);
     898:	1e43      	subs	r3, r0, #1
     89a:	4198      	sbcs	r0, r3
     89c:	b2c0      	uxtb	r0, r0
     89e:	2267      	movs	r2, #103	; 0x67
     8a0:	4903      	ldr	r1, [pc, #12]	; (8b0 <ringbuffer_num+0x1c>)
     8a2:	4b04      	ldr	r3, [pc, #16]	; (8b4 <ringbuffer_num+0x20>)
     8a4:	4798      	blx	r3

	return rb->write_index - rb->read_index;
     8a6:	68e0      	ldr	r0, [r4, #12]
     8a8:	68a3      	ldr	r3, [r4, #8]
     8aa:	1ac0      	subs	r0, r0, r3
}
     8ac:	bd10      	pop	{r4, pc}
     8ae:	46c0      	nop			; (mov r8, r8)
     8b0:	00004734 	.word	0x00004734
     8b4:	000007b5 	.word	0x000007b5

000008b8 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     8b8:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     8ba:	4a06      	ldr	r2, [pc, #24]	; (8d4 <_sbrk+0x1c>)
     8bc:	6812      	ldr	r2, [r2, #0]
     8be:	2a00      	cmp	r2, #0
     8c0:	d004      	beq.n	8cc <_sbrk+0x14>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     8c2:	4a04      	ldr	r2, [pc, #16]	; (8d4 <_sbrk+0x1c>)
     8c4:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     8c6:	18c3      	adds	r3, r0, r3
     8c8:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     8ca:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     8cc:	4902      	ldr	r1, [pc, #8]	; (8d8 <_sbrk+0x20>)
     8ce:	4a01      	ldr	r2, [pc, #4]	; (8d4 <_sbrk+0x1c>)
     8d0:	6011      	str	r1, [r2, #0]
     8d2:	e7f6      	b.n	8c2 <_sbrk+0xa>
     8d4:	20000094 	.word	0x20000094
     8d8:	200021a0 	.word	0x200021a0

000008dc <_get_cycles_for_ms>:
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
	case 7:
		return (ms * (freq / 10000)) * 10;
     8dc:	23c8      	movs	r3, #200	; 0xc8
     8de:	009b      	lsls	r3, r3, #2
     8e0:	4358      	muls	r0, r3
     8e2:	0083      	lsls	r3, r0, #2
     8e4:	181b      	adds	r3, r3, r0
     8e6:	0058      	lsls	r0, r3, #1
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     8e8:	4770      	bx	lr
	...

000008ec <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     8ec:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     8ee:	4b06      	ldr	r3, [pc, #24]	; (908 <_init_chip+0x1c>)
     8f0:	685a      	ldr	r2, [r3, #4]
     8f2:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     8f4:	4b05      	ldr	r3, [pc, #20]	; (90c <_init_chip+0x20>)
     8f6:	4798      	blx	r3
	_sysctrl_init_sources();
     8f8:	4b05      	ldr	r3, [pc, #20]	; (910 <_init_chip+0x24>)
     8fa:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_sysctrl_init_referenced_generators();
     8fc:	4b05      	ldr	r3, [pc, #20]	; (914 <_init_chip+0x28>)
     8fe:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     900:	20ff      	movs	r0, #255	; 0xff
     902:	4b05      	ldr	r3, [pc, #20]	; (918 <_init_chip+0x2c>)
     904:	4798      	blx	r3
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     906:	bd10      	pop	{r4, pc}
     908:	41004000 	.word	0x41004000
     90c:	0000093d 	.word	0x0000093d
     910:	000012a9 	.word	0x000012a9
     914:	000012ed 	.word	0x000012ed
     918:	0000091d 	.word	0x0000091d

0000091c <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     91c:	07c3      	lsls	r3, r0, #31
     91e:	d50a      	bpl.n	936 <_gclk_init_generators_by_fref+0x1a>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     920:	4b05      	ldr	r3, [pc, #20]	; (938 <_gclk_init_generators_by_fref+0x1c>)
     922:	2280      	movs	r2, #128	; 0x80
     924:	0052      	lsls	r2, r2, #1
     926:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     928:	2283      	movs	r2, #131	; 0x83
     92a:	0252      	lsls	r2, r2, #9
     92c:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     92e:	4b02      	ldr	r3, [pc, #8]	; (938 <_gclk_init_generators_by_fref+0x1c>)
     930:	785b      	ldrb	r3, [r3, #1]
     932:	09db      	lsrs	r3, r3, #7
     934:	d1fb      	bne.n	92e <_gclk_init_generators_by_fref+0x12>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     936:	4770      	bx	lr
     938:	40000c00 	.word	0x40000c00

0000093c <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     93c:	4b06      	ldr	r3, [pc, #24]	; (958 <_pm_init+0x1c>)
     93e:	7a1a      	ldrb	r2, [r3, #8]
     940:	b2d2      	uxtb	r2, r2
     942:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     944:	7a5a      	ldrb	r2, [r3, #9]
     946:	b2d2      	uxtb	r2, r2
     948:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     94a:	7a9a      	ldrb	r2, [r3, #10]
     94c:	b2d2      	uxtb	r2, r2
     94e:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     950:	7ada      	ldrb	r2, [r3, #11]
     952:	b2d2      	uxtb	r2, r2
     954:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     956:	4770      	bx	lr
     958:	40000400 	.word	0x40000400

0000095c <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     95c:	4b02      	ldr	r3, [pc, #8]	; (968 <_sercom_get_hardware_index+0xc>)
     95e:	469c      	mov	ip, r3
     960:	4460      	add	r0, ip
     962:	0a80      	lsrs	r0, r0, #10
     964:	b2c0      	uxtb	r0, r0
}
     966:	4770      	bx	lr
     968:	bdfff800 	.word	0xbdfff800

0000096c <_sercom_usart_interrupt_handler>:
 * \internal Sercom interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _sercom_usart_interrupt_handler(struct _usart_async_device *device)
{
     96c:	b510      	push	{r4, lr}
	void *hw = device->hw;
     96e:	6984      	ldr	r4, [r0, #24]
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
}

static inline bool hri_sercomusart_get_interrupt_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     970:	7e23      	ldrb	r3, [r4, #24]

	if (hri_sercomusart_get_interrupt_DRE_bit(hw) && hri_sercomusart_get_INTEN_DRE_bit(hw)) {
     972:	07db      	lsls	r3, r3, #31
     974:	d502      	bpl.n	97c <_sercom_usart_interrupt_handler+0x10>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
}

static inline bool hri_sercomusart_get_INTEN_DRE_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_DRE) >> SERCOM_USART_INTENSET_DRE_Pos;
     976:	7da3      	ldrb	r3, [r4, #22]
     978:	07db      	lsls	r3, r3, #31
     97a:	d40f      	bmi.n	99c <_sercom_usart_interrupt_handler+0x30>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     97c:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_DRE_bit(hw);
		device->usart_cb.tx_byte_sent(device);
	} else if (hri_sercomusart_get_interrupt_TXC_bit(hw) && hri_sercomusart_get_INTEN_TXC_bit(hw)) {
     97e:	079b      	lsls	r3, r3, #30
     980:	d502      	bpl.n	988 <_sercom_usart_interrupt_handler+0x1c>
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
}

static inline bool hri_sercomusart_get_INTEN_TXC_bit(const void *const hw)
{
	return (((Sercom *)hw)->USART.INTENSET.reg & SERCOM_USART_INTENSET_TXC) >> SERCOM_USART_INTENSET_TXC_Pos;
     982:	7da3      	ldrb	r3, [r4, #22]
     984:	079b      	lsls	r3, r3, #30
     986:	d40e      	bmi.n	9a6 <_sercom_usart_interrupt_handler+0x3a>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     988:	7e23      	ldrb	r3, [r4, #24]
		hri_sercomusart_clear_INTEN_TXC_bit(hw);
		device->usart_cb.tx_done_cb(device);
	} else if (hri_sercomusart_get_interrupt_RXC_bit(hw)) {
     98a:	075b      	lsls	r3, r3, #29
     98c:	d515      	bpl.n	9ba <_sercom_usart_interrupt_handler+0x4e>
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomusart_status_reg_t hri_sercomusart_read_STATUS_reg(const void *const hw)
{
	return ((Sercom *)hw)->USART.STATUS.reg;
     98e:	8b62      	ldrh	r2, [r4, #26]
		if (hri_sercomusart_read_STATUS_reg(hw)
     990:	2337      	movs	r3, #55	; 0x37
     992:	421a      	tst	r2, r3
     994:	d00c      	beq.n	9b0 <_sercom_usart_interrupt_handler+0x44>
	((Sercom *)hw)->USART.STATUS.reg = mask;
     996:	3308      	adds	r3, #8
     998:	8363      	strh	r3, [r4, #26]
		hri_sercomusart_clear_interrupt_ERROR_bit(hw);
		device->usart_cb.error_cb(device);
		status = hri_sercomusart_read_STATUS_reg(hw);
		hri_sercomusart_clear_STATUS_reg(hw, status);
	}
}
     99a:	bd10      	pop	{r4, pc}
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_DRE;
     99c:	2301      	movs	r3, #1
     99e:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_byte_sent(device);
     9a0:	6803      	ldr	r3, [r0, #0]
     9a2:	4798      	blx	r3
     9a4:	e7f9      	b.n	99a <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTENCLR.reg = SERCOM_USART_INTENSET_TXC;
     9a6:	2302      	movs	r3, #2
     9a8:	7523      	strb	r3, [r4, #20]
		device->usart_cb.tx_done_cb(device);
     9aa:	6883      	ldr	r3, [r0, #8]
     9ac:	4798      	blx	r3
     9ae:	e7f4      	b.n	99a <_sercom_usart_interrupt_handler+0x2e>
		device->usart_cb.rx_done_cb(device, hri_sercomusart_read_DATA_reg(hw));
     9b0:	6843      	ldr	r3, [r0, #4]
	return ((Sercom *)hw)->USART.DATA.reg;
     9b2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
     9b4:	b2c9      	uxtb	r1, r1
     9b6:	4798      	blx	r3
     9b8:	e7ef      	b.n	99a <_sercom_usart_interrupt_handler+0x2e>
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_ERROR) >> SERCOM_USART_INTFLAG_ERROR_Pos;
     9ba:	7e23      	ldrb	r3, [r4, #24]
	} else if (hri_sercomusart_get_interrupt_ERROR_bit(hw)) {
     9bc:	09db      	lsrs	r3, r3, #7
     9be:	d0ec      	beq.n	99a <_sercom_usart_interrupt_handler+0x2e>
	((Sercom *)hw)->USART.INTFLAG.reg = SERCOM_USART_INTFLAG_ERROR;
     9c0:	2380      	movs	r3, #128	; 0x80
     9c2:	7623      	strb	r3, [r4, #24]
		device->usart_cb.error_cb(device);
     9c4:	68c3      	ldr	r3, [r0, #12]
     9c6:	4798      	blx	r3
	return ((Sercom *)hw)->USART.STATUS.reg;
     9c8:	8b63      	ldrh	r3, [r4, #26]
     9ca:	b29b      	uxth	r3, r3
	((Sercom *)hw)->USART.STATUS.reg = mask;
     9cc:	8363      	strh	r3, [r4, #26]
     9ce:	e7e4      	b.n	99a <_sercom_usart_interrupt_handler+0x2e>

000009d0 <_sercom_init_irq_param>:
 * \brief Init irq param with the given sercom hardware instance
 */
static void _sercom_init_irq_param(const void *const hw, void *dev)
{

	if (hw == SERCOM5) {
     9d0:	4b03      	ldr	r3, [pc, #12]	; (9e0 <_sercom_init_irq_param+0x10>)
     9d2:	4298      	cmp	r0, r3
     9d4:	d000      	beq.n	9d8 <_sercom_init_irq_param+0x8>
		_sercom5_dev = (struct _usart_async_device *)dev;
	}
}
     9d6:	4770      	bx	lr
		_sercom5_dev = (struct _usart_async_device *)dev;
     9d8:	4b02      	ldr	r3, [pc, #8]	; (9e4 <_sercom_init_irq_param+0x14>)
     9da:	6019      	str	r1, [r3, #0]
}
     9dc:	e7fb      	b.n	9d6 <_sercom_init_irq_param+0x6>
     9de:	46c0      	nop			; (mov r8, r8)
     9e0:	42001c00 	.word	0x42001c00
     9e4:	20000098 	.word	0x20000098

000009e8 <_sercom_get_irq_num>:

/**
 * \brief Retrieve IRQ number for the given hardware instance
 */
static uint8_t _sercom_get_irq_num(const void *const hw)
{
     9e8:	b510      	push	{r4, lr}
	return SERCOM0_IRQn + _sercom_get_hardware_index(hw);
     9ea:	4b02      	ldr	r3, [pc, #8]	; (9f4 <_sercom_get_irq_num+0xc>)
     9ec:	4798      	blx	r3
     9ee:	3009      	adds	r0, #9
     9f0:	b2c0      	uxtb	r0, r0
}
     9f2:	bd10      	pop	{r4, pc}
     9f4:	0000095d 	.word	0x0000095d

000009f8 <_get_sercom_index>:
{
     9f8:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     9fa:	4b0b      	ldr	r3, [pc, #44]	; (a28 <_get_sercom_index+0x30>)
     9fc:	4798      	blx	r3
     9fe:	0002      	movs	r2, r0
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a00:	2000      	movs	r0, #0
     a02:	2800      	cmp	r0, #0
     a04:	d006      	beq.n	a14 <_get_sercom_index+0x1c>
	ASSERT(false);
     a06:	4a09      	ldr	r2, [pc, #36]	; (a2c <_get_sercom_index+0x34>)
     a08:	4909      	ldr	r1, [pc, #36]	; (a30 <_get_sercom_index+0x38>)
     a0a:	2000      	movs	r0, #0
     a0c:	4b09      	ldr	r3, [pc, #36]	; (a34 <_get_sercom_index+0x3c>)
     a0e:	4798      	blx	r3
	return 0;
     a10:	2000      	movs	r0, #0
}
     a12:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     a14:	0083      	lsls	r3, r0, #2
     a16:	181b      	adds	r3, r3, r0
     a18:	0099      	lsls	r1, r3, #2
     a1a:	4b07      	ldr	r3, [pc, #28]	; (a38 <_get_sercom_index+0x40>)
     a1c:	5ccb      	ldrb	r3, [r1, r3]
     a1e:	429a      	cmp	r2, r3
     a20:	d0f7      	beq.n	a12 <_get_sercom_index+0x1a>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     a22:	3001      	adds	r0, #1
     a24:	b2c0      	uxtb	r0, r0
     a26:	e7ec      	b.n	a02 <_get_sercom_index+0xa>
     a28:	0000095d 	.word	0x0000095d
     a2c:	0000025e 	.word	0x0000025e
     a30:	000047a8 	.word	0x000047a8
     a34:	000007b5 	.word	0x000007b5
     a38:	00004758 	.word	0x00004758

00000a3c <_usart_init>:
{
     a3c:	b570      	push	{r4, r5, r6, lr}
     a3e:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     a40:	4b38      	ldr	r3, [pc, #224]	; (b24 <_usart_init+0xe8>)
     a42:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     a44:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     a46:	07db      	lsls	r3, r3, #31
     a48:	d41d      	bmi.n	a86 <_usart_init+0x4a>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     a4a:	0083      	lsls	r3, r0, #2
     a4c:	181b      	adds	r3, r3, r0
     a4e:	009a      	lsls	r2, r3, #2
     a50:	4b35      	ldr	r3, [pc, #212]	; (b28 <_usart_init+0xec>)
     a52:	189b      	adds	r3, r3, r2
     a54:	685a      	ldr	r2, [r3, #4]
     a56:	231c      	movs	r3, #28
     a58:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a5a:	69e3      	ldr	r3, [r4, #28]
     a5c:	079b      	lsls	r3, r3, #30
     a5e:	d1fc      	bne.n	a5a <_usart_init+0x1e>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     a60:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     a62:	079b      	lsls	r3, r3, #30
     a64:	d509      	bpl.n	a7a <_usart_init+0x3e>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a66:	6823      	ldr	r3, [r4, #0]
     a68:	2102      	movs	r1, #2
     a6a:	438b      	bics	r3, r1
     a6c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a6e:	69e3      	ldr	r3, [r4, #28]
     a70:	079b      	lsls	r3, r3, #30
     a72:	d1fc      	bne.n	a6e <_usart_init+0x32>
     a74:	69e3      	ldr	r3, [r4, #28]
     a76:	079b      	lsls	r3, r3, #30
     a78:	d4fc      	bmi.n	a74 <_usart_init+0x38>
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     a7a:	2301      	movs	r3, #1
     a7c:	4313      	orrs	r3, r2
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a7e:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a80:	69e3      	ldr	r3, [r4, #28]
     a82:	079b      	lsls	r3, r3, #30
     a84:	d1fc      	bne.n	a80 <_usart_init+0x44>
     a86:	69e3      	ldr	r3, [r4, #28]
     a88:	07db      	lsls	r3, r3, #31
     a8a:	d4fc      	bmi.n	a86 <_usart_init+0x4a>
	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     a8c:	0083      	lsls	r3, r0, #2
     a8e:	181b      	adds	r3, r3, r0
     a90:	009a      	lsls	r2, r3, #2
     a92:	4b25      	ldr	r3, [pc, #148]	; (b28 <_usart_init+0xec>)
     a94:	189b      	adds	r3, r3, r2
     a96:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a98:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a9a:	69e3      	ldr	r3, [r4, #28]
     a9c:	079b      	lsls	r3, r3, #30
     a9e:	d1fc      	bne.n	a9a <_usart_init+0x5e>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     aa0:	0083      	lsls	r3, r0, #2
     aa2:	181b      	adds	r3, r3, r0
     aa4:	009a      	lsls	r2, r3, #2
     aa6:	4b20      	ldr	r3, [pc, #128]	; (b28 <_usart_init+0xec>)
     aa8:	189b      	adds	r3, r3, r2
     aaa:	689b      	ldr	r3, [r3, #8]
	((Sercom *)hw)->USART.CTRLB.reg = data;
     aac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     aae:	69e3      	ldr	r3, [r4, #28]
     ab0:	075b      	lsls	r3, r3, #29
     ab2:	d1fc      	bne.n	aae <_usart_init+0x72>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     ab4:	0083      	lsls	r3, r0, #2
     ab6:	181b      	adds	r3, r3, r0
     ab8:	009a      	lsls	r2, r3, #2
     aba:	4b1b      	ldr	r3, [pc, #108]	; (b28 <_usart_init+0xec>)
     abc:	189b      	adds	r3, r3, r2
     abe:	685b      	ldr	r3, [r3, #4]
     ac0:	049a      	lsls	r2, r3, #18
     ac2:	d40b      	bmi.n	adc <_usart_init+0xa0>
     ac4:	22c0      	movs	r2, #192	; 0xc0
     ac6:	01d2      	lsls	r2, r2, #7
     ac8:	4213      	tst	r3, r2
     aca:	d107      	bne.n	adc <_usart_init+0xa0>
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     acc:	0083      	lsls	r3, r0, #2
     ace:	181b      	adds	r3, r3, r0
     ad0:	009a      	lsls	r2, r3, #2
     ad2:	4b15      	ldr	r3, [pc, #84]	; (b28 <_usart_init+0xec>)
     ad4:	189b      	adds	r3, r3, r2
     ad6:	899b      	ldrh	r3, [r3, #12]
	((Sercom *)hw)->USART.BAUD.reg = data;
     ad8:	81a3      	strh	r3, [r4, #12]
     ada:	e015      	b.n	b08 <_usart_init+0xcc>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     adc:	0083      	lsls	r3, r0, #2
     ade:	181b      	adds	r3, r3, r0
     ae0:	009a      	lsls	r2, r3, #2
     ae2:	4911      	ldr	r1, [pc, #68]	; (b28 <_usart_init+0xec>)
     ae4:	1889      	adds	r1, r1, r2
     ae6:	898a      	ldrh	r2, [r1, #12]
     ae8:	89a3      	ldrh	r3, [r4, #12]
     aea:	04d2      	lsls	r2, r2, #19
     aec:	0cd2      	lsrs	r2, r2, #19
     aee:	0b5b      	lsrs	r3, r3, #13
     af0:	035b      	lsls	r3, r3, #13
     af2:	4313      	orrs	r3, r2
     af4:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     af6:	7b8b      	ldrb	r3, [r1, #14]
     af8:	2207      	movs	r2, #7
     afa:	401a      	ands	r2, r3
     afc:	89a3      	ldrh	r3, [r4, #12]
     afe:	0352      	lsls	r2, r2, #13
     b00:	04db      	lsls	r3, r3, #19
     b02:	0cdb      	lsrs	r3, r3, #19
     b04:	4313      	orrs	r3, r2
     b06:	81a3      	strh	r3, [r4, #12]
	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     b08:	4a07      	ldr	r2, [pc, #28]	; (b28 <_usart_init+0xec>)
     b0a:	0083      	lsls	r3, r0, #2
     b0c:	181d      	adds	r5, r3, r0
     b0e:	00a9      	lsls	r1, r5, #2
     b10:	000d      	movs	r5, r1
     b12:	1851      	adds	r1, r2, r1
     b14:	7bc9      	ldrb	r1, [r1, #15]
	((Sercom *)hw)->USART.RXPL.reg = data;
     b16:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     b18:	1952      	adds	r2, r2, r5
     b1a:	7c12      	ldrb	r2, [r2, #16]
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     b1c:	2330      	movs	r3, #48	; 0x30
     b1e:	54e2      	strb	r2, [r4, r3]
}
     b20:	2000      	movs	r0, #0
     b22:	bd70      	pop	{r4, r5, r6, pc}
     b24:	000009f9 	.word	0x000009f9
     b28:	00004758 	.word	0x00004758

00000b2c <_get_i2cm_index>:
{
     b2c:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     b2e:	4b0d      	ldr	r3, [pc, #52]	; (b64 <_get_i2cm_index+0x38>)
     b30:	4798      	blx	r3
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     b32:	2300      	movs	r3, #0
     b34:	2b00      	cmp	r3, #0
     b36:	d008      	beq.n	b4a <_get_i2cm_index+0x1e>
	ASSERT(false);
     b38:	22f0      	movs	r2, #240	; 0xf0
     b3a:	0092      	lsls	r2, r2, #2
     b3c:	490a      	ldr	r1, [pc, #40]	; (b68 <_get_i2cm_index+0x3c>)
     b3e:	2000      	movs	r0, #0
     b40:	4b0a      	ldr	r3, [pc, #40]	; (b6c <_get_i2cm_index+0x40>)
     b42:	4798      	blx	r3
	return -1;
     b44:	2001      	movs	r0, #1
     b46:	4240      	negs	r0, r0
}
     b48:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     b4a:	005a      	lsls	r2, r3, #1
     b4c:	18d2      	adds	r2, r2, r3
     b4e:	00d1      	lsls	r1, r2, #3
     b50:	4a07      	ldr	r2, [pc, #28]	; (b70 <_get_i2cm_index+0x44>)
     b52:	1852      	adds	r2, r2, r1
     b54:	7d12      	ldrb	r2, [r2, #20]
     b56:	4290      	cmp	r0, r2
     b58:	d002      	beq.n	b60 <_get_i2cm_index+0x34>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     b5a:	3301      	adds	r3, #1
     b5c:	b2db      	uxtb	r3, r3
     b5e:	e7e9      	b.n	b34 <_get_i2cm_index+0x8>
			return i;
     b60:	b258      	sxtb	r0, r3
     b62:	e7f1      	b.n	b48 <_get_i2cm_index+0x1c>
     b64:	0000095d 	.word	0x0000095d
     b68:	000047a8 	.word	0x000047a8
     b6c:	000007b5 	.word	0x000007b5
     b70:	00004758 	.word	0x00004758

00000b74 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     b74:	b570      	push	{r4, r5, r6, lr}
     b76:	0005      	movs	r5, r0
     b78:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     b7a:	0008      	movs	r0, r1
     b7c:	4b2d      	ldr	r3, [pc, #180]	; (c34 <_i2c_m_sync_init_impl+0xc0>)
     b7e:	4798      	blx	r3
     b80:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     b82:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     b84:	07db      	lsls	r3, r3, #31
     b86:	d41d      	bmi.n	bc4 <_i2c_m_sync_init_impl+0x50>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     b88:	0043      	lsls	r3, r0, #1
     b8a:	181b      	adds	r3, r3, r0
     b8c:	00da      	lsls	r2, r3, #3
     b8e:	4b2a      	ldr	r3, [pc, #168]	; (c38 <_i2c_m_sync_init_impl+0xc4>)
     b90:	189b      	adds	r3, r3, r2
     b92:	699a      	ldr	r2, [r3, #24]
     b94:	231c      	movs	r3, #28
     b96:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b98:	69e3      	ldr	r3, [r4, #28]
     b9a:	079b      	lsls	r3, r3, #30
     b9c:	d1fc      	bne.n	b98 <_i2c_m_sync_init_impl+0x24>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     b9e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     ba0:	079b      	lsls	r3, r3, #30
     ba2:	d509      	bpl.n	bb8 <_i2c_m_sync_init_impl+0x44>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     ba4:	6823      	ldr	r3, [r4, #0]
     ba6:	2102      	movs	r1, #2
     ba8:	438b      	bics	r3, r1
     baa:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bac:	69e3      	ldr	r3, [r4, #28]
     bae:	079b      	lsls	r3, r3, #30
     bb0:	d1fc      	bne.n	bac <_i2c_m_sync_init_impl+0x38>
     bb2:	69e3      	ldr	r3, [r4, #28]
     bb4:	079b      	lsls	r3, r3, #30
     bb6:	d4fc      	bmi.n	bb2 <_i2c_m_sync_init_impl+0x3e>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     bb8:	2301      	movs	r3, #1
     bba:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     bbc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bbe:	69e3      	ldr	r3, [r4, #28]
     bc0:	079b      	lsls	r3, r3, #30
     bc2:	d1fc      	bne.n	bbe <_i2c_m_sync_init_impl+0x4a>
     bc4:	69e3      	ldr	r3, [r4, #28]
     bc6:	07db      	lsls	r3, r3, #31
     bc8:	d4fc      	bmi.n	bc4 <_i2c_m_sync_init_impl+0x50>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     bca:	0043      	lsls	r3, r0, #1
     bcc:	181b      	adds	r3, r3, r0
     bce:	00da      	lsls	r2, r3, #3
     bd0:	4b19      	ldr	r3, [pc, #100]	; (c38 <_i2c_m_sync_init_impl+0xc4>)
     bd2:	189b      	adds	r3, r3, r2
     bd4:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     bd6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bd8:	69e3      	ldr	r3, [r4, #28]
     bda:	079b      	lsls	r3, r3, #30
     bdc:	d1fc      	bne.n	bd8 <_i2c_m_sync_init_impl+0x64>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     bde:	0043      	lsls	r3, r0, #1
     be0:	181b      	adds	r3, r3, r0
     be2:	00da      	lsls	r2, r3, #3
     be4:	4b14      	ldr	r3, [pc, #80]	; (c38 <_i2c_m_sync_init_impl+0xc4>)
     be6:	189b      	adds	r3, r3, r2
     be8:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     bea:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bec:	69e3      	ldr	r3, [r4, #28]
     bee:	075b      	lsls	r3, r3, #29
     bf0:	d4fc      	bmi.n	bec <_i2c_m_sync_init_impl+0x78>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     bf2:	0042      	lsls	r2, r0, #1
     bf4:	1812      	adds	r2, r2, r0
     bf6:	00d1      	lsls	r1, r2, #3
     bf8:	4b0f      	ldr	r3, [pc, #60]	; (c38 <_i2c_m_sync_init_impl+0xc4>)
     bfa:	185b      	adds	r3, r3, r1
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     bfc:	6a1a      	ldr	r2, [r3, #32]
     bfe:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     c00:	7eda      	ldrb	r2, [r3, #27]
     c02:	2303      	movs	r3, #3
     c04:	401a      	ands	r2, r3
     c06:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     c08:	3b02      	subs	r3, #2
     c0a:	4293      	cmp	r3, r2
     c0c:	419b      	sbcs	r3, r3
     c0e:	425b      	negs	r3, r3
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     c10:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     c12:	490a      	ldr	r1, [pc, #40]	; (c3c <_i2c_m_sync_init_impl+0xc8>)
     c14:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     c16:	039b      	lsls	r3, r3, #14
     c18:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     c1a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c1c:	69e3      	ldr	r3, [r4, #28]
     c1e:	075b      	lsls	r3, r3, #29
     c20:	d4fc      	bmi.n	c1c <_i2c_m_sync_init_impl+0xa8>

	service->trise = _i2cms[i].trise;
     c22:	0043      	lsls	r3, r0, #1
     c24:	1818      	adds	r0, r3, r0
     c26:	00c2      	lsls	r2, r0, #3
     c28:	4b03      	ldr	r3, [pc, #12]	; (c38 <_i2c_m_sync_init_impl+0xc4>)
     c2a:	189b      	adds	r3, r3, r2
     c2c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     c2e:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     c30:	2000      	movs	r0, #0
     c32:	bd70      	pop	{r4, r5, r6, pc}
     c34:	00000b2d 	.word	0x00000b2d
     c38:	00004758 	.word	0x00004758
     c3c:	ffffbfff 	.word	0xffffbfff

00000c40 <_sercom_i2c_sync_send_address>:
{
     c40:	b570      	push	{r4, r5, r6, lr}
     c42:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
     c44:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     c46:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     c48:	0edb      	lsrs	r3, r3, #27
     c4a:	2601      	movs	r6, #1
     c4c:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
     c4e:	1e43      	subs	r3, r0, #1
     c50:	4198      	sbcs	r0, r3
     c52:	b2c0      	uxtb	r0, r0
     c54:	4a8e      	ldr	r2, [pc, #568]	; (e90 <_sercom_i2c_sync_send_address+0x250>)
     c56:	498f      	ldr	r1, [pc, #572]	; (e94 <_sercom_i2c_sync_send_address+0x254>)
     c58:	4b8f      	ldr	r3, [pc, #572]	; (e98 <_sercom_i2c_sync_send_address+0x258>)
     c5a:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     c5c:	686b      	ldr	r3, [r5, #4]
     c5e:	2b01      	cmp	r3, #1
     c60:	d04d      	beq.n	cfe <_sercom_i2c_sync_send_address+0xbe>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c62:	6863      	ldr	r3, [r4, #4]
     c64:	4a8d      	ldr	r2, [pc, #564]	; (e9c <_sercom_i2c_sync_send_address+0x25c>)
     c66:	4013      	ands	r3, r2
     c68:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c6a:	69e3      	ldr	r3, [r4, #28]
     c6c:	075b      	lsls	r3, r3, #29
     c6e:	d4fc      	bmi.n	c6a <_sercom_i2c_sync_send_address+0x2a>
	if (msg->addr & I2C_M_TEN) {
     c70:	882b      	ldrh	r3, [r5, #0]
     c72:	055a      	lsls	r2, r3, #21
     c74:	d54e      	bpl.n	d14 <_sercom_i2c_sync_send_address+0xd4>
		if (msg->flags & I2C_M_RD) {
     c76:	886a      	ldrh	r2, [r5, #2]
     c78:	07d2      	lsls	r2, r2, #31
     c7a:	d504      	bpl.n	c86 <_sercom_i2c_sync_send_address+0x46>
			msg->flags |= I2C_M_TEN;
     c7c:	886a      	ldrh	r2, [r5, #2]
     c7e:	2180      	movs	r1, #128	; 0x80
     c80:	00c9      	lsls	r1, r1, #3
     c82:	430a      	orrs	r2, r1
     c84:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     c86:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c88:	4a85      	ldr	r2, [pc, #532]	; (ea0 <_sercom_i2c_sync_send_address+0x260>)
     c8a:	401a      	ands	r2, r3
     c8c:	69e3      	ldr	r3, [r4, #28]
     c8e:	075b      	lsls	r3, r3, #29
     c90:	d4fc      	bmi.n	c8c <_sercom_i2c_sync_send_address+0x4c>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c92:	6a63      	ldr	r3, [r4, #36]	; 0x24
     c94:	2180      	movs	r1, #128	; 0x80
     c96:	01c9      	lsls	r1, r1, #7
     c98:	400b      	ands	r3, r1
     c9a:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     c9c:	2280      	movs	r2, #128	; 0x80
     c9e:	0212      	lsls	r2, r2, #8
     ca0:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     ca2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ca4:	69e3      	ldr	r3, [r4, #28]
     ca6:	075b      	lsls	r3, r3, #29
     ca8:	d4fc      	bmi.n	ca4 <_sercom_i2c_sync_send_address+0x64>
	void *   hw      = i2c_dev->hw;
     caa:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     cac:	4a7d      	ldr	r2, [pc, #500]	; (ea4 <_sercom_i2c_sync_send_address+0x264>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     cae:	7e33      	ldrb	r3, [r6, #24]
     cb0:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     cb2:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     cb4:	1e51      	subs	r1, r2, #1
     cb6:	2a00      	cmp	r2, #0
     cb8:	d002      	beq.n	cc0 <_sercom_i2c_sync_send_address+0x80>
     cba:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     cbc:	079b      	lsls	r3, r3, #30
     cbe:	d0f6      	beq.n	cae <_sercom_i2c_sync_send_address+0x6e>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     cc0:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     cc2:	0edb      	lsrs	r3, r3, #27
     cc4:	2201      	movs	r2, #1
     cc6:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cc8:	69e3      	ldr	r3, [r4, #28]
     cca:	075b      	lsls	r3, r3, #29
     ccc:	d4fc      	bmi.n	cc8 <_sercom_i2c_sync_send_address+0x88>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     cce:	8b63      	ldrh	r3, [r4, #26]
     cd0:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     cd2:	07c1      	lsls	r1, r0, #31
     cd4:	d400      	bmi.n	cd8 <_sercom_i2c_sync_send_address+0x98>
     cd6:	e08f      	b.n	df8 <_sercom_i2c_sync_send_address+0x1b8>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     cd8:	079a      	lsls	r2, r3, #30
     cda:	d52f      	bpl.n	d3c <_sercom_i2c_sync_send_address+0xfc>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     cdc:	2201      	movs	r2, #1
     cde:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     ce0:	886a      	ldrh	r2, [r5, #2]
     ce2:	2180      	movs	r1, #128	; 0x80
     ce4:	0149      	lsls	r1, r1, #5
     ce6:	430a      	orrs	r2, r1
     ce8:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     cea:	886a      	ldrh	r2, [r5, #2]
     cec:	496e      	ldr	r1, [pc, #440]	; (ea8 <_sercom_i2c_sync_send_address+0x268>)
     cee:	400a      	ands	r2, r1
     cf0:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     cf2:	07db      	lsls	r3, r3, #31
     cf4:	d400      	bmi.n	cf8 <_sercom_i2c_sync_send_address+0xb8>
     cf6:	e0c6      	b.n	e86 <_sercom_i2c_sync_send_address+0x246>
				return I2C_ERR_BUS;
     cf8:	2005      	movs	r0, #5
     cfa:	4240      	negs	r0, r0
     cfc:	e0a2      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
	if (msg->len == 1 && sclsm) {
     cfe:	2e00      	cmp	r6, #0
     d00:	d0af      	beq.n	c62 <_sercom_i2c_sync_send_address+0x22>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     d02:	6862      	ldr	r2, [r4, #4]
     d04:	2380      	movs	r3, #128	; 0x80
     d06:	02db      	lsls	r3, r3, #11
     d08:	4313      	orrs	r3, r2
     d0a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d0c:	69e3      	ldr	r3, [r4, #28]
     d0e:	075b      	lsls	r3, r3, #29
     d10:	d4fc      	bmi.n	d0c <_sercom_i2c_sync_send_address+0xcc>
     d12:	e7ad      	b.n	c70 <_sercom_i2c_sync_send_address+0x30>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     d14:	005b      	lsls	r3, r3, #1
     d16:	22ff      	movs	r2, #255	; 0xff
     d18:	4013      	ands	r3, r2
     d1a:	886a      	ldrh	r2, [r5, #2]
     d1c:	2101      	movs	r1, #1
     d1e:	400a      	ands	r2, r1
     d20:	431a      	orrs	r2, r3
     d22:	69e3      	ldr	r3, [r4, #28]
     d24:	075b      	lsls	r3, r3, #29
     d26:	d4fc      	bmi.n	d22 <_sercom_i2c_sync_send_address+0xe2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d28:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d2a:	2180      	movs	r1, #128	; 0x80
     d2c:	01c9      	lsls	r1, r1, #7
     d2e:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
     d30:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d32:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d34:	69e3      	ldr	r3, [r4, #28]
     d36:	075b      	lsls	r3, r3, #29
     d38:	d4fc      	bmi.n	d34 <_sercom_i2c_sync_send_address+0xf4>
     d3a:	e7b6      	b.n	caa <_sercom_i2c_sync_send_address+0x6a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     d3c:	075b      	lsls	r3, r3, #29
     d3e:	d41b      	bmi.n	d78 <_sercom_i2c_sync_send_address+0x138>
			if (msg->flags & I2C_M_TEN) {
     d40:	886b      	ldrh	r3, [r5, #2]
     d42:	055b      	lsls	r3, r3, #21
     d44:	d534      	bpl.n	db0 <_sercom_i2c_sync_send_address+0x170>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     d46:	882a      	ldrh	r2, [r5, #0]
     d48:	1212      	asrs	r2, r2, #8
     d4a:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d4c:	2306      	movs	r3, #6
     d4e:	401a      	ands	r2, r3
     d50:	69e3      	ldr	r3, [r4, #28]
     d52:	075b      	lsls	r3, r3, #29
     d54:	d4fc      	bmi.n	d50 <_sercom_i2c_sync_send_address+0x110>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d56:	6a63      	ldr	r3, [r4, #36]	; 0x24
     d58:	2180      	movs	r1, #128	; 0x80
     d5a:	01c9      	lsls	r1, r1, #7
     d5c:	400b      	ands	r3, r1
     d5e:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     d60:	22f1      	movs	r2, #241	; 0xf1
     d62:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d64:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d66:	69e3      	ldr	r3, [r4, #28]
     d68:	075b      	lsls	r3, r3, #29
     d6a:	d4fc      	bmi.n	d66 <_sercom_i2c_sync_send_address+0x126>
				msg->flags &= ~I2C_M_TEN;
     d6c:	886b      	ldrh	r3, [r5, #2]
     d6e:	4a4f      	ldr	r2, [pc, #316]	; (eac <_sercom_i2c_sync_send_address+0x26c>)
     d70:	4013      	ands	r3, r2
     d72:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     d74:	2000      	movs	r0, #0
     d76:	e065      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
				if (msg->len > 0) {
     d78:	686b      	ldr	r3, [r5, #4]
     d7a:	2b00      	cmp	r3, #0
     d7c:	dd04      	ble.n	d88 <_sercom_i2c_sync_send_address+0x148>
					msg->flags |= I2C_M_FAIL;
     d7e:	886b      	ldrh	r3, [r5, #2]
     d80:	2280      	movs	r2, #128	; 0x80
     d82:	0152      	lsls	r2, r2, #5
     d84:	4313      	orrs	r3, r2
     d86:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     d88:	886b      	ldrh	r3, [r5, #2]
     d8a:	b21b      	sxth	r3, r3
     d8c:	2b00      	cmp	r3, #0
     d8e:	db06      	blt.n	d9e <_sercom_i2c_sync_send_address+0x15e>
				msg->flags &= ~I2C_M_BUSY;
     d90:	886b      	ldrh	r3, [r5, #2]
     d92:	4a45      	ldr	r2, [pc, #276]	; (ea8 <_sercom_i2c_sync_send_address+0x268>)
     d94:	4013      	ands	r3, r2
     d96:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     d98:	2002      	movs	r0, #2
     d9a:	4240      	negs	r0, r0
     d9c:	e052      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d9e:	6862      	ldr	r2, [r4, #4]
     da0:	23c0      	movs	r3, #192	; 0xc0
     da2:	029b      	lsls	r3, r3, #10
     da4:	4313      	orrs	r3, r2
     da6:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     da8:	69e3      	ldr	r3, [r4, #28]
     daa:	075b      	lsls	r3, r3, #29
     dac:	d4fc      	bmi.n	da8 <_sercom_i2c_sync_send_address+0x168>
     dae:	e7ef      	b.n	d90 <_sercom_i2c_sync_send_address+0x150>
			if (msg->len == 0) {
     db0:	6868      	ldr	r0, [r5, #4]
     db2:	2800      	cmp	r0, #0
     db4:	d111      	bne.n	dda <_sercom_i2c_sync_send_address+0x19a>
				if (msg->flags & I2C_M_STOP) {
     db6:	886b      	ldrh	r3, [r5, #2]
     db8:	b21b      	sxth	r3, r3
     dba:	2b00      	cmp	r3, #0
     dbc:	db04      	blt.n	dc8 <_sercom_i2c_sync_send_address+0x188>
				msg->flags &= ~I2C_M_BUSY;
     dbe:	886b      	ldrh	r3, [r5, #2]
     dc0:	4a39      	ldr	r2, [pc, #228]	; (ea8 <_sercom_i2c_sync_send_address+0x268>)
     dc2:	4013      	ands	r3, r2
     dc4:	806b      	strh	r3, [r5, #2]
     dc6:	e03d      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     dc8:	6862      	ldr	r2, [r4, #4]
     dca:	23c0      	movs	r3, #192	; 0xc0
     dcc:	029b      	lsls	r3, r3, #10
     dce:	4313      	orrs	r3, r2
     dd0:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dd2:	69e3      	ldr	r3, [r4, #28]
     dd4:	075b      	lsls	r3, r3, #29
     dd6:	d4fc      	bmi.n	dd2 <_sercom_i2c_sync_send_address+0x192>
     dd8:	e7f1      	b.n	dbe <_sercom_i2c_sync_send_address+0x17e>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     dda:	68ab      	ldr	r3, [r5, #8]
     ddc:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     dde:	2328      	movs	r3, #40	; 0x28
     de0:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     de2:	69e3      	ldr	r3, [r4, #28]
     de4:	075b      	lsls	r3, r3, #29
     de6:	d4fc      	bmi.n	de2 <_sercom_i2c_sync_send_address+0x1a2>
				msg->buffer++;
     de8:	68ab      	ldr	r3, [r5, #8]
     dea:	3301      	adds	r3, #1
     dec:	60ab      	str	r3, [r5, #8]
				msg->len--;
     dee:	686b      	ldr	r3, [r5, #4]
     df0:	3b01      	subs	r3, #1
     df2:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     df4:	2000      	movs	r0, #0
     df6:	e025      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
	} else if (flags & SB_FLAG) {
     df8:	0781      	lsls	r1, r0, #30
     dfa:	d547      	bpl.n	e8c <_sercom_i2c_sync_send_address+0x24c>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     dfc:	6869      	ldr	r1, [r5, #4]
     dfe:	2900      	cmp	r1, #0
     e00:	d03c      	beq.n	e7c <_sercom_i2c_sync_send_address+0x23c>
     e02:	075b      	lsls	r3, r3, #29
     e04:	d43a      	bmi.n	e7c <_sercom_i2c_sync_send_address+0x23c>
			msg->len--;
     e06:	3901      	subs	r1, #1
     e08:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e0a:	2900      	cmp	r1, #0
     e0c:	d101      	bne.n	e12 <_sercom_i2c_sync_send_address+0x1d2>
     e0e:	2a00      	cmp	r2, #0
     e10:	d01b      	beq.n	e4a <_sercom_i2c_sync_send_address+0x20a>
     e12:	2901      	cmp	r1, #1
     e14:	d017      	beq.n	e46 <_sercom_i2c_sync_send_address+0x206>
			if (msg->len == 0) {
     e16:	686b      	ldr	r3, [r5, #4]
     e18:	2b00      	cmp	r3, #0
     e1a:	d107      	bne.n	e2c <_sercom_i2c_sync_send_address+0x1ec>
				if (msg->flags & I2C_M_STOP) {
     e1c:	886b      	ldrh	r3, [r5, #2]
     e1e:	b21b      	sxth	r3, r3
     e20:	2b00      	cmp	r3, #0
     e22:	db1b      	blt.n	e5c <_sercom_i2c_sync_send_address+0x21c>
				msg->flags &= ~I2C_M_BUSY;
     e24:	886b      	ldrh	r3, [r5, #2]
     e26:	4a20      	ldr	r2, [pc, #128]	; (ea8 <_sercom_i2c_sync_send_address+0x268>)
     e28:	4013      	ands	r3, r2
     e2a:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     e2c:	68aa      	ldr	r2, [r5, #8]
     e2e:	1c53      	adds	r3, r2, #1
     e30:	60ab      	str	r3, [r5, #8]
     e32:	69e3      	ldr	r3, [r4, #28]
     e34:	075b      	lsls	r3, r3, #29
     e36:	d4fc      	bmi.n	e32 <_sercom_i2c_sync_send_address+0x1f2>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e38:	2328      	movs	r3, #40	; 0x28
     e3a:	5ce3      	ldrb	r3, [r4, r3]
     e3c:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e3e:	2302      	movs	r3, #2
     e40:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     e42:	2000      	movs	r0, #0
}
     e44:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     e46:	2a00      	cmp	r2, #0
     e48:	d0e5      	beq.n	e16 <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e4a:	6862      	ldr	r2, [r4, #4]
     e4c:	2380      	movs	r3, #128	; 0x80
     e4e:	02db      	lsls	r3, r3, #11
     e50:	4313      	orrs	r3, r2
     e52:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e54:	69e3      	ldr	r3, [r4, #28]
     e56:	075b      	lsls	r3, r3, #29
     e58:	d4fc      	bmi.n	e54 <_sercom_i2c_sync_send_address+0x214>
     e5a:	e7dc      	b.n	e16 <_sercom_i2c_sync_send_address+0x1d6>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     e5c:	6863      	ldr	r3, [r4, #4]
     e5e:	4a12      	ldr	r2, [pc, #72]	; (ea8 <_sercom_i2c_sync_send_address+0x268>)
     e60:	4013      	ands	r3, r2
     e62:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e64:	69e3      	ldr	r3, [r4, #28]
     e66:	075b      	lsls	r3, r3, #29
     e68:	d4fc      	bmi.n	e64 <_sercom_i2c_sync_send_address+0x224>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e6a:	6862      	ldr	r2, [r4, #4]
     e6c:	23c0      	movs	r3, #192	; 0xc0
     e6e:	029b      	lsls	r3, r3, #10
     e70:	4313      	orrs	r3, r2
     e72:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e74:	69e3      	ldr	r3, [r4, #28]
     e76:	075b      	lsls	r3, r3, #29
     e78:	d4fc      	bmi.n	e74 <_sercom_i2c_sync_send_address+0x234>
     e7a:	e7d3      	b.n	e24 <_sercom_i2c_sync_send_address+0x1e4>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e7c:	2302      	movs	r3, #2
     e7e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     e80:	2002      	movs	r0, #2
     e82:	4240      	negs	r0, r0
     e84:	e7de      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
			return I2C_ERR_BAD_ADDRESS;
     e86:	2004      	movs	r0, #4
     e88:	4240      	negs	r0, r0
     e8a:	e7db      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
	return I2C_OK;
     e8c:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
     e8e:	e7d9      	b.n	e44 <_sercom_i2c_sync_send_address+0x204>
     e90:	000005bc 	.word	0x000005bc
     e94:	000047a8 	.word	0x000047a8
     e98:	000007b5 	.word	0x000007b5
     e9c:	fffbffff 	.word	0xfffbffff
     ea0:	000007fe 	.word	0x000007fe
     ea4:	0000ffff 	.word	0x0000ffff
     ea8:	fffffeff 	.word	0xfffffeff
     eac:	fffffbff 	.word	0xfffffbff

00000eb0 <_usart_async_init>:
{
     eb0:	b570      	push	{r4, r5, r6, lr}
     eb2:	0006      	movs	r6, r0
     eb4:	000c      	movs	r4, r1
	ASSERT(device);
     eb6:	1e43      	subs	r3, r0, #1
     eb8:	4198      	sbcs	r0, r3
     eba:	b2c0      	uxtb	r0, r0
     ebc:	22c4      	movs	r2, #196	; 0xc4
     ebe:	4919      	ldr	r1, [pc, #100]	; (f24 <_usart_async_init+0x74>)
     ec0:	4b19      	ldr	r3, [pc, #100]	; (f28 <_usart_async_init+0x78>)
     ec2:	4798      	blx	r3
	init_status = _usart_init(hw);
     ec4:	0020      	movs	r0, r4
     ec6:	4b19      	ldr	r3, [pc, #100]	; (f2c <_usart_async_init+0x7c>)
     ec8:	4798      	blx	r3
     eca:	1e05      	subs	r5, r0, #0
	if (init_status) {
     ecc:	d001      	beq.n	ed2 <_usart_async_init+0x22>
}
     ece:	0028      	movs	r0, r5
     ed0:	bd70      	pop	{r4, r5, r6, pc}
	device->hw = hw;
     ed2:	61b4      	str	r4, [r6, #24]
	_sercom_init_irq_param(hw, (void *)device);
     ed4:	0031      	movs	r1, r6
     ed6:	0020      	movs	r0, r4
     ed8:	4b15      	ldr	r3, [pc, #84]	; (f30 <_usart_async_init+0x80>)
     eda:	4798      	blx	r3
	NVIC_DisableIRQ((IRQn_Type)_sercom_get_irq_num(hw));
     edc:	0020      	movs	r0, r4
     ede:	4b15      	ldr	r3, [pc, #84]	; (f34 <_usart_async_init+0x84>)
     ee0:	4798      	blx	r3
     ee2:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     ee4:	2b00      	cmp	r3, #0
     ee6:	db0a      	blt.n	efe <_usart_async_init+0x4e>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     ee8:	211f      	movs	r1, #31
     eea:	4001      	ands	r1, r0
     eec:	2201      	movs	r2, #1
     eee:	408a      	lsls	r2, r1
     ef0:	2180      	movs	r1, #128	; 0x80
     ef2:	4c11      	ldr	r4, [pc, #68]	; (f38 <_usart_async_init+0x88>)
     ef4:	5062      	str	r2, [r4, r1]
  __ASM volatile ("dsb 0xF":::"memory");
     ef6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     efa:	f3bf 8f6f 	isb	sy
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
     efe:	2b00      	cmp	r3, #0
     f00:	db07      	blt.n	f12 <_usart_async_init+0x62>
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f02:	211f      	movs	r1, #31
     f04:	4001      	ands	r1, r0
     f06:	2201      	movs	r2, #1
     f08:	408a      	lsls	r2, r1
     f0a:	21c0      	movs	r1, #192	; 0xc0
     f0c:	0049      	lsls	r1, r1, #1
     f0e:	4c0a      	ldr	r4, [pc, #40]	; (f38 <_usart_async_init+0x88>)
     f10:	5062      	str	r2, [r4, r1]
  if ((int32_t)(IRQn) >= 0)
     f12:	2b00      	cmp	r3, #0
     f14:	dbdb      	blt.n	ece <_usart_async_init+0x1e>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f16:	231f      	movs	r3, #31
     f18:	4018      	ands	r0, r3
     f1a:	3b1e      	subs	r3, #30
     f1c:	4083      	lsls	r3, r0
     f1e:	4a06      	ldr	r2, [pc, #24]	; (f38 <_usart_async_init+0x88>)
     f20:	6013      	str	r3, [r2, #0]
     f22:	e7d4      	b.n	ece <_usart_async_init+0x1e>
     f24:	000047a8 	.word	0x000047a8
     f28:	000007b5 	.word	0x000007b5
     f2c:	00000a3d 	.word	0x00000a3d
     f30:	000009d1 	.word	0x000009d1
     f34:	000009e9 	.word	0x000009e9
     f38:	e000e100 	.word	0xe000e100

00000f3c <_usart_async_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
     f3c:	6982      	ldr	r2, [r0, #24]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
     f3e:	6813      	ldr	r3, [r2, #0]
     f40:	2102      	movs	r1, #2
     f42:	430b      	orrs	r3, r1
     f44:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     f46:	69d3      	ldr	r3, [r2, #28]
     f48:	079b      	lsls	r3, r3, #30
     f4a:	d1fc      	bne.n	f46 <_usart_async_enable+0xa>
}
     f4c:	4770      	bx	lr

00000f4e <_usart_async_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     f4e:	6983      	ldr	r3, [r0, #24]
     f50:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     f52:	8519      	strh	r1, [r3, #40]	; 0x28
}
     f54:	4770      	bx	lr

00000f56 <_usart_async_enable_byte_sent_irq>:
	hri_sercomusart_set_INTEN_DRE_bit(device->hw);
     f56:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_DRE;
     f58:	2201      	movs	r2, #1
     f5a:	759a      	strb	r2, [r3, #22]
}
     f5c:	4770      	bx	lr

00000f5e <_usart_async_enable_tx_done_irq>:
	hri_sercomusart_set_INTEN_TXC_bit(device->hw);
     f5e:	6983      	ldr	r3, [r0, #24]
	((Sercom *)hw)->USART.INTENSET.reg = SERCOM_USART_INTENSET_TXC;
     f60:	2202      	movs	r2, #2
     f62:	759a      	strb	r2, [r3, #22]
}
     f64:	4770      	bx	lr
	...

00000f68 <_i2c_m_sync_init>:
{
     f68:	b570      	push	{r4, r5, r6, lr}
     f6a:	0004      	movs	r4, r0
     f6c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     f6e:	1e43      	subs	r3, r0, #1
     f70:	4198      	sbcs	r0, r3
     f72:	b2c0      	uxtb	r0, r0
     f74:	4a04      	ldr	r2, [pc, #16]	; (f88 <_i2c_m_sync_init+0x20>)
     f76:	4905      	ldr	r1, [pc, #20]	; (f8c <_i2c_m_sync_init+0x24>)
     f78:	4b05      	ldr	r3, [pc, #20]	; (f90 <_i2c_m_sync_init+0x28>)
     f7a:	4798      	blx	r3
	i2c_dev->hw = hw;
     f7c:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     f7e:	0029      	movs	r1, r5
     f80:	0020      	movs	r0, r4
     f82:	4b04      	ldr	r3, [pc, #16]	; (f94 <_i2c_m_sync_init+0x2c>)
     f84:	4798      	blx	r3
}
     f86:	bd70      	pop	{r4, r5, r6, pc}
     f88:	0000052f 	.word	0x0000052f
     f8c:	000047a8 	.word	0x000047a8
     f90:	000007b5 	.word	0x000007b5
     f94:	00000b75 	.word	0x00000b75

00000f98 <_i2c_m_sync_enable>:
{
     f98:	b570      	push	{r4, r5, r6, lr}
     f9a:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     f9c:	4d19      	ldr	r5, [pc, #100]	; (1004 <_i2c_m_sync_enable+0x6c>)
     f9e:	1e43      	subs	r3, r0, #1
     fa0:	4198      	sbcs	r0, r3
     fa2:	b2c0      	uxtb	r0, r0
     fa4:	4a18      	ldr	r2, [pc, #96]	; (1008 <_i2c_m_sync_enable+0x70>)
     fa6:	0029      	movs	r1, r5
     fa8:	4e18      	ldr	r6, [pc, #96]	; (100c <_i2c_m_sync_enable+0x74>)
     faa:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
     fac:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     fae:	0020      	movs	r0, r4
     fb0:	1e43      	subs	r3, r0, #1
     fb2:	4198      	sbcs	r0, r3
     fb4:	b2c0      	uxtb	r0, r0
     fb6:	4a16      	ldr	r2, [pc, #88]	; (1010 <_i2c_m_sync_enable+0x78>)
     fb8:	0029      	movs	r1, r5
     fba:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     fbc:	6823      	ldr	r3, [r4, #0]
     fbe:	2202      	movs	r2, #2
     fc0:	4313      	orrs	r3, r2
     fc2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fc4:	69e3      	ldr	r3, [r4, #28]
     fc6:	079b      	lsls	r3, r3, #30
     fc8:	d1fc      	bne.n	fc4 <_i2c_m_sync_enable+0x2c>
     fca:	2004      	movs	r0, #4
     fcc:	4911      	ldr	r1, [pc, #68]	; (1014 <_i2c_m_sync_enable+0x7c>)
     fce:	69e3      	ldr	r3, [r4, #28]
     fd0:	075b      	lsls	r3, r3, #29
     fd2:	d4fc      	bmi.n	fce <_i2c_m_sync_enable+0x36>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     fd4:	8b62      	ldrh	r2, [r4, #26]
     fd6:	0912      	lsrs	r2, r2, #4
     fd8:	2303      	movs	r3, #3
     fda:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     fdc:	2b01      	cmp	r3, #1
     fde:	d00b      	beq.n	ff8 <_i2c_m_sync_enable+0x60>
		timeout--;
     fe0:	3901      	subs	r1, #1
		if (timeout <= 0) {
     fe2:	2900      	cmp	r1, #0
     fe4:	dcf3      	bgt.n	fce <_i2c_m_sync_enable+0x36>
			if (--timeout_attempt)
     fe6:	3801      	subs	r0, #1
     fe8:	2800      	cmp	r0, #0
     fea:	d007      	beq.n	ffc <_i2c_m_sync_enable+0x64>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     fec:	2310      	movs	r3, #16
     fee:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ff0:	69e3      	ldr	r3, [r4, #28]
     ff2:	075b      	lsls	r3, r3, #29
     ff4:	d4fc      	bmi.n	ff0 <_i2c_m_sync_enable+0x58>
     ff6:	e7e9      	b.n	fcc <_i2c_m_sync_enable+0x34>
	return ERR_NONE;
     ff8:	2000      	movs	r0, #0
}
     ffa:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     ffc:	2006      	movs	r0, #6
     ffe:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    1000:	e7fb      	b.n	ffa <_i2c_m_sync_enable+0x62>
    1002:	46c0      	nop			; (mov r8, r8)
    1004:	000047a8 	.word	0x000047a8
    1008:	0000054c 	.word	0x0000054c
    100c:	000007b5 	.word	0x000007b5
    1010:	0000061c 	.word	0x0000061c
    1014:	0000ffff 	.word	0x0000ffff

00001018 <_i2c_m_sync_transfer>:
{
    1018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    101a:	0005      	movs	r5, r0
    101c:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    101e:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    1020:	1e43      	subs	r3, r0, #1
    1022:	4198      	sbcs	r0, r3
    1024:	b2c0      	uxtb	r0, r0
    1026:	4a93      	ldr	r2, [pc, #588]	; (1274 <_i2c_m_sync_transfer+0x25c>)
    1028:	4993      	ldr	r1, [pc, #588]	; (1278 <_i2c_m_sync_transfer+0x260>)
    102a:	4f94      	ldr	r7, [pc, #592]	; (127c <_i2c_m_sync_transfer+0x264>)
    102c:	47b8      	blx	r7
	ASSERT(i2c_dev->hw);
    102e:	6928      	ldr	r0, [r5, #16]
    1030:	1e43      	subs	r3, r0, #1
    1032:	4198      	sbcs	r0, r3
    1034:	b2c0      	uxtb	r0, r0
    1036:	22bd      	movs	r2, #189	; 0xbd
    1038:	00d2      	lsls	r2, r2, #3
    103a:	498f      	ldr	r1, [pc, #572]	; (1278 <_i2c_m_sync_transfer+0x260>)
    103c:	47b8      	blx	r7
	ASSERT(msg);
    103e:	0030      	movs	r0, r6
    1040:	1e43      	subs	r3, r0, #1
    1042:	4198      	sbcs	r0, r3
    1044:	b2c0      	uxtb	r0, r0
    1046:	4a8e      	ldr	r2, [pc, #568]	; (1280 <_i2c_m_sync_transfer+0x268>)
    1048:	498b      	ldr	r1, [pc, #556]	; (1278 <_i2c_m_sync_transfer+0x260>)
    104a:	47b8      	blx	r7
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    104c:	886b      	ldrh	r3, [r5, #2]
    104e:	05db      	lsls	r3, r3, #23
    1050:	d500      	bpl.n	1054 <_i2c_m_sync_transfer+0x3c>
    1052:	e10b      	b.n	126c <_i2c_m_sync_transfer+0x254>
	msg->flags |= I2C_M_BUSY;
    1054:	8872      	ldrh	r2, [r6, #2]
    1056:	2380      	movs	r3, #128	; 0x80
    1058:	005b      	lsls	r3, r3, #1
    105a:	469c      	mov	ip, r3
    105c:	431a      	orrs	r2, r3
    105e:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    1060:	002a      	movs	r2, r5
    1062:	0031      	movs	r1, r6
    1064:	c989      	ldmia	r1!, {r0, r3, r7}
    1066:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    1068:	6862      	ldr	r2, [r4, #4]
    106a:	4663      	mov	r3, ip
    106c:	4313      	orrs	r3, r2
    106e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1070:	69e3      	ldr	r3, [r4, #28]
    1072:	075b      	lsls	r3, r3, #29
    1074:	d4fc      	bmi.n	1070 <_i2c_m_sync_transfer+0x58>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    1076:	0028      	movs	r0, r5
    1078:	4b82      	ldr	r3, [pc, #520]	; (1284 <_i2c_m_sync_transfer+0x26c>)
    107a:	4798      	blx	r3
	if (ret) {
    107c:	2800      	cmp	r0, #0
    107e:	d100      	bne.n	1082 <_i2c_m_sync_transfer+0x6a>
    1080:	e09d      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1082:	886b      	ldrh	r3, [r5, #2]
    1084:	4a80      	ldr	r2, [pc, #512]	; (1288 <_i2c_m_sync_transfer+0x270>)
    1086:	4013      	ands	r3, r2
    1088:	806b      	strh	r3, [r5, #2]
}
    108a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    108c:	2005      	movs	r0, #5
    108e:	4240      	negs	r0, r0
    1090:	e0a6      	b.n	11e0 <_i2c_m_sync_transfer+0x1c8>
			if (msg->flags & I2C_M_STOP) {
    1092:	8873      	ldrh	r3, [r6, #2]
    1094:	b21b      	sxth	r3, r3
    1096:	2b00      	cmp	r3, #0
    1098:	db04      	blt.n	10a4 <_i2c_m_sync_transfer+0x8c>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    109a:	886b      	ldrh	r3, [r5, #2]
    109c:	4a7a      	ldr	r2, [pc, #488]	; (1288 <_i2c_m_sync_transfer+0x270>)
    109e:	4013      	ands	r3, r2
    10a0:	806b      	strh	r3, [r5, #2]
			return ret;
    10a2:	e7f2      	b.n	108a <_i2c_m_sync_transfer+0x72>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    10a4:	6862      	ldr	r2, [r4, #4]
    10a6:	23c0      	movs	r3, #192	; 0xc0
    10a8:	029b      	lsls	r3, r3, #10
    10aa:	4313      	orrs	r3, r2
    10ac:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10ae:	69e3      	ldr	r3, [r4, #28]
    10b0:	075b      	lsls	r3, r3, #29
    10b2:	d4fc      	bmi.n	10ae <_i2c_m_sync_transfer+0x96>
    10b4:	e7f1      	b.n	109a <_i2c_m_sync_transfer+0x82>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    10b6:	0753      	lsls	r3, r2, #29
    10b8:	d41b      	bmi.n	10f2 <_i2c_m_sync_transfer+0xda>
			if (msg->flags & I2C_M_TEN) {
    10ba:	886b      	ldrh	r3, [r5, #2]
    10bc:	055b      	lsls	r3, r3, #21
    10be:	d534      	bpl.n	112a <_i2c_m_sync_transfer+0x112>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    10c0:	882a      	ldrh	r2, [r5, #0]
    10c2:	1212      	asrs	r2, r2, #8
    10c4:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    10c6:	2306      	movs	r3, #6
    10c8:	401a      	ands	r2, r3
    10ca:	69e3      	ldr	r3, [r4, #28]
    10cc:	075b      	lsls	r3, r3, #29
    10ce:	d4fc      	bmi.n	10ca <_i2c_m_sync_transfer+0xb2>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    10d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    10d2:	2180      	movs	r1, #128	; 0x80
    10d4:	01c9      	lsls	r1, r1, #7
    10d6:	400b      	ands	r3, r1
    10d8:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    10da:	22f1      	movs	r2, #241	; 0xf1
    10dc:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    10de:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10e0:	69e3      	ldr	r3, [r4, #28]
    10e2:	075b      	lsls	r3, r3, #29
    10e4:	d4fc      	bmi.n	10e0 <_i2c_m_sync_transfer+0xc8>
				msg->flags &= ~I2C_M_TEN;
    10e6:	886b      	ldrh	r3, [r5, #2]
    10e8:	4a68      	ldr	r2, [pc, #416]	; (128c <_i2c_m_sync_transfer+0x274>)
    10ea:	4013      	ands	r3, r2
    10ec:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    10ee:	2000      	movs	r0, #0
    10f0:	e065      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
				if (msg->len > 0) {
    10f2:	686b      	ldr	r3, [r5, #4]
    10f4:	2b00      	cmp	r3, #0
    10f6:	dd04      	ble.n	1102 <_i2c_m_sync_transfer+0xea>
					msg->flags |= I2C_M_FAIL;
    10f8:	886b      	ldrh	r3, [r5, #2]
    10fa:	2280      	movs	r2, #128	; 0x80
    10fc:	0152      	lsls	r2, r2, #5
    10fe:	4313      	orrs	r3, r2
    1100:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    1102:	886b      	ldrh	r3, [r5, #2]
    1104:	b21b      	sxth	r3, r3
    1106:	2b00      	cmp	r3, #0
    1108:	db06      	blt.n	1118 <_i2c_m_sync_transfer+0x100>
				msg->flags &= ~I2C_M_BUSY;
    110a:	886b      	ldrh	r3, [r5, #2]
    110c:	4a5e      	ldr	r2, [pc, #376]	; (1288 <_i2c_m_sync_transfer+0x270>)
    110e:	4013      	ands	r3, r2
    1110:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    1112:	2002      	movs	r0, #2
    1114:	4240      	negs	r0, r0
    1116:	e052      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1118:	6862      	ldr	r2, [r4, #4]
    111a:	23c0      	movs	r3, #192	; 0xc0
    111c:	029b      	lsls	r3, r3, #10
    111e:	4313      	orrs	r3, r2
    1120:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1122:	69e3      	ldr	r3, [r4, #28]
    1124:	075b      	lsls	r3, r3, #29
    1126:	d4fc      	bmi.n	1122 <_i2c_m_sync_transfer+0x10a>
    1128:	e7ef      	b.n	110a <_i2c_m_sync_transfer+0xf2>
			if (msg->len == 0) {
    112a:	6868      	ldr	r0, [r5, #4]
    112c:	2800      	cmp	r0, #0
    112e:	d111      	bne.n	1154 <_i2c_m_sync_transfer+0x13c>
				if (msg->flags & I2C_M_STOP) {
    1130:	886b      	ldrh	r3, [r5, #2]
    1132:	b21b      	sxth	r3, r3
    1134:	2b00      	cmp	r3, #0
    1136:	db04      	blt.n	1142 <_i2c_m_sync_transfer+0x12a>
				msg->flags &= ~I2C_M_BUSY;
    1138:	886b      	ldrh	r3, [r5, #2]
    113a:	4a53      	ldr	r2, [pc, #332]	; (1288 <_i2c_m_sync_transfer+0x270>)
    113c:	4013      	ands	r3, r2
    113e:	806b      	strh	r3, [r5, #2]
    1140:	e03d      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1142:	6862      	ldr	r2, [r4, #4]
    1144:	23c0      	movs	r3, #192	; 0xc0
    1146:	029b      	lsls	r3, r3, #10
    1148:	4313      	orrs	r3, r2
    114a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    114c:	69e3      	ldr	r3, [r4, #28]
    114e:	075b      	lsls	r3, r3, #29
    1150:	d4fc      	bmi.n	114c <_i2c_m_sync_transfer+0x134>
    1152:	e7f1      	b.n	1138 <_i2c_m_sync_transfer+0x120>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1154:	68ab      	ldr	r3, [r5, #8]
    1156:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    1158:	2328      	movs	r3, #40	; 0x28
    115a:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    115c:	69e3      	ldr	r3, [r4, #28]
    115e:	075b      	lsls	r3, r3, #29
    1160:	d4fc      	bmi.n	115c <_i2c_m_sync_transfer+0x144>
				msg->buffer++;
    1162:	68ab      	ldr	r3, [r5, #8]
    1164:	3301      	adds	r3, #1
    1166:	60ab      	str	r3, [r5, #8]
				msg->len--;
    1168:	686b      	ldr	r3, [r5, #4]
    116a:	3b01      	subs	r3, #1
    116c:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    116e:	2000      	movs	r0, #0
    1170:	e025      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
	} else if (flags & SB_FLAG) {
    1172:	07bb      	lsls	r3, r7, #30
    1174:	d578      	bpl.n	1268 <_i2c_m_sync_transfer+0x250>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    1176:	686b      	ldr	r3, [r5, #4]
    1178:	2b00      	cmp	r3, #0
    117a:	d06d      	beq.n	1258 <_i2c_m_sync_transfer+0x240>
    117c:	0752      	lsls	r2, r2, #29
    117e:	d46b      	bmi.n	1258 <_i2c_m_sync_transfer+0x240>
			msg->len--;
    1180:	3b01      	subs	r3, #1
    1182:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1184:	2b00      	cmp	r3, #0
    1186:	d101      	bne.n	118c <_i2c_m_sync_transfer+0x174>
    1188:	2900      	cmp	r1, #0
    118a:	d04c      	beq.n	1226 <_i2c_m_sync_transfer+0x20e>
    118c:	2b01      	cmp	r3, #1
    118e:	d048      	beq.n	1222 <_i2c_m_sync_transfer+0x20a>
			if (msg->len == 0) {
    1190:	686b      	ldr	r3, [r5, #4]
    1192:	2b00      	cmp	r3, #0
    1194:	d107      	bne.n	11a6 <_i2c_m_sync_transfer+0x18e>
				if (msg->flags & I2C_M_STOP) {
    1196:	886b      	ldrh	r3, [r5, #2]
    1198:	b21b      	sxth	r3, r3
    119a:	2b00      	cmp	r3, #0
    119c:	db4c      	blt.n	1238 <_i2c_m_sync_transfer+0x220>
				msg->flags &= ~I2C_M_BUSY;
    119e:	886b      	ldrh	r3, [r5, #2]
    11a0:	4a39      	ldr	r2, [pc, #228]	; (1288 <_i2c_m_sync_transfer+0x270>)
    11a2:	4013      	ands	r3, r2
    11a4:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    11a6:	68aa      	ldr	r2, [r5, #8]
    11a8:	1c53      	adds	r3, r2, #1
    11aa:	60ab      	str	r3, [r5, #8]
    11ac:	69e3      	ldr	r3, [r4, #28]
    11ae:	075b      	lsls	r3, r3, #29
    11b0:	d4fc      	bmi.n	11ac <_i2c_m_sync_transfer+0x194>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    11b2:	2328      	movs	r3, #40	; 0x28
    11b4:	5ce3      	ldrb	r3, [r4, r3]
    11b6:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    11b8:	2302      	movs	r3, #2
    11ba:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    11bc:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    11be:	886b      	ldrh	r3, [r5, #2]
    11c0:	05db      	lsls	r3, r3, #23
    11c2:	d400      	bmi.n	11c6 <_i2c_m_sync_transfer+0x1ae>
    11c4:	e761      	b.n	108a <_i2c_m_sync_transfer+0x72>
	void *   hw      = i2c_dev->hw;
    11c6:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    11c8:	4a31      	ldr	r2, [pc, #196]	; (1290 <_i2c_m_sync_transfer+0x278>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    11ca:	7e03      	ldrb	r3, [r0, #24]
    11cc:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    11ce:	001f      	movs	r7, r3
		if (timeout-- == 0) {
    11d0:	1e51      	subs	r1, r2, #1
    11d2:	2a00      	cmp	r2, #0
    11d4:	d100      	bne.n	11d8 <_i2c_m_sync_transfer+0x1c0>
    11d6:	e759      	b.n	108c <_i2c_m_sync_transfer+0x74>
    11d8:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    11da:	079b      	lsls	r3, r3, #30
    11dc:	d0f5      	beq.n	11ca <_i2c_m_sync_transfer+0x1b2>
	return I2C_OK;
    11de:	2000      	movs	r0, #0
		if (ret) {
    11e0:	2800      	cmp	r0, #0
    11e2:	d000      	beq.n	11e6 <_i2c_m_sync_transfer+0x1ce>
    11e4:	e755      	b.n	1092 <_i2c_m_sync_transfer+0x7a>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    11e6:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    11e8:	0edb      	lsrs	r3, r3, #27
    11ea:	2101      	movs	r1, #1
    11ec:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11ee:	69e3      	ldr	r3, [r4, #28]
    11f0:	075b      	lsls	r3, r3, #29
    11f2:	d4fc      	bmi.n	11ee <_i2c_m_sync_transfer+0x1d6>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    11f4:	8b62      	ldrh	r2, [r4, #26]
    11f6:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    11f8:	07fb      	lsls	r3, r7, #31
    11fa:	d5ba      	bpl.n	1172 <_i2c_m_sync_transfer+0x15a>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    11fc:	0793      	lsls	r3, r2, #30
    11fe:	d400      	bmi.n	1202 <_i2c_m_sync_transfer+0x1ea>
    1200:	e759      	b.n	10b6 <_i2c_m_sync_transfer+0x9e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1202:	2301      	movs	r3, #1
    1204:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    1206:	886b      	ldrh	r3, [r5, #2]
    1208:	2180      	movs	r1, #128	; 0x80
    120a:	0149      	lsls	r1, r1, #5
    120c:	430b      	orrs	r3, r1
    120e:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1210:	886b      	ldrh	r3, [r5, #2]
    1212:	491d      	ldr	r1, [pc, #116]	; (1288 <_i2c_m_sync_transfer+0x270>)
    1214:	400b      	ands	r3, r1
    1216:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    1218:	07d3      	lsls	r3, r2, #31
    121a:	d522      	bpl.n	1262 <_i2c_m_sync_transfer+0x24a>
				return I2C_ERR_BUS;
    121c:	2005      	movs	r0, #5
    121e:	4240      	negs	r0, r0
    1220:	e7cd      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1222:	2900      	cmp	r1, #0
    1224:	d0b4      	beq.n	1190 <_i2c_m_sync_transfer+0x178>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1226:	6862      	ldr	r2, [r4, #4]
    1228:	2380      	movs	r3, #128	; 0x80
    122a:	02db      	lsls	r3, r3, #11
    122c:	4313      	orrs	r3, r2
    122e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1230:	69e3      	ldr	r3, [r4, #28]
    1232:	075b      	lsls	r3, r3, #29
    1234:	d4fc      	bmi.n	1230 <_i2c_m_sync_transfer+0x218>
    1236:	e7ab      	b.n	1190 <_i2c_m_sync_transfer+0x178>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    1238:	6863      	ldr	r3, [r4, #4]
    123a:	4a13      	ldr	r2, [pc, #76]	; (1288 <_i2c_m_sync_transfer+0x270>)
    123c:	4013      	ands	r3, r2
    123e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1240:	69e3      	ldr	r3, [r4, #28]
    1242:	075b      	lsls	r3, r3, #29
    1244:	d4fc      	bmi.n	1240 <_i2c_m_sync_transfer+0x228>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1246:	6862      	ldr	r2, [r4, #4]
    1248:	23c0      	movs	r3, #192	; 0xc0
    124a:	029b      	lsls	r3, r3, #10
    124c:	4313      	orrs	r3, r2
    124e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1250:	69e3      	ldr	r3, [r4, #28]
    1252:	075b      	lsls	r3, r3, #29
    1254:	d4fc      	bmi.n	1250 <_i2c_m_sync_transfer+0x238>
    1256:	e7a2      	b.n	119e <_i2c_m_sync_transfer+0x186>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    1258:	2302      	movs	r3, #2
    125a:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    125c:	2002      	movs	r0, #2
    125e:	4240      	negs	r0, r0
    1260:	e7ad      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
			return I2C_ERR_BAD_ADDRESS;
    1262:	2004      	movs	r0, #4
    1264:	4240      	negs	r0, r0
    1266:	e7aa      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
	return I2C_OK;
    1268:	2000      	movs	r0, #0
    126a:	e7a8      	b.n	11be <_i2c_m_sync_transfer+0x1a6>
		return I2C_ERR_BUSY;
    126c:	2006      	movs	r0, #6
    126e:	4240      	negs	r0, r0
    1270:	e70b      	b.n	108a <_i2c_m_sync_transfer+0x72>
    1272:	46c0      	nop			; (mov r8, r8)
    1274:	000005e7 	.word	0x000005e7
    1278:	000047a8 	.word	0x000047a8
    127c:	000007b5 	.word	0x000007b5
    1280:	000005e9 	.word	0x000005e9
    1284:	00000c41 	.word	0x00000c41
    1288:	fffffeff 	.word	0xfffffeff
    128c:	fffffbff 	.word	0xfffffbff
    1290:	0000ffff 	.word	0x0000ffff

00001294 <SERCOM5_Handler>:

	return NULL;
}

void SERCOM5_Handler(void)
{
    1294:	b510      	push	{r4, lr}
	_sercom_usart_interrupt_handler(_sercom5_dev);
    1296:	4b02      	ldr	r3, [pc, #8]	; (12a0 <SERCOM5_Handler+0xc>)
    1298:	6818      	ldr	r0, [r3, #0]
    129a:	4b02      	ldr	r3, [pc, #8]	; (12a4 <SERCOM5_Handler+0x10>)
    129c:	4798      	blx	r3
}
    129e:	bd10      	pop	{r4, pc}
    12a0:	20000098 	.word	0x20000098
    12a4:	0000096d 	.word	0x0000096d

000012a8 <_sysctrl_init_sources>:
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    12a8:	4a0e      	ldr	r2, [pc, #56]	; (12e4 <_sysctrl_init_sources+0x3c>)
    12aa:	6a11      	ldr	r1, [r2, #32]
	tmp = (tmp & SYSCTRL_OSC8M_CALIB_Msk) >> SYSCTRL_OSC8M_CALIB_Pos;
    12ac:	0c09      	lsrs	r1, r1, #16
}

static inline hri_sysctrl_osc8m_reg_t hri_sysctrl_read_OSC8M_FRANGE_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Sysctrl *)hw)->OSC8M.reg;
    12ae:	6a13      	ldr	r3, [r2, #32]

#if CONF_OSC8M_CONFIG == 1
	calib = hri_sysctrl_read_OSC8M_CALIB_bf(hw);

	hri_sysctrl_write_OSC8M_reg(hw,
	                            SYSCTRL_OSC8M_FRANGE(hri_sysctrl_read_OSC8M_FRANGE_bf(hw)) |
    12b0:	0f9b      	lsrs	r3, r3, #30
    12b2:	079b      	lsls	r3, r3, #30
#if CONF_OSC8M_OVERWRITE_CALIBRATION == 1
	                                SYSCTRL_OSC8M_CALIB(CONF_OSC8M_CALIB) |
#else
	                                SYSCTRL_OSC8M_CALIB(calib) |
    12b4:	0409      	lsls	r1, r1, #16
    12b6:	480c      	ldr	r0, [pc, #48]	; (12e8 <_sysctrl_init_sources+0x40>)
    12b8:	4001      	ands	r1, r0
#endif
	                                SYSCTRL_OSC8M_PRESC(CONF_OSC8M_PRESC)
	                                | (CONF_OSC8M_RUNSTDBY << SYSCTRL_OSC8M_RUNSTDBY_Pos)
    12ba:	430b      	orrs	r3, r1
	hri_sysctrl_write_OSC8M_reg(hw,
    12bc:	2102      	movs	r1, #2
    12be:	430b      	orrs	r3, r1
}

static inline void hri_sysctrl_write_OSC8M_reg(const void *const hw, hri_sysctrl_osc8m_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC8M.reg = data;
    12c0:	6213      	str	r3, [r2, #32]
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    12c2:	6993      	ldr	r3, [r2, #24]
    12c4:	430b      	orrs	r3, r1
    12c6:	6193      	str	r3, [r2, #24]
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    12c8:	7f13      	ldrb	r3, [r2, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    12ca:	311d      	adds	r1, #29
    12cc:	400b      	ands	r3, r1
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    12ce:	7713      	strb	r3, [r2, #28]
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_OSC8MRDY) >> SYSCTRL_PCLKSR_OSC8MRDY_Pos;
    12d0:	4b04      	ldr	r3, [pc, #16]	; (12e4 <_sysctrl_init_sources+0x3c>)
    12d2:	68db      	ldr	r3, [r3, #12]
#endif
#endif

#if CONF_OSC8M_CONFIG == 1
#if CONF_OSC8M_ENABLE == 1
	while (!hri_sysctrl_get_PCLKSR_OSC8MRDY_bit(hw))
    12d4:	071b      	lsls	r3, r3, #28
    12d6:	d5fb      	bpl.n	12d0 <_sysctrl_init_sources+0x28>
	((Sysctrl *)hw)->OSC8M.reg |= SYSCTRL_OSC8M_ONDEMAND;
    12d8:	4a02      	ldr	r2, [pc, #8]	; (12e4 <_sysctrl_init_sources+0x3c>)
    12da:	6a13      	ldr	r3, [r2, #32]
    12dc:	2180      	movs	r1, #128	; 0x80
    12de:	430b      	orrs	r3, r1
    12e0:	6213      	str	r3, [r2, #32]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    12e2:	4770      	bx	lr
    12e4:	40000800 	.word	0x40000800
    12e8:	0fff0000 	.word	0x0fff0000

000012ec <_sysctrl_init_referenced_generators>:
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    12ec:	4a02      	ldr	r2, [pc, #8]	; (12f8 <_sysctrl_init_referenced_generators+0xc>)
    12ee:	6993      	ldr	r3, [r2, #24]
    12f0:	2102      	movs	r1, #2
    12f2:	438b      	bics	r3, r1
    12f4:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    12f6:	4770      	bx	lr
    12f8:	40000800 	.word	0x40000800

000012fc <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    12fc:	4b02      	ldr	r3, [pc, #8]	; (1308 <_system_time_init+0xc>)
    12fe:	4a03      	ldr	r2, [pc, #12]	; (130c <_system_time_init+0x10>)
    1300:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1302:	2205      	movs	r2, #5
    1304:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    1306:	4770      	bx	lr
    1308:	e000e010 	.word	0xe000e010
    130c:	00ffffff 	.word	0x00ffffff

00001310 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1310:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1312:	4b01      	ldr	r3, [pc, #4]	; (1318 <_delay_init+0x8>)
    1314:	4798      	blx	r3
}
    1316:	bd10      	pop	{r4, pc}
    1318:	000012fd 	.word	0x000012fd

0000131c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    131c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    131e:	e00b      	b.n	1338 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    1320:	4b0b      	ldr	r3, [pc, #44]	; (1350 <_delay_cycles+0x34>)
    1322:	480c      	ldr	r0, [pc, #48]	; (1354 <_delay_cycles+0x38>)
    1324:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    1326:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1328:	4b09      	ldr	r3, [pc, #36]	; (1350 <_delay_cycles+0x34>)
    132a:	681b      	ldr	r3, [r3, #0]
    132c:	03db      	lsls	r3, r3, #15
    132e:	d5fb      	bpl.n	1328 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1330:	4b09      	ldr	r3, [pc, #36]	; (1358 <_delay_cycles+0x3c>)
    1332:	469c      	mov	ip, r3
    1334:	4461      	add	r1, ip
	while (n--) {
    1336:	0010      	movs	r0, r2
    1338:	1e42      	subs	r2, r0, #1
    133a:	b2d2      	uxtb	r2, r2
    133c:	2800      	cmp	r0, #0
    133e:	d1ef      	bne.n	1320 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1340:	4b03      	ldr	r3, [pc, #12]	; (1350 <_delay_cycles+0x34>)
    1342:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1344:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1346:	4b02      	ldr	r3, [pc, #8]	; (1350 <_delay_cycles+0x34>)
    1348:	681b      	ldr	r3, [r3, #0]
    134a:	03db      	lsls	r3, r3, #15
    134c:	d5fb      	bpl.n	1346 <_delay_cycles+0x2a>
		;
}
    134e:	4770      	bx	lr
    1350:	e000e010 	.word	0xe000e010
    1354:	00ffffff 	.word	0x00ffffff
    1358:	ff000001 	.word	0xff000001

0000135c <main>:
uint8_t NumberSamples = 10;

uint8_t i2c_read_data(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len);

int main(void)
{
    135c:	b5f0      	push	{r4, r5, r6, r7, lr}
    135e:	b085      	sub	sp, #20
	/* Initializes MCU, drivers and middle-ware */
	atmel_start_init();
    1360:	4b43      	ldr	r3, [pc, #268]	; (1470 <main+0x114>)
    1362:	4798      	blx	r3
	sht40x_basic_initialize(SHT40_AD1B_VARIANT);
    1364:	2000      	movs	r0, #0
    1366:	4b43      	ldr	r3, [pc, #268]	; (1474 <main+0x118>)
    1368:	4798      	blx	r3
	sht40x_info(&sht40xInfo);
    136a:	4c43      	ldr	r4, [pc, #268]	; (1478 <main+0x11c>)
    136c:	0020      	movs	r0, r4
    136e:	4b43      	ldr	r3, [pc, #268]	; (147c <main+0x120>)
    1370:	4798      	blx	r3
	
	sht40x_interface_debug_print("Chip Name: \t%s\r\n", sht40xInfo.chip_name);
    1372:	0021      	movs	r1, r4
    1374:	4842      	ldr	r0, [pc, #264]	; (1480 <main+0x124>)
    1376:	4d43      	ldr	r5, [pc, #268]	; (1484 <main+0x128>)
    1378:	47a8      	blx	r5
	sht40x_interface_debug_print("Manufacturer: \t%s\r\n",sht40xInfo.manufacturer_name);
    137a:	0021      	movs	r1, r4
    137c:	310a      	adds	r1, #10
    137e:	4842      	ldr	r0, [pc, #264]	; (1488 <main+0x12c>)
    1380:	47a8      	blx	r5
	sht40x_interface_debug_print("Interface Protocol: \t%s\r\n", sht40xInfo.interface);
    1382:	0021      	movs	r1, r4
    1384:	3123      	adds	r1, #35	; 0x23
    1386:	4841      	ldr	r0, [pc, #260]	; (148c <main+0x130>)
    1388:	47a8      	blx	r5
	sht40x_interface_debug_print("Supply Volt Max: \t%.1f V\r\n",sht40xInfo.supply_voltage_max_v);
    138a:	4e41      	ldr	r6, [pc, #260]	; (1490 <main+0x134>)
    138c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    138e:	47b0      	blx	r6
    1390:	0002      	movs	r2, r0
    1392:	000b      	movs	r3, r1
    1394:	483f      	ldr	r0, [pc, #252]	; (1494 <main+0x138>)
    1396:	47a8      	blx	r5
	sht40x_interface_debug_print("Supply Volt Min: \t%.1f V\r\n",sht40xInfo.supply_voltage_min_v);
    1398:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    139a:	47b0      	blx	r6
    139c:	0002      	movs	r2, r0
    139e:	000b      	movs	r3, r1
    13a0:	483d      	ldr	r0, [pc, #244]	; (1498 <main+0x13c>)
    13a2:	47a8      	blx	r5
	sht40x_interface_debug_print("Maximum Current: \t%.1f uA\r\n",sht40xInfo.max_current_ma);
    13a4:	6b20      	ldr	r0, [r4, #48]	; 0x30
    13a6:	47b0      	blx	r6
    13a8:	0002      	movs	r2, r0
    13aa:	000b      	movs	r3, r1
    13ac:	483b      	ldr	r0, [pc, #236]	; (149c <main+0x140>)
    13ae:	47a8      	blx	r5
	sht40x_interface_debug_print("Max Temperature: \t%.1f C\r\n",sht40xInfo.temperature_max);
    13b0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    13b2:	47b0      	blx	r6
    13b4:	0002      	movs	r2, r0
    13b6:	000b      	movs	r3, r1
    13b8:	4839      	ldr	r0, [pc, #228]	; (14a0 <main+0x144>)
    13ba:	47a8      	blx	r5
	sht40x_interface_debug_print("Diver Version: \t\tV%.1f.%.2d\r\n",(sht40xInfo.driver_version /1000), (uint8_t)(sht40xInfo.driver_version - (uint8_t)(sht40xInfo.driver_version / 100)*100));
    13bc:	6be4      	ldr	r4, [r4, #60]	; 0x3c
    13be:	4f39      	ldr	r7, [pc, #228]	; (14a4 <main+0x148>)
    13c0:	4939      	ldr	r1, [pc, #228]	; (14a8 <main+0x14c>)
    13c2:	1c20      	adds	r0, r4, #0
    13c4:	47b8      	blx	r7
    13c6:	9003      	str	r0, [sp, #12]
    13c8:	4938      	ldr	r1, [pc, #224]	; (14ac <main+0x150>)
    13ca:	1c20      	adds	r0, r4, #0
    13cc:	47b8      	blx	r7
    13ce:	4f38      	ldr	r7, [pc, #224]	; (14b0 <main+0x154>)
    13d0:	47b8      	blx	r7
    13d2:	b2c3      	uxtb	r3, r0
    13d4:	2064      	movs	r0, #100	; 0x64
    13d6:	4358      	muls	r0, r3
    13d8:	4b36      	ldr	r3, [pc, #216]	; (14b4 <main+0x158>)
    13da:	4798      	blx	r3
    13dc:	1c01      	adds	r1, r0, #0
    13de:	1c20      	adds	r0, r4, #0
    13e0:	4b35      	ldr	r3, [pc, #212]	; (14b8 <main+0x15c>)
    13e2:	4798      	blx	r3
    13e4:	47b8      	blx	r7
    13e6:	b2c4      	uxtb	r4, r0
    13e8:	9803      	ldr	r0, [sp, #12]
    13ea:	47b0      	blx	r6
    13ec:	0002      	movs	r2, r0
    13ee:	000b      	movs	r3, r1
    13f0:	9400      	str	r4, [sp, #0]
    13f2:	4832      	ldr	r0, [pc, #200]	; (14bc <main+0x160>)
    13f4:	47a8      	blx	r5
    13f6:	e012      	b.n	141e <main+0xc2>
		sht40x_interface_debug_print("\nTemp C: %.2f\n", dataRead.temperature_C);
		sht40x_interface_debug_print("Temp F: %.2f\n", dataRead.temperature_F);
		sht40x_interface_debug_print("Humidity: %.2f\n", dataRead.humidity);
		        
		for(int index = 0; index < RESPONSE_LENGTH; index++){
			sht40x_interface_debug_print("raw data: 0x%.2x\n", dataRead.rawData[index]);
    13f8:	4b31      	ldr	r3, [pc, #196]	; (14c0 <main+0x164>)
    13fa:	191b      	adds	r3, r3, r4
    13fc:	7b19      	ldrb	r1, [r3, #12]
    13fe:	4831      	ldr	r0, [pc, #196]	; (14c4 <main+0x168>)
    1400:	4b20      	ldr	r3, [pc, #128]	; (1484 <main+0x128>)
    1402:	4798      	blx	r3
		for(int index = 0; index < RESPONSE_LENGTH; index++){
    1404:	3401      	adds	r4, #1
    1406:	2c05      	cmp	r4, #5
    1408:	ddf6      	ble.n	13f8 <main+0x9c>
		}
		        
		err = sht40x_basic_get_serial_number( (uint32_t*)&UID );                                                 /**< Read sensor unique ID (Serial number) */
    140a:	4c2f      	ldr	r4, [pc, #188]	; (14c8 <main+0x16c>)
    140c:	0020      	movs	r0, r4
    140e:	4b2f      	ldr	r3, [pc, #188]	; (14cc <main+0x170>)
    1410:	4798      	blx	r3
    1412:	4b2f      	ldr	r3, [pc, #188]	; (14d0 <main+0x174>)
    1414:	6018      	str	r0, [r3, #0]
		sht40x_interface_debug_print("\nserial number : %lu\n", UID);
    1416:	6821      	ldr	r1, [r4, #0]
    1418:	482e      	ldr	r0, [pc, #184]	; (14d4 <main+0x178>)
    141a:	4b1a      	ldr	r3, [pc, #104]	; (1484 <main+0x128>)
    141c:	4798      	blx	r3
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    141e:	2280      	movs	r2, #128	; 0x80
    1420:	0352      	lsls	r2, r2, #13
    1422:	23c0      	movs	r3, #192	; 0xc0
    1424:	05db      	lsls	r3, r3, #23
    1426:	61da      	str	r2, [r3, #28]
		sht40x_interface_delay_ms(3000);
    1428:	4c2b      	ldr	r4, [pc, #172]	; (14d8 <main+0x17c>)
    142a:	0020      	movs	r0, r4
    142c:	4b2b      	ldr	r3, [pc, #172]	; (14dc <main+0x180>)
    142e:	4798      	blx	r3
		delay_ms(3000);
    1430:	0020      	movs	r0, r4
    1432:	4b2b      	ldr	r3, [pc, #172]	; (14e0 <main+0x184>)
    1434:	4798      	blx	r3
		err =  sht40x_basic_get_temp_rh(SHT40X_PRECISION_HIGH, &dataRead);                                      /**< Take temperature and humidity measurement */
    1436:	4c22      	ldr	r4, [pc, #136]	; (14c0 <main+0x164>)
    1438:	0021      	movs	r1, r4
    143a:	2000      	movs	r0, #0
    143c:	4b29      	ldr	r3, [pc, #164]	; (14e4 <main+0x188>)
    143e:	4798      	blx	r3
    1440:	4b23      	ldr	r3, [pc, #140]	; (14d0 <main+0x174>)
    1442:	6018      	str	r0, [r3, #0]
		sht40x_interface_debug_print("\nTemp C: %.2f\n", dataRead.temperature_C);
    1444:	4e12      	ldr	r6, [pc, #72]	; (1490 <main+0x134>)
    1446:	6820      	ldr	r0, [r4, #0]
    1448:	47b0      	blx	r6
    144a:	0002      	movs	r2, r0
    144c:	000b      	movs	r3, r1
    144e:	4826      	ldr	r0, [pc, #152]	; (14e8 <main+0x18c>)
    1450:	4d0c      	ldr	r5, [pc, #48]	; (1484 <main+0x128>)
    1452:	47a8      	blx	r5
		sht40x_interface_debug_print("Temp F: %.2f\n", dataRead.temperature_F);
    1454:	6860      	ldr	r0, [r4, #4]
    1456:	47b0      	blx	r6
    1458:	0002      	movs	r2, r0
    145a:	000b      	movs	r3, r1
    145c:	4823      	ldr	r0, [pc, #140]	; (14ec <main+0x190>)
    145e:	47a8      	blx	r5
		sht40x_interface_debug_print("Humidity: %.2f\n", dataRead.humidity);
    1460:	68a0      	ldr	r0, [r4, #8]
    1462:	47b0      	blx	r6
    1464:	0002      	movs	r2, r0
    1466:	000b      	movs	r3, r1
    1468:	4821      	ldr	r0, [pc, #132]	; (14f0 <main+0x194>)
    146a:	47a8      	blx	r5
		for(int index = 0; index < RESPONSE_LENGTH; index++){
    146c:	2400      	movs	r4, #0
    146e:	e7ca      	b.n	1406 <main+0xaa>
    1470:	00000115 	.word	0x00000115
    1474:	0000197d 	.word	0x0000197d
    1478:	20000158 	.word	0x20000158
    147c:	00001905 	.word	0x00001905
    1480:	000047c4 	.word	0x000047c4
    1484:	00001ae9 	.word	0x00001ae9
    1488:	000047d8 	.word	0x000047d8
    148c:	000047ec 	.word	0x000047ec
    1490:	00003bf5 	.word	0x00003bf5
    1494:	00004808 	.word	0x00004808
    1498:	00004824 	.word	0x00004824
    149c:	00004840 	.word	0x00004840
    14a0:	0000485c 	.word	0x0000485c
    14a4:	00002029 	.word	0x00002029
    14a8:	447a0000 	.word	0x447a0000
    14ac:	42c80000 	.word	0x42c80000
    14b0:	00001cd5 	.word	0x00001cd5
    14b4:	000029c1 	.word	0x000029c1
    14b8:	00002649 	.word	0x00002649
    14bc:	00004878 	.word	0x00004878
    14c0:	20000138 	.word	0x20000138
    14c4:	000048c8 	.word	0x000048c8
    14c8:	2000014c 	.word	0x2000014c
    14cc:	00001a89 	.word	0x00001a89
    14d0:	20000150 	.word	0x20000150
    14d4:	000048dc 	.word	0x000048dc
    14d8:	00000bb8 	.word	0x00000bb8
    14dc:	00001add 	.word	0x00001add
    14e0:	000003f1 	.word	0x000003f1
    14e4:	00001a59 	.word	0x00001a59
    14e8:	00004898 	.word	0x00004898
    14ec:	000048a8 	.word	0x000048a8
    14f0:	000048b8 	.word	0x000048b8

000014f4 <serial_print>:
	}
}


void serial_print(char *const pBuffer, uint8_t u8Length)
{
    14f4:	b570      	push	{r4, r5, r6, lr}
    14f6:	b082      	sub	sp, #8
    14f8:	0006      	movs	r6, r0
    14fa:	000c      	movs	r4, r1
	struct io_descriptor *io;

	usart_async_get_io_descriptor(&USART_0, &io);
    14fc:	4d07      	ldr	r5, [pc, #28]	; (151c <serial_print+0x28>)
    14fe:	a901      	add	r1, sp, #4
    1500:	0028      	movs	r0, r5
    1502:	4b07      	ldr	r3, [pc, #28]	; (1520 <serial_print+0x2c>)
    1504:	4798      	blx	r3
	usart_async_enable(&USART_0);
    1506:	0028      	movs	r0, r5
    1508:	4b06      	ldr	r3, [pc, #24]	; (1524 <serial_print+0x30>)
    150a:	4798      	blx	r3

	io_write(io, (uint8_t*)pBuffer, u8Length);
    150c:	b2a2      	uxth	r2, r4
    150e:	0031      	movs	r1, r6
    1510:	9801      	ldr	r0, [sp, #4]
    1512:	4b05      	ldr	r3, [pc, #20]	; (1528 <serial_print+0x34>)
    1514:	4798      	blx	r3
	
}
    1516:	b002      	add	sp, #8
    1518:	bd70      	pop	{r4, r5, r6, pc}
    151a:	46c0      	nop			; (mov r8, r8)
    151c:	200000c4 	.word	0x200000c4
    1520:	00000785 	.word	0x00000785
    1524:	00000759 	.word	0x00000759
    1528:	000004e1 	.word	0x000004e1

0000152c <i2c_read_data>:

uint8_t i2c_read_data(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
    152c:	b5f0      	push	{r4, r5, r6, r7, lr}
    152e:	b083      	sub	sp, #12
    1530:	0005      	movs	r5, r0
    1532:	0016      	movs	r6, r2
    1534:	001f      	movs	r7, r3
	struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    1536:	4c0b      	ldr	r4, [pc, #44]	; (1564 <i2c_read_data+0x38>)
    1538:	a901      	add	r1, sp, #4
    153a:	0020      	movs	r0, r4
    153c:	4b0a      	ldr	r3, [pc, #40]	; (1568 <i2c_read_data+0x3c>)
    153e:	4798      	blx	r3
	i2c_m_sync_enable(&I2C_0);
    1540:	0020      	movs	r0, r4
    1542:	4b0a      	ldr	r3, [pc, #40]	; (156c <i2c_read_data+0x40>)
    1544:	4798      	blx	r3
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    1546:	b229      	sxth	r1, r5
    1548:	2280      	movs	r2, #128	; 0x80
    154a:	0112      	lsls	r2, r2, #4
    154c:	0020      	movs	r0, r4
    154e:	4b08      	ldr	r3, [pc, #32]	; (1570 <i2c_read_data+0x44>)
    1550:	4798      	blx	r3
	
	io_read(I2C_0_io, buf,  len);
    1552:	003a      	movs	r2, r7
    1554:	0031      	movs	r1, r6
    1556:	9801      	ldr	r0, [sp, #4]
    1558:	4b06      	ldr	r3, [pc, #24]	; (1574 <i2c_read_data+0x48>)
    155a:	4798      	blx	r3
	return 0;
}
    155c:	2000      	movs	r0, #0
    155e:	b003      	add	sp, #12
    1560:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1562:	46c0      	nop			; (mov r8, r8)
    1564:	20000114 	.word	0x20000114
    1568:	000004d7 	.word	0x000004d7
    156c:	000004b9 	.word	0x000004b9
    1570:	000004c5 	.word	0x000004c5
    1574:	00000519 	.word	0x00000519

00001578 <i2c_write_data>:

uint8_t i2c_write_data(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
    1578:	b570      	push	{r4, r5, r6, lr}
    157a:	b084      	sub	sp, #16
    157c:	0005      	movs	r5, r0
    157e:	466b      	mov	r3, sp
    1580:	1dde      	adds	r6, r3, #7
    1582:	71d9      	strb	r1, [r3, #7]
    struct io_descriptor *I2C_0_io;

    i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    1584:	4c0a      	ldr	r4, [pc, #40]	; (15b0 <i2c_write_data+0x38>)
    1586:	a903      	add	r1, sp, #12
    1588:	0020      	movs	r0, r4
    158a:	4b0a      	ldr	r3, [pc, #40]	; (15b4 <i2c_write_data+0x3c>)
    158c:	4798      	blx	r3
    i2c_m_sync_enable(&I2C_0);
    158e:	0020      	movs	r0, r4
    1590:	4b09      	ldr	r3, [pc, #36]	; (15b8 <i2c_write_data+0x40>)
    1592:	4798      	blx	r3
    i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    1594:	b229      	sxth	r1, r5
    1596:	2280      	movs	r2, #128	; 0x80
    1598:	0112      	lsls	r2, r2, #4
    159a:	0020      	movs	r0, r4
    159c:	4b07      	ldr	r3, [pc, #28]	; (15bc <i2c_write_data+0x44>)
    159e:	4798      	blx	r3
	
	io_write(I2C_0_io, (uint8_t *)&reg, 1);
    15a0:	2201      	movs	r2, #1
    15a2:	0031      	movs	r1, r6
    15a4:	9803      	ldr	r0, [sp, #12]
    15a6:	4b06      	ldr	r3, [pc, #24]	; (15c0 <i2c_write_data+0x48>)
    15a8:	4798      	blx	r3
	return 0;	
    15aa:	2000      	movs	r0, #0
    15ac:	b004      	add	sp, #16
    15ae:	bd70      	pop	{r4, r5, r6, pc}
    15b0:	20000114 	.word	0x20000114
    15b4:	000004d7 	.word	0x000004d7
    15b8:	000004b9 	.word	0x000004b9
    15bc:	000004c5 	.word	0x000004c5
    15c0:	000004e1 	.word	0x000004e1

000015c4 <a_sht40x_i2c_write>:
            - 0 success
            - 1 failed to write
* @note none
*/
uint8_t a_sht40x_i2c_write(sht40x_handle_t *const pHandle, uint8_t u8Reg, void *pBuf, uint8_t u8Length)
{
    15c4:	b510      	push	{r4, lr}
    if(pHandle->i2c_write(pHandle->i2c_address, u8Reg, (uint8_t*)pBuf, u8Length) !=  0)
    15c6:	68c4      	ldr	r4, [r0, #12]
    15c8:	b29b      	uxth	r3, r3
    15ca:	7e00      	ldrb	r0, [r0, #24]
    15cc:	47a0      	blx	r4
    15ce:	2800      	cmp	r0, #0
    15d0:	d100      	bne.n	15d4 <a_sht40x_i2c_write+0x10>
    {
        return 1;                                      /**< return an error if failed to execute */
    }
    return 0;                                          /**< return success */
}
    15d2:	bd10      	pop	{r4, pc}
        return 1;                                      /**< return an error if failed to execute */
    15d4:	2001      	movs	r0, #1
    15d6:	e7fc      	b.n	15d2 <a_sht40x_i2c_write+0xe>

000015d8 <a_sht40x_i2c_read>:
*          - 1 failed to read
* @note none
*/

uint8_t a_sht40x_i2c_read(sht40x_handle_t  *const pHandle, uint16_t u8Reg, void *pBuf, uint8_t u8Length)
{
    15d8:	b510      	push	{r4, lr}
    if(pHandle->i2c_read(pHandle->i2c_address, u8Reg, (uint8_t*)pBuf, u8Length) != 0)
    15da:	6884      	ldr	r4, [r0, #8]
    15dc:	b29b      	uxth	r3, r3
    15de:	b2c9      	uxtb	r1, r1
    15e0:	7e00      	ldrb	r0, [r0, #24]
    15e2:	47a0      	blx	r4
    15e4:	2800      	cmp	r0, #0
    15e6:	d100      	bne.n	15ea <a_sht40x_i2c_read+0x12>
    {
        return 1;                                       /**< return an error if failed to execute */
    }
    return 0;                                           /**< return success */
}
    15e8:	bd10      	pop	{r4, pc}
        return 1;                                       /**< return an error if failed to execute */
    15ea:	2001      	movs	r0, #1
    15ec:	e7fc      	b.n	15e8 <a_sht40x_i2c_read+0x10>
	...

000015f0 <a_sht40x_print_error_msg>:
* @param[in] *pBuffer point to the string to be printed
* @return none
* @note   none
*/
void a_sht40x_print_error_msg(sht40x_handle_t *const pHandle, char *const pBuffer)
{
    15f0:	b510      	push	{r4, lr}
#ifdef SHT40X_DEBUG_MODE
    pHandle->debug_print("sht40x: failed to %s.\r\n", pBuffer);
    15f2:	6943      	ldr	r3, [r0, #20]
    15f4:	4801      	ldr	r0, [pc, #4]	; (15fc <a_sht40x_print_error_msg+0xc>)
    15f6:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
}
    15f8:	bd10      	pop	{r4, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	00004900 	.word	0x00004900

00001600 <sht40x_init>:
 *            - 2 pHandle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t sht40x_init(sht40x_handle_t *pHandle)
{
    1600:	b510      	push	{r4, lr}
    1602:	1e04      	subs	r4, r0, #0

    if(pHandle == NULL)
    1604:	d031      	beq.n	166a <sht40x_init+0x6a>
        return 2;     /**< return failed error */
    if(pHandle->debug_print == NULL)
    1606:	6943      	ldr	r3, [r0, #20]
    1608:	2b00      	cmp	r3, #0
    160a:	d030      	beq.n	166e <sht40x_init+0x6e>
        return 3;      /**< return failed error */

    if(pHandle->delay_ms == NULL)
    160c:	6902      	ldr	r2, [r0, #16]
    160e:	2a00      	cmp	r2, #0
    1610:	d011      	beq.n	1636 <sht40x_init+0x36>
        pHandle->debug_print("sht40x: delay_ms is null\r\n");
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_init == NULL )
    1612:	6802      	ldr	r2, [r0, #0]
    1614:	2a00      	cmp	r2, #0
    1616:	d012      	beq.n	163e <sht40x_init+0x3e>
        pHandle->debug_print("sht40x: i2c_init is null\r\n");
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_deinit == NULL )
    1618:	6841      	ldr	r1, [r0, #4]
    161a:	2900      	cmp	r1, #0
    161c:	d013      	beq.n	1646 <sht40x_init+0x46>
        pHandle->debug_print("sht40x: i2c_deinit is null\r\n");
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_read == NULL )
    161e:	6881      	ldr	r1, [r0, #8]
    1620:	2900      	cmp	r1, #0
    1622:	d014      	beq.n	164e <sht40x_init+0x4e>
        pHandle->debug_print("sht40x: i2c_read is null\r\n");
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_write == NULL )
    1624:	68c1      	ldr	r1, [r0, #12]
    1626:	2900      	cmp	r1, #0
    1628:	d015      	beq.n	1656 <sht40x_init+0x56>
        pHandle->debug_print("sht40x: i2c_write is null\r\n");
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_init())
    162a:	4790      	blx	r2
    162c:	2800      	cmp	r0, #0
    162e:	d116      	bne.n	165e <sht40x_init+0x5e>
    {
        a_sht40x_print_error_msg(pHandle, "initialize i2c");
        return 1 ;
    }
    pHandle->inited = 1;
    1630:	2301      	movs	r3, #1
    1632:	76a3      	strb	r3, [r4, #26]
    return 0;                   /**< return success */
    1634:	e01a      	b.n	166c <sht40x_init+0x6c>
        pHandle->debug_print("sht40x: delay_ms is null\r\n");
    1636:	480f      	ldr	r0, [pc, #60]	; (1674 <sht40x_init+0x74>)
    1638:	4798      	blx	r3
        return 3;
    163a:	2003      	movs	r0, #3
    163c:	e016      	b.n	166c <sht40x_init+0x6c>
        pHandle->debug_print("sht40x: i2c_init is null\r\n");
    163e:	480e      	ldr	r0, [pc, #56]	; (1678 <sht40x_init+0x78>)
    1640:	4798      	blx	r3
        return 3;
    1642:	2003      	movs	r0, #3
    1644:	e012      	b.n	166c <sht40x_init+0x6c>
        pHandle->debug_print("sht40x: i2c_deinit is null\r\n");
    1646:	480d      	ldr	r0, [pc, #52]	; (167c <sht40x_init+0x7c>)
    1648:	4798      	blx	r3
        return 3;
    164a:	2003      	movs	r0, #3
    164c:	e00e      	b.n	166c <sht40x_init+0x6c>
        pHandle->debug_print("sht40x: i2c_read is null\r\n");
    164e:	480c      	ldr	r0, [pc, #48]	; (1680 <sht40x_init+0x80>)
    1650:	4798      	blx	r3
        return 3;
    1652:	2003      	movs	r0, #3
    1654:	e00a      	b.n	166c <sht40x_init+0x6c>
        pHandle->debug_print("sht40x: i2c_write is null\r\n");
    1656:	480b      	ldr	r0, [pc, #44]	; (1684 <sht40x_init+0x84>)
    1658:	4798      	blx	r3
        return 3;
    165a:	2003      	movs	r0, #3
    165c:	e006      	b.n	166c <sht40x_init+0x6c>
        a_sht40x_print_error_msg(pHandle, "initialize i2c");
    165e:	490a      	ldr	r1, [pc, #40]	; (1688 <sht40x_init+0x88>)
    1660:	0020      	movs	r0, r4
    1662:	4b0a      	ldr	r3, [pc, #40]	; (168c <sht40x_init+0x8c>)
    1664:	4798      	blx	r3
        return 1 ;
    1666:	2001      	movs	r0, #1
    1668:	e000      	b.n	166c <sht40x_init+0x6c>
        return 2;     /**< return failed error */
    166a:	2002      	movs	r0, #2
}
    166c:	bd10      	pop	{r4, pc}
        return 3;      /**< return failed error */
    166e:	2003      	movs	r0, #3
    1670:	e7fc      	b.n	166c <sht40x_init+0x6c>
    1672:	46c0      	nop			; (mov r8, r8)
    1674:	00004918 	.word	0x00004918
    1678:	00004934 	.word	0x00004934
    167c:	00004950 	.word	0x00004950
    1680:	00004970 	.word	0x00004970
    1684:	0000498c 	.word	0x0000498c
    1688:	000049a8 	.word	0x000049a8
    168c:	000015f1 	.word	0x000015f1

00001690 <sht40x_set_addr>:
 * @note      none
 */
uint8_t sht40x_set_addr(sht40x_handle_t *const pHandle)
{

    if(pHandle == NULL)
    1690:	2800      	cmp	r0, #0
    1692:	d008      	beq.n	16a6 <sht40x_set_addr+0x16>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
    1694:	7e83      	ldrb	r3, [r0, #26]
    1696:	2b01      	cmp	r3, #1
    1698:	d001      	beq.n	169e <sht40x_set_addr+0xe>
        return 3;      /**< return failed error */
    169a:	2003      	movs	r0, #3
        a_sht40x_print_error_msg(pHandle, "set i2c address");
        return 1;           /*< failed */
    }

    return 0;     /*< success */
}
    169c:	4770      	bx	lr
    pHandle->i2c_address = pHandle->addres;
    169e:	7ec3      	ldrb	r3, [r0, #27]
    16a0:	7603      	strb	r3, [r0, #24]
    return 0;     /*< success */
    16a2:	2000      	movs	r0, #0
    16a4:	e7fa      	b.n	169c <sht40x_set_addr+0xc>
        return 2;     /**< return failed error */
    16a6:	2002      	movs	r0, #2
    16a8:	e7f8      	b.n	169c <sht40x_set_addr+0xc>

000016aa <sht40x_set_variant>:
 * @note      none
 */
uint8_t sht40x_set_variant(sht40x_handle_t *const pHandle, sht40x_variant_t variant)
{

    if(pHandle == NULL)
    16aa:	2800      	cmp	r0, #0
    16ac:	d01f      	beq.n	16ee <sht40x_set_variant+0x44>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
    16ae:	7e83      	ldrb	r3, [r0, #26]
    16b0:	2b01      	cmp	r3, #1
    16b2:	d001      	beq.n	16b8 <sht40x_set_variant+0xe>
        return 3;      /**< return failed error */
    16b4:	2003      	movs	r0, #3
        }

    }

    return 0;   /**< success */
}
    16b6:	4770      	bx	lr
    pHandle->variant = variant;
    16b8:	7641      	strb	r1, [r0, #25]
    switch(variant)
    16ba:	2901      	cmp	r1, #1
    16bc:	d00b      	beq.n	16d6 <sht40x_set_variant+0x2c>
    16be:	2900      	cmp	r1, #0
    16c0:	d005      	beq.n	16ce <sht40x_set_variant+0x24>
    16c2:	2902      	cmp	r1, #2
    16c4:	d00b      	beq.n	16de <sht40x_set_variant+0x34>
    16c6:	2903      	cmp	r1, #3
    16c8:	d00d      	beq.n	16e6 <sht40x_set_variant+0x3c>
    return 0;   /**< success */
    16ca:	2000      	movs	r0, #0
    16cc:	e7f3      	b.n	16b6 <sht40x_set_variant+0xc>
            pHandle->addres = (sht40x_i2c_address_t)SHT40_AD1B_IIC_ADDRESS;
    16ce:	2344      	movs	r3, #68	; 0x44
    16d0:	76c3      	strb	r3, [r0, #27]
    return 0;   /**< success */
    16d2:	2000      	movs	r0, #0
            break;
    16d4:	e7ef      	b.n	16b6 <sht40x_set_variant+0xc>
            pHandle->addres = (sht40x_i2c_address_t)SHT40_BD1B_IIC_ADDRESS;
    16d6:	2345      	movs	r3, #69	; 0x45
    16d8:	76c3      	strb	r3, [r0, #27]
    return 0;   /**< success */
    16da:	2000      	movs	r0, #0
            break;
    16dc:	e7eb      	b.n	16b6 <sht40x_set_variant+0xc>
            pHandle->addres = (sht40x_i2c_address_t)SHT41_AD1B_IIC_ADDRESS;
    16de:	2344      	movs	r3, #68	; 0x44
    16e0:	76c3      	strb	r3, [r0, #27]
    return 0;   /**< success */
    16e2:	2000      	movs	r0, #0
            break;
    16e4:	e7e7      	b.n	16b6 <sht40x_set_variant+0xc>
            pHandle->addres = (sht40x_i2c_address_t)SHT45_AD1B_IIC_ADDRESS;
    16e6:	2344      	movs	r3, #68	; 0x44
    16e8:	76c3      	strb	r3, [r0, #27]
    return 0;   /**< success */
    16ea:	2000      	movs	r0, #0
            break;
    16ec:	e7e3      	b.n	16b6 <sht40x_set_variant+0xc>
        return 2;     /**< return failed error */
    16ee:	2002      	movs	r0, #2
    16f0:	e7e1      	b.n	16b6 <sht40x_set_variant+0xc>
	...

000016f4 <sht40x_get_temp_rh>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_get_temp_rh(sht40x_handle_t *const pHandle,  sht40x_precision_t precision, sht40x_data_t *pData)
{
    16f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    16f6:	46de      	mov	lr, fp
    16f8:	4657      	mov	r7, sl
    16fa:	464e      	mov	r6, r9
    16fc:	4645      	mov	r5, r8
    16fe:	b5e0      	push	{r5, r6, r7, lr}
    1700:	b083      	sub	sp, #12
    1702:	0004      	movs	r4, r0
    1704:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t pStatus[RESPONSE_LENGTH];

    if(pHandle == NULL)
    1706:	2800      	cmp	r0, #0
    1708:	d100      	bne.n	170c <sht40x_get_temp_rh+0x18>
    170a:	e077      	b.n	17fc <sht40x_get_temp_rh+0x108>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
    170c:	7e83      	ldrb	r3, [r0, #26]
    170e:	2b01      	cmp	r3, #1
    1710:	d008      	beq.n	1724 <sht40x_get_temp_rh+0x30>
        return 3;      /**< return failed error */
    1712:	2503      	movs	r5, #3
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */

    memcpy(pData->rawData, pStatus, RESPONSE_LENGTH);

    return 0;
}
    1714:	0028      	movs	r0, r5
    1716:	b003      	add	sp, #12
    1718:	bc3c      	pop	{r2, r3, r4, r5}
    171a:	4690      	mov	r8, r2
    171c:	4699      	mov	r9, r3
    171e:	46a2      	mov	sl, r4
    1720:	46ab      	mov	fp, r5
    1722:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_sht40x_i2c_write(pHandle, READ_PRECISION[precision], DUMMY_DATA, 0);
    1724:	4b36      	ldr	r3, [pc, #216]	; (1800 <sht40x_get_temp_rh+0x10c>)
    1726:	5c59      	ldrb	r1, [r3, r1]
    1728:	2300      	movs	r3, #0
    172a:	2200      	movs	r2, #0
    172c:	4d35      	ldr	r5, [pc, #212]	; (1804 <sht40x_get_temp_rh+0x110>)
    172e:	47a8      	blx	r5
    1730:	1e05      	subs	r5, r0, #0
    if(err)
    1732:	d157      	bne.n	17e4 <sht40x_get_temp_rh+0xf0>
    pHandle->delay_ms(10);      /**< wait 10 ms for conversion to complete */
    1734:	200a      	movs	r0, #10
    1736:	6923      	ldr	r3, [r4, #16]
    1738:	4798      	blx	r3
    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)pStatus, RESPONSE_LENGTH);  /**< read result */
    173a:	2306      	movs	r3, #6
    173c:	466a      	mov	r2, sp
    173e:	2100      	movs	r1, #0
    1740:	0020      	movs	r0, r4
    1742:	4d31      	ldr	r5, [pc, #196]	; (1808 <sht40x_get_temp_rh+0x114>)
    1744:	47a8      	blx	r5
    1746:	1e05      	subs	r5, r0, #0
    if(err)
    1748:	d151      	bne.n	17ee <sht40x_get_temp_rh+0xfa>
    pData->temperature_C = (pStatus[0] << 8) |  pStatus[1];
    174a:	466b      	mov	r3, sp
    174c:	7818      	ldrb	r0, [r3, #0]
    174e:	0200      	lsls	r0, r0, #8
    1750:	785b      	ldrb	r3, [r3, #1]
    1752:	4318      	orrs	r0, r3
    1754:	4b2d      	ldr	r3, [pc, #180]	; (180c <sht40x_get_temp_rh+0x118>)
    1756:	469b      	mov	fp, r3
    1758:	4798      	blx	r3
    pData->temperature_C = ((pData->temperature_C/65535.0) * 175) - 45;
    175a:	4b2d      	ldr	r3, [pc, #180]	; (1810 <sht40x_get_temp_rh+0x11c>)
    175c:	469a      	mov	sl, r3
    175e:	4798      	blx	r3
    1760:	4b2c      	ldr	r3, [pc, #176]	; (1814 <sht40x_get_temp_rh+0x120>)
    1762:	4699      	mov	r9, r3
    1764:	2200      	movs	r2, #0
    1766:	4b2c      	ldr	r3, [pc, #176]	; (1818 <sht40x_get_temp_rh+0x124>)
    1768:	47c8      	blx	r9
    176a:	4b2c      	ldr	r3, [pc, #176]	; (181c <sht40x_get_temp_rh+0x128>)
    176c:	4698      	mov	r8, r3
    176e:	2200      	movs	r2, #0
    1770:	4b2b      	ldr	r3, [pc, #172]	; (1820 <sht40x_get_temp_rh+0x12c>)
    1772:	47c0      	blx	r8
    1774:	4f2b      	ldr	r7, [pc, #172]	; (1824 <sht40x_get_temp_rh+0x130>)
    1776:	2200      	movs	r2, #0
    1778:	4b2b      	ldr	r3, [pc, #172]	; (1828 <sht40x_get_temp_rh+0x134>)
    177a:	47b8      	blx	r7
    177c:	4c2b      	ldr	r4, [pc, #172]	; (182c <sht40x_get_temp_rh+0x138>)
    177e:	47a0      	blx	r4
    1780:	6030      	str	r0, [r6, #0]
    pData->temperature_F = (pData->temperature_C * 9/5) + 32;
    1782:	492b      	ldr	r1, [pc, #172]	; (1830 <sht40x_get_temp_rh+0x13c>)
    1784:	4b2b      	ldr	r3, [pc, #172]	; (1834 <sht40x_get_temp_rh+0x140>)
    1786:	4798      	blx	r3
    1788:	492b      	ldr	r1, [pc, #172]	; (1838 <sht40x_get_temp_rh+0x144>)
    178a:	4b2c      	ldr	r3, [pc, #176]	; (183c <sht40x_get_temp_rh+0x148>)
    178c:	4798      	blx	r3
    178e:	2184      	movs	r1, #132	; 0x84
    1790:	05c9      	lsls	r1, r1, #23
    1792:	4b2b      	ldr	r3, [pc, #172]	; (1840 <sht40x_get_temp_rh+0x14c>)
    1794:	4798      	blx	r3
    1796:	6070      	str	r0, [r6, #4]
    pData->humidity = (pStatus[3] << 8) | pStatus[4];
    1798:	466b      	mov	r3, sp
    179a:	78d8      	ldrb	r0, [r3, #3]
    179c:	0200      	lsls	r0, r0, #8
    179e:	791b      	ldrb	r3, [r3, #4]
    17a0:	4318      	orrs	r0, r3
    17a2:	47d8      	blx	fp
    pData->humidity = ((pData->humidity/65535.0) * 125) - 6;
    17a4:	47d0      	blx	sl
    17a6:	2200      	movs	r2, #0
    17a8:	4b1b      	ldr	r3, [pc, #108]	; (1818 <sht40x_get_temp_rh+0x124>)
    17aa:	47c8      	blx	r9
    17ac:	2200      	movs	r2, #0
    17ae:	4b25      	ldr	r3, [pc, #148]	; (1844 <sht40x_get_temp_rh+0x150>)
    17b0:	47c0      	blx	r8
    17b2:	2200      	movs	r2, #0
    17b4:	4b24      	ldr	r3, [pc, #144]	; (1848 <sht40x_get_temp_rh+0x154>)
    17b6:	47b8      	blx	r7
    17b8:	47a0      	blx	r4
    17ba:	1c04      	adds	r4, r0, #0
    pData->humidity =  pData->humidity > HUMIDITY_MAX ? HUMIDITY_MAX: pData->humidity;                     /**< if humidity is high than max allowed, set to 100 */
    17bc:	4923      	ldr	r1, [pc, #140]	; (184c <sht40x_get_temp_rh+0x158>)
    17be:	4b24      	ldr	r3, [pc, #144]	; (1850 <sht40x_get_temp_rh+0x15c>)
    17c0:	4798      	blx	r3
    17c2:	2800      	cmp	r0, #0
    17c4:	d000      	beq.n	17c8 <sht40x_get_temp_rh+0xd4>
    17c6:	4c21      	ldr	r4, [pc, #132]	; (184c <sht40x_get_temp_rh+0x158>)
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */
    17c8:	2100      	movs	r1, #0
    17ca:	1c20      	adds	r0, r4, #0
    17cc:	4b21      	ldr	r3, [pc, #132]	; (1854 <sht40x_get_temp_rh+0x160>)
    17ce:	4798      	blx	r3
    17d0:	2800      	cmp	r0, #0
    17d2:	d111      	bne.n	17f8 <sht40x_get_temp_rh+0x104>
    17d4:	60b4      	str	r4, [r6, #8]
    memcpy(pData->rawData, pStatus, RESPONSE_LENGTH);
    17d6:	0030      	movs	r0, r6
    17d8:	300c      	adds	r0, #12
    17da:	2206      	movs	r2, #6
    17dc:	4669      	mov	r1, sp
    17de:	4b1e      	ldr	r3, [pc, #120]	; (1858 <sht40x_get_temp_rh+0x164>)
    17e0:	4798      	blx	r3
    return 0;
    17e2:	e797      	b.n	1714 <sht40x_get_temp_rh+0x20>
        a_sht40x_print_error_msg(pHandle, "write temp and humidity cmd");
    17e4:	491d      	ldr	r1, [pc, #116]	; (185c <sht40x_get_temp_rh+0x168>)
    17e6:	0020      	movs	r0, r4
    17e8:	4b1d      	ldr	r3, [pc, #116]	; (1860 <sht40x_get_temp_rh+0x16c>)
    17ea:	4798      	blx	r3
        return err;  /**< failed*/
    17ec:	e792      	b.n	1714 <sht40x_get_temp_rh+0x20>
        a_sht40x_print_error_msg(pHandle, "read temp and humidity");
    17ee:	491d      	ldr	r1, [pc, #116]	; (1864 <sht40x_get_temp_rh+0x170>)
    17f0:	0020      	movs	r0, r4
    17f2:	4b1b      	ldr	r3, [pc, #108]	; (1860 <sht40x_get_temp_rh+0x16c>)
    17f4:	4798      	blx	r3
        return err;  /**< failed*/
    17f6:	e78d      	b.n	1714 <sht40x_get_temp_rh+0x20>
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */
    17f8:	2400      	movs	r4, #0
    17fa:	e7eb      	b.n	17d4 <sht40x_get_temp_rh+0xe0>
        return 2;     /**< return failed error */
    17fc:	2502      	movs	r5, #2
    17fe:	e789      	b.n	1714 <sht40x_get_temp_rh+0x20>
    1800:	000048f4 	.word	0x000048f4
    1804:	000015c5 	.word	0x000015c5
    1808:	000015d9 	.word	0x000015d9
    180c:	000029c1 	.word	0x000029c1
    1810:	00003bf5 	.word	0x00003bf5
    1814:	00002a61 	.word	0x00002a61
    1818:	40efffe0 	.word	0x40efffe0
    181c:	000030c9 	.word	0x000030c9
    1820:	4065e000 	.word	0x4065e000
    1824:	000035c9 	.word	0x000035c9
    1828:	40468000 	.word	0x40468000
    182c:	00003c99 	.word	0x00003c99
    1830:	41100000 	.word	0x41100000
    1834:	00002409 	.word	0x00002409
    1838:	40a00000 	.word	0x40a00000
    183c:	00002029 	.word	0x00002029
    1840:	00001d05 	.word	0x00001d05
    1844:	405f4000 	.word	0x405f4000
    1848:	40180000 	.word	0x40180000
    184c:	42c80000 	.word	0x42c80000
    1850:	00001cad 	.word	0x00001cad
    1854:	00001c85 	.word	0x00001c85
    1858:	00003e31 	.word	0x00003e31
    185c:	000049f0 	.word	0x000049f0
    1860:	000015f1 	.word	0x000015f1
    1864:	00004a0c 	.word	0x00004a0c

00001868 <sht40x_get_serial_number>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_get_serial_number(sht40x_handle_t *const pHandle, uint32_t *pSerial_Number)
{
    1868:	b570      	push	{r4, r5, r6, lr}
    186a:	b082      	sub	sp, #8
    186c:	0004      	movs	r4, r0
    186e:	000e      	movs	r6, r1
    uint8_t temp_data[4];         /**< temporary data to hold serial number */
    uint8_t count = 3;
    uint8_t dataOut[4];
    int index;

    if(pHandle == NULL)
    1870:	2800      	cmp	r0, #0
    1872:	d039      	beq.n	18e8 <sht40x_get_serial_number+0x80>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
    1874:	7e83      	ldrb	r3, [r0, #26]
    1876:	2b01      	cmp	r3, #1
    1878:	d003      	beq.n	1882 <sht40x_get_serial_number+0x1a>
        return 3;      /**< return failed error */
    187a:	2503      	movs	r5, #3
    }
   memcpy(serial.pBuffer, dataOut, 4);
  *pSerial_Number = serial.raw;

    return 0;           /**< success */
}
    187c:	0028      	movs	r0, r5
    187e:	b002      	add	sp, #8
    1880:	bd70      	pop	{r4, r5, r6, pc}
    memset(temp_data, 0, 4);
    1882:	2300      	movs	r3, #0
    1884:	9301      	str	r3, [sp, #4]
     err = a_sht40x_i2c_write(pHandle, SHT40X_READ_SERIAL_NUMBER_CMD, DUMMY_DATA, 0);
    1886:	2200      	movs	r2, #0
    1888:	2189      	movs	r1, #137	; 0x89
    188a:	4d18      	ldr	r5, [pc, #96]	; (18ec <sht40x_get_serial_number+0x84>)
    188c:	47a8      	blx	r5
    188e:	1e05      	subs	r5, r0, #0
    if(err)
    1890:	d112      	bne.n	18b8 <sht40x_get_serial_number+0x50>
    pHandle->delay_ms(10);
    1892:	200a      	movs	r0, #10
    1894:	6923      	ldr	r3, [r4, #16]
    1896:	4798      	blx	r3
    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)temp_data, RESPONSE_LENGTH);
    1898:	2306      	movs	r3, #6
    189a:	aa01      	add	r2, sp, #4
    189c:	2100      	movs	r1, #0
    189e:	0020      	movs	r0, r4
    18a0:	4d13      	ldr	r5, [pc, #76]	; (18f0 <sht40x_get_serial_number+0x88>)
    18a2:	47a8      	blx	r5
    18a4:	1e05      	subs	r5, r0, #0
    if(err)
    18a6:	d10c      	bne.n	18c2 <sht40x_get_serial_number+0x5a>
	temp_data[2] = temp_data[3];
    18a8:	ab01      	add	r3, sp, #4
    18aa:	78da      	ldrb	r2, [r3, #3]
    18ac:	709a      	strb	r2, [r3, #2]
	temp_data[3] = temp_data[4];
    18ae:	791a      	ldrb	r2, [r3, #4]
    18b0:	70da      	strb	r2, [r3, #3]
  for( index = 0; index < 4; ++index)
    18b2:	2200      	movs	r2, #0
    uint8_t count = 3;
    18b4:	2303      	movs	r3, #3
  for( index = 0; index < 4; ++index)
    18b6:	e010      	b.n	18da <sht40x_get_serial_number+0x72>
        a_sht40x_print_error_msg(pHandle, "write UID cmd");
    18b8:	490e      	ldr	r1, [pc, #56]	; (18f4 <sht40x_get_serial_number+0x8c>)
    18ba:	0020      	movs	r0, r4
    18bc:	4b0e      	ldr	r3, [pc, #56]	; (18f8 <sht40x_get_serial_number+0x90>)
    18be:	4798      	blx	r3
        return err;  /**< failed*/
    18c0:	e7dc      	b.n	187c <sht40x_get_serial_number+0x14>
        a_sht40x_print_error_msg(pHandle, "get UID");
    18c2:	490e      	ldr	r1, [pc, #56]	; (18fc <sht40x_get_serial_number+0x94>)
    18c4:	0020      	movs	r0, r4
    18c6:	4b0c      	ldr	r3, [pc, #48]	; (18f8 <sht40x_get_serial_number+0x90>)
    18c8:	4798      	blx	r3
        return err;  /**< failed*/
    18ca:	e7d7      	b.n	187c <sht40x_get_serial_number+0x14>
        dataOut[count] = temp_data[index];     /**< move data into a temporarily buffer in reverse order*/
    18cc:	a901      	add	r1, sp, #4
    18ce:	5c89      	ldrb	r1, [r1, r2]
    18d0:	4668      	mov	r0, sp
    18d2:	54c1      	strb	r1, [r0, r3]
        count--;
    18d4:	3b01      	subs	r3, #1
    18d6:	b2db      	uxtb	r3, r3
  for( index = 0; index < 4; ++index)
    18d8:	3201      	adds	r2, #1
    18da:	2a03      	cmp	r2, #3
    18dc:	ddf6      	ble.n	18cc <sht40x_get_serial_number+0x64>
   memcpy(serial.pBuffer, dataOut, 4);
    18de:	9b00      	ldr	r3, [sp, #0]
    18e0:	4a07      	ldr	r2, [pc, #28]	; (1900 <sht40x_get_serial_number+0x98>)
    18e2:	6013      	str	r3, [r2, #0]
  *pSerial_Number = serial.raw;
    18e4:	6033      	str	r3, [r6, #0]
    return 0;           /**< success */
    18e6:	e7c9      	b.n	187c <sht40x_get_serial_number+0x14>
        return 2;     /**< return failed error */
    18e8:	2502      	movs	r5, #2
    18ea:	e7c7      	b.n	187c <sht40x_get_serial_number+0x14>
    18ec:	000015c5 	.word	0x000015c5
    18f0:	000015d9 	.word	0x000015d9
    18f4:	00004a24 	.word	0x00004a24
    18f8:	000015f1 	.word	0x000015f1
    18fc:	00004a34 	.word	0x00004a34
    1900:	2000009c 	.word	0x2000009c

00001904 <sht40x_info>:
 *             - 0 success
 *             - 2 pHandle is NULL
 * @note       none
 */
uint8_t sht40x_info(sht40x_info_t *const pInfo)
{
    1904:	b570      	push	{r4, r5, r6, lr}
    1906:	1e04      	subs	r4, r0, #0
    if (pInfo == NULL)     /**< check if handle is null */
    1908:	d020      	beq.n	194c <sht40x_info+0x48>
    {
        return 2;              /**<failed, return error */
    }
    memset(pInfo, 0, sizeof (sht40x_info_t));                        /**< initialize sht40x info structure */
    190a:	2240      	movs	r2, #64	; 0x40
    190c:	2100      	movs	r1, #0
    190e:	4b10      	ldr	r3, [pc, #64]	; (1950 <sht40x_info+0x4c>)
    1910:	4798      	blx	r3
    strncpy(pInfo->chip_name, CHIP_NAME, 10);                        /**< copy chip name */
    1912:	220a      	movs	r2, #10
    1914:	490f      	ldr	r1, [pc, #60]	; (1954 <sht40x_info+0x50>)
    1916:	0020      	movs	r0, r4
    1918:	4d0f      	ldr	r5, [pc, #60]	; (1958 <sht40x_info+0x54>)
    191a:	47a8      	blx	r5
    strncpy(pInfo->interface, INTERFACE, 8);                         /**< copy interface name */
    191c:	0020      	movs	r0, r4
    191e:	3023      	adds	r0, #35	; 0x23
    1920:	2208      	movs	r2, #8
    1922:	490e      	ldr	r1, [pc, #56]	; (195c <sht40x_info+0x58>)
    1924:	47a8      	blx	r5
    strncpy(pInfo->manufacturer_name, MANUFACTURER_NAME, 25);        /**< copy manufacturer name */
    1926:	0020      	movs	r0, r4
    1928:	300a      	adds	r0, #10
    192a:	2219      	movs	r2, #25
    192c:	490c      	ldr	r1, [pc, #48]	; (1960 <sht40x_info+0x5c>)
    192e:	47a8      	blx	r5
    pInfo->supply_voltage_max_v = SUPPLY_VOLTAGE_MAX;                /**< set minimal supply voltage */
    1930:	4b0c      	ldr	r3, [pc, #48]	; (1964 <sht40x_info+0x60>)
    1932:	62e3      	str	r3, [r4, #44]	; 0x2c
    pInfo->supply_voltage_min_v = SUPPLY_VOLTAGE_MIN;                /**< set maximum supply voltage */
    1934:	4b0c      	ldr	r3, [pc, #48]	; (1968 <sht40x_info+0x64>)
    1936:	62a3      	str	r3, [r4, #40]	; 0x28
    pInfo->max_current_ma = MAX_CURRENT;                             /**< set maximum current */
    1938:	4b0c      	ldr	r3, [pc, #48]	; (196c <sht40x_info+0x68>)
    193a:	6323      	str	r3, [r4, #48]	; 0x30
    pInfo->temperature_max = TEMPERATURE_MAX;                        /**< set minimal temperature */
    193c:	4b0c      	ldr	r3, [pc, #48]	; (1970 <sht40x_info+0x6c>)
    193e:	63a3      	str	r3, [r4, #56]	; 0x38
    pInfo->temperature_min = TEMPERATURE_MIN;                        /**< set maximum temperature */
    1940:	4b0c      	ldr	r3, [pc, #48]	; (1974 <sht40x_info+0x70>)
    1942:	6363      	str	r3, [r4, #52]	; 0x34
    pInfo->driver_version = DRIVER_VERSION;                          /**< set driver version */
    1944:	4b0c      	ldr	r3, [pc, #48]	; (1978 <sht40x_info+0x74>)
    1946:	63e3      	str	r3, [r4, #60]	; 0x3c

    return 0;                                                        /**< return success */
    1948:	2000      	movs	r0, #0
}
    194a:	bd70      	pop	{r4, r5, r6, pc}
        return 2;              /**<failed, return error */
    194c:	2002      	movs	r0, #2
    194e:	e7fc      	b.n	194a <sht40x_info+0x46>
    1950:	00003e43 	.word	0x00003e43
    1954:	00004a5c 	.word	0x00004a5c
    1958:	00003e61 	.word	0x00003e61
    195c:	00004a64 	.word	0x00004a64
    1960:	00004a68 	.word	0x00004a68
    1964:	40666666 	.word	0x40666666
    1968:	3fe66666 	.word	0x3fe66666
    196c:	3dcccccd 	.word	0x3dcccccd
    1970:	42fa0000 	.word	0x42fa0000
    1974:	c2200000 	.word	0xc2200000
    1978:	44960000 	.word	0x44960000

0000197c <sht40x_basic_initialize>:
 *          - 1 initialize failed
 * @note    none
 */

uint8_t sht40x_basic_initialize(sht40x_variant_t variant)
{
    197c:	b530      	push	{r4, r5, lr}
    197e:	b083      	sub	sp, #12
    1980:	0005      	movs	r5, r0

    volatile uint8_t err;

    /*link function*/
    DRIVER_SHT40X_LINK_INIT(&sht40x_handler, sht40x_handle_t);                               /**< Link the  */
    1982:	4c26      	ldr	r4, [pc, #152]	; (1a1c <sht40x_basic_initialize+0xa0>)
    1984:	221c      	movs	r2, #28
    1986:	2100      	movs	r1, #0
    1988:	0020      	movs	r0, r4
    198a:	4b25      	ldr	r3, [pc, #148]	; (1a20 <sht40x_basic_initialize+0xa4>)
    198c:	4798      	blx	r3
    DRIVER_SHT40X_LINK_I2C_INIT(&sht40x_handler, sht40x_interface_i2c_init);                 /**< Link the i2c initialize function */
    198e:	4b25      	ldr	r3, [pc, #148]	; (1a24 <sht40x_basic_initialize+0xa8>)
    1990:	6023      	str	r3, [r4, #0]
    DRIVER_SHT40X_LINK_I2C_DEINIT(&sht40x_handler, sht40x_interface_i2c_deinit);             /**< Link the the i2c de-initialize function */
    1992:	4b25      	ldr	r3, [pc, #148]	; (1a28 <sht40x_basic_initialize+0xac>)
    1994:	6063      	str	r3, [r4, #4]
    DRIVER_SHT40X_LINK_I2C_WRITE(&sht40x_handler, sht40x_interface_i2c_write);               /**< Link the i2c  write function */
    1996:	4b25      	ldr	r3, [pc, #148]	; (1a2c <sht40x_basic_initialize+0xb0>)
    1998:	60e3      	str	r3, [r4, #12]
    DRIVER_SHT40X_LINK_I2C_READ(&sht40x_handler, sht40x_interface_i2c_read);                 /**< Link the i2c read function */
    199a:	4b25      	ldr	r3, [pc, #148]	; (1a30 <sht40x_basic_initialize+0xb4>)
    199c:	60a3      	str	r3, [r4, #8]
    DRIVER_SHT40X_LINK_DELAY_MS(&sht40x_handler,sht40x_interface_delay_ms);                  /**< Link delay function */
    199e:	4b25      	ldr	r3, [pc, #148]	; (1a34 <sht40x_basic_initialize+0xb8>)
    19a0:	6123      	str	r3, [r4, #16]
    DRIVER_SHT40X_LINK_DEBUG_PRINT(&sht40x_handler, sht40x_interface_debug_print);           /**< Link the the debug print function */
    19a2:	4b25      	ldr	r3, [pc, #148]	; (1a38 <sht40x_basic_initialize+0xbc>)
    19a4:	6163      	str	r3, [r4, #20]

    /* sht40x initialize */
    err = sht40x_init(&sht40x_handler);
    19a6:	0020      	movs	r0, r4
    19a8:	4b24      	ldr	r3, [pc, #144]	; (1a3c <sht40x_basic_initialize+0xc0>)
    19aa:	4798      	blx	r3
    19ac:	466b      	mov	r3, sp
    19ae:	71d8      	strb	r0, [r3, #7]
    19b0:	3307      	adds	r3, #7
    if(err)
    19b2:	781b      	ldrb	r3, [r3, #0]
    19b4:	2b00      	cmp	r3, #0
    19b6:	d117      	bne.n	19e8 <sht40x_basic_initialize+0x6c>
        a_sht40x_print_error_msg(&sht40x_handler, "initialize");
        return err;       /**< failed */
    }

    /* set device variant */
    err = sht40x_set_variant(&sht40x_handler, variant);
    19b8:	0029      	movs	r1, r5
    19ba:	4818      	ldr	r0, [pc, #96]	; (1a1c <sht40x_basic_initialize+0xa0>)
    19bc:	4b20      	ldr	r3, [pc, #128]	; (1a40 <sht40x_basic_initialize+0xc4>)
    19be:	4798      	blx	r3
    19c0:	466b      	mov	r3, sp
    19c2:	71d8      	strb	r0, [r3, #7]
    19c4:	3307      	adds	r3, #7
    if(err)
    19c6:	781b      	ldrb	r3, [r3, #0]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d116      	bne.n	19fa <sht40x_basic_initialize+0x7e>
        a_sht40x_print_error_msg(&sht40x_handler, "set device variant");
        return err;   /**< failed */
    }

    /** set device address */
    err= sht40x_set_addr(&sht40x_handler);
    19cc:	4813      	ldr	r0, [pc, #76]	; (1a1c <sht40x_basic_initialize+0xa0>)
    19ce:	4b1d      	ldr	r3, [pc, #116]	; (1a44 <sht40x_basic_initialize+0xc8>)
    19d0:	4798      	blx	r3
    19d2:	466b      	mov	r3, sp
    19d4:	71d8      	strb	r0, [r3, #7]
    19d6:	3307      	adds	r3, #7
    if(err)
    19d8:	781b      	ldrb	r3, [r3, #0]
    19da:	2b00      	cmp	r3, #0
    19dc:	d115      	bne.n	1a0a <sht40x_basic_initialize+0x8e>
    {
         a_sht40x_print_error_msg(&sht40x_handler, "set device i2c address");
        return err;
    }

    sht40x_interface_delay_ms(10);         /**< wait 10 ms after initialize complete */
    19de:	200a      	movs	r0, #10
    19e0:	4b14      	ldr	r3, [pc, #80]	; (1a34 <sht40x_basic_initialize+0xb8>)
    19e2:	4798      	blx	r3

    return 0;   /**< success */
    19e4:	2000      	movs	r0, #0
    19e6:	e006      	b.n	19f6 <sht40x_basic_initialize+0x7a>
        a_sht40x_print_error_msg(&sht40x_handler, "initialize");
    19e8:	4917      	ldr	r1, [pc, #92]	; (1a48 <sht40x_basic_initialize+0xcc>)
    19ea:	480c      	ldr	r0, [pc, #48]	; (1a1c <sht40x_basic_initialize+0xa0>)
    19ec:	4b17      	ldr	r3, [pc, #92]	; (1a4c <sht40x_basic_initialize+0xd0>)
    19ee:	4798      	blx	r3
        return err;       /**< failed */
    19f0:	466b      	mov	r3, sp
    19f2:	79d8      	ldrb	r0, [r3, #7]
    19f4:	b2c0      	uxtb	r0, r0
}
    19f6:	b003      	add	sp, #12
    19f8:	bd30      	pop	{r4, r5, pc}
        a_sht40x_print_error_msg(&sht40x_handler, "set device variant");
    19fa:	4915      	ldr	r1, [pc, #84]	; (1a50 <sht40x_basic_initialize+0xd4>)
    19fc:	4807      	ldr	r0, [pc, #28]	; (1a1c <sht40x_basic_initialize+0xa0>)
    19fe:	4b13      	ldr	r3, [pc, #76]	; (1a4c <sht40x_basic_initialize+0xd0>)
    1a00:	4798      	blx	r3
        return err;   /**< failed */
    1a02:	466b      	mov	r3, sp
    1a04:	79d8      	ldrb	r0, [r3, #7]
    1a06:	b2c0      	uxtb	r0, r0
    1a08:	e7f5      	b.n	19f6 <sht40x_basic_initialize+0x7a>
         a_sht40x_print_error_msg(&sht40x_handler, "set device i2c address");
    1a0a:	4912      	ldr	r1, [pc, #72]	; (1a54 <sht40x_basic_initialize+0xd8>)
    1a0c:	4803      	ldr	r0, [pc, #12]	; (1a1c <sht40x_basic_initialize+0xa0>)
    1a0e:	4b0f      	ldr	r3, [pc, #60]	; (1a4c <sht40x_basic_initialize+0xd0>)
    1a10:	4798      	blx	r3
        return err;
    1a12:	466b      	mov	r3, sp
    1a14:	79d8      	ldrb	r0, [r3, #7]
    1a16:	b2c0      	uxtb	r0, r0
    1a18:	e7ed      	b.n	19f6 <sht40x_basic_initialize+0x7a>
    1a1a:	46c0      	nop			; (mov r8, r8)
    1a1c:	200000a0 	.word	0x200000a0
    1a20:	00003e43 	.word	0x00003e43
    1a24:	00001ab5 	.word	0x00001ab5
    1a28:	00001ab9 	.word	0x00001ab9
    1a2c:	00001acd 	.word	0x00001acd
    1a30:	00001abd 	.word	0x00001abd
    1a34:	00001add 	.word	0x00001add
    1a38:	00001ae9 	.word	0x00001ae9
    1a3c:	00001601 	.word	0x00001601
    1a40:	000016ab 	.word	0x000016ab
    1a44:	00001691 	.word	0x00001691
    1a48:	00004a74 	.word	0x00004a74
    1a4c:	000015f1 	.word	0x000015f1
    1a50:	00004a80 	.word	0x00004a80
    1a54:	00004a94 	.word	0x00004a94

00001a58 <sht40x_basic_get_temp_rh>:
 *            - 0 success
 *            - 1 failed to get temp/humidity
 * @note      none
 */
uint8_t sht40x_basic_get_temp_rh(sht40x_precision_t precision, sht40x_data_t *pData)
{
    1a58:	b510      	push	{r4, lr}
    1a5a:	000a      	movs	r2, r1
    if(sht40x_get_temp_rh(&sht40x_handler, precision, pData) != SHT40X_DRV_OK)
    1a5c:	0001      	movs	r1, r0
    1a5e:	4806      	ldr	r0, [pc, #24]	; (1a78 <sht40x_basic_get_temp_rh+0x20>)
    1a60:	4b06      	ldr	r3, [pc, #24]	; (1a7c <sht40x_basic_get_temp_rh+0x24>)
    1a62:	4798      	blx	r3
    1a64:	2800      	cmp	r0, #0
    1a66:	d100      	bne.n	1a6a <sht40x_basic_get_temp_rh+0x12>
    {
        a_sht40x_print_error_msg(&sht40x_handler, "read data");
        return 1; /**< failed */
    }
    return 0;   /**< success*/
}
    1a68:	bd10      	pop	{r4, pc}
        a_sht40x_print_error_msg(&sht40x_handler, "read data");
    1a6a:	4905      	ldr	r1, [pc, #20]	; (1a80 <sht40x_basic_get_temp_rh+0x28>)
    1a6c:	4802      	ldr	r0, [pc, #8]	; (1a78 <sht40x_basic_get_temp_rh+0x20>)
    1a6e:	4b05      	ldr	r3, [pc, #20]	; (1a84 <sht40x_basic_get_temp_rh+0x2c>)
    1a70:	4798      	blx	r3
        return 1; /**< failed */
    1a72:	2001      	movs	r0, #1
    1a74:	e7f8      	b.n	1a68 <sht40x_basic_get_temp_rh+0x10>
    1a76:	46c0      	nop			; (mov r8, r8)
    1a78:	200000a0 	.word	0x200000a0
    1a7c:	000016f5 	.word	0x000016f5
    1a80:	00004aac 	.word	0x00004aac
    1a84:	000015f1 	.word	0x000015f1

00001a88 <sht40x_basic_get_serial_number>:
 *            - 0 success
 *            - 1 failed to get S/N
 * @note      none
 */
uint8_t sht40x_basic_get_serial_number(uint32_t *pSerial_Number)
{
    1a88:	b510      	push	{r4, lr}
    1a8a:	0001      	movs	r1, r0
  if(sht40x_get_serial_number(&sht40x_handler, (uint32_t *)pSerial_Number) != SHT40X_DRV_OK)
    1a8c:	4805      	ldr	r0, [pc, #20]	; (1aa4 <sht40x_basic_get_serial_number+0x1c>)
    1a8e:	4b06      	ldr	r3, [pc, #24]	; (1aa8 <sht40x_basic_get_serial_number+0x20>)
    1a90:	4798      	blx	r3
    1a92:	2800      	cmp	r0, #0
    1a94:	d100      	bne.n	1a98 <sht40x_basic_get_serial_number+0x10>
  {
     a_sht40x_print_error_msg(&sht40x_handler, "read serial number");
     return 1; /**< failed */
  }
  return 0;     /**< success */
}
    1a96:	bd10      	pop	{r4, pc}
     a_sht40x_print_error_msg(&sht40x_handler, "read serial number");
    1a98:	4904      	ldr	r1, [pc, #16]	; (1aac <sht40x_basic_get_serial_number+0x24>)
    1a9a:	4802      	ldr	r0, [pc, #8]	; (1aa4 <sht40x_basic_get_serial_number+0x1c>)
    1a9c:	4b04      	ldr	r3, [pc, #16]	; (1ab0 <sht40x_basic_get_serial_number+0x28>)
    1a9e:	4798      	blx	r3
     return 1; /**< failed */
    1aa0:	2001      	movs	r0, #1
    1aa2:	e7f8      	b.n	1a96 <sht40x_basic_get_serial_number+0xe>
    1aa4:	200000a0 	.word	0x200000a0
    1aa8:	00001869 	.word	0x00001869
    1aac:	00004acc 	.word	0x00004acc
    1ab0:	000015f1 	.word	0x000015f1

00001ab4 <sht40x_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */
 
    /*user code end*/
    return 0; /**< success */
}
    1ab4:	2000      	movs	r0, #0
    1ab6:	4770      	bx	lr

00001ab8 <sht40x_interface_i2c_deinit>:
    /*call your i2c de-initialize function here*/
    /*user code begin */
 
    /*user code end*/
    return 0; /**< success */
}
    1ab8:	2000      	movs	r0, #0
    1aba:	4770      	bx	lr

00001abc <sht40x_interface_i2c_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t sht40x_interface_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
    1abc:	b510      	push	{r4, lr}
    /*call your i2c read function here*/
    /*user code begin */
	i2c_read_data(addr, reg, buf, len);
    1abe:	4c02      	ldr	r4, [pc, #8]	; (1ac8 <sht40x_interface_i2c_read+0xc>)
    1ac0:	47a0      	blx	r4
    /*user code end*/
    return 0; /**< success */
}
    1ac2:	2000      	movs	r0, #0
    1ac4:	bd10      	pop	{r4, pc}
    1ac6:	46c0      	nop			; (mov r8, r8)
    1ac8:	0000152d 	.word	0x0000152d

00001acc <sht40x_interface_i2c_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t sht40x_interface_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
    1acc:	b510      	push	{r4, lr}
    /*call your i2c write function here*/
    /*user code begin */
	i2c_write_data(addr, reg, buf, len);
    1ace:	4c02      	ldr	r4, [pc, #8]	; (1ad8 <sht40x_interface_i2c_write+0xc>)
    1ad0:	47a0      	blx	r4
    /*user code end*/
    return 0; /**< success */
}
    1ad2:	2000      	movs	r0, #0
    1ad4:	bd10      	pop	{r4, pc}
    1ad6:	46c0      	nop			; (mov r8, r8)
    1ad8:	00001579 	.word	0x00001579

00001adc <sht40x_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] u32Ms is the time in milliseconds
 * @note      none
 */
void sht40x_interface_delay_ms(uint32_t u32Ms)
{
    1adc:	b510      	push	{r4, lr}
    /*call your delay function here*/
    /*user code begin */
    delay_ms(u32Ms);
    1ade:	4b01      	ldr	r3, [pc, #4]	; (1ae4 <sht40x_interface_delay_ms+0x8>)
    1ae0:	4798      	blx	r3
    /*user code end*/
}
    1ae2:	bd10      	pop	{r4, pc}
    1ae4:	000003f1 	.word	0x000003f1

00001ae8 <sht40x_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void sht40x_interface_debug_print(const char *const fmt, ...)
{
    1ae8:	b40f      	push	{r0, r1, r2, r3}
    1aea:	b570      	push	{r4, r5, r6, lr}
    1aec:	b0c2      	sub	sp, #264	; 0x108
    1aee:	ac46      	add	r4, sp, #280	; 0x118
    1af0:	cc40      	ldmia	r4!, {r6}
#ifdef SHT40X_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
    1af2:	2580      	movs	r5, #128	; 0x80
    1af4:	006d      	lsls	r5, r5, #1
    1af6:	002a      	movs	r2, r5
    1af8:	2100      	movs	r1, #0
    1afa:	a802      	add	r0, sp, #8
    1afc:	4b0d      	ldr	r3, [pc, #52]	; (1b34 <sht40x_interface_debug_print+0x4c>)
    1afe:	4798      	blx	r3
    va_start(args, fmt);
    1b00:	9400      	str	r4, [sp, #0]
    vsniprintf((char *) str, 256, (char const *) fmt, args);
    1b02:	0023      	movs	r3, r4
    1b04:	0032      	movs	r2, r6
    1b06:	0029      	movs	r1, r5
    1b08:	a802      	add	r0, sp, #8
    1b0a:	4c0b      	ldr	r4, [pc, #44]	; (1b38 <sht40x_interface_debug_print+0x50>)
    1b0c:	47a0      	blx	r4
    va_end(args);

    len = strlen((char *) str);
    1b0e:	a802      	add	r0, sp, #8
    1b10:	4b0a      	ldr	r3, [pc, #40]	; (1b3c <sht40x_interface_debug_print+0x54>)
    1b12:	4798      	blx	r3
    1b14:	b2c0      	uxtb	r0, r0
    1b16:	466b      	mov	r3, sp
    1b18:	71d8      	strb	r0, [r3, #7]
     serial_print((char *const )str, len);                  /**< example of printf function, comment out if used */
    1b1a:	79d9      	ldrb	r1, [r3, #7]
    1b1c:	b2c9      	uxtb	r1, r1
    1b1e:	a802      	add	r0, sp, #8
    1b20:	4b07      	ldr	r3, [pc, #28]	; (1b40 <sht40x_interface_debug_print+0x58>)
    1b22:	4798      	blx	r3
     //memset((char *) str, 0, sizeof (char)*100);
    /*user code end*/
     sht40x_interface_delay_ms(100);        /**< delay needed for processors that fails to clear buffer quick enough */
    1b24:	2064      	movs	r0, #100	; 0x64
    1b26:	4b07      	ldr	r3, [pc, #28]	; (1b44 <sht40x_interface_debug_print+0x5c>)
    1b28:	4798      	blx	r3
#endif
}
    1b2a:	b042      	add	sp, #264	; 0x108
    1b2c:	bc70      	pop	{r4, r5, r6}
    1b2e:	bc08      	pop	{r3}
    1b30:	b004      	add	sp, #16
    1b32:	4718      	bx	r3
    1b34:	00003e43 	.word	0x00003e43
    1b38:	00003ee1 	.word	0x00003ee1
    1b3c:	00003e53 	.word	0x00003e53
    1b40:	000014f5 	.word	0x000014f5
    1b44:	00001add 	.word	0x00001add

00001b48 <__udivsi3>:
    1b48:	2200      	movs	r2, #0
    1b4a:	0843      	lsrs	r3, r0, #1
    1b4c:	428b      	cmp	r3, r1
    1b4e:	d374      	bcc.n	1c3a <__udivsi3+0xf2>
    1b50:	0903      	lsrs	r3, r0, #4
    1b52:	428b      	cmp	r3, r1
    1b54:	d35f      	bcc.n	1c16 <__udivsi3+0xce>
    1b56:	0a03      	lsrs	r3, r0, #8
    1b58:	428b      	cmp	r3, r1
    1b5a:	d344      	bcc.n	1be6 <__udivsi3+0x9e>
    1b5c:	0b03      	lsrs	r3, r0, #12
    1b5e:	428b      	cmp	r3, r1
    1b60:	d328      	bcc.n	1bb4 <__udivsi3+0x6c>
    1b62:	0c03      	lsrs	r3, r0, #16
    1b64:	428b      	cmp	r3, r1
    1b66:	d30d      	bcc.n	1b84 <__udivsi3+0x3c>
    1b68:	22ff      	movs	r2, #255	; 0xff
    1b6a:	0209      	lsls	r1, r1, #8
    1b6c:	ba12      	rev	r2, r2
    1b6e:	0c03      	lsrs	r3, r0, #16
    1b70:	428b      	cmp	r3, r1
    1b72:	d302      	bcc.n	1b7a <__udivsi3+0x32>
    1b74:	1212      	asrs	r2, r2, #8
    1b76:	0209      	lsls	r1, r1, #8
    1b78:	d065      	beq.n	1c46 <__udivsi3+0xfe>
    1b7a:	0b03      	lsrs	r3, r0, #12
    1b7c:	428b      	cmp	r3, r1
    1b7e:	d319      	bcc.n	1bb4 <__udivsi3+0x6c>
    1b80:	e000      	b.n	1b84 <__udivsi3+0x3c>
    1b82:	0a09      	lsrs	r1, r1, #8
    1b84:	0bc3      	lsrs	r3, r0, #15
    1b86:	428b      	cmp	r3, r1
    1b88:	d301      	bcc.n	1b8e <__udivsi3+0x46>
    1b8a:	03cb      	lsls	r3, r1, #15
    1b8c:	1ac0      	subs	r0, r0, r3
    1b8e:	4152      	adcs	r2, r2
    1b90:	0b83      	lsrs	r3, r0, #14
    1b92:	428b      	cmp	r3, r1
    1b94:	d301      	bcc.n	1b9a <__udivsi3+0x52>
    1b96:	038b      	lsls	r3, r1, #14
    1b98:	1ac0      	subs	r0, r0, r3
    1b9a:	4152      	adcs	r2, r2
    1b9c:	0b43      	lsrs	r3, r0, #13
    1b9e:	428b      	cmp	r3, r1
    1ba0:	d301      	bcc.n	1ba6 <__udivsi3+0x5e>
    1ba2:	034b      	lsls	r3, r1, #13
    1ba4:	1ac0      	subs	r0, r0, r3
    1ba6:	4152      	adcs	r2, r2
    1ba8:	0b03      	lsrs	r3, r0, #12
    1baa:	428b      	cmp	r3, r1
    1bac:	d301      	bcc.n	1bb2 <__udivsi3+0x6a>
    1bae:	030b      	lsls	r3, r1, #12
    1bb0:	1ac0      	subs	r0, r0, r3
    1bb2:	4152      	adcs	r2, r2
    1bb4:	0ac3      	lsrs	r3, r0, #11
    1bb6:	428b      	cmp	r3, r1
    1bb8:	d301      	bcc.n	1bbe <__udivsi3+0x76>
    1bba:	02cb      	lsls	r3, r1, #11
    1bbc:	1ac0      	subs	r0, r0, r3
    1bbe:	4152      	adcs	r2, r2
    1bc0:	0a83      	lsrs	r3, r0, #10
    1bc2:	428b      	cmp	r3, r1
    1bc4:	d301      	bcc.n	1bca <__udivsi3+0x82>
    1bc6:	028b      	lsls	r3, r1, #10
    1bc8:	1ac0      	subs	r0, r0, r3
    1bca:	4152      	adcs	r2, r2
    1bcc:	0a43      	lsrs	r3, r0, #9
    1bce:	428b      	cmp	r3, r1
    1bd0:	d301      	bcc.n	1bd6 <__udivsi3+0x8e>
    1bd2:	024b      	lsls	r3, r1, #9
    1bd4:	1ac0      	subs	r0, r0, r3
    1bd6:	4152      	adcs	r2, r2
    1bd8:	0a03      	lsrs	r3, r0, #8
    1bda:	428b      	cmp	r3, r1
    1bdc:	d301      	bcc.n	1be2 <__udivsi3+0x9a>
    1bde:	020b      	lsls	r3, r1, #8
    1be0:	1ac0      	subs	r0, r0, r3
    1be2:	4152      	adcs	r2, r2
    1be4:	d2cd      	bcs.n	1b82 <__udivsi3+0x3a>
    1be6:	09c3      	lsrs	r3, r0, #7
    1be8:	428b      	cmp	r3, r1
    1bea:	d301      	bcc.n	1bf0 <__udivsi3+0xa8>
    1bec:	01cb      	lsls	r3, r1, #7
    1bee:	1ac0      	subs	r0, r0, r3
    1bf0:	4152      	adcs	r2, r2
    1bf2:	0983      	lsrs	r3, r0, #6
    1bf4:	428b      	cmp	r3, r1
    1bf6:	d301      	bcc.n	1bfc <__udivsi3+0xb4>
    1bf8:	018b      	lsls	r3, r1, #6
    1bfa:	1ac0      	subs	r0, r0, r3
    1bfc:	4152      	adcs	r2, r2
    1bfe:	0943      	lsrs	r3, r0, #5
    1c00:	428b      	cmp	r3, r1
    1c02:	d301      	bcc.n	1c08 <__udivsi3+0xc0>
    1c04:	014b      	lsls	r3, r1, #5
    1c06:	1ac0      	subs	r0, r0, r3
    1c08:	4152      	adcs	r2, r2
    1c0a:	0903      	lsrs	r3, r0, #4
    1c0c:	428b      	cmp	r3, r1
    1c0e:	d301      	bcc.n	1c14 <__udivsi3+0xcc>
    1c10:	010b      	lsls	r3, r1, #4
    1c12:	1ac0      	subs	r0, r0, r3
    1c14:	4152      	adcs	r2, r2
    1c16:	08c3      	lsrs	r3, r0, #3
    1c18:	428b      	cmp	r3, r1
    1c1a:	d301      	bcc.n	1c20 <__udivsi3+0xd8>
    1c1c:	00cb      	lsls	r3, r1, #3
    1c1e:	1ac0      	subs	r0, r0, r3
    1c20:	4152      	adcs	r2, r2
    1c22:	0883      	lsrs	r3, r0, #2
    1c24:	428b      	cmp	r3, r1
    1c26:	d301      	bcc.n	1c2c <__udivsi3+0xe4>
    1c28:	008b      	lsls	r3, r1, #2
    1c2a:	1ac0      	subs	r0, r0, r3
    1c2c:	4152      	adcs	r2, r2
    1c2e:	0843      	lsrs	r3, r0, #1
    1c30:	428b      	cmp	r3, r1
    1c32:	d301      	bcc.n	1c38 <__udivsi3+0xf0>
    1c34:	004b      	lsls	r3, r1, #1
    1c36:	1ac0      	subs	r0, r0, r3
    1c38:	4152      	adcs	r2, r2
    1c3a:	1a41      	subs	r1, r0, r1
    1c3c:	d200      	bcs.n	1c40 <__udivsi3+0xf8>
    1c3e:	4601      	mov	r1, r0
    1c40:	4152      	adcs	r2, r2
    1c42:	4610      	mov	r0, r2
    1c44:	4770      	bx	lr
    1c46:	e7ff      	b.n	1c48 <__udivsi3+0x100>
    1c48:	b501      	push	{r0, lr}
    1c4a:	2000      	movs	r0, #0
    1c4c:	f000 f806 	bl	1c5c <__aeabi_idiv0>
    1c50:	bd02      	pop	{r1, pc}
    1c52:	46c0      	nop			; (mov r8, r8)

00001c54 <__aeabi_uidivmod>:
    1c54:	2900      	cmp	r1, #0
    1c56:	d0f7      	beq.n	1c48 <__udivsi3+0x100>
    1c58:	e776      	b.n	1b48 <__udivsi3>
    1c5a:	4770      	bx	lr

00001c5c <__aeabi_idiv0>:
    1c5c:	4770      	bx	lr
    1c5e:	46c0      	nop			; (mov r8, r8)

00001c60 <__aeabi_cfrcmple>:
    1c60:	4684      	mov	ip, r0
    1c62:	1c08      	adds	r0, r1, #0
    1c64:	4661      	mov	r1, ip
    1c66:	e7ff      	b.n	1c68 <__aeabi_cfcmpeq>

00001c68 <__aeabi_cfcmpeq>:
    1c68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    1c6a:	f000 fb8b 	bl	2384 <__lesf2>
    1c6e:	2800      	cmp	r0, #0
    1c70:	d401      	bmi.n	1c76 <__aeabi_cfcmpeq+0xe>
    1c72:	2100      	movs	r1, #0
    1c74:	42c8      	cmn	r0, r1
    1c76:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00001c78 <__aeabi_fcmpeq>:
    1c78:	b510      	push	{r4, lr}
    1c7a:	f000 fb1d 	bl	22b8 <__eqsf2>
    1c7e:	4240      	negs	r0, r0
    1c80:	3001      	adds	r0, #1
    1c82:	bd10      	pop	{r4, pc}

00001c84 <__aeabi_fcmplt>:
    1c84:	b510      	push	{r4, lr}
    1c86:	f000 fb7d 	bl	2384 <__lesf2>
    1c8a:	2800      	cmp	r0, #0
    1c8c:	db01      	blt.n	1c92 <__aeabi_fcmplt+0xe>
    1c8e:	2000      	movs	r0, #0
    1c90:	bd10      	pop	{r4, pc}
    1c92:	2001      	movs	r0, #1
    1c94:	bd10      	pop	{r4, pc}
    1c96:	46c0      	nop			; (mov r8, r8)

00001c98 <__aeabi_fcmple>:
    1c98:	b510      	push	{r4, lr}
    1c9a:	f000 fb73 	bl	2384 <__lesf2>
    1c9e:	2800      	cmp	r0, #0
    1ca0:	dd01      	ble.n	1ca6 <__aeabi_fcmple+0xe>
    1ca2:	2000      	movs	r0, #0
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	2001      	movs	r0, #1
    1ca8:	bd10      	pop	{r4, pc}
    1caa:	46c0      	nop			; (mov r8, r8)

00001cac <__aeabi_fcmpgt>:
    1cac:	b510      	push	{r4, lr}
    1cae:	f000 fb29 	bl	2304 <__gesf2>
    1cb2:	2800      	cmp	r0, #0
    1cb4:	dc01      	bgt.n	1cba <__aeabi_fcmpgt+0xe>
    1cb6:	2000      	movs	r0, #0
    1cb8:	bd10      	pop	{r4, pc}
    1cba:	2001      	movs	r0, #1
    1cbc:	bd10      	pop	{r4, pc}
    1cbe:	46c0      	nop			; (mov r8, r8)

00001cc0 <__aeabi_fcmpge>:
    1cc0:	b510      	push	{r4, lr}
    1cc2:	f000 fb1f 	bl	2304 <__gesf2>
    1cc6:	2800      	cmp	r0, #0
    1cc8:	da01      	bge.n	1cce <__aeabi_fcmpge+0xe>
    1cca:	2000      	movs	r0, #0
    1ccc:	bd10      	pop	{r4, pc}
    1cce:	2001      	movs	r0, #1
    1cd0:	bd10      	pop	{r4, pc}
    1cd2:	46c0      	nop			; (mov r8, r8)

00001cd4 <__aeabi_f2uiz>:
    1cd4:	219e      	movs	r1, #158	; 0x9e
    1cd6:	b510      	push	{r4, lr}
    1cd8:	05c9      	lsls	r1, r1, #23
    1cda:	1c04      	adds	r4, r0, #0
    1cdc:	f7ff fff0 	bl	1cc0 <__aeabi_fcmpge>
    1ce0:	2800      	cmp	r0, #0
    1ce2:	d103      	bne.n	1cec <__aeabi_f2uiz+0x18>
    1ce4:	1c20      	adds	r0, r4, #0
    1ce6:	f000 fe4b 	bl	2980 <__aeabi_f2iz>
    1cea:	bd10      	pop	{r4, pc}
    1cec:	219e      	movs	r1, #158	; 0x9e
    1cee:	1c20      	adds	r0, r4, #0
    1cf0:	05c9      	lsls	r1, r1, #23
    1cf2:	f000 fca9 	bl	2648 <__aeabi_fsub>
    1cf6:	f000 fe43 	bl	2980 <__aeabi_f2iz>
    1cfa:	2380      	movs	r3, #128	; 0x80
    1cfc:	061b      	lsls	r3, r3, #24
    1cfe:	469c      	mov	ip, r3
    1d00:	4460      	add	r0, ip
    1d02:	e7f2      	b.n	1cea <__aeabi_f2uiz+0x16>

00001d04 <__aeabi_fadd>:
    1d04:	b5f0      	push	{r4, r5, r6, r7, lr}
    1d06:	46c6      	mov	lr, r8
    1d08:	024e      	lsls	r6, r1, #9
    1d0a:	0247      	lsls	r7, r0, #9
    1d0c:	0a76      	lsrs	r6, r6, #9
    1d0e:	0a7b      	lsrs	r3, r7, #9
    1d10:	0044      	lsls	r4, r0, #1
    1d12:	0fc5      	lsrs	r5, r0, #31
    1d14:	00f7      	lsls	r7, r6, #3
    1d16:	0048      	lsls	r0, r1, #1
    1d18:	4698      	mov	r8, r3
    1d1a:	b500      	push	{lr}
    1d1c:	0e24      	lsrs	r4, r4, #24
    1d1e:	002a      	movs	r2, r5
    1d20:	00db      	lsls	r3, r3, #3
    1d22:	0e00      	lsrs	r0, r0, #24
    1d24:	0fc9      	lsrs	r1, r1, #31
    1d26:	46bc      	mov	ip, r7
    1d28:	428d      	cmp	r5, r1
    1d2a:	d067      	beq.n	1dfc <__aeabi_fadd+0xf8>
    1d2c:	1a22      	subs	r2, r4, r0
    1d2e:	2a00      	cmp	r2, #0
    1d30:	dc00      	bgt.n	1d34 <__aeabi_fadd+0x30>
    1d32:	e0a5      	b.n	1e80 <__aeabi_fadd+0x17c>
    1d34:	2800      	cmp	r0, #0
    1d36:	d13a      	bne.n	1dae <__aeabi_fadd+0xaa>
    1d38:	2f00      	cmp	r7, #0
    1d3a:	d100      	bne.n	1d3e <__aeabi_fadd+0x3a>
    1d3c:	e093      	b.n	1e66 <__aeabi_fadd+0x162>
    1d3e:	1e51      	subs	r1, r2, #1
    1d40:	2900      	cmp	r1, #0
    1d42:	d000      	beq.n	1d46 <__aeabi_fadd+0x42>
    1d44:	e0bc      	b.n	1ec0 <__aeabi_fadd+0x1bc>
    1d46:	2401      	movs	r4, #1
    1d48:	1bdb      	subs	r3, r3, r7
    1d4a:	015a      	lsls	r2, r3, #5
    1d4c:	d546      	bpl.n	1ddc <__aeabi_fadd+0xd8>
    1d4e:	019b      	lsls	r3, r3, #6
    1d50:	099e      	lsrs	r6, r3, #6
    1d52:	0030      	movs	r0, r6
    1d54:	f002 f82a 	bl	3dac <__clzsi2>
    1d58:	3805      	subs	r0, #5
    1d5a:	4086      	lsls	r6, r0
    1d5c:	4284      	cmp	r4, r0
    1d5e:	dd00      	ble.n	1d62 <__aeabi_fadd+0x5e>
    1d60:	e09d      	b.n	1e9e <__aeabi_fadd+0x19a>
    1d62:	1b04      	subs	r4, r0, r4
    1d64:	0032      	movs	r2, r6
    1d66:	2020      	movs	r0, #32
    1d68:	3401      	adds	r4, #1
    1d6a:	40e2      	lsrs	r2, r4
    1d6c:	1b04      	subs	r4, r0, r4
    1d6e:	40a6      	lsls	r6, r4
    1d70:	0033      	movs	r3, r6
    1d72:	1e5e      	subs	r6, r3, #1
    1d74:	41b3      	sbcs	r3, r6
    1d76:	2400      	movs	r4, #0
    1d78:	4313      	orrs	r3, r2
    1d7a:	075a      	lsls	r2, r3, #29
    1d7c:	d004      	beq.n	1d88 <__aeabi_fadd+0x84>
    1d7e:	220f      	movs	r2, #15
    1d80:	401a      	ands	r2, r3
    1d82:	2a04      	cmp	r2, #4
    1d84:	d000      	beq.n	1d88 <__aeabi_fadd+0x84>
    1d86:	3304      	adds	r3, #4
    1d88:	015a      	lsls	r2, r3, #5
    1d8a:	d529      	bpl.n	1de0 <__aeabi_fadd+0xdc>
    1d8c:	3401      	adds	r4, #1
    1d8e:	2cff      	cmp	r4, #255	; 0xff
    1d90:	d100      	bne.n	1d94 <__aeabi_fadd+0x90>
    1d92:	e081      	b.n	1e98 <__aeabi_fadd+0x194>
    1d94:	002a      	movs	r2, r5
    1d96:	019b      	lsls	r3, r3, #6
    1d98:	0a5b      	lsrs	r3, r3, #9
    1d9a:	b2e4      	uxtb	r4, r4
    1d9c:	025b      	lsls	r3, r3, #9
    1d9e:	05e4      	lsls	r4, r4, #23
    1da0:	0a58      	lsrs	r0, r3, #9
    1da2:	07d2      	lsls	r2, r2, #31
    1da4:	4320      	orrs	r0, r4
    1da6:	4310      	orrs	r0, r2
    1da8:	bc04      	pop	{r2}
    1daa:	4690      	mov	r8, r2
    1dac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1dae:	2cff      	cmp	r4, #255	; 0xff
    1db0:	d0e3      	beq.n	1d7a <__aeabi_fadd+0x76>
    1db2:	2180      	movs	r1, #128	; 0x80
    1db4:	0038      	movs	r0, r7
    1db6:	04c9      	lsls	r1, r1, #19
    1db8:	4308      	orrs	r0, r1
    1dba:	4684      	mov	ip, r0
    1dbc:	2a1b      	cmp	r2, #27
    1dbe:	dd00      	ble.n	1dc2 <__aeabi_fadd+0xbe>
    1dc0:	e082      	b.n	1ec8 <__aeabi_fadd+0x1c4>
    1dc2:	2020      	movs	r0, #32
    1dc4:	4661      	mov	r1, ip
    1dc6:	40d1      	lsrs	r1, r2
    1dc8:	1a82      	subs	r2, r0, r2
    1dca:	4660      	mov	r0, ip
    1dcc:	4090      	lsls	r0, r2
    1dce:	0002      	movs	r2, r0
    1dd0:	1e50      	subs	r0, r2, #1
    1dd2:	4182      	sbcs	r2, r0
    1dd4:	430a      	orrs	r2, r1
    1dd6:	1a9b      	subs	r3, r3, r2
    1dd8:	015a      	lsls	r2, r3, #5
    1dda:	d4b8      	bmi.n	1d4e <__aeabi_fadd+0x4a>
    1ddc:	075a      	lsls	r2, r3, #29
    1dde:	d1ce      	bne.n	1d7e <__aeabi_fadd+0x7a>
    1de0:	08de      	lsrs	r6, r3, #3
    1de2:	002a      	movs	r2, r5
    1de4:	2cff      	cmp	r4, #255	; 0xff
    1de6:	d13a      	bne.n	1e5e <__aeabi_fadd+0x15a>
    1de8:	2e00      	cmp	r6, #0
    1dea:	d100      	bne.n	1dee <__aeabi_fadd+0xea>
    1dec:	e0ae      	b.n	1f4c <__aeabi_fadd+0x248>
    1dee:	2380      	movs	r3, #128	; 0x80
    1df0:	03db      	lsls	r3, r3, #15
    1df2:	4333      	orrs	r3, r6
    1df4:	025b      	lsls	r3, r3, #9
    1df6:	0a5b      	lsrs	r3, r3, #9
    1df8:	24ff      	movs	r4, #255	; 0xff
    1dfa:	e7cf      	b.n	1d9c <__aeabi_fadd+0x98>
    1dfc:	1a21      	subs	r1, r4, r0
    1dfe:	2900      	cmp	r1, #0
    1e00:	dd52      	ble.n	1ea8 <__aeabi_fadd+0x1a4>
    1e02:	2800      	cmp	r0, #0
    1e04:	d031      	beq.n	1e6a <__aeabi_fadd+0x166>
    1e06:	2cff      	cmp	r4, #255	; 0xff
    1e08:	d0b7      	beq.n	1d7a <__aeabi_fadd+0x76>
    1e0a:	2080      	movs	r0, #128	; 0x80
    1e0c:	003e      	movs	r6, r7
    1e0e:	04c0      	lsls	r0, r0, #19
    1e10:	4306      	orrs	r6, r0
    1e12:	46b4      	mov	ip, r6
    1e14:	291b      	cmp	r1, #27
    1e16:	dd00      	ble.n	1e1a <__aeabi_fadd+0x116>
    1e18:	e0aa      	b.n	1f70 <__aeabi_fadd+0x26c>
    1e1a:	2620      	movs	r6, #32
    1e1c:	4660      	mov	r0, ip
    1e1e:	40c8      	lsrs	r0, r1
    1e20:	1a71      	subs	r1, r6, r1
    1e22:	4666      	mov	r6, ip
    1e24:	408e      	lsls	r6, r1
    1e26:	0031      	movs	r1, r6
    1e28:	1e4e      	subs	r6, r1, #1
    1e2a:	41b1      	sbcs	r1, r6
    1e2c:	4301      	orrs	r1, r0
    1e2e:	185b      	adds	r3, r3, r1
    1e30:	0159      	lsls	r1, r3, #5
    1e32:	d5d3      	bpl.n	1ddc <__aeabi_fadd+0xd8>
    1e34:	3401      	adds	r4, #1
    1e36:	2cff      	cmp	r4, #255	; 0xff
    1e38:	d100      	bne.n	1e3c <__aeabi_fadd+0x138>
    1e3a:	e087      	b.n	1f4c <__aeabi_fadd+0x248>
    1e3c:	2201      	movs	r2, #1
    1e3e:	4978      	ldr	r1, [pc, #480]	; (2020 <STACK_SIZE+0x20>)
    1e40:	401a      	ands	r2, r3
    1e42:	085b      	lsrs	r3, r3, #1
    1e44:	400b      	ands	r3, r1
    1e46:	4313      	orrs	r3, r2
    1e48:	e797      	b.n	1d7a <__aeabi_fadd+0x76>
    1e4a:	2c00      	cmp	r4, #0
    1e4c:	d000      	beq.n	1e50 <__aeabi_fadd+0x14c>
    1e4e:	e0a7      	b.n	1fa0 <__aeabi_fadd+0x29c>
    1e50:	2b00      	cmp	r3, #0
    1e52:	d000      	beq.n	1e56 <__aeabi_fadd+0x152>
    1e54:	e0b6      	b.n	1fc4 <__aeabi_fadd+0x2c0>
    1e56:	1e3b      	subs	r3, r7, #0
    1e58:	d162      	bne.n	1f20 <__aeabi_fadd+0x21c>
    1e5a:	2600      	movs	r6, #0
    1e5c:	2200      	movs	r2, #0
    1e5e:	0273      	lsls	r3, r6, #9
    1e60:	0a5b      	lsrs	r3, r3, #9
    1e62:	b2e4      	uxtb	r4, r4
    1e64:	e79a      	b.n	1d9c <__aeabi_fadd+0x98>
    1e66:	0014      	movs	r4, r2
    1e68:	e787      	b.n	1d7a <__aeabi_fadd+0x76>
    1e6a:	2f00      	cmp	r7, #0
    1e6c:	d04d      	beq.n	1f0a <__aeabi_fadd+0x206>
    1e6e:	1e48      	subs	r0, r1, #1
    1e70:	2800      	cmp	r0, #0
    1e72:	d157      	bne.n	1f24 <__aeabi_fadd+0x220>
    1e74:	4463      	add	r3, ip
    1e76:	2401      	movs	r4, #1
    1e78:	015a      	lsls	r2, r3, #5
    1e7a:	d5af      	bpl.n	1ddc <__aeabi_fadd+0xd8>
    1e7c:	2402      	movs	r4, #2
    1e7e:	e7dd      	b.n	1e3c <__aeabi_fadd+0x138>
    1e80:	2a00      	cmp	r2, #0
    1e82:	d124      	bne.n	1ece <__aeabi_fadd+0x1ca>
    1e84:	1c62      	adds	r2, r4, #1
    1e86:	b2d2      	uxtb	r2, r2
    1e88:	2a01      	cmp	r2, #1
    1e8a:	ddde      	ble.n	1e4a <__aeabi_fadd+0x146>
    1e8c:	1bde      	subs	r6, r3, r7
    1e8e:	0172      	lsls	r2, r6, #5
    1e90:	d535      	bpl.n	1efe <__aeabi_fadd+0x1fa>
    1e92:	1afe      	subs	r6, r7, r3
    1e94:	000d      	movs	r5, r1
    1e96:	e75c      	b.n	1d52 <__aeabi_fadd+0x4e>
    1e98:	002a      	movs	r2, r5
    1e9a:	2300      	movs	r3, #0
    1e9c:	e77e      	b.n	1d9c <__aeabi_fadd+0x98>
    1e9e:	0033      	movs	r3, r6
    1ea0:	4a60      	ldr	r2, [pc, #384]	; (2024 <STACK_SIZE+0x24>)
    1ea2:	1a24      	subs	r4, r4, r0
    1ea4:	4013      	ands	r3, r2
    1ea6:	e768      	b.n	1d7a <__aeabi_fadd+0x76>
    1ea8:	2900      	cmp	r1, #0
    1eaa:	d163      	bne.n	1f74 <__aeabi_fadd+0x270>
    1eac:	1c61      	adds	r1, r4, #1
    1eae:	b2c8      	uxtb	r0, r1
    1eb0:	2801      	cmp	r0, #1
    1eb2:	dd4e      	ble.n	1f52 <__aeabi_fadd+0x24e>
    1eb4:	29ff      	cmp	r1, #255	; 0xff
    1eb6:	d049      	beq.n	1f4c <__aeabi_fadd+0x248>
    1eb8:	4463      	add	r3, ip
    1eba:	085b      	lsrs	r3, r3, #1
    1ebc:	000c      	movs	r4, r1
    1ebe:	e75c      	b.n	1d7a <__aeabi_fadd+0x76>
    1ec0:	2aff      	cmp	r2, #255	; 0xff
    1ec2:	d041      	beq.n	1f48 <__aeabi_fadd+0x244>
    1ec4:	000a      	movs	r2, r1
    1ec6:	e779      	b.n	1dbc <__aeabi_fadd+0xb8>
    1ec8:	2201      	movs	r2, #1
    1eca:	1a9b      	subs	r3, r3, r2
    1ecc:	e784      	b.n	1dd8 <__aeabi_fadd+0xd4>
    1ece:	2c00      	cmp	r4, #0
    1ed0:	d01d      	beq.n	1f0e <__aeabi_fadd+0x20a>
    1ed2:	28ff      	cmp	r0, #255	; 0xff
    1ed4:	d022      	beq.n	1f1c <__aeabi_fadd+0x218>
    1ed6:	2480      	movs	r4, #128	; 0x80
    1ed8:	04e4      	lsls	r4, r4, #19
    1eda:	4252      	negs	r2, r2
    1edc:	4323      	orrs	r3, r4
    1ede:	2a1b      	cmp	r2, #27
    1ee0:	dd00      	ble.n	1ee4 <__aeabi_fadd+0x1e0>
    1ee2:	e08a      	b.n	1ffa <__aeabi_fadd+0x2f6>
    1ee4:	001c      	movs	r4, r3
    1ee6:	2520      	movs	r5, #32
    1ee8:	40d4      	lsrs	r4, r2
    1eea:	1aaa      	subs	r2, r5, r2
    1eec:	4093      	lsls	r3, r2
    1eee:	1e5a      	subs	r2, r3, #1
    1ef0:	4193      	sbcs	r3, r2
    1ef2:	4323      	orrs	r3, r4
    1ef4:	4662      	mov	r2, ip
    1ef6:	0004      	movs	r4, r0
    1ef8:	1ad3      	subs	r3, r2, r3
    1efa:	000d      	movs	r5, r1
    1efc:	e725      	b.n	1d4a <__aeabi_fadd+0x46>
    1efe:	2e00      	cmp	r6, #0
    1f00:	d000      	beq.n	1f04 <__aeabi_fadd+0x200>
    1f02:	e726      	b.n	1d52 <__aeabi_fadd+0x4e>
    1f04:	2200      	movs	r2, #0
    1f06:	2400      	movs	r4, #0
    1f08:	e7a9      	b.n	1e5e <__aeabi_fadd+0x15a>
    1f0a:	000c      	movs	r4, r1
    1f0c:	e735      	b.n	1d7a <__aeabi_fadd+0x76>
    1f0e:	2b00      	cmp	r3, #0
    1f10:	d04d      	beq.n	1fae <__aeabi_fadd+0x2aa>
    1f12:	43d2      	mvns	r2, r2
    1f14:	2a00      	cmp	r2, #0
    1f16:	d0ed      	beq.n	1ef4 <__aeabi_fadd+0x1f0>
    1f18:	28ff      	cmp	r0, #255	; 0xff
    1f1a:	d1e0      	bne.n	1ede <__aeabi_fadd+0x1da>
    1f1c:	4663      	mov	r3, ip
    1f1e:	24ff      	movs	r4, #255	; 0xff
    1f20:	000d      	movs	r5, r1
    1f22:	e72a      	b.n	1d7a <__aeabi_fadd+0x76>
    1f24:	29ff      	cmp	r1, #255	; 0xff
    1f26:	d00f      	beq.n	1f48 <__aeabi_fadd+0x244>
    1f28:	0001      	movs	r1, r0
    1f2a:	e773      	b.n	1e14 <__aeabi_fadd+0x110>
    1f2c:	2b00      	cmp	r3, #0
    1f2e:	d061      	beq.n	1ff4 <__aeabi_fadd+0x2f0>
    1f30:	24ff      	movs	r4, #255	; 0xff
    1f32:	2f00      	cmp	r7, #0
    1f34:	d100      	bne.n	1f38 <__aeabi_fadd+0x234>
    1f36:	e720      	b.n	1d7a <__aeabi_fadd+0x76>
    1f38:	2280      	movs	r2, #128	; 0x80
    1f3a:	4641      	mov	r1, r8
    1f3c:	03d2      	lsls	r2, r2, #15
    1f3e:	4211      	tst	r1, r2
    1f40:	d002      	beq.n	1f48 <__aeabi_fadd+0x244>
    1f42:	4216      	tst	r6, r2
    1f44:	d100      	bne.n	1f48 <__aeabi_fadd+0x244>
    1f46:	003b      	movs	r3, r7
    1f48:	24ff      	movs	r4, #255	; 0xff
    1f4a:	e716      	b.n	1d7a <__aeabi_fadd+0x76>
    1f4c:	24ff      	movs	r4, #255	; 0xff
    1f4e:	2300      	movs	r3, #0
    1f50:	e724      	b.n	1d9c <__aeabi_fadd+0x98>
    1f52:	2c00      	cmp	r4, #0
    1f54:	d1ea      	bne.n	1f2c <__aeabi_fadd+0x228>
    1f56:	2b00      	cmp	r3, #0
    1f58:	d058      	beq.n	200c <STACK_SIZE+0xc>
    1f5a:	2f00      	cmp	r7, #0
    1f5c:	d100      	bne.n	1f60 <__aeabi_fadd+0x25c>
    1f5e:	e70c      	b.n	1d7a <__aeabi_fadd+0x76>
    1f60:	4463      	add	r3, ip
    1f62:	015a      	lsls	r2, r3, #5
    1f64:	d400      	bmi.n	1f68 <__aeabi_fadd+0x264>
    1f66:	e739      	b.n	1ddc <__aeabi_fadd+0xd8>
    1f68:	4a2e      	ldr	r2, [pc, #184]	; (2024 <STACK_SIZE+0x24>)
    1f6a:	000c      	movs	r4, r1
    1f6c:	4013      	ands	r3, r2
    1f6e:	e704      	b.n	1d7a <__aeabi_fadd+0x76>
    1f70:	2101      	movs	r1, #1
    1f72:	e75c      	b.n	1e2e <__aeabi_fadd+0x12a>
    1f74:	2c00      	cmp	r4, #0
    1f76:	d11e      	bne.n	1fb6 <__aeabi_fadd+0x2b2>
    1f78:	2b00      	cmp	r3, #0
    1f7a:	d040      	beq.n	1ffe <__aeabi_fadd+0x2fa>
    1f7c:	43c9      	mvns	r1, r1
    1f7e:	2900      	cmp	r1, #0
    1f80:	d00b      	beq.n	1f9a <__aeabi_fadd+0x296>
    1f82:	28ff      	cmp	r0, #255	; 0xff
    1f84:	d036      	beq.n	1ff4 <__aeabi_fadd+0x2f0>
    1f86:	291b      	cmp	r1, #27
    1f88:	dc47      	bgt.n	201a <STACK_SIZE+0x1a>
    1f8a:	001c      	movs	r4, r3
    1f8c:	2620      	movs	r6, #32
    1f8e:	40cc      	lsrs	r4, r1
    1f90:	1a71      	subs	r1, r6, r1
    1f92:	408b      	lsls	r3, r1
    1f94:	1e59      	subs	r1, r3, #1
    1f96:	418b      	sbcs	r3, r1
    1f98:	4323      	orrs	r3, r4
    1f9a:	4463      	add	r3, ip
    1f9c:	0004      	movs	r4, r0
    1f9e:	e747      	b.n	1e30 <__aeabi_fadd+0x12c>
    1fa0:	2b00      	cmp	r3, #0
    1fa2:	d118      	bne.n	1fd6 <__aeabi_fadd+0x2d2>
    1fa4:	1e3b      	subs	r3, r7, #0
    1fa6:	d02d      	beq.n	2004 <STACK_SIZE+0x4>
    1fa8:	000d      	movs	r5, r1
    1faa:	24ff      	movs	r4, #255	; 0xff
    1fac:	e6e5      	b.n	1d7a <__aeabi_fadd+0x76>
    1fae:	003b      	movs	r3, r7
    1fb0:	0004      	movs	r4, r0
    1fb2:	000d      	movs	r5, r1
    1fb4:	e6e1      	b.n	1d7a <__aeabi_fadd+0x76>
    1fb6:	28ff      	cmp	r0, #255	; 0xff
    1fb8:	d01c      	beq.n	1ff4 <__aeabi_fadd+0x2f0>
    1fba:	2480      	movs	r4, #128	; 0x80
    1fbc:	04e4      	lsls	r4, r4, #19
    1fbe:	4249      	negs	r1, r1
    1fc0:	4323      	orrs	r3, r4
    1fc2:	e7e0      	b.n	1f86 <__aeabi_fadd+0x282>
    1fc4:	2f00      	cmp	r7, #0
    1fc6:	d100      	bne.n	1fca <__aeabi_fadd+0x2c6>
    1fc8:	e6d7      	b.n	1d7a <__aeabi_fadd+0x76>
    1fca:	1bde      	subs	r6, r3, r7
    1fcc:	0172      	lsls	r2, r6, #5
    1fce:	d51f      	bpl.n	2010 <STACK_SIZE+0x10>
    1fd0:	1afb      	subs	r3, r7, r3
    1fd2:	000d      	movs	r5, r1
    1fd4:	e6d1      	b.n	1d7a <__aeabi_fadd+0x76>
    1fd6:	24ff      	movs	r4, #255	; 0xff
    1fd8:	2f00      	cmp	r7, #0
    1fda:	d100      	bne.n	1fde <__aeabi_fadd+0x2da>
    1fdc:	e6cd      	b.n	1d7a <__aeabi_fadd+0x76>
    1fde:	2280      	movs	r2, #128	; 0x80
    1fe0:	4640      	mov	r0, r8
    1fe2:	03d2      	lsls	r2, r2, #15
    1fe4:	4210      	tst	r0, r2
    1fe6:	d0af      	beq.n	1f48 <__aeabi_fadd+0x244>
    1fe8:	4216      	tst	r6, r2
    1fea:	d1ad      	bne.n	1f48 <__aeabi_fadd+0x244>
    1fec:	003b      	movs	r3, r7
    1fee:	000d      	movs	r5, r1
    1ff0:	24ff      	movs	r4, #255	; 0xff
    1ff2:	e6c2      	b.n	1d7a <__aeabi_fadd+0x76>
    1ff4:	4663      	mov	r3, ip
    1ff6:	24ff      	movs	r4, #255	; 0xff
    1ff8:	e6bf      	b.n	1d7a <__aeabi_fadd+0x76>
    1ffa:	2301      	movs	r3, #1
    1ffc:	e77a      	b.n	1ef4 <__aeabi_fadd+0x1f0>
    1ffe:	003b      	movs	r3, r7
    2000:	0004      	movs	r4, r0
    2002:	e6ba      	b.n	1d7a <__aeabi_fadd+0x76>
    2004:	2680      	movs	r6, #128	; 0x80
    2006:	2200      	movs	r2, #0
    2008:	03f6      	lsls	r6, r6, #15
    200a:	e6f0      	b.n	1dee <__aeabi_fadd+0xea>
    200c:	003b      	movs	r3, r7
    200e:	e6b4      	b.n	1d7a <__aeabi_fadd+0x76>
    2010:	1e33      	subs	r3, r6, #0
    2012:	d000      	beq.n	2016 <STACK_SIZE+0x16>
    2014:	e6e2      	b.n	1ddc <__aeabi_fadd+0xd8>
    2016:	2200      	movs	r2, #0
    2018:	e721      	b.n	1e5e <__aeabi_fadd+0x15a>
    201a:	2301      	movs	r3, #1
    201c:	e7bd      	b.n	1f9a <__aeabi_fadd+0x296>
    201e:	46c0      	nop			; (mov r8, r8)
    2020:	7dffffff 	.word	0x7dffffff
    2024:	fbffffff 	.word	0xfbffffff

00002028 <__aeabi_fdiv>:
    2028:	b5f0      	push	{r4, r5, r6, r7, lr}
    202a:	4657      	mov	r7, sl
    202c:	464e      	mov	r6, r9
    202e:	46de      	mov	lr, fp
    2030:	4645      	mov	r5, r8
    2032:	b5e0      	push	{r5, r6, r7, lr}
    2034:	0244      	lsls	r4, r0, #9
    2036:	0043      	lsls	r3, r0, #1
    2038:	0fc6      	lsrs	r6, r0, #31
    203a:	b083      	sub	sp, #12
    203c:	1c0f      	adds	r7, r1, #0
    203e:	0a64      	lsrs	r4, r4, #9
    2040:	0e1b      	lsrs	r3, r3, #24
    2042:	46b2      	mov	sl, r6
    2044:	d053      	beq.n	20ee <__aeabi_fdiv+0xc6>
    2046:	2bff      	cmp	r3, #255	; 0xff
    2048:	d027      	beq.n	209a <__aeabi_fdiv+0x72>
    204a:	2280      	movs	r2, #128	; 0x80
    204c:	00e4      	lsls	r4, r4, #3
    204e:	04d2      	lsls	r2, r2, #19
    2050:	4314      	orrs	r4, r2
    2052:	227f      	movs	r2, #127	; 0x7f
    2054:	4252      	negs	r2, r2
    2056:	4690      	mov	r8, r2
    2058:	4498      	add	r8, r3
    205a:	2300      	movs	r3, #0
    205c:	4699      	mov	r9, r3
    205e:	469b      	mov	fp, r3
    2060:	027d      	lsls	r5, r7, #9
    2062:	0078      	lsls	r0, r7, #1
    2064:	0ffb      	lsrs	r3, r7, #31
    2066:	0a6d      	lsrs	r5, r5, #9
    2068:	0e00      	lsrs	r0, r0, #24
    206a:	9300      	str	r3, [sp, #0]
    206c:	d024      	beq.n	20b8 <__aeabi_fdiv+0x90>
    206e:	28ff      	cmp	r0, #255	; 0xff
    2070:	d046      	beq.n	2100 <__aeabi_fdiv+0xd8>
    2072:	2380      	movs	r3, #128	; 0x80
    2074:	2100      	movs	r1, #0
    2076:	00ed      	lsls	r5, r5, #3
    2078:	04db      	lsls	r3, r3, #19
    207a:	431d      	orrs	r5, r3
    207c:	387f      	subs	r0, #127	; 0x7f
    207e:	4647      	mov	r7, r8
    2080:	1a38      	subs	r0, r7, r0
    2082:	464f      	mov	r7, r9
    2084:	430f      	orrs	r7, r1
    2086:	00bf      	lsls	r7, r7, #2
    2088:	46b9      	mov	r9, r7
    208a:	0033      	movs	r3, r6
    208c:	9a00      	ldr	r2, [sp, #0]
    208e:	4f87      	ldr	r7, [pc, #540]	; (22ac <__aeabi_fdiv+0x284>)
    2090:	4053      	eors	r3, r2
    2092:	464a      	mov	r2, r9
    2094:	58ba      	ldr	r2, [r7, r2]
    2096:	9301      	str	r3, [sp, #4]
    2098:	4697      	mov	pc, r2
    209a:	2c00      	cmp	r4, #0
    209c:	d14e      	bne.n	213c <__aeabi_fdiv+0x114>
    209e:	2308      	movs	r3, #8
    20a0:	4699      	mov	r9, r3
    20a2:	33f7      	adds	r3, #247	; 0xf7
    20a4:	4698      	mov	r8, r3
    20a6:	3bfd      	subs	r3, #253	; 0xfd
    20a8:	469b      	mov	fp, r3
    20aa:	027d      	lsls	r5, r7, #9
    20ac:	0078      	lsls	r0, r7, #1
    20ae:	0ffb      	lsrs	r3, r7, #31
    20b0:	0a6d      	lsrs	r5, r5, #9
    20b2:	0e00      	lsrs	r0, r0, #24
    20b4:	9300      	str	r3, [sp, #0]
    20b6:	d1da      	bne.n	206e <__aeabi_fdiv+0x46>
    20b8:	2d00      	cmp	r5, #0
    20ba:	d126      	bne.n	210a <__aeabi_fdiv+0xe2>
    20bc:	2000      	movs	r0, #0
    20be:	2101      	movs	r1, #1
    20c0:	0033      	movs	r3, r6
    20c2:	9a00      	ldr	r2, [sp, #0]
    20c4:	4f7a      	ldr	r7, [pc, #488]	; (22b0 <__aeabi_fdiv+0x288>)
    20c6:	4053      	eors	r3, r2
    20c8:	4642      	mov	r2, r8
    20ca:	1a10      	subs	r0, r2, r0
    20cc:	464a      	mov	r2, r9
    20ce:	430a      	orrs	r2, r1
    20d0:	0092      	lsls	r2, r2, #2
    20d2:	58ba      	ldr	r2, [r7, r2]
    20d4:	001d      	movs	r5, r3
    20d6:	4697      	mov	pc, r2
    20d8:	9b00      	ldr	r3, [sp, #0]
    20da:	002c      	movs	r4, r5
    20dc:	469a      	mov	sl, r3
    20de:	468b      	mov	fp, r1
    20e0:	465b      	mov	r3, fp
    20e2:	2b02      	cmp	r3, #2
    20e4:	d131      	bne.n	214a <__aeabi_fdiv+0x122>
    20e6:	4653      	mov	r3, sl
    20e8:	21ff      	movs	r1, #255	; 0xff
    20ea:	2400      	movs	r4, #0
    20ec:	e038      	b.n	2160 <__aeabi_fdiv+0x138>
    20ee:	2c00      	cmp	r4, #0
    20f0:	d117      	bne.n	2122 <__aeabi_fdiv+0xfa>
    20f2:	2304      	movs	r3, #4
    20f4:	4699      	mov	r9, r3
    20f6:	2300      	movs	r3, #0
    20f8:	4698      	mov	r8, r3
    20fa:	3301      	adds	r3, #1
    20fc:	469b      	mov	fp, r3
    20fe:	e7af      	b.n	2060 <__aeabi_fdiv+0x38>
    2100:	20ff      	movs	r0, #255	; 0xff
    2102:	2d00      	cmp	r5, #0
    2104:	d10b      	bne.n	211e <__aeabi_fdiv+0xf6>
    2106:	2102      	movs	r1, #2
    2108:	e7da      	b.n	20c0 <__aeabi_fdiv+0x98>
    210a:	0028      	movs	r0, r5
    210c:	f001 fe4e 	bl	3dac <__clzsi2>
    2110:	1f43      	subs	r3, r0, #5
    2112:	409d      	lsls	r5, r3
    2114:	2376      	movs	r3, #118	; 0x76
    2116:	425b      	negs	r3, r3
    2118:	1a18      	subs	r0, r3, r0
    211a:	2100      	movs	r1, #0
    211c:	e7af      	b.n	207e <__aeabi_fdiv+0x56>
    211e:	2103      	movs	r1, #3
    2120:	e7ad      	b.n	207e <__aeabi_fdiv+0x56>
    2122:	0020      	movs	r0, r4
    2124:	f001 fe42 	bl	3dac <__clzsi2>
    2128:	1f43      	subs	r3, r0, #5
    212a:	409c      	lsls	r4, r3
    212c:	2376      	movs	r3, #118	; 0x76
    212e:	425b      	negs	r3, r3
    2130:	1a1b      	subs	r3, r3, r0
    2132:	4698      	mov	r8, r3
    2134:	2300      	movs	r3, #0
    2136:	4699      	mov	r9, r3
    2138:	469b      	mov	fp, r3
    213a:	e791      	b.n	2060 <__aeabi_fdiv+0x38>
    213c:	230c      	movs	r3, #12
    213e:	4699      	mov	r9, r3
    2140:	33f3      	adds	r3, #243	; 0xf3
    2142:	4698      	mov	r8, r3
    2144:	3bfc      	subs	r3, #252	; 0xfc
    2146:	469b      	mov	fp, r3
    2148:	e78a      	b.n	2060 <__aeabi_fdiv+0x38>
    214a:	2b03      	cmp	r3, #3
    214c:	d100      	bne.n	2150 <__aeabi_fdiv+0x128>
    214e:	e0a5      	b.n	229c <__aeabi_fdiv+0x274>
    2150:	4655      	mov	r5, sl
    2152:	2b01      	cmp	r3, #1
    2154:	d000      	beq.n	2158 <__aeabi_fdiv+0x130>
    2156:	e081      	b.n	225c <__aeabi_fdiv+0x234>
    2158:	2301      	movs	r3, #1
    215a:	2100      	movs	r1, #0
    215c:	2400      	movs	r4, #0
    215e:	402b      	ands	r3, r5
    2160:	0264      	lsls	r4, r4, #9
    2162:	05c9      	lsls	r1, r1, #23
    2164:	0a60      	lsrs	r0, r4, #9
    2166:	07db      	lsls	r3, r3, #31
    2168:	4308      	orrs	r0, r1
    216a:	4318      	orrs	r0, r3
    216c:	b003      	add	sp, #12
    216e:	bc3c      	pop	{r2, r3, r4, r5}
    2170:	4690      	mov	r8, r2
    2172:	4699      	mov	r9, r3
    2174:	46a2      	mov	sl, r4
    2176:	46ab      	mov	fp, r5
    2178:	bdf0      	pop	{r4, r5, r6, r7, pc}
    217a:	2480      	movs	r4, #128	; 0x80
    217c:	2300      	movs	r3, #0
    217e:	03e4      	lsls	r4, r4, #15
    2180:	21ff      	movs	r1, #255	; 0xff
    2182:	e7ed      	b.n	2160 <__aeabi_fdiv+0x138>
    2184:	21ff      	movs	r1, #255	; 0xff
    2186:	2400      	movs	r4, #0
    2188:	e7ea      	b.n	2160 <__aeabi_fdiv+0x138>
    218a:	2301      	movs	r3, #1
    218c:	1a59      	subs	r1, r3, r1
    218e:	291b      	cmp	r1, #27
    2190:	dd66      	ble.n	2260 <__aeabi_fdiv+0x238>
    2192:	9a01      	ldr	r2, [sp, #4]
    2194:	4013      	ands	r3, r2
    2196:	2100      	movs	r1, #0
    2198:	2400      	movs	r4, #0
    219a:	e7e1      	b.n	2160 <__aeabi_fdiv+0x138>
    219c:	2380      	movs	r3, #128	; 0x80
    219e:	03db      	lsls	r3, r3, #15
    21a0:	421c      	tst	r4, r3
    21a2:	d038      	beq.n	2216 <__aeabi_fdiv+0x1ee>
    21a4:	421d      	tst	r5, r3
    21a6:	d051      	beq.n	224c <__aeabi_fdiv+0x224>
    21a8:	431c      	orrs	r4, r3
    21aa:	0264      	lsls	r4, r4, #9
    21ac:	0a64      	lsrs	r4, r4, #9
    21ae:	0033      	movs	r3, r6
    21b0:	21ff      	movs	r1, #255	; 0xff
    21b2:	e7d5      	b.n	2160 <__aeabi_fdiv+0x138>
    21b4:	0163      	lsls	r3, r4, #5
    21b6:	016c      	lsls	r4, r5, #5
    21b8:	42a3      	cmp	r3, r4
    21ba:	d23b      	bcs.n	2234 <__aeabi_fdiv+0x20c>
    21bc:	261b      	movs	r6, #27
    21be:	2100      	movs	r1, #0
    21c0:	3801      	subs	r0, #1
    21c2:	2501      	movs	r5, #1
    21c4:	001f      	movs	r7, r3
    21c6:	0049      	lsls	r1, r1, #1
    21c8:	005b      	lsls	r3, r3, #1
    21ca:	2f00      	cmp	r7, #0
    21cc:	db01      	blt.n	21d2 <__aeabi_fdiv+0x1aa>
    21ce:	429c      	cmp	r4, r3
    21d0:	d801      	bhi.n	21d6 <__aeabi_fdiv+0x1ae>
    21d2:	1b1b      	subs	r3, r3, r4
    21d4:	4329      	orrs	r1, r5
    21d6:	3e01      	subs	r6, #1
    21d8:	2e00      	cmp	r6, #0
    21da:	d1f3      	bne.n	21c4 <__aeabi_fdiv+0x19c>
    21dc:	001c      	movs	r4, r3
    21de:	1e63      	subs	r3, r4, #1
    21e0:	419c      	sbcs	r4, r3
    21e2:	430c      	orrs	r4, r1
    21e4:	0001      	movs	r1, r0
    21e6:	317f      	adds	r1, #127	; 0x7f
    21e8:	2900      	cmp	r1, #0
    21ea:	ddce      	ble.n	218a <__aeabi_fdiv+0x162>
    21ec:	0763      	lsls	r3, r4, #29
    21ee:	d004      	beq.n	21fa <__aeabi_fdiv+0x1d2>
    21f0:	230f      	movs	r3, #15
    21f2:	4023      	ands	r3, r4
    21f4:	2b04      	cmp	r3, #4
    21f6:	d000      	beq.n	21fa <__aeabi_fdiv+0x1d2>
    21f8:	3404      	adds	r4, #4
    21fa:	0123      	lsls	r3, r4, #4
    21fc:	d503      	bpl.n	2206 <__aeabi_fdiv+0x1de>
    21fe:	0001      	movs	r1, r0
    2200:	4b2c      	ldr	r3, [pc, #176]	; (22b4 <__aeabi_fdiv+0x28c>)
    2202:	3180      	adds	r1, #128	; 0x80
    2204:	401c      	ands	r4, r3
    2206:	29fe      	cmp	r1, #254	; 0xfe
    2208:	dd0d      	ble.n	2226 <__aeabi_fdiv+0x1fe>
    220a:	2301      	movs	r3, #1
    220c:	9a01      	ldr	r2, [sp, #4]
    220e:	21ff      	movs	r1, #255	; 0xff
    2210:	4013      	ands	r3, r2
    2212:	2400      	movs	r4, #0
    2214:	e7a4      	b.n	2160 <__aeabi_fdiv+0x138>
    2216:	2380      	movs	r3, #128	; 0x80
    2218:	03db      	lsls	r3, r3, #15
    221a:	431c      	orrs	r4, r3
    221c:	0264      	lsls	r4, r4, #9
    221e:	0a64      	lsrs	r4, r4, #9
    2220:	0033      	movs	r3, r6
    2222:	21ff      	movs	r1, #255	; 0xff
    2224:	e79c      	b.n	2160 <__aeabi_fdiv+0x138>
    2226:	2301      	movs	r3, #1
    2228:	9a01      	ldr	r2, [sp, #4]
    222a:	01a4      	lsls	r4, r4, #6
    222c:	0a64      	lsrs	r4, r4, #9
    222e:	b2c9      	uxtb	r1, r1
    2230:	4013      	ands	r3, r2
    2232:	e795      	b.n	2160 <__aeabi_fdiv+0x138>
    2234:	1b1b      	subs	r3, r3, r4
    2236:	261a      	movs	r6, #26
    2238:	2101      	movs	r1, #1
    223a:	e7c2      	b.n	21c2 <__aeabi_fdiv+0x19a>
    223c:	9b00      	ldr	r3, [sp, #0]
    223e:	468b      	mov	fp, r1
    2240:	469a      	mov	sl, r3
    2242:	2400      	movs	r4, #0
    2244:	e74c      	b.n	20e0 <__aeabi_fdiv+0xb8>
    2246:	0263      	lsls	r3, r4, #9
    2248:	d5e5      	bpl.n	2216 <__aeabi_fdiv+0x1ee>
    224a:	2500      	movs	r5, #0
    224c:	2480      	movs	r4, #128	; 0x80
    224e:	03e4      	lsls	r4, r4, #15
    2250:	432c      	orrs	r4, r5
    2252:	0264      	lsls	r4, r4, #9
    2254:	0a64      	lsrs	r4, r4, #9
    2256:	9b00      	ldr	r3, [sp, #0]
    2258:	21ff      	movs	r1, #255	; 0xff
    225a:	e781      	b.n	2160 <__aeabi_fdiv+0x138>
    225c:	9501      	str	r5, [sp, #4]
    225e:	e7c1      	b.n	21e4 <__aeabi_fdiv+0x1bc>
    2260:	0023      	movs	r3, r4
    2262:	2020      	movs	r0, #32
    2264:	40cb      	lsrs	r3, r1
    2266:	1a41      	subs	r1, r0, r1
    2268:	408c      	lsls	r4, r1
    226a:	1e61      	subs	r1, r4, #1
    226c:	418c      	sbcs	r4, r1
    226e:	431c      	orrs	r4, r3
    2270:	0763      	lsls	r3, r4, #29
    2272:	d004      	beq.n	227e <__aeabi_fdiv+0x256>
    2274:	230f      	movs	r3, #15
    2276:	4023      	ands	r3, r4
    2278:	2b04      	cmp	r3, #4
    227a:	d000      	beq.n	227e <__aeabi_fdiv+0x256>
    227c:	3404      	adds	r4, #4
    227e:	0163      	lsls	r3, r4, #5
    2280:	d505      	bpl.n	228e <__aeabi_fdiv+0x266>
    2282:	2301      	movs	r3, #1
    2284:	9a01      	ldr	r2, [sp, #4]
    2286:	2101      	movs	r1, #1
    2288:	4013      	ands	r3, r2
    228a:	2400      	movs	r4, #0
    228c:	e768      	b.n	2160 <__aeabi_fdiv+0x138>
    228e:	2301      	movs	r3, #1
    2290:	9a01      	ldr	r2, [sp, #4]
    2292:	01a4      	lsls	r4, r4, #6
    2294:	0a64      	lsrs	r4, r4, #9
    2296:	4013      	ands	r3, r2
    2298:	2100      	movs	r1, #0
    229a:	e761      	b.n	2160 <__aeabi_fdiv+0x138>
    229c:	2380      	movs	r3, #128	; 0x80
    229e:	03db      	lsls	r3, r3, #15
    22a0:	431c      	orrs	r4, r3
    22a2:	0264      	lsls	r4, r4, #9
    22a4:	0a64      	lsrs	r4, r4, #9
    22a6:	4653      	mov	r3, sl
    22a8:	21ff      	movs	r1, #255	; 0xff
    22aa:	e759      	b.n	2160 <__aeabi_fdiv+0x138>
    22ac:	00004b10 	.word	0x00004b10
    22b0:	00004b50 	.word	0x00004b50
    22b4:	f7ffffff 	.word	0xf7ffffff

000022b8 <__eqsf2>:
    22b8:	b570      	push	{r4, r5, r6, lr}
    22ba:	0042      	lsls	r2, r0, #1
    22bc:	0245      	lsls	r5, r0, #9
    22be:	024e      	lsls	r6, r1, #9
    22c0:	004c      	lsls	r4, r1, #1
    22c2:	0fc3      	lsrs	r3, r0, #31
    22c4:	0a6d      	lsrs	r5, r5, #9
    22c6:	0e12      	lsrs	r2, r2, #24
    22c8:	0a76      	lsrs	r6, r6, #9
    22ca:	0e24      	lsrs	r4, r4, #24
    22cc:	0fc9      	lsrs	r1, r1, #31
    22ce:	2001      	movs	r0, #1
    22d0:	2aff      	cmp	r2, #255	; 0xff
    22d2:	d006      	beq.n	22e2 <__eqsf2+0x2a>
    22d4:	2cff      	cmp	r4, #255	; 0xff
    22d6:	d003      	beq.n	22e0 <__eqsf2+0x28>
    22d8:	42a2      	cmp	r2, r4
    22da:	d101      	bne.n	22e0 <__eqsf2+0x28>
    22dc:	42b5      	cmp	r5, r6
    22de:	d006      	beq.n	22ee <__eqsf2+0x36>
    22e0:	bd70      	pop	{r4, r5, r6, pc}
    22e2:	2d00      	cmp	r5, #0
    22e4:	d1fc      	bne.n	22e0 <__eqsf2+0x28>
    22e6:	2cff      	cmp	r4, #255	; 0xff
    22e8:	d1fa      	bne.n	22e0 <__eqsf2+0x28>
    22ea:	2e00      	cmp	r6, #0
    22ec:	d1f8      	bne.n	22e0 <__eqsf2+0x28>
    22ee:	428b      	cmp	r3, r1
    22f0:	d006      	beq.n	2300 <__eqsf2+0x48>
    22f2:	2001      	movs	r0, #1
    22f4:	2a00      	cmp	r2, #0
    22f6:	d1f3      	bne.n	22e0 <__eqsf2+0x28>
    22f8:	0028      	movs	r0, r5
    22fa:	1e45      	subs	r5, r0, #1
    22fc:	41a8      	sbcs	r0, r5
    22fe:	e7ef      	b.n	22e0 <__eqsf2+0x28>
    2300:	2000      	movs	r0, #0
    2302:	e7ed      	b.n	22e0 <__eqsf2+0x28>

00002304 <__gesf2>:
    2304:	b5f0      	push	{r4, r5, r6, r7, lr}
    2306:	0042      	lsls	r2, r0, #1
    2308:	0245      	lsls	r5, r0, #9
    230a:	024c      	lsls	r4, r1, #9
    230c:	0fc3      	lsrs	r3, r0, #31
    230e:	0048      	lsls	r0, r1, #1
    2310:	0a6d      	lsrs	r5, r5, #9
    2312:	0e12      	lsrs	r2, r2, #24
    2314:	0a64      	lsrs	r4, r4, #9
    2316:	0e00      	lsrs	r0, r0, #24
    2318:	0fc9      	lsrs	r1, r1, #31
    231a:	2aff      	cmp	r2, #255	; 0xff
    231c:	d01e      	beq.n	235c <__gesf2+0x58>
    231e:	28ff      	cmp	r0, #255	; 0xff
    2320:	d021      	beq.n	2366 <__gesf2+0x62>
    2322:	2a00      	cmp	r2, #0
    2324:	d10a      	bne.n	233c <__gesf2+0x38>
    2326:	426e      	negs	r6, r5
    2328:	416e      	adcs	r6, r5
    232a:	b2f6      	uxtb	r6, r6
    232c:	2800      	cmp	r0, #0
    232e:	d10f      	bne.n	2350 <__gesf2+0x4c>
    2330:	2c00      	cmp	r4, #0
    2332:	d10d      	bne.n	2350 <__gesf2+0x4c>
    2334:	2000      	movs	r0, #0
    2336:	2d00      	cmp	r5, #0
    2338:	d009      	beq.n	234e <__gesf2+0x4a>
    233a:	e005      	b.n	2348 <__gesf2+0x44>
    233c:	2800      	cmp	r0, #0
    233e:	d101      	bne.n	2344 <__gesf2+0x40>
    2340:	2c00      	cmp	r4, #0
    2342:	d001      	beq.n	2348 <__gesf2+0x44>
    2344:	428b      	cmp	r3, r1
    2346:	d011      	beq.n	236c <__gesf2+0x68>
    2348:	2101      	movs	r1, #1
    234a:	4258      	negs	r0, r3
    234c:	4308      	orrs	r0, r1
    234e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2350:	2e00      	cmp	r6, #0
    2352:	d0f7      	beq.n	2344 <__gesf2+0x40>
    2354:	2001      	movs	r0, #1
    2356:	3901      	subs	r1, #1
    2358:	4308      	orrs	r0, r1
    235a:	e7f8      	b.n	234e <__gesf2+0x4a>
    235c:	2d00      	cmp	r5, #0
    235e:	d0de      	beq.n	231e <__gesf2+0x1a>
    2360:	2002      	movs	r0, #2
    2362:	4240      	negs	r0, r0
    2364:	e7f3      	b.n	234e <__gesf2+0x4a>
    2366:	2c00      	cmp	r4, #0
    2368:	d0db      	beq.n	2322 <__gesf2+0x1e>
    236a:	e7f9      	b.n	2360 <__gesf2+0x5c>
    236c:	4282      	cmp	r2, r0
    236e:	dceb      	bgt.n	2348 <__gesf2+0x44>
    2370:	db04      	blt.n	237c <__gesf2+0x78>
    2372:	42a5      	cmp	r5, r4
    2374:	d8e8      	bhi.n	2348 <__gesf2+0x44>
    2376:	2000      	movs	r0, #0
    2378:	42a5      	cmp	r5, r4
    237a:	d2e8      	bcs.n	234e <__gesf2+0x4a>
    237c:	2101      	movs	r1, #1
    237e:	1e58      	subs	r0, r3, #1
    2380:	4308      	orrs	r0, r1
    2382:	e7e4      	b.n	234e <__gesf2+0x4a>

00002384 <__lesf2>:
    2384:	b5f0      	push	{r4, r5, r6, r7, lr}
    2386:	0042      	lsls	r2, r0, #1
    2388:	024d      	lsls	r5, r1, #9
    238a:	004c      	lsls	r4, r1, #1
    238c:	0246      	lsls	r6, r0, #9
    238e:	0a76      	lsrs	r6, r6, #9
    2390:	0e12      	lsrs	r2, r2, #24
    2392:	0fc3      	lsrs	r3, r0, #31
    2394:	0a6d      	lsrs	r5, r5, #9
    2396:	0e24      	lsrs	r4, r4, #24
    2398:	0fc9      	lsrs	r1, r1, #31
    239a:	2aff      	cmp	r2, #255	; 0xff
    239c:	d016      	beq.n	23cc <__lesf2+0x48>
    239e:	2cff      	cmp	r4, #255	; 0xff
    23a0:	d018      	beq.n	23d4 <__lesf2+0x50>
    23a2:	2a00      	cmp	r2, #0
    23a4:	d10a      	bne.n	23bc <__lesf2+0x38>
    23a6:	4270      	negs	r0, r6
    23a8:	4170      	adcs	r0, r6
    23aa:	b2c0      	uxtb	r0, r0
    23ac:	2c00      	cmp	r4, #0
    23ae:	d015      	beq.n	23dc <__lesf2+0x58>
    23b0:	2800      	cmp	r0, #0
    23b2:	d005      	beq.n	23c0 <__lesf2+0x3c>
    23b4:	2001      	movs	r0, #1
    23b6:	3901      	subs	r1, #1
    23b8:	4308      	orrs	r0, r1
    23ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    23bc:	2c00      	cmp	r4, #0
    23be:	d013      	beq.n	23e8 <__lesf2+0x64>
    23c0:	4299      	cmp	r1, r3
    23c2:	d014      	beq.n	23ee <__lesf2+0x6a>
    23c4:	2001      	movs	r0, #1
    23c6:	425b      	negs	r3, r3
    23c8:	4318      	orrs	r0, r3
    23ca:	e7f6      	b.n	23ba <__lesf2+0x36>
    23cc:	2002      	movs	r0, #2
    23ce:	2e00      	cmp	r6, #0
    23d0:	d1f3      	bne.n	23ba <__lesf2+0x36>
    23d2:	e7e4      	b.n	239e <__lesf2+0x1a>
    23d4:	2002      	movs	r0, #2
    23d6:	2d00      	cmp	r5, #0
    23d8:	d1ef      	bne.n	23ba <__lesf2+0x36>
    23da:	e7e2      	b.n	23a2 <__lesf2+0x1e>
    23dc:	2d00      	cmp	r5, #0
    23de:	d1e7      	bne.n	23b0 <__lesf2+0x2c>
    23e0:	2000      	movs	r0, #0
    23e2:	2e00      	cmp	r6, #0
    23e4:	d0e9      	beq.n	23ba <__lesf2+0x36>
    23e6:	e7ed      	b.n	23c4 <__lesf2+0x40>
    23e8:	2d00      	cmp	r5, #0
    23ea:	d1e9      	bne.n	23c0 <__lesf2+0x3c>
    23ec:	e7ea      	b.n	23c4 <__lesf2+0x40>
    23ee:	42a2      	cmp	r2, r4
    23f0:	dc06      	bgt.n	2400 <__lesf2+0x7c>
    23f2:	dbdf      	blt.n	23b4 <__lesf2+0x30>
    23f4:	42ae      	cmp	r6, r5
    23f6:	d803      	bhi.n	2400 <__lesf2+0x7c>
    23f8:	2000      	movs	r0, #0
    23fa:	42ae      	cmp	r6, r5
    23fc:	d3da      	bcc.n	23b4 <__lesf2+0x30>
    23fe:	e7dc      	b.n	23ba <__lesf2+0x36>
    2400:	2001      	movs	r0, #1
    2402:	4249      	negs	r1, r1
    2404:	4308      	orrs	r0, r1
    2406:	e7d8      	b.n	23ba <__lesf2+0x36>

00002408 <__aeabi_fmul>:
    2408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    240a:	4657      	mov	r7, sl
    240c:	464e      	mov	r6, r9
    240e:	4645      	mov	r5, r8
    2410:	46de      	mov	lr, fp
    2412:	b5e0      	push	{r5, r6, r7, lr}
    2414:	0247      	lsls	r7, r0, #9
    2416:	0046      	lsls	r6, r0, #1
    2418:	4688      	mov	r8, r1
    241a:	0a7f      	lsrs	r7, r7, #9
    241c:	0e36      	lsrs	r6, r6, #24
    241e:	0fc4      	lsrs	r4, r0, #31
    2420:	2e00      	cmp	r6, #0
    2422:	d047      	beq.n	24b4 <__aeabi_fmul+0xac>
    2424:	2eff      	cmp	r6, #255	; 0xff
    2426:	d024      	beq.n	2472 <__aeabi_fmul+0x6a>
    2428:	00fb      	lsls	r3, r7, #3
    242a:	2780      	movs	r7, #128	; 0x80
    242c:	04ff      	lsls	r7, r7, #19
    242e:	431f      	orrs	r7, r3
    2430:	2300      	movs	r3, #0
    2432:	4699      	mov	r9, r3
    2434:	469a      	mov	sl, r3
    2436:	3e7f      	subs	r6, #127	; 0x7f
    2438:	4643      	mov	r3, r8
    243a:	025d      	lsls	r5, r3, #9
    243c:	0058      	lsls	r0, r3, #1
    243e:	0fdb      	lsrs	r3, r3, #31
    2440:	0a6d      	lsrs	r5, r5, #9
    2442:	0e00      	lsrs	r0, r0, #24
    2444:	4698      	mov	r8, r3
    2446:	d043      	beq.n	24d0 <__aeabi_fmul+0xc8>
    2448:	28ff      	cmp	r0, #255	; 0xff
    244a:	d03b      	beq.n	24c4 <__aeabi_fmul+0xbc>
    244c:	00eb      	lsls	r3, r5, #3
    244e:	2580      	movs	r5, #128	; 0x80
    2450:	2200      	movs	r2, #0
    2452:	04ed      	lsls	r5, r5, #19
    2454:	431d      	orrs	r5, r3
    2456:	387f      	subs	r0, #127	; 0x7f
    2458:	1836      	adds	r6, r6, r0
    245a:	1c73      	adds	r3, r6, #1
    245c:	4641      	mov	r1, r8
    245e:	469b      	mov	fp, r3
    2460:	464b      	mov	r3, r9
    2462:	4061      	eors	r1, r4
    2464:	4313      	orrs	r3, r2
    2466:	2b0f      	cmp	r3, #15
    2468:	d864      	bhi.n	2534 <__aeabi_fmul+0x12c>
    246a:	4875      	ldr	r0, [pc, #468]	; (2640 <__aeabi_fmul+0x238>)
    246c:	009b      	lsls	r3, r3, #2
    246e:	58c3      	ldr	r3, [r0, r3]
    2470:	469f      	mov	pc, r3
    2472:	2f00      	cmp	r7, #0
    2474:	d142      	bne.n	24fc <__aeabi_fmul+0xf4>
    2476:	2308      	movs	r3, #8
    2478:	4699      	mov	r9, r3
    247a:	3b06      	subs	r3, #6
    247c:	26ff      	movs	r6, #255	; 0xff
    247e:	469a      	mov	sl, r3
    2480:	e7da      	b.n	2438 <__aeabi_fmul+0x30>
    2482:	4641      	mov	r1, r8
    2484:	2a02      	cmp	r2, #2
    2486:	d028      	beq.n	24da <__aeabi_fmul+0xd2>
    2488:	2a03      	cmp	r2, #3
    248a:	d100      	bne.n	248e <__aeabi_fmul+0x86>
    248c:	e0ce      	b.n	262c <__aeabi_fmul+0x224>
    248e:	2a01      	cmp	r2, #1
    2490:	d000      	beq.n	2494 <__aeabi_fmul+0x8c>
    2492:	e0ac      	b.n	25ee <__aeabi_fmul+0x1e6>
    2494:	4011      	ands	r1, r2
    2496:	2000      	movs	r0, #0
    2498:	2200      	movs	r2, #0
    249a:	b2cc      	uxtb	r4, r1
    249c:	0240      	lsls	r0, r0, #9
    249e:	05d2      	lsls	r2, r2, #23
    24a0:	0a40      	lsrs	r0, r0, #9
    24a2:	07e4      	lsls	r4, r4, #31
    24a4:	4310      	orrs	r0, r2
    24a6:	4320      	orrs	r0, r4
    24a8:	bc3c      	pop	{r2, r3, r4, r5}
    24aa:	4690      	mov	r8, r2
    24ac:	4699      	mov	r9, r3
    24ae:	46a2      	mov	sl, r4
    24b0:	46ab      	mov	fp, r5
    24b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24b4:	2f00      	cmp	r7, #0
    24b6:	d115      	bne.n	24e4 <__aeabi_fmul+0xdc>
    24b8:	2304      	movs	r3, #4
    24ba:	4699      	mov	r9, r3
    24bc:	3b03      	subs	r3, #3
    24be:	2600      	movs	r6, #0
    24c0:	469a      	mov	sl, r3
    24c2:	e7b9      	b.n	2438 <__aeabi_fmul+0x30>
    24c4:	20ff      	movs	r0, #255	; 0xff
    24c6:	2202      	movs	r2, #2
    24c8:	2d00      	cmp	r5, #0
    24ca:	d0c5      	beq.n	2458 <__aeabi_fmul+0x50>
    24cc:	2203      	movs	r2, #3
    24ce:	e7c3      	b.n	2458 <__aeabi_fmul+0x50>
    24d0:	2d00      	cmp	r5, #0
    24d2:	d119      	bne.n	2508 <__aeabi_fmul+0x100>
    24d4:	2000      	movs	r0, #0
    24d6:	2201      	movs	r2, #1
    24d8:	e7be      	b.n	2458 <__aeabi_fmul+0x50>
    24da:	2401      	movs	r4, #1
    24dc:	22ff      	movs	r2, #255	; 0xff
    24de:	400c      	ands	r4, r1
    24e0:	2000      	movs	r0, #0
    24e2:	e7db      	b.n	249c <__aeabi_fmul+0x94>
    24e4:	0038      	movs	r0, r7
    24e6:	f001 fc61 	bl	3dac <__clzsi2>
    24ea:	2676      	movs	r6, #118	; 0x76
    24ec:	1f43      	subs	r3, r0, #5
    24ee:	409f      	lsls	r7, r3
    24f0:	2300      	movs	r3, #0
    24f2:	4276      	negs	r6, r6
    24f4:	1a36      	subs	r6, r6, r0
    24f6:	4699      	mov	r9, r3
    24f8:	469a      	mov	sl, r3
    24fa:	e79d      	b.n	2438 <__aeabi_fmul+0x30>
    24fc:	230c      	movs	r3, #12
    24fe:	4699      	mov	r9, r3
    2500:	3b09      	subs	r3, #9
    2502:	26ff      	movs	r6, #255	; 0xff
    2504:	469a      	mov	sl, r3
    2506:	e797      	b.n	2438 <__aeabi_fmul+0x30>
    2508:	0028      	movs	r0, r5
    250a:	f001 fc4f 	bl	3dac <__clzsi2>
    250e:	1f43      	subs	r3, r0, #5
    2510:	409d      	lsls	r5, r3
    2512:	2376      	movs	r3, #118	; 0x76
    2514:	425b      	negs	r3, r3
    2516:	1a18      	subs	r0, r3, r0
    2518:	2200      	movs	r2, #0
    251a:	e79d      	b.n	2458 <__aeabi_fmul+0x50>
    251c:	2080      	movs	r0, #128	; 0x80
    251e:	2400      	movs	r4, #0
    2520:	03c0      	lsls	r0, r0, #15
    2522:	22ff      	movs	r2, #255	; 0xff
    2524:	e7ba      	b.n	249c <__aeabi_fmul+0x94>
    2526:	003d      	movs	r5, r7
    2528:	4652      	mov	r2, sl
    252a:	e7ab      	b.n	2484 <__aeabi_fmul+0x7c>
    252c:	003d      	movs	r5, r7
    252e:	0021      	movs	r1, r4
    2530:	4652      	mov	r2, sl
    2532:	e7a7      	b.n	2484 <__aeabi_fmul+0x7c>
    2534:	0c3b      	lsrs	r3, r7, #16
    2536:	469c      	mov	ip, r3
    2538:	042a      	lsls	r2, r5, #16
    253a:	0c12      	lsrs	r2, r2, #16
    253c:	0c2b      	lsrs	r3, r5, #16
    253e:	0014      	movs	r4, r2
    2540:	4660      	mov	r0, ip
    2542:	4665      	mov	r5, ip
    2544:	043f      	lsls	r7, r7, #16
    2546:	0c3f      	lsrs	r7, r7, #16
    2548:	437c      	muls	r4, r7
    254a:	4342      	muls	r2, r0
    254c:	435d      	muls	r5, r3
    254e:	437b      	muls	r3, r7
    2550:	0c27      	lsrs	r7, r4, #16
    2552:	189b      	adds	r3, r3, r2
    2554:	18ff      	adds	r7, r7, r3
    2556:	42ba      	cmp	r2, r7
    2558:	d903      	bls.n	2562 <__aeabi_fmul+0x15a>
    255a:	2380      	movs	r3, #128	; 0x80
    255c:	025b      	lsls	r3, r3, #9
    255e:	469c      	mov	ip, r3
    2560:	4465      	add	r5, ip
    2562:	0424      	lsls	r4, r4, #16
    2564:	043a      	lsls	r2, r7, #16
    2566:	0c24      	lsrs	r4, r4, #16
    2568:	1912      	adds	r2, r2, r4
    256a:	0193      	lsls	r3, r2, #6
    256c:	1e5c      	subs	r4, r3, #1
    256e:	41a3      	sbcs	r3, r4
    2570:	0c3f      	lsrs	r7, r7, #16
    2572:	0e92      	lsrs	r2, r2, #26
    2574:	197d      	adds	r5, r7, r5
    2576:	431a      	orrs	r2, r3
    2578:	01ad      	lsls	r5, r5, #6
    257a:	4315      	orrs	r5, r2
    257c:	012b      	lsls	r3, r5, #4
    257e:	d504      	bpl.n	258a <__aeabi_fmul+0x182>
    2580:	2301      	movs	r3, #1
    2582:	465e      	mov	r6, fp
    2584:	086a      	lsrs	r2, r5, #1
    2586:	401d      	ands	r5, r3
    2588:	4315      	orrs	r5, r2
    258a:	0032      	movs	r2, r6
    258c:	327f      	adds	r2, #127	; 0x7f
    258e:	2a00      	cmp	r2, #0
    2590:	dd25      	ble.n	25de <__aeabi_fmul+0x1d6>
    2592:	076b      	lsls	r3, r5, #29
    2594:	d004      	beq.n	25a0 <__aeabi_fmul+0x198>
    2596:	230f      	movs	r3, #15
    2598:	402b      	ands	r3, r5
    259a:	2b04      	cmp	r3, #4
    259c:	d000      	beq.n	25a0 <__aeabi_fmul+0x198>
    259e:	3504      	adds	r5, #4
    25a0:	012b      	lsls	r3, r5, #4
    25a2:	d503      	bpl.n	25ac <__aeabi_fmul+0x1a4>
    25a4:	0032      	movs	r2, r6
    25a6:	4b27      	ldr	r3, [pc, #156]	; (2644 <__aeabi_fmul+0x23c>)
    25a8:	3280      	adds	r2, #128	; 0x80
    25aa:	401d      	ands	r5, r3
    25ac:	2afe      	cmp	r2, #254	; 0xfe
    25ae:	dc94      	bgt.n	24da <__aeabi_fmul+0xd2>
    25b0:	2401      	movs	r4, #1
    25b2:	01a8      	lsls	r0, r5, #6
    25b4:	0a40      	lsrs	r0, r0, #9
    25b6:	b2d2      	uxtb	r2, r2
    25b8:	400c      	ands	r4, r1
    25ba:	e76f      	b.n	249c <__aeabi_fmul+0x94>
    25bc:	2080      	movs	r0, #128	; 0x80
    25be:	03c0      	lsls	r0, r0, #15
    25c0:	4207      	tst	r7, r0
    25c2:	d007      	beq.n	25d4 <__aeabi_fmul+0x1cc>
    25c4:	4205      	tst	r5, r0
    25c6:	d105      	bne.n	25d4 <__aeabi_fmul+0x1cc>
    25c8:	4328      	orrs	r0, r5
    25ca:	0240      	lsls	r0, r0, #9
    25cc:	0a40      	lsrs	r0, r0, #9
    25ce:	4644      	mov	r4, r8
    25d0:	22ff      	movs	r2, #255	; 0xff
    25d2:	e763      	b.n	249c <__aeabi_fmul+0x94>
    25d4:	4338      	orrs	r0, r7
    25d6:	0240      	lsls	r0, r0, #9
    25d8:	0a40      	lsrs	r0, r0, #9
    25da:	22ff      	movs	r2, #255	; 0xff
    25dc:	e75e      	b.n	249c <__aeabi_fmul+0x94>
    25de:	2401      	movs	r4, #1
    25e0:	1aa3      	subs	r3, r4, r2
    25e2:	2b1b      	cmp	r3, #27
    25e4:	dd05      	ble.n	25f2 <__aeabi_fmul+0x1ea>
    25e6:	400c      	ands	r4, r1
    25e8:	2200      	movs	r2, #0
    25ea:	2000      	movs	r0, #0
    25ec:	e756      	b.n	249c <__aeabi_fmul+0x94>
    25ee:	465e      	mov	r6, fp
    25f0:	e7cb      	b.n	258a <__aeabi_fmul+0x182>
    25f2:	002a      	movs	r2, r5
    25f4:	2020      	movs	r0, #32
    25f6:	40da      	lsrs	r2, r3
    25f8:	1ac3      	subs	r3, r0, r3
    25fa:	409d      	lsls	r5, r3
    25fc:	002b      	movs	r3, r5
    25fe:	1e5d      	subs	r5, r3, #1
    2600:	41ab      	sbcs	r3, r5
    2602:	4313      	orrs	r3, r2
    2604:	075a      	lsls	r2, r3, #29
    2606:	d004      	beq.n	2612 <__aeabi_fmul+0x20a>
    2608:	220f      	movs	r2, #15
    260a:	401a      	ands	r2, r3
    260c:	2a04      	cmp	r2, #4
    260e:	d000      	beq.n	2612 <__aeabi_fmul+0x20a>
    2610:	3304      	adds	r3, #4
    2612:	015a      	lsls	r2, r3, #5
    2614:	d504      	bpl.n	2620 <__aeabi_fmul+0x218>
    2616:	2401      	movs	r4, #1
    2618:	2201      	movs	r2, #1
    261a:	400c      	ands	r4, r1
    261c:	2000      	movs	r0, #0
    261e:	e73d      	b.n	249c <__aeabi_fmul+0x94>
    2620:	2401      	movs	r4, #1
    2622:	019b      	lsls	r3, r3, #6
    2624:	0a58      	lsrs	r0, r3, #9
    2626:	400c      	ands	r4, r1
    2628:	2200      	movs	r2, #0
    262a:	e737      	b.n	249c <__aeabi_fmul+0x94>
    262c:	2080      	movs	r0, #128	; 0x80
    262e:	2401      	movs	r4, #1
    2630:	03c0      	lsls	r0, r0, #15
    2632:	4328      	orrs	r0, r5
    2634:	0240      	lsls	r0, r0, #9
    2636:	0a40      	lsrs	r0, r0, #9
    2638:	400c      	ands	r4, r1
    263a:	22ff      	movs	r2, #255	; 0xff
    263c:	e72e      	b.n	249c <__aeabi_fmul+0x94>
    263e:	46c0      	nop			; (mov r8, r8)
    2640:	00004b90 	.word	0x00004b90
    2644:	f7ffffff 	.word	0xf7ffffff

00002648 <__aeabi_fsub>:
    2648:	b5f0      	push	{r4, r5, r6, r7, lr}
    264a:	464f      	mov	r7, r9
    264c:	46d6      	mov	lr, sl
    264e:	4646      	mov	r6, r8
    2650:	0044      	lsls	r4, r0, #1
    2652:	b5c0      	push	{r6, r7, lr}
    2654:	0fc2      	lsrs	r2, r0, #31
    2656:	0247      	lsls	r7, r0, #9
    2658:	0248      	lsls	r0, r1, #9
    265a:	0a40      	lsrs	r0, r0, #9
    265c:	4684      	mov	ip, r0
    265e:	4666      	mov	r6, ip
    2660:	0a7b      	lsrs	r3, r7, #9
    2662:	0048      	lsls	r0, r1, #1
    2664:	0fc9      	lsrs	r1, r1, #31
    2666:	469a      	mov	sl, r3
    2668:	0e24      	lsrs	r4, r4, #24
    266a:	0015      	movs	r5, r2
    266c:	00db      	lsls	r3, r3, #3
    266e:	0e00      	lsrs	r0, r0, #24
    2670:	4689      	mov	r9, r1
    2672:	00f6      	lsls	r6, r6, #3
    2674:	28ff      	cmp	r0, #255	; 0xff
    2676:	d100      	bne.n	267a <__aeabi_fsub+0x32>
    2678:	e08f      	b.n	279a <__aeabi_fsub+0x152>
    267a:	2101      	movs	r1, #1
    267c:	464f      	mov	r7, r9
    267e:	404f      	eors	r7, r1
    2680:	0039      	movs	r1, r7
    2682:	4291      	cmp	r1, r2
    2684:	d066      	beq.n	2754 <__aeabi_fsub+0x10c>
    2686:	1a22      	subs	r2, r4, r0
    2688:	2a00      	cmp	r2, #0
    268a:	dc00      	bgt.n	268e <__aeabi_fsub+0x46>
    268c:	e09d      	b.n	27ca <__aeabi_fsub+0x182>
    268e:	2800      	cmp	r0, #0
    2690:	d13d      	bne.n	270e <__aeabi_fsub+0xc6>
    2692:	2e00      	cmp	r6, #0
    2694:	d100      	bne.n	2698 <__aeabi_fsub+0x50>
    2696:	e08b      	b.n	27b0 <__aeabi_fsub+0x168>
    2698:	1e51      	subs	r1, r2, #1
    269a:	2900      	cmp	r1, #0
    269c:	d000      	beq.n	26a0 <__aeabi_fsub+0x58>
    269e:	e0b5      	b.n	280c <__aeabi_fsub+0x1c4>
    26a0:	2401      	movs	r4, #1
    26a2:	1b9b      	subs	r3, r3, r6
    26a4:	015a      	lsls	r2, r3, #5
    26a6:	d544      	bpl.n	2732 <__aeabi_fsub+0xea>
    26a8:	019b      	lsls	r3, r3, #6
    26aa:	099f      	lsrs	r7, r3, #6
    26ac:	0038      	movs	r0, r7
    26ae:	f001 fb7d 	bl	3dac <__clzsi2>
    26b2:	3805      	subs	r0, #5
    26b4:	4087      	lsls	r7, r0
    26b6:	4284      	cmp	r4, r0
    26b8:	dd00      	ble.n	26bc <__aeabi_fsub+0x74>
    26ba:	e096      	b.n	27ea <__aeabi_fsub+0x1a2>
    26bc:	1b04      	subs	r4, r0, r4
    26be:	003a      	movs	r2, r7
    26c0:	2020      	movs	r0, #32
    26c2:	3401      	adds	r4, #1
    26c4:	40e2      	lsrs	r2, r4
    26c6:	1b04      	subs	r4, r0, r4
    26c8:	40a7      	lsls	r7, r4
    26ca:	003b      	movs	r3, r7
    26cc:	1e5f      	subs	r7, r3, #1
    26ce:	41bb      	sbcs	r3, r7
    26d0:	2400      	movs	r4, #0
    26d2:	4313      	orrs	r3, r2
    26d4:	075a      	lsls	r2, r3, #29
    26d6:	d004      	beq.n	26e2 <__aeabi_fsub+0x9a>
    26d8:	220f      	movs	r2, #15
    26da:	401a      	ands	r2, r3
    26dc:	2a04      	cmp	r2, #4
    26de:	d000      	beq.n	26e2 <__aeabi_fsub+0x9a>
    26e0:	3304      	adds	r3, #4
    26e2:	015a      	lsls	r2, r3, #5
    26e4:	d527      	bpl.n	2736 <__aeabi_fsub+0xee>
    26e6:	3401      	adds	r4, #1
    26e8:	2cff      	cmp	r4, #255	; 0xff
    26ea:	d100      	bne.n	26ee <__aeabi_fsub+0xa6>
    26ec:	e079      	b.n	27e2 <__aeabi_fsub+0x19a>
    26ee:	2201      	movs	r2, #1
    26f0:	019b      	lsls	r3, r3, #6
    26f2:	0a5b      	lsrs	r3, r3, #9
    26f4:	b2e4      	uxtb	r4, r4
    26f6:	402a      	ands	r2, r5
    26f8:	025b      	lsls	r3, r3, #9
    26fa:	05e4      	lsls	r4, r4, #23
    26fc:	0a58      	lsrs	r0, r3, #9
    26fe:	07d2      	lsls	r2, r2, #31
    2700:	4320      	orrs	r0, r4
    2702:	4310      	orrs	r0, r2
    2704:	bc1c      	pop	{r2, r3, r4}
    2706:	4690      	mov	r8, r2
    2708:	4699      	mov	r9, r3
    270a:	46a2      	mov	sl, r4
    270c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    270e:	2cff      	cmp	r4, #255	; 0xff
    2710:	d0e0      	beq.n	26d4 <__aeabi_fsub+0x8c>
    2712:	2180      	movs	r1, #128	; 0x80
    2714:	04c9      	lsls	r1, r1, #19
    2716:	430e      	orrs	r6, r1
    2718:	2a1b      	cmp	r2, #27
    271a:	dc7b      	bgt.n	2814 <__aeabi_fsub+0x1cc>
    271c:	0031      	movs	r1, r6
    271e:	2020      	movs	r0, #32
    2720:	40d1      	lsrs	r1, r2
    2722:	1a82      	subs	r2, r0, r2
    2724:	4096      	lsls	r6, r2
    2726:	1e72      	subs	r2, r6, #1
    2728:	4196      	sbcs	r6, r2
    272a:	430e      	orrs	r6, r1
    272c:	1b9b      	subs	r3, r3, r6
    272e:	015a      	lsls	r2, r3, #5
    2730:	d4ba      	bmi.n	26a8 <__aeabi_fsub+0x60>
    2732:	075a      	lsls	r2, r3, #29
    2734:	d1d0      	bne.n	26d8 <__aeabi_fsub+0x90>
    2736:	2201      	movs	r2, #1
    2738:	08df      	lsrs	r7, r3, #3
    273a:	402a      	ands	r2, r5
    273c:	2cff      	cmp	r4, #255	; 0xff
    273e:	d133      	bne.n	27a8 <__aeabi_fsub+0x160>
    2740:	2f00      	cmp	r7, #0
    2742:	d100      	bne.n	2746 <__aeabi_fsub+0xfe>
    2744:	e0a8      	b.n	2898 <__aeabi_fsub+0x250>
    2746:	2380      	movs	r3, #128	; 0x80
    2748:	03db      	lsls	r3, r3, #15
    274a:	433b      	orrs	r3, r7
    274c:	025b      	lsls	r3, r3, #9
    274e:	0a5b      	lsrs	r3, r3, #9
    2750:	24ff      	movs	r4, #255	; 0xff
    2752:	e7d1      	b.n	26f8 <__aeabi_fsub+0xb0>
    2754:	1a21      	subs	r1, r4, r0
    2756:	2900      	cmp	r1, #0
    2758:	dd4c      	ble.n	27f4 <__aeabi_fsub+0x1ac>
    275a:	2800      	cmp	r0, #0
    275c:	d02a      	beq.n	27b4 <__aeabi_fsub+0x16c>
    275e:	2cff      	cmp	r4, #255	; 0xff
    2760:	d0b8      	beq.n	26d4 <__aeabi_fsub+0x8c>
    2762:	2080      	movs	r0, #128	; 0x80
    2764:	04c0      	lsls	r0, r0, #19
    2766:	4306      	orrs	r6, r0
    2768:	291b      	cmp	r1, #27
    276a:	dd00      	ble.n	276e <__aeabi_fsub+0x126>
    276c:	e0af      	b.n	28ce <__aeabi_fsub+0x286>
    276e:	0030      	movs	r0, r6
    2770:	2720      	movs	r7, #32
    2772:	40c8      	lsrs	r0, r1
    2774:	1a79      	subs	r1, r7, r1
    2776:	408e      	lsls	r6, r1
    2778:	1e71      	subs	r1, r6, #1
    277a:	418e      	sbcs	r6, r1
    277c:	4306      	orrs	r6, r0
    277e:	199b      	adds	r3, r3, r6
    2780:	0159      	lsls	r1, r3, #5
    2782:	d5d6      	bpl.n	2732 <__aeabi_fsub+0xea>
    2784:	3401      	adds	r4, #1
    2786:	2cff      	cmp	r4, #255	; 0xff
    2788:	d100      	bne.n	278c <__aeabi_fsub+0x144>
    278a:	e085      	b.n	2898 <__aeabi_fsub+0x250>
    278c:	2201      	movs	r2, #1
    278e:	497a      	ldr	r1, [pc, #488]	; (2978 <__aeabi_fsub+0x330>)
    2790:	401a      	ands	r2, r3
    2792:	085b      	lsrs	r3, r3, #1
    2794:	400b      	ands	r3, r1
    2796:	4313      	orrs	r3, r2
    2798:	e79c      	b.n	26d4 <__aeabi_fsub+0x8c>
    279a:	2e00      	cmp	r6, #0
    279c:	d000      	beq.n	27a0 <__aeabi_fsub+0x158>
    279e:	e770      	b.n	2682 <__aeabi_fsub+0x3a>
    27a0:	e76b      	b.n	267a <__aeabi_fsub+0x32>
    27a2:	1e3b      	subs	r3, r7, #0
    27a4:	d1c5      	bne.n	2732 <__aeabi_fsub+0xea>
    27a6:	2200      	movs	r2, #0
    27a8:	027b      	lsls	r3, r7, #9
    27aa:	0a5b      	lsrs	r3, r3, #9
    27ac:	b2e4      	uxtb	r4, r4
    27ae:	e7a3      	b.n	26f8 <__aeabi_fsub+0xb0>
    27b0:	0014      	movs	r4, r2
    27b2:	e78f      	b.n	26d4 <__aeabi_fsub+0x8c>
    27b4:	2e00      	cmp	r6, #0
    27b6:	d04d      	beq.n	2854 <__aeabi_fsub+0x20c>
    27b8:	1e48      	subs	r0, r1, #1
    27ba:	2800      	cmp	r0, #0
    27bc:	d157      	bne.n	286e <__aeabi_fsub+0x226>
    27be:	199b      	adds	r3, r3, r6
    27c0:	2401      	movs	r4, #1
    27c2:	015a      	lsls	r2, r3, #5
    27c4:	d5b5      	bpl.n	2732 <__aeabi_fsub+0xea>
    27c6:	2402      	movs	r4, #2
    27c8:	e7e0      	b.n	278c <__aeabi_fsub+0x144>
    27ca:	2a00      	cmp	r2, #0
    27cc:	d125      	bne.n	281a <__aeabi_fsub+0x1d2>
    27ce:	1c62      	adds	r2, r4, #1
    27d0:	b2d2      	uxtb	r2, r2
    27d2:	2a01      	cmp	r2, #1
    27d4:	dd72      	ble.n	28bc <__aeabi_fsub+0x274>
    27d6:	1b9f      	subs	r7, r3, r6
    27d8:	017a      	lsls	r2, r7, #5
    27da:	d535      	bpl.n	2848 <__aeabi_fsub+0x200>
    27dc:	1af7      	subs	r7, r6, r3
    27de:	000d      	movs	r5, r1
    27e0:	e764      	b.n	26ac <__aeabi_fsub+0x64>
    27e2:	2201      	movs	r2, #1
    27e4:	2300      	movs	r3, #0
    27e6:	402a      	ands	r2, r5
    27e8:	e786      	b.n	26f8 <__aeabi_fsub+0xb0>
    27ea:	003b      	movs	r3, r7
    27ec:	4a63      	ldr	r2, [pc, #396]	; (297c <__aeabi_fsub+0x334>)
    27ee:	1a24      	subs	r4, r4, r0
    27f0:	4013      	ands	r3, r2
    27f2:	e76f      	b.n	26d4 <__aeabi_fsub+0x8c>
    27f4:	2900      	cmp	r1, #0
    27f6:	d16c      	bne.n	28d2 <__aeabi_fsub+0x28a>
    27f8:	1c61      	adds	r1, r4, #1
    27fa:	b2c8      	uxtb	r0, r1
    27fc:	2801      	cmp	r0, #1
    27fe:	dd4e      	ble.n	289e <__aeabi_fsub+0x256>
    2800:	29ff      	cmp	r1, #255	; 0xff
    2802:	d049      	beq.n	2898 <__aeabi_fsub+0x250>
    2804:	199b      	adds	r3, r3, r6
    2806:	085b      	lsrs	r3, r3, #1
    2808:	000c      	movs	r4, r1
    280a:	e763      	b.n	26d4 <__aeabi_fsub+0x8c>
    280c:	2aff      	cmp	r2, #255	; 0xff
    280e:	d041      	beq.n	2894 <__aeabi_fsub+0x24c>
    2810:	000a      	movs	r2, r1
    2812:	e781      	b.n	2718 <__aeabi_fsub+0xd0>
    2814:	2601      	movs	r6, #1
    2816:	1b9b      	subs	r3, r3, r6
    2818:	e789      	b.n	272e <__aeabi_fsub+0xe6>
    281a:	2c00      	cmp	r4, #0
    281c:	d01c      	beq.n	2858 <__aeabi_fsub+0x210>
    281e:	28ff      	cmp	r0, #255	; 0xff
    2820:	d021      	beq.n	2866 <__aeabi_fsub+0x21e>
    2822:	2480      	movs	r4, #128	; 0x80
    2824:	04e4      	lsls	r4, r4, #19
    2826:	4252      	negs	r2, r2
    2828:	4323      	orrs	r3, r4
    282a:	2a1b      	cmp	r2, #27
    282c:	dd00      	ble.n	2830 <__aeabi_fsub+0x1e8>
    282e:	e096      	b.n	295e <__aeabi_fsub+0x316>
    2830:	001c      	movs	r4, r3
    2832:	2520      	movs	r5, #32
    2834:	40d4      	lsrs	r4, r2
    2836:	1aaa      	subs	r2, r5, r2
    2838:	4093      	lsls	r3, r2
    283a:	1e5a      	subs	r2, r3, #1
    283c:	4193      	sbcs	r3, r2
    283e:	4323      	orrs	r3, r4
    2840:	1af3      	subs	r3, r6, r3
    2842:	0004      	movs	r4, r0
    2844:	000d      	movs	r5, r1
    2846:	e72d      	b.n	26a4 <__aeabi_fsub+0x5c>
    2848:	2f00      	cmp	r7, #0
    284a:	d000      	beq.n	284e <__aeabi_fsub+0x206>
    284c:	e72e      	b.n	26ac <__aeabi_fsub+0x64>
    284e:	2200      	movs	r2, #0
    2850:	2400      	movs	r4, #0
    2852:	e7a9      	b.n	27a8 <__aeabi_fsub+0x160>
    2854:	000c      	movs	r4, r1
    2856:	e73d      	b.n	26d4 <__aeabi_fsub+0x8c>
    2858:	2b00      	cmp	r3, #0
    285a:	d058      	beq.n	290e <__aeabi_fsub+0x2c6>
    285c:	43d2      	mvns	r2, r2
    285e:	2a00      	cmp	r2, #0
    2860:	d0ee      	beq.n	2840 <__aeabi_fsub+0x1f8>
    2862:	28ff      	cmp	r0, #255	; 0xff
    2864:	d1e1      	bne.n	282a <__aeabi_fsub+0x1e2>
    2866:	0033      	movs	r3, r6
    2868:	24ff      	movs	r4, #255	; 0xff
    286a:	000d      	movs	r5, r1
    286c:	e732      	b.n	26d4 <__aeabi_fsub+0x8c>
    286e:	29ff      	cmp	r1, #255	; 0xff
    2870:	d010      	beq.n	2894 <__aeabi_fsub+0x24c>
    2872:	0001      	movs	r1, r0
    2874:	e778      	b.n	2768 <__aeabi_fsub+0x120>
    2876:	2b00      	cmp	r3, #0
    2878:	d06e      	beq.n	2958 <__aeabi_fsub+0x310>
    287a:	24ff      	movs	r4, #255	; 0xff
    287c:	2e00      	cmp	r6, #0
    287e:	d100      	bne.n	2882 <__aeabi_fsub+0x23a>
    2880:	e728      	b.n	26d4 <__aeabi_fsub+0x8c>
    2882:	2280      	movs	r2, #128	; 0x80
    2884:	4651      	mov	r1, sl
    2886:	03d2      	lsls	r2, r2, #15
    2888:	4211      	tst	r1, r2
    288a:	d003      	beq.n	2894 <__aeabi_fsub+0x24c>
    288c:	4661      	mov	r1, ip
    288e:	4211      	tst	r1, r2
    2890:	d100      	bne.n	2894 <__aeabi_fsub+0x24c>
    2892:	0033      	movs	r3, r6
    2894:	24ff      	movs	r4, #255	; 0xff
    2896:	e71d      	b.n	26d4 <__aeabi_fsub+0x8c>
    2898:	24ff      	movs	r4, #255	; 0xff
    289a:	2300      	movs	r3, #0
    289c:	e72c      	b.n	26f8 <__aeabi_fsub+0xb0>
    289e:	2c00      	cmp	r4, #0
    28a0:	d1e9      	bne.n	2876 <__aeabi_fsub+0x22e>
    28a2:	2b00      	cmp	r3, #0
    28a4:	d063      	beq.n	296e <__aeabi_fsub+0x326>
    28a6:	2e00      	cmp	r6, #0
    28a8:	d100      	bne.n	28ac <__aeabi_fsub+0x264>
    28aa:	e713      	b.n	26d4 <__aeabi_fsub+0x8c>
    28ac:	199b      	adds	r3, r3, r6
    28ae:	015a      	lsls	r2, r3, #5
    28b0:	d400      	bmi.n	28b4 <__aeabi_fsub+0x26c>
    28b2:	e73e      	b.n	2732 <__aeabi_fsub+0xea>
    28b4:	4a31      	ldr	r2, [pc, #196]	; (297c <__aeabi_fsub+0x334>)
    28b6:	000c      	movs	r4, r1
    28b8:	4013      	ands	r3, r2
    28ba:	e70b      	b.n	26d4 <__aeabi_fsub+0x8c>
    28bc:	2c00      	cmp	r4, #0
    28be:	d11e      	bne.n	28fe <__aeabi_fsub+0x2b6>
    28c0:	2b00      	cmp	r3, #0
    28c2:	d12f      	bne.n	2924 <__aeabi_fsub+0x2dc>
    28c4:	2e00      	cmp	r6, #0
    28c6:	d04f      	beq.n	2968 <__aeabi_fsub+0x320>
    28c8:	0033      	movs	r3, r6
    28ca:	000d      	movs	r5, r1
    28cc:	e702      	b.n	26d4 <__aeabi_fsub+0x8c>
    28ce:	2601      	movs	r6, #1
    28d0:	e755      	b.n	277e <__aeabi_fsub+0x136>
    28d2:	2c00      	cmp	r4, #0
    28d4:	d11f      	bne.n	2916 <__aeabi_fsub+0x2ce>
    28d6:	2b00      	cmp	r3, #0
    28d8:	d043      	beq.n	2962 <__aeabi_fsub+0x31a>
    28da:	43c9      	mvns	r1, r1
    28dc:	2900      	cmp	r1, #0
    28de:	d00b      	beq.n	28f8 <__aeabi_fsub+0x2b0>
    28e0:	28ff      	cmp	r0, #255	; 0xff
    28e2:	d039      	beq.n	2958 <__aeabi_fsub+0x310>
    28e4:	291b      	cmp	r1, #27
    28e6:	dc44      	bgt.n	2972 <__aeabi_fsub+0x32a>
    28e8:	001c      	movs	r4, r3
    28ea:	2720      	movs	r7, #32
    28ec:	40cc      	lsrs	r4, r1
    28ee:	1a79      	subs	r1, r7, r1
    28f0:	408b      	lsls	r3, r1
    28f2:	1e59      	subs	r1, r3, #1
    28f4:	418b      	sbcs	r3, r1
    28f6:	4323      	orrs	r3, r4
    28f8:	199b      	adds	r3, r3, r6
    28fa:	0004      	movs	r4, r0
    28fc:	e740      	b.n	2780 <__aeabi_fsub+0x138>
    28fe:	2b00      	cmp	r3, #0
    2900:	d11a      	bne.n	2938 <__aeabi_fsub+0x2f0>
    2902:	2e00      	cmp	r6, #0
    2904:	d124      	bne.n	2950 <__aeabi_fsub+0x308>
    2906:	2780      	movs	r7, #128	; 0x80
    2908:	2200      	movs	r2, #0
    290a:	03ff      	lsls	r7, r7, #15
    290c:	e71b      	b.n	2746 <__aeabi_fsub+0xfe>
    290e:	0033      	movs	r3, r6
    2910:	0004      	movs	r4, r0
    2912:	000d      	movs	r5, r1
    2914:	e6de      	b.n	26d4 <__aeabi_fsub+0x8c>
    2916:	28ff      	cmp	r0, #255	; 0xff
    2918:	d01e      	beq.n	2958 <__aeabi_fsub+0x310>
    291a:	2480      	movs	r4, #128	; 0x80
    291c:	04e4      	lsls	r4, r4, #19
    291e:	4249      	negs	r1, r1
    2920:	4323      	orrs	r3, r4
    2922:	e7df      	b.n	28e4 <__aeabi_fsub+0x29c>
    2924:	2e00      	cmp	r6, #0
    2926:	d100      	bne.n	292a <__aeabi_fsub+0x2e2>
    2928:	e6d4      	b.n	26d4 <__aeabi_fsub+0x8c>
    292a:	1b9f      	subs	r7, r3, r6
    292c:	017a      	lsls	r2, r7, #5
    292e:	d400      	bmi.n	2932 <__aeabi_fsub+0x2ea>
    2930:	e737      	b.n	27a2 <__aeabi_fsub+0x15a>
    2932:	1af3      	subs	r3, r6, r3
    2934:	000d      	movs	r5, r1
    2936:	e6cd      	b.n	26d4 <__aeabi_fsub+0x8c>
    2938:	24ff      	movs	r4, #255	; 0xff
    293a:	2e00      	cmp	r6, #0
    293c:	d100      	bne.n	2940 <__aeabi_fsub+0x2f8>
    293e:	e6c9      	b.n	26d4 <__aeabi_fsub+0x8c>
    2940:	2280      	movs	r2, #128	; 0x80
    2942:	4650      	mov	r0, sl
    2944:	03d2      	lsls	r2, r2, #15
    2946:	4210      	tst	r0, r2
    2948:	d0a4      	beq.n	2894 <__aeabi_fsub+0x24c>
    294a:	4660      	mov	r0, ip
    294c:	4210      	tst	r0, r2
    294e:	d1a1      	bne.n	2894 <__aeabi_fsub+0x24c>
    2950:	0033      	movs	r3, r6
    2952:	000d      	movs	r5, r1
    2954:	24ff      	movs	r4, #255	; 0xff
    2956:	e6bd      	b.n	26d4 <__aeabi_fsub+0x8c>
    2958:	0033      	movs	r3, r6
    295a:	24ff      	movs	r4, #255	; 0xff
    295c:	e6ba      	b.n	26d4 <__aeabi_fsub+0x8c>
    295e:	2301      	movs	r3, #1
    2960:	e76e      	b.n	2840 <__aeabi_fsub+0x1f8>
    2962:	0033      	movs	r3, r6
    2964:	0004      	movs	r4, r0
    2966:	e6b5      	b.n	26d4 <__aeabi_fsub+0x8c>
    2968:	2700      	movs	r7, #0
    296a:	2200      	movs	r2, #0
    296c:	e71c      	b.n	27a8 <__aeabi_fsub+0x160>
    296e:	0033      	movs	r3, r6
    2970:	e6b0      	b.n	26d4 <__aeabi_fsub+0x8c>
    2972:	2301      	movs	r3, #1
    2974:	e7c0      	b.n	28f8 <__aeabi_fsub+0x2b0>
    2976:	46c0      	nop			; (mov r8, r8)
    2978:	7dffffff 	.word	0x7dffffff
    297c:	fbffffff 	.word	0xfbffffff

00002980 <__aeabi_f2iz>:
    2980:	0241      	lsls	r1, r0, #9
    2982:	0043      	lsls	r3, r0, #1
    2984:	0fc2      	lsrs	r2, r0, #31
    2986:	0a49      	lsrs	r1, r1, #9
    2988:	0e1b      	lsrs	r3, r3, #24
    298a:	2000      	movs	r0, #0
    298c:	2b7e      	cmp	r3, #126	; 0x7e
    298e:	dd0d      	ble.n	29ac <__aeabi_f2iz+0x2c>
    2990:	2b9d      	cmp	r3, #157	; 0x9d
    2992:	dc0c      	bgt.n	29ae <__aeabi_f2iz+0x2e>
    2994:	2080      	movs	r0, #128	; 0x80
    2996:	0400      	lsls	r0, r0, #16
    2998:	4301      	orrs	r1, r0
    299a:	2b95      	cmp	r3, #149	; 0x95
    299c:	dc0a      	bgt.n	29b4 <__aeabi_f2iz+0x34>
    299e:	2096      	movs	r0, #150	; 0x96
    29a0:	1ac3      	subs	r3, r0, r3
    29a2:	40d9      	lsrs	r1, r3
    29a4:	4248      	negs	r0, r1
    29a6:	2a00      	cmp	r2, #0
    29a8:	d100      	bne.n	29ac <__aeabi_f2iz+0x2c>
    29aa:	0008      	movs	r0, r1
    29ac:	4770      	bx	lr
    29ae:	4b03      	ldr	r3, [pc, #12]	; (29bc <__aeabi_f2iz+0x3c>)
    29b0:	18d0      	adds	r0, r2, r3
    29b2:	e7fb      	b.n	29ac <__aeabi_f2iz+0x2c>
    29b4:	3b96      	subs	r3, #150	; 0x96
    29b6:	4099      	lsls	r1, r3
    29b8:	e7f4      	b.n	29a4 <__aeabi_f2iz+0x24>
    29ba:	46c0      	nop			; (mov r8, r8)
    29bc:	7fffffff 	.word	0x7fffffff

000029c0 <__aeabi_i2f>:
    29c0:	b570      	push	{r4, r5, r6, lr}
    29c2:	2800      	cmp	r0, #0
    29c4:	d030      	beq.n	2a28 <__aeabi_i2f+0x68>
    29c6:	17c3      	asrs	r3, r0, #31
    29c8:	18c4      	adds	r4, r0, r3
    29ca:	405c      	eors	r4, r3
    29cc:	0fc5      	lsrs	r5, r0, #31
    29ce:	0020      	movs	r0, r4
    29d0:	f001 f9ec 	bl	3dac <__clzsi2>
    29d4:	239e      	movs	r3, #158	; 0x9e
    29d6:	1a1b      	subs	r3, r3, r0
    29d8:	2b96      	cmp	r3, #150	; 0x96
    29da:	dc0d      	bgt.n	29f8 <__aeabi_i2f+0x38>
    29dc:	2296      	movs	r2, #150	; 0x96
    29de:	1ad2      	subs	r2, r2, r3
    29e0:	4094      	lsls	r4, r2
    29e2:	002a      	movs	r2, r5
    29e4:	0264      	lsls	r4, r4, #9
    29e6:	0a64      	lsrs	r4, r4, #9
    29e8:	b2db      	uxtb	r3, r3
    29ea:	0264      	lsls	r4, r4, #9
    29ec:	05db      	lsls	r3, r3, #23
    29ee:	0a60      	lsrs	r0, r4, #9
    29f0:	07d2      	lsls	r2, r2, #31
    29f2:	4318      	orrs	r0, r3
    29f4:	4310      	orrs	r0, r2
    29f6:	bd70      	pop	{r4, r5, r6, pc}
    29f8:	2b99      	cmp	r3, #153	; 0x99
    29fa:	dc19      	bgt.n	2a30 <__aeabi_i2f+0x70>
    29fc:	2299      	movs	r2, #153	; 0x99
    29fe:	1ad2      	subs	r2, r2, r3
    2a00:	2a00      	cmp	r2, #0
    2a02:	dd29      	ble.n	2a58 <__aeabi_i2f+0x98>
    2a04:	4094      	lsls	r4, r2
    2a06:	0022      	movs	r2, r4
    2a08:	4c14      	ldr	r4, [pc, #80]	; (2a5c <__aeabi_i2f+0x9c>)
    2a0a:	4014      	ands	r4, r2
    2a0c:	0751      	lsls	r1, r2, #29
    2a0e:	d004      	beq.n	2a1a <__aeabi_i2f+0x5a>
    2a10:	210f      	movs	r1, #15
    2a12:	400a      	ands	r2, r1
    2a14:	2a04      	cmp	r2, #4
    2a16:	d000      	beq.n	2a1a <__aeabi_i2f+0x5a>
    2a18:	3404      	adds	r4, #4
    2a1a:	0162      	lsls	r2, r4, #5
    2a1c:	d413      	bmi.n	2a46 <__aeabi_i2f+0x86>
    2a1e:	01a4      	lsls	r4, r4, #6
    2a20:	0a64      	lsrs	r4, r4, #9
    2a22:	b2db      	uxtb	r3, r3
    2a24:	002a      	movs	r2, r5
    2a26:	e7e0      	b.n	29ea <__aeabi_i2f+0x2a>
    2a28:	2200      	movs	r2, #0
    2a2a:	2300      	movs	r3, #0
    2a2c:	2400      	movs	r4, #0
    2a2e:	e7dc      	b.n	29ea <__aeabi_i2f+0x2a>
    2a30:	2205      	movs	r2, #5
    2a32:	0021      	movs	r1, r4
    2a34:	1a12      	subs	r2, r2, r0
    2a36:	40d1      	lsrs	r1, r2
    2a38:	22b9      	movs	r2, #185	; 0xb9
    2a3a:	1ad2      	subs	r2, r2, r3
    2a3c:	4094      	lsls	r4, r2
    2a3e:	1e62      	subs	r2, r4, #1
    2a40:	4194      	sbcs	r4, r2
    2a42:	430c      	orrs	r4, r1
    2a44:	e7da      	b.n	29fc <__aeabi_i2f+0x3c>
    2a46:	4b05      	ldr	r3, [pc, #20]	; (2a5c <__aeabi_i2f+0x9c>)
    2a48:	002a      	movs	r2, r5
    2a4a:	401c      	ands	r4, r3
    2a4c:	239f      	movs	r3, #159	; 0x9f
    2a4e:	01a4      	lsls	r4, r4, #6
    2a50:	1a1b      	subs	r3, r3, r0
    2a52:	0a64      	lsrs	r4, r4, #9
    2a54:	b2db      	uxtb	r3, r3
    2a56:	e7c8      	b.n	29ea <__aeabi_i2f+0x2a>
    2a58:	0022      	movs	r2, r4
    2a5a:	e7d5      	b.n	2a08 <__aeabi_i2f+0x48>
    2a5c:	fbffffff 	.word	0xfbffffff

00002a60 <__aeabi_ddiv>:
    2a60:	b5f0      	push	{r4, r5, r6, r7, lr}
    2a62:	4657      	mov	r7, sl
    2a64:	4645      	mov	r5, r8
    2a66:	46de      	mov	lr, fp
    2a68:	464e      	mov	r6, r9
    2a6a:	b5e0      	push	{r5, r6, r7, lr}
    2a6c:	004c      	lsls	r4, r1, #1
    2a6e:	030e      	lsls	r6, r1, #12
    2a70:	b087      	sub	sp, #28
    2a72:	4683      	mov	fp, r0
    2a74:	4692      	mov	sl, r2
    2a76:	001d      	movs	r5, r3
    2a78:	4680      	mov	r8, r0
    2a7a:	0b36      	lsrs	r6, r6, #12
    2a7c:	0d64      	lsrs	r4, r4, #21
    2a7e:	0fcf      	lsrs	r7, r1, #31
    2a80:	2c00      	cmp	r4, #0
    2a82:	d04f      	beq.n	2b24 <__aeabi_ddiv+0xc4>
    2a84:	4b6f      	ldr	r3, [pc, #444]	; (2c44 <__aeabi_ddiv+0x1e4>)
    2a86:	429c      	cmp	r4, r3
    2a88:	d035      	beq.n	2af6 <__aeabi_ddiv+0x96>
    2a8a:	2380      	movs	r3, #128	; 0x80
    2a8c:	0f42      	lsrs	r2, r0, #29
    2a8e:	041b      	lsls	r3, r3, #16
    2a90:	00f6      	lsls	r6, r6, #3
    2a92:	4313      	orrs	r3, r2
    2a94:	4333      	orrs	r3, r6
    2a96:	4699      	mov	r9, r3
    2a98:	00c3      	lsls	r3, r0, #3
    2a9a:	4698      	mov	r8, r3
    2a9c:	4b6a      	ldr	r3, [pc, #424]	; (2c48 <__aeabi_ddiv+0x1e8>)
    2a9e:	2600      	movs	r6, #0
    2aa0:	469c      	mov	ip, r3
    2aa2:	2300      	movs	r3, #0
    2aa4:	4464      	add	r4, ip
    2aa6:	9303      	str	r3, [sp, #12]
    2aa8:	032b      	lsls	r3, r5, #12
    2aaa:	0b1b      	lsrs	r3, r3, #12
    2aac:	469b      	mov	fp, r3
    2aae:	006b      	lsls	r3, r5, #1
    2ab0:	0fed      	lsrs	r5, r5, #31
    2ab2:	4650      	mov	r0, sl
    2ab4:	0d5b      	lsrs	r3, r3, #21
    2ab6:	9501      	str	r5, [sp, #4]
    2ab8:	d05e      	beq.n	2b78 <__aeabi_ddiv+0x118>
    2aba:	4a62      	ldr	r2, [pc, #392]	; (2c44 <__aeabi_ddiv+0x1e4>)
    2abc:	4293      	cmp	r3, r2
    2abe:	d053      	beq.n	2b68 <__aeabi_ddiv+0x108>
    2ac0:	465a      	mov	r2, fp
    2ac2:	00d1      	lsls	r1, r2, #3
    2ac4:	2280      	movs	r2, #128	; 0x80
    2ac6:	0f40      	lsrs	r0, r0, #29
    2ac8:	0412      	lsls	r2, r2, #16
    2aca:	4302      	orrs	r2, r0
    2acc:	430a      	orrs	r2, r1
    2ace:	4693      	mov	fp, r2
    2ad0:	4652      	mov	r2, sl
    2ad2:	00d1      	lsls	r1, r2, #3
    2ad4:	4a5c      	ldr	r2, [pc, #368]	; (2c48 <__aeabi_ddiv+0x1e8>)
    2ad6:	4694      	mov	ip, r2
    2ad8:	2200      	movs	r2, #0
    2ada:	4463      	add	r3, ip
    2adc:	0038      	movs	r0, r7
    2ade:	4068      	eors	r0, r5
    2ae0:	4684      	mov	ip, r0
    2ae2:	9002      	str	r0, [sp, #8]
    2ae4:	1ae4      	subs	r4, r4, r3
    2ae6:	4316      	orrs	r6, r2
    2ae8:	2e0f      	cmp	r6, #15
    2aea:	d900      	bls.n	2aee <__aeabi_ddiv+0x8e>
    2aec:	e0b4      	b.n	2c58 <__aeabi_ddiv+0x1f8>
    2aee:	4b57      	ldr	r3, [pc, #348]	; (2c4c <__aeabi_ddiv+0x1ec>)
    2af0:	00b6      	lsls	r6, r6, #2
    2af2:	599b      	ldr	r3, [r3, r6]
    2af4:	469f      	mov	pc, r3
    2af6:	0003      	movs	r3, r0
    2af8:	4333      	orrs	r3, r6
    2afa:	4699      	mov	r9, r3
    2afc:	d16c      	bne.n	2bd8 <__aeabi_ddiv+0x178>
    2afe:	2300      	movs	r3, #0
    2b00:	4698      	mov	r8, r3
    2b02:	3302      	adds	r3, #2
    2b04:	2608      	movs	r6, #8
    2b06:	9303      	str	r3, [sp, #12]
    2b08:	e7ce      	b.n	2aa8 <__aeabi_ddiv+0x48>
    2b0a:	46cb      	mov	fp, r9
    2b0c:	4641      	mov	r1, r8
    2b0e:	9a03      	ldr	r2, [sp, #12]
    2b10:	9701      	str	r7, [sp, #4]
    2b12:	2a02      	cmp	r2, #2
    2b14:	d165      	bne.n	2be2 <__aeabi_ddiv+0x182>
    2b16:	9b01      	ldr	r3, [sp, #4]
    2b18:	4c4a      	ldr	r4, [pc, #296]	; (2c44 <__aeabi_ddiv+0x1e4>)
    2b1a:	469c      	mov	ip, r3
    2b1c:	2300      	movs	r3, #0
    2b1e:	2200      	movs	r2, #0
    2b20:	4698      	mov	r8, r3
    2b22:	e06b      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2b24:	0003      	movs	r3, r0
    2b26:	4333      	orrs	r3, r6
    2b28:	4699      	mov	r9, r3
    2b2a:	d04e      	beq.n	2bca <__aeabi_ddiv+0x16a>
    2b2c:	2e00      	cmp	r6, #0
    2b2e:	d100      	bne.n	2b32 <__aeabi_ddiv+0xd2>
    2b30:	e1bc      	b.n	2eac <__aeabi_ddiv+0x44c>
    2b32:	0030      	movs	r0, r6
    2b34:	f001 f93a 	bl	3dac <__clzsi2>
    2b38:	0003      	movs	r3, r0
    2b3a:	3b0b      	subs	r3, #11
    2b3c:	2b1c      	cmp	r3, #28
    2b3e:	dd00      	ble.n	2b42 <__aeabi_ddiv+0xe2>
    2b40:	e1ac      	b.n	2e9c <__aeabi_ddiv+0x43c>
    2b42:	221d      	movs	r2, #29
    2b44:	1ad3      	subs	r3, r2, r3
    2b46:	465a      	mov	r2, fp
    2b48:	0001      	movs	r1, r0
    2b4a:	40da      	lsrs	r2, r3
    2b4c:	3908      	subs	r1, #8
    2b4e:	408e      	lsls	r6, r1
    2b50:	0013      	movs	r3, r2
    2b52:	4333      	orrs	r3, r6
    2b54:	4699      	mov	r9, r3
    2b56:	465b      	mov	r3, fp
    2b58:	408b      	lsls	r3, r1
    2b5a:	4698      	mov	r8, r3
    2b5c:	2300      	movs	r3, #0
    2b5e:	4c3c      	ldr	r4, [pc, #240]	; (2c50 <__aeabi_ddiv+0x1f0>)
    2b60:	2600      	movs	r6, #0
    2b62:	1a24      	subs	r4, r4, r0
    2b64:	9303      	str	r3, [sp, #12]
    2b66:	e79f      	b.n	2aa8 <__aeabi_ddiv+0x48>
    2b68:	4651      	mov	r1, sl
    2b6a:	465a      	mov	r2, fp
    2b6c:	4311      	orrs	r1, r2
    2b6e:	d129      	bne.n	2bc4 <__aeabi_ddiv+0x164>
    2b70:	2200      	movs	r2, #0
    2b72:	4693      	mov	fp, r2
    2b74:	3202      	adds	r2, #2
    2b76:	e7b1      	b.n	2adc <__aeabi_ddiv+0x7c>
    2b78:	4659      	mov	r1, fp
    2b7a:	4301      	orrs	r1, r0
    2b7c:	d01e      	beq.n	2bbc <__aeabi_ddiv+0x15c>
    2b7e:	465b      	mov	r3, fp
    2b80:	2b00      	cmp	r3, #0
    2b82:	d100      	bne.n	2b86 <__aeabi_ddiv+0x126>
    2b84:	e19e      	b.n	2ec4 <__aeabi_ddiv+0x464>
    2b86:	4658      	mov	r0, fp
    2b88:	f001 f910 	bl	3dac <__clzsi2>
    2b8c:	0003      	movs	r3, r0
    2b8e:	3b0b      	subs	r3, #11
    2b90:	2b1c      	cmp	r3, #28
    2b92:	dd00      	ble.n	2b96 <__aeabi_ddiv+0x136>
    2b94:	e18f      	b.n	2eb6 <__aeabi_ddiv+0x456>
    2b96:	0002      	movs	r2, r0
    2b98:	4659      	mov	r1, fp
    2b9a:	3a08      	subs	r2, #8
    2b9c:	4091      	lsls	r1, r2
    2b9e:	468b      	mov	fp, r1
    2ba0:	211d      	movs	r1, #29
    2ba2:	1acb      	subs	r3, r1, r3
    2ba4:	4651      	mov	r1, sl
    2ba6:	40d9      	lsrs	r1, r3
    2ba8:	000b      	movs	r3, r1
    2baa:	4659      	mov	r1, fp
    2bac:	430b      	orrs	r3, r1
    2bae:	4651      	mov	r1, sl
    2bb0:	469b      	mov	fp, r3
    2bb2:	4091      	lsls	r1, r2
    2bb4:	4b26      	ldr	r3, [pc, #152]	; (2c50 <__aeabi_ddiv+0x1f0>)
    2bb6:	2200      	movs	r2, #0
    2bb8:	1a1b      	subs	r3, r3, r0
    2bba:	e78f      	b.n	2adc <__aeabi_ddiv+0x7c>
    2bbc:	2300      	movs	r3, #0
    2bbe:	2201      	movs	r2, #1
    2bc0:	469b      	mov	fp, r3
    2bc2:	e78b      	b.n	2adc <__aeabi_ddiv+0x7c>
    2bc4:	4651      	mov	r1, sl
    2bc6:	2203      	movs	r2, #3
    2bc8:	e788      	b.n	2adc <__aeabi_ddiv+0x7c>
    2bca:	2300      	movs	r3, #0
    2bcc:	4698      	mov	r8, r3
    2bce:	3301      	adds	r3, #1
    2bd0:	2604      	movs	r6, #4
    2bd2:	2400      	movs	r4, #0
    2bd4:	9303      	str	r3, [sp, #12]
    2bd6:	e767      	b.n	2aa8 <__aeabi_ddiv+0x48>
    2bd8:	2303      	movs	r3, #3
    2bda:	46b1      	mov	r9, r6
    2bdc:	9303      	str	r3, [sp, #12]
    2bde:	260c      	movs	r6, #12
    2be0:	e762      	b.n	2aa8 <__aeabi_ddiv+0x48>
    2be2:	2a03      	cmp	r2, #3
    2be4:	d100      	bne.n	2be8 <__aeabi_ddiv+0x188>
    2be6:	e25c      	b.n	30a2 <__aeabi_ddiv+0x642>
    2be8:	9b01      	ldr	r3, [sp, #4]
    2bea:	2a01      	cmp	r2, #1
    2bec:	d000      	beq.n	2bf0 <__aeabi_ddiv+0x190>
    2bee:	e1e4      	b.n	2fba <__aeabi_ddiv+0x55a>
    2bf0:	4013      	ands	r3, r2
    2bf2:	469c      	mov	ip, r3
    2bf4:	2300      	movs	r3, #0
    2bf6:	2400      	movs	r4, #0
    2bf8:	2200      	movs	r2, #0
    2bfa:	4698      	mov	r8, r3
    2bfc:	2100      	movs	r1, #0
    2bfe:	0312      	lsls	r2, r2, #12
    2c00:	0b13      	lsrs	r3, r2, #12
    2c02:	0d0a      	lsrs	r2, r1, #20
    2c04:	0512      	lsls	r2, r2, #20
    2c06:	431a      	orrs	r2, r3
    2c08:	0523      	lsls	r3, r4, #20
    2c0a:	4c12      	ldr	r4, [pc, #72]	; (2c54 <__aeabi_ddiv+0x1f4>)
    2c0c:	4640      	mov	r0, r8
    2c0e:	4022      	ands	r2, r4
    2c10:	4313      	orrs	r3, r2
    2c12:	4662      	mov	r2, ip
    2c14:	005b      	lsls	r3, r3, #1
    2c16:	07d2      	lsls	r2, r2, #31
    2c18:	085b      	lsrs	r3, r3, #1
    2c1a:	4313      	orrs	r3, r2
    2c1c:	0019      	movs	r1, r3
    2c1e:	b007      	add	sp, #28
    2c20:	bc3c      	pop	{r2, r3, r4, r5}
    2c22:	4690      	mov	r8, r2
    2c24:	4699      	mov	r9, r3
    2c26:	46a2      	mov	sl, r4
    2c28:	46ab      	mov	fp, r5
    2c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2c2c:	2300      	movs	r3, #0
    2c2e:	2280      	movs	r2, #128	; 0x80
    2c30:	469c      	mov	ip, r3
    2c32:	0312      	lsls	r2, r2, #12
    2c34:	4698      	mov	r8, r3
    2c36:	4c03      	ldr	r4, [pc, #12]	; (2c44 <__aeabi_ddiv+0x1e4>)
    2c38:	e7e0      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2c3a:	2300      	movs	r3, #0
    2c3c:	4c01      	ldr	r4, [pc, #4]	; (2c44 <__aeabi_ddiv+0x1e4>)
    2c3e:	2200      	movs	r2, #0
    2c40:	4698      	mov	r8, r3
    2c42:	e7db      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2c44:	000007ff 	.word	0x000007ff
    2c48:	fffffc01 	.word	0xfffffc01
    2c4c:	00004bd0 	.word	0x00004bd0
    2c50:	fffffc0d 	.word	0xfffffc0d
    2c54:	800fffff 	.word	0x800fffff
    2c58:	45d9      	cmp	r9, fp
    2c5a:	d900      	bls.n	2c5e <__aeabi_ddiv+0x1fe>
    2c5c:	e139      	b.n	2ed2 <__aeabi_ddiv+0x472>
    2c5e:	d100      	bne.n	2c62 <__aeabi_ddiv+0x202>
    2c60:	e134      	b.n	2ecc <__aeabi_ddiv+0x46c>
    2c62:	2300      	movs	r3, #0
    2c64:	4646      	mov	r6, r8
    2c66:	464d      	mov	r5, r9
    2c68:	469a      	mov	sl, r3
    2c6a:	3c01      	subs	r4, #1
    2c6c:	465b      	mov	r3, fp
    2c6e:	0e0a      	lsrs	r2, r1, #24
    2c70:	021b      	lsls	r3, r3, #8
    2c72:	431a      	orrs	r2, r3
    2c74:	020b      	lsls	r3, r1, #8
    2c76:	0c17      	lsrs	r7, r2, #16
    2c78:	9303      	str	r3, [sp, #12]
    2c7a:	0413      	lsls	r3, r2, #16
    2c7c:	0c1b      	lsrs	r3, r3, #16
    2c7e:	0039      	movs	r1, r7
    2c80:	0028      	movs	r0, r5
    2c82:	4690      	mov	r8, r2
    2c84:	9301      	str	r3, [sp, #4]
    2c86:	f7fe ff5f 	bl	1b48 <__udivsi3>
    2c8a:	0002      	movs	r2, r0
    2c8c:	9b01      	ldr	r3, [sp, #4]
    2c8e:	4683      	mov	fp, r0
    2c90:	435a      	muls	r2, r3
    2c92:	0028      	movs	r0, r5
    2c94:	0039      	movs	r1, r7
    2c96:	4691      	mov	r9, r2
    2c98:	f7fe ffdc 	bl	1c54 <__aeabi_uidivmod>
    2c9c:	0c35      	lsrs	r5, r6, #16
    2c9e:	0409      	lsls	r1, r1, #16
    2ca0:	430d      	orrs	r5, r1
    2ca2:	45a9      	cmp	r9, r5
    2ca4:	d90d      	bls.n	2cc2 <__aeabi_ddiv+0x262>
    2ca6:	465b      	mov	r3, fp
    2ca8:	4445      	add	r5, r8
    2caa:	3b01      	subs	r3, #1
    2cac:	45a8      	cmp	r8, r5
    2cae:	d900      	bls.n	2cb2 <__aeabi_ddiv+0x252>
    2cb0:	e13a      	b.n	2f28 <__aeabi_ddiv+0x4c8>
    2cb2:	45a9      	cmp	r9, r5
    2cb4:	d800      	bhi.n	2cb8 <__aeabi_ddiv+0x258>
    2cb6:	e137      	b.n	2f28 <__aeabi_ddiv+0x4c8>
    2cb8:	2302      	movs	r3, #2
    2cba:	425b      	negs	r3, r3
    2cbc:	469c      	mov	ip, r3
    2cbe:	4445      	add	r5, r8
    2cc0:	44e3      	add	fp, ip
    2cc2:	464b      	mov	r3, r9
    2cc4:	1aeb      	subs	r3, r5, r3
    2cc6:	0039      	movs	r1, r7
    2cc8:	0018      	movs	r0, r3
    2cca:	9304      	str	r3, [sp, #16]
    2ccc:	f7fe ff3c 	bl	1b48 <__udivsi3>
    2cd0:	9b01      	ldr	r3, [sp, #4]
    2cd2:	0005      	movs	r5, r0
    2cd4:	4343      	muls	r3, r0
    2cd6:	0039      	movs	r1, r7
    2cd8:	9804      	ldr	r0, [sp, #16]
    2cda:	4699      	mov	r9, r3
    2cdc:	f7fe ffba 	bl	1c54 <__aeabi_uidivmod>
    2ce0:	0433      	lsls	r3, r6, #16
    2ce2:	0409      	lsls	r1, r1, #16
    2ce4:	0c1b      	lsrs	r3, r3, #16
    2ce6:	430b      	orrs	r3, r1
    2ce8:	4599      	cmp	r9, r3
    2cea:	d909      	bls.n	2d00 <__aeabi_ddiv+0x2a0>
    2cec:	4443      	add	r3, r8
    2cee:	1e6a      	subs	r2, r5, #1
    2cf0:	4598      	cmp	r8, r3
    2cf2:	d900      	bls.n	2cf6 <__aeabi_ddiv+0x296>
    2cf4:	e11a      	b.n	2f2c <__aeabi_ddiv+0x4cc>
    2cf6:	4599      	cmp	r9, r3
    2cf8:	d800      	bhi.n	2cfc <__aeabi_ddiv+0x29c>
    2cfa:	e117      	b.n	2f2c <__aeabi_ddiv+0x4cc>
    2cfc:	3d02      	subs	r5, #2
    2cfe:	4443      	add	r3, r8
    2d00:	464a      	mov	r2, r9
    2d02:	1a9b      	subs	r3, r3, r2
    2d04:	465a      	mov	r2, fp
    2d06:	0412      	lsls	r2, r2, #16
    2d08:	432a      	orrs	r2, r5
    2d0a:	9903      	ldr	r1, [sp, #12]
    2d0c:	4693      	mov	fp, r2
    2d0e:	0c10      	lsrs	r0, r2, #16
    2d10:	0c0a      	lsrs	r2, r1, #16
    2d12:	4691      	mov	r9, r2
    2d14:	0409      	lsls	r1, r1, #16
    2d16:	465a      	mov	r2, fp
    2d18:	0c09      	lsrs	r1, r1, #16
    2d1a:	464e      	mov	r6, r9
    2d1c:	000d      	movs	r5, r1
    2d1e:	0412      	lsls	r2, r2, #16
    2d20:	0c12      	lsrs	r2, r2, #16
    2d22:	4345      	muls	r5, r0
    2d24:	9105      	str	r1, [sp, #20]
    2d26:	4351      	muls	r1, r2
    2d28:	4372      	muls	r2, r6
    2d2a:	4370      	muls	r0, r6
    2d2c:	1952      	adds	r2, r2, r5
    2d2e:	0c0e      	lsrs	r6, r1, #16
    2d30:	18b2      	adds	r2, r6, r2
    2d32:	4295      	cmp	r5, r2
    2d34:	d903      	bls.n	2d3e <__aeabi_ddiv+0x2de>
    2d36:	2580      	movs	r5, #128	; 0x80
    2d38:	026d      	lsls	r5, r5, #9
    2d3a:	46ac      	mov	ip, r5
    2d3c:	4460      	add	r0, ip
    2d3e:	0c15      	lsrs	r5, r2, #16
    2d40:	0409      	lsls	r1, r1, #16
    2d42:	0412      	lsls	r2, r2, #16
    2d44:	0c09      	lsrs	r1, r1, #16
    2d46:	1828      	adds	r0, r5, r0
    2d48:	1852      	adds	r2, r2, r1
    2d4a:	4283      	cmp	r3, r0
    2d4c:	d200      	bcs.n	2d50 <__aeabi_ddiv+0x2f0>
    2d4e:	e0ce      	b.n	2eee <__aeabi_ddiv+0x48e>
    2d50:	d100      	bne.n	2d54 <__aeabi_ddiv+0x2f4>
    2d52:	e0c8      	b.n	2ee6 <__aeabi_ddiv+0x486>
    2d54:	1a1d      	subs	r5, r3, r0
    2d56:	4653      	mov	r3, sl
    2d58:	1a9e      	subs	r6, r3, r2
    2d5a:	45b2      	cmp	sl, r6
    2d5c:	4192      	sbcs	r2, r2
    2d5e:	4252      	negs	r2, r2
    2d60:	1aab      	subs	r3, r5, r2
    2d62:	469a      	mov	sl, r3
    2d64:	4598      	cmp	r8, r3
    2d66:	d100      	bne.n	2d6a <__aeabi_ddiv+0x30a>
    2d68:	e117      	b.n	2f9a <__aeabi_ddiv+0x53a>
    2d6a:	0039      	movs	r1, r7
    2d6c:	0018      	movs	r0, r3
    2d6e:	f7fe feeb 	bl	1b48 <__udivsi3>
    2d72:	9b01      	ldr	r3, [sp, #4]
    2d74:	0005      	movs	r5, r0
    2d76:	4343      	muls	r3, r0
    2d78:	0039      	movs	r1, r7
    2d7a:	4650      	mov	r0, sl
    2d7c:	9304      	str	r3, [sp, #16]
    2d7e:	f7fe ff69 	bl	1c54 <__aeabi_uidivmod>
    2d82:	9804      	ldr	r0, [sp, #16]
    2d84:	040b      	lsls	r3, r1, #16
    2d86:	0c31      	lsrs	r1, r6, #16
    2d88:	4319      	orrs	r1, r3
    2d8a:	4288      	cmp	r0, r1
    2d8c:	d909      	bls.n	2da2 <__aeabi_ddiv+0x342>
    2d8e:	4441      	add	r1, r8
    2d90:	1e6b      	subs	r3, r5, #1
    2d92:	4588      	cmp	r8, r1
    2d94:	d900      	bls.n	2d98 <__aeabi_ddiv+0x338>
    2d96:	e107      	b.n	2fa8 <__aeabi_ddiv+0x548>
    2d98:	4288      	cmp	r0, r1
    2d9a:	d800      	bhi.n	2d9e <__aeabi_ddiv+0x33e>
    2d9c:	e104      	b.n	2fa8 <__aeabi_ddiv+0x548>
    2d9e:	3d02      	subs	r5, #2
    2da0:	4441      	add	r1, r8
    2da2:	9b04      	ldr	r3, [sp, #16]
    2da4:	1acb      	subs	r3, r1, r3
    2da6:	0018      	movs	r0, r3
    2da8:	0039      	movs	r1, r7
    2daa:	9304      	str	r3, [sp, #16]
    2dac:	f7fe fecc 	bl	1b48 <__udivsi3>
    2db0:	9b01      	ldr	r3, [sp, #4]
    2db2:	4682      	mov	sl, r0
    2db4:	4343      	muls	r3, r0
    2db6:	0039      	movs	r1, r7
    2db8:	9804      	ldr	r0, [sp, #16]
    2dba:	9301      	str	r3, [sp, #4]
    2dbc:	f7fe ff4a 	bl	1c54 <__aeabi_uidivmod>
    2dc0:	9801      	ldr	r0, [sp, #4]
    2dc2:	040b      	lsls	r3, r1, #16
    2dc4:	0431      	lsls	r1, r6, #16
    2dc6:	0c09      	lsrs	r1, r1, #16
    2dc8:	4319      	orrs	r1, r3
    2dca:	4288      	cmp	r0, r1
    2dcc:	d90d      	bls.n	2dea <__aeabi_ddiv+0x38a>
    2dce:	4653      	mov	r3, sl
    2dd0:	4441      	add	r1, r8
    2dd2:	3b01      	subs	r3, #1
    2dd4:	4588      	cmp	r8, r1
    2dd6:	d900      	bls.n	2dda <__aeabi_ddiv+0x37a>
    2dd8:	e0e8      	b.n	2fac <__aeabi_ddiv+0x54c>
    2dda:	4288      	cmp	r0, r1
    2ddc:	d800      	bhi.n	2de0 <__aeabi_ddiv+0x380>
    2dde:	e0e5      	b.n	2fac <__aeabi_ddiv+0x54c>
    2de0:	2302      	movs	r3, #2
    2de2:	425b      	negs	r3, r3
    2de4:	469c      	mov	ip, r3
    2de6:	4441      	add	r1, r8
    2de8:	44e2      	add	sl, ip
    2dea:	9b01      	ldr	r3, [sp, #4]
    2dec:	042d      	lsls	r5, r5, #16
    2dee:	1ace      	subs	r6, r1, r3
    2df0:	4651      	mov	r1, sl
    2df2:	4329      	orrs	r1, r5
    2df4:	9d05      	ldr	r5, [sp, #20]
    2df6:	464f      	mov	r7, r9
    2df8:	002a      	movs	r2, r5
    2dfa:	040b      	lsls	r3, r1, #16
    2dfc:	0c08      	lsrs	r0, r1, #16
    2dfe:	0c1b      	lsrs	r3, r3, #16
    2e00:	435a      	muls	r2, r3
    2e02:	4345      	muls	r5, r0
    2e04:	437b      	muls	r3, r7
    2e06:	4378      	muls	r0, r7
    2e08:	195b      	adds	r3, r3, r5
    2e0a:	0c17      	lsrs	r7, r2, #16
    2e0c:	18fb      	adds	r3, r7, r3
    2e0e:	429d      	cmp	r5, r3
    2e10:	d903      	bls.n	2e1a <__aeabi_ddiv+0x3ba>
    2e12:	2580      	movs	r5, #128	; 0x80
    2e14:	026d      	lsls	r5, r5, #9
    2e16:	46ac      	mov	ip, r5
    2e18:	4460      	add	r0, ip
    2e1a:	0c1d      	lsrs	r5, r3, #16
    2e1c:	0412      	lsls	r2, r2, #16
    2e1e:	041b      	lsls	r3, r3, #16
    2e20:	0c12      	lsrs	r2, r2, #16
    2e22:	1828      	adds	r0, r5, r0
    2e24:	189b      	adds	r3, r3, r2
    2e26:	4286      	cmp	r6, r0
    2e28:	d200      	bcs.n	2e2c <__aeabi_ddiv+0x3cc>
    2e2a:	e093      	b.n	2f54 <__aeabi_ddiv+0x4f4>
    2e2c:	d100      	bne.n	2e30 <__aeabi_ddiv+0x3d0>
    2e2e:	e08e      	b.n	2f4e <__aeabi_ddiv+0x4ee>
    2e30:	2301      	movs	r3, #1
    2e32:	4319      	orrs	r1, r3
    2e34:	4ba0      	ldr	r3, [pc, #640]	; (30b8 <__aeabi_ddiv+0x658>)
    2e36:	18e3      	adds	r3, r4, r3
    2e38:	2b00      	cmp	r3, #0
    2e3a:	dc00      	bgt.n	2e3e <__aeabi_ddiv+0x3de>
    2e3c:	e099      	b.n	2f72 <__aeabi_ddiv+0x512>
    2e3e:	074a      	lsls	r2, r1, #29
    2e40:	d000      	beq.n	2e44 <__aeabi_ddiv+0x3e4>
    2e42:	e09e      	b.n	2f82 <__aeabi_ddiv+0x522>
    2e44:	465a      	mov	r2, fp
    2e46:	01d2      	lsls	r2, r2, #7
    2e48:	d506      	bpl.n	2e58 <__aeabi_ddiv+0x3f8>
    2e4a:	465a      	mov	r2, fp
    2e4c:	4b9b      	ldr	r3, [pc, #620]	; (30bc <__aeabi_ddiv+0x65c>)
    2e4e:	401a      	ands	r2, r3
    2e50:	2380      	movs	r3, #128	; 0x80
    2e52:	4693      	mov	fp, r2
    2e54:	00db      	lsls	r3, r3, #3
    2e56:	18e3      	adds	r3, r4, r3
    2e58:	4a99      	ldr	r2, [pc, #612]	; (30c0 <__aeabi_ddiv+0x660>)
    2e5a:	4293      	cmp	r3, r2
    2e5c:	dd68      	ble.n	2f30 <__aeabi_ddiv+0x4d0>
    2e5e:	2301      	movs	r3, #1
    2e60:	9a02      	ldr	r2, [sp, #8]
    2e62:	4c98      	ldr	r4, [pc, #608]	; (30c4 <__aeabi_ddiv+0x664>)
    2e64:	401a      	ands	r2, r3
    2e66:	2300      	movs	r3, #0
    2e68:	4694      	mov	ip, r2
    2e6a:	4698      	mov	r8, r3
    2e6c:	2200      	movs	r2, #0
    2e6e:	e6c5      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2e70:	2280      	movs	r2, #128	; 0x80
    2e72:	464b      	mov	r3, r9
    2e74:	0312      	lsls	r2, r2, #12
    2e76:	4213      	tst	r3, r2
    2e78:	d00a      	beq.n	2e90 <__aeabi_ddiv+0x430>
    2e7a:	465b      	mov	r3, fp
    2e7c:	4213      	tst	r3, r2
    2e7e:	d106      	bne.n	2e8e <__aeabi_ddiv+0x42e>
    2e80:	431a      	orrs	r2, r3
    2e82:	0312      	lsls	r2, r2, #12
    2e84:	0b12      	lsrs	r2, r2, #12
    2e86:	46ac      	mov	ip, r5
    2e88:	4688      	mov	r8, r1
    2e8a:	4c8e      	ldr	r4, [pc, #568]	; (30c4 <__aeabi_ddiv+0x664>)
    2e8c:	e6b6      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2e8e:	464b      	mov	r3, r9
    2e90:	431a      	orrs	r2, r3
    2e92:	0312      	lsls	r2, r2, #12
    2e94:	0b12      	lsrs	r2, r2, #12
    2e96:	46bc      	mov	ip, r7
    2e98:	4c8a      	ldr	r4, [pc, #552]	; (30c4 <__aeabi_ddiv+0x664>)
    2e9a:	e6af      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2e9c:	0003      	movs	r3, r0
    2e9e:	465a      	mov	r2, fp
    2ea0:	3b28      	subs	r3, #40	; 0x28
    2ea2:	409a      	lsls	r2, r3
    2ea4:	2300      	movs	r3, #0
    2ea6:	4691      	mov	r9, r2
    2ea8:	4698      	mov	r8, r3
    2eaa:	e657      	b.n	2b5c <__aeabi_ddiv+0xfc>
    2eac:	4658      	mov	r0, fp
    2eae:	f000 ff7d 	bl	3dac <__clzsi2>
    2eb2:	3020      	adds	r0, #32
    2eb4:	e640      	b.n	2b38 <__aeabi_ddiv+0xd8>
    2eb6:	0003      	movs	r3, r0
    2eb8:	4652      	mov	r2, sl
    2eba:	3b28      	subs	r3, #40	; 0x28
    2ebc:	409a      	lsls	r2, r3
    2ebe:	2100      	movs	r1, #0
    2ec0:	4693      	mov	fp, r2
    2ec2:	e677      	b.n	2bb4 <__aeabi_ddiv+0x154>
    2ec4:	f000 ff72 	bl	3dac <__clzsi2>
    2ec8:	3020      	adds	r0, #32
    2eca:	e65f      	b.n	2b8c <__aeabi_ddiv+0x12c>
    2ecc:	4588      	cmp	r8, r1
    2ece:	d200      	bcs.n	2ed2 <__aeabi_ddiv+0x472>
    2ed0:	e6c7      	b.n	2c62 <__aeabi_ddiv+0x202>
    2ed2:	464b      	mov	r3, r9
    2ed4:	07de      	lsls	r6, r3, #31
    2ed6:	085d      	lsrs	r5, r3, #1
    2ed8:	4643      	mov	r3, r8
    2eda:	085b      	lsrs	r3, r3, #1
    2edc:	431e      	orrs	r6, r3
    2ede:	4643      	mov	r3, r8
    2ee0:	07db      	lsls	r3, r3, #31
    2ee2:	469a      	mov	sl, r3
    2ee4:	e6c2      	b.n	2c6c <__aeabi_ddiv+0x20c>
    2ee6:	2500      	movs	r5, #0
    2ee8:	4592      	cmp	sl, r2
    2eea:	d300      	bcc.n	2eee <__aeabi_ddiv+0x48e>
    2eec:	e733      	b.n	2d56 <__aeabi_ddiv+0x2f6>
    2eee:	9e03      	ldr	r6, [sp, #12]
    2ef0:	4659      	mov	r1, fp
    2ef2:	46b4      	mov	ip, r6
    2ef4:	44e2      	add	sl, ip
    2ef6:	45b2      	cmp	sl, r6
    2ef8:	41ad      	sbcs	r5, r5
    2efa:	426d      	negs	r5, r5
    2efc:	4445      	add	r5, r8
    2efe:	18eb      	adds	r3, r5, r3
    2f00:	3901      	subs	r1, #1
    2f02:	4598      	cmp	r8, r3
    2f04:	d207      	bcs.n	2f16 <__aeabi_ddiv+0x4b6>
    2f06:	4298      	cmp	r0, r3
    2f08:	d900      	bls.n	2f0c <__aeabi_ddiv+0x4ac>
    2f0a:	e07f      	b.n	300c <__aeabi_ddiv+0x5ac>
    2f0c:	d100      	bne.n	2f10 <__aeabi_ddiv+0x4b0>
    2f0e:	e0bc      	b.n	308a <__aeabi_ddiv+0x62a>
    2f10:	1a1d      	subs	r5, r3, r0
    2f12:	468b      	mov	fp, r1
    2f14:	e71f      	b.n	2d56 <__aeabi_ddiv+0x2f6>
    2f16:	4598      	cmp	r8, r3
    2f18:	d1fa      	bne.n	2f10 <__aeabi_ddiv+0x4b0>
    2f1a:	9d03      	ldr	r5, [sp, #12]
    2f1c:	4555      	cmp	r5, sl
    2f1e:	d9f2      	bls.n	2f06 <__aeabi_ddiv+0x4a6>
    2f20:	4643      	mov	r3, r8
    2f22:	468b      	mov	fp, r1
    2f24:	1a1d      	subs	r5, r3, r0
    2f26:	e716      	b.n	2d56 <__aeabi_ddiv+0x2f6>
    2f28:	469b      	mov	fp, r3
    2f2a:	e6ca      	b.n	2cc2 <__aeabi_ddiv+0x262>
    2f2c:	0015      	movs	r5, r2
    2f2e:	e6e7      	b.n	2d00 <__aeabi_ddiv+0x2a0>
    2f30:	465a      	mov	r2, fp
    2f32:	08c9      	lsrs	r1, r1, #3
    2f34:	0752      	lsls	r2, r2, #29
    2f36:	430a      	orrs	r2, r1
    2f38:	055b      	lsls	r3, r3, #21
    2f3a:	4690      	mov	r8, r2
    2f3c:	0d5c      	lsrs	r4, r3, #21
    2f3e:	465a      	mov	r2, fp
    2f40:	2301      	movs	r3, #1
    2f42:	9902      	ldr	r1, [sp, #8]
    2f44:	0252      	lsls	r2, r2, #9
    2f46:	4019      	ands	r1, r3
    2f48:	0b12      	lsrs	r2, r2, #12
    2f4a:	468c      	mov	ip, r1
    2f4c:	e656      	b.n	2bfc <__aeabi_ddiv+0x19c>
    2f4e:	2b00      	cmp	r3, #0
    2f50:	d100      	bne.n	2f54 <__aeabi_ddiv+0x4f4>
    2f52:	e76f      	b.n	2e34 <__aeabi_ddiv+0x3d4>
    2f54:	4446      	add	r6, r8
    2f56:	1e4a      	subs	r2, r1, #1
    2f58:	45b0      	cmp	r8, r6
    2f5a:	d929      	bls.n	2fb0 <__aeabi_ddiv+0x550>
    2f5c:	0011      	movs	r1, r2
    2f5e:	4286      	cmp	r6, r0
    2f60:	d000      	beq.n	2f64 <__aeabi_ddiv+0x504>
    2f62:	e765      	b.n	2e30 <__aeabi_ddiv+0x3d0>
    2f64:	9a03      	ldr	r2, [sp, #12]
    2f66:	4293      	cmp	r3, r2
    2f68:	d000      	beq.n	2f6c <__aeabi_ddiv+0x50c>
    2f6a:	e761      	b.n	2e30 <__aeabi_ddiv+0x3d0>
    2f6c:	e762      	b.n	2e34 <__aeabi_ddiv+0x3d4>
    2f6e:	2101      	movs	r1, #1
    2f70:	4249      	negs	r1, r1
    2f72:	2001      	movs	r0, #1
    2f74:	1ac2      	subs	r2, r0, r3
    2f76:	2a38      	cmp	r2, #56	; 0x38
    2f78:	dd21      	ble.n	2fbe <__aeabi_ddiv+0x55e>
    2f7a:	9b02      	ldr	r3, [sp, #8]
    2f7c:	4003      	ands	r3, r0
    2f7e:	469c      	mov	ip, r3
    2f80:	e638      	b.n	2bf4 <__aeabi_ddiv+0x194>
    2f82:	220f      	movs	r2, #15
    2f84:	400a      	ands	r2, r1
    2f86:	2a04      	cmp	r2, #4
    2f88:	d100      	bne.n	2f8c <__aeabi_ddiv+0x52c>
    2f8a:	e75b      	b.n	2e44 <__aeabi_ddiv+0x3e4>
    2f8c:	000a      	movs	r2, r1
    2f8e:	1d11      	adds	r1, r2, #4
    2f90:	4291      	cmp	r1, r2
    2f92:	4192      	sbcs	r2, r2
    2f94:	4252      	negs	r2, r2
    2f96:	4493      	add	fp, r2
    2f98:	e754      	b.n	2e44 <__aeabi_ddiv+0x3e4>
    2f9a:	4b47      	ldr	r3, [pc, #284]	; (30b8 <__aeabi_ddiv+0x658>)
    2f9c:	18e3      	adds	r3, r4, r3
    2f9e:	2b00      	cmp	r3, #0
    2fa0:	dde5      	ble.n	2f6e <__aeabi_ddiv+0x50e>
    2fa2:	2201      	movs	r2, #1
    2fa4:	4252      	negs	r2, r2
    2fa6:	e7f2      	b.n	2f8e <__aeabi_ddiv+0x52e>
    2fa8:	001d      	movs	r5, r3
    2faa:	e6fa      	b.n	2da2 <__aeabi_ddiv+0x342>
    2fac:	469a      	mov	sl, r3
    2fae:	e71c      	b.n	2dea <__aeabi_ddiv+0x38a>
    2fb0:	42b0      	cmp	r0, r6
    2fb2:	d839      	bhi.n	3028 <__aeabi_ddiv+0x5c8>
    2fb4:	d06e      	beq.n	3094 <__aeabi_ddiv+0x634>
    2fb6:	0011      	movs	r1, r2
    2fb8:	e73a      	b.n	2e30 <__aeabi_ddiv+0x3d0>
    2fba:	9302      	str	r3, [sp, #8]
    2fbc:	e73a      	b.n	2e34 <__aeabi_ddiv+0x3d4>
    2fbe:	2a1f      	cmp	r2, #31
    2fc0:	dc3c      	bgt.n	303c <__aeabi_ddiv+0x5dc>
    2fc2:	2320      	movs	r3, #32
    2fc4:	1a9b      	subs	r3, r3, r2
    2fc6:	000c      	movs	r4, r1
    2fc8:	4658      	mov	r0, fp
    2fca:	4099      	lsls	r1, r3
    2fcc:	4098      	lsls	r0, r3
    2fce:	1e4b      	subs	r3, r1, #1
    2fd0:	4199      	sbcs	r1, r3
    2fd2:	465b      	mov	r3, fp
    2fd4:	40d4      	lsrs	r4, r2
    2fd6:	40d3      	lsrs	r3, r2
    2fd8:	4320      	orrs	r0, r4
    2fda:	4308      	orrs	r0, r1
    2fdc:	001a      	movs	r2, r3
    2fde:	0743      	lsls	r3, r0, #29
    2fe0:	d009      	beq.n	2ff6 <__aeabi_ddiv+0x596>
    2fe2:	230f      	movs	r3, #15
    2fe4:	4003      	ands	r3, r0
    2fe6:	2b04      	cmp	r3, #4
    2fe8:	d005      	beq.n	2ff6 <__aeabi_ddiv+0x596>
    2fea:	0001      	movs	r1, r0
    2fec:	1d08      	adds	r0, r1, #4
    2fee:	4288      	cmp	r0, r1
    2ff0:	419b      	sbcs	r3, r3
    2ff2:	425b      	negs	r3, r3
    2ff4:	18d2      	adds	r2, r2, r3
    2ff6:	0213      	lsls	r3, r2, #8
    2ff8:	d53a      	bpl.n	3070 <__aeabi_ddiv+0x610>
    2ffa:	2301      	movs	r3, #1
    2ffc:	9a02      	ldr	r2, [sp, #8]
    2ffe:	2401      	movs	r4, #1
    3000:	401a      	ands	r2, r3
    3002:	2300      	movs	r3, #0
    3004:	4694      	mov	ip, r2
    3006:	4698      	mov	r8, r3
    3008:	2200      	movs	r2, #0
    300a:	e5f7      	b.n	2bfc <__aeabi_ddiv+0x19c>
    300c:	2102      	movs	r1, #2
    300e:	4249      	negs	r1, r1
    3010:	468c      	mov	ip, r1
    3012:	9d03      	ldr	r5, [sp, #12]
    3014:	44e3      	add	fp, ip
    3016:	46ac      	mov	ip, r5
    3018:	44e2      	add	sl, ip
    301a:	45aa      	cmp	sl, r5
    301c:	41ad      	sbcs	r5, r5
    301e:	426d      	negs	r5, r5
    3020:	4445      	add	r5, r8
    3022:	18ed      	adds	r5, r5, r3
    3024:	1a2d      	subs	r5, r5, r0
    3026:	e696      	b.n	2d56 <__aeabi_ddiv+0x2f6>
    3028:	1e8a      	subs	r2, r1, #2
    302a:	9903      	ldr	r1, [sp, #12]
    302c:	004d      	lsls	r5, r1, #1
    302e:	428d      	cmp	r5, r1
    3030:	4189      	sbcs	r1, r1
    3032:	4249      	negs	r1, r1
    3034:	4441      	add	r1, r8
    3036:	1876      	adds	r6, r6, r1
    3038:	9503      	str	r5, [sp, #12]
    303a:	e78f      	b.n	2f5c <__aeabi_ddiv+0x4fc>
    303c:	201f      	movs	r0, #31
    303e:	4240      	negs	r0, r0
    3040:	1ac3      	subs	r3, r0, r3
    3042:	4658      	mov	r0, fp
    3044:	40d8      	lsrs	r0, r3
    3046:	0003      	movs	r3, r0
    3048:	2a20      	cmp	r2, #32
    304a:	d028      	beq.n	309e <__aeabi_ddiv+0x63e>
    304c:	2040      	movs	r0, #64	; 0x40
    304e:	465d      	mov	r5, fp
    3050:	1a82      	subs	r2, r0, r2
    3052:	4095      	lsls	r5, r2
    3054:	4329      	orrs	r1, r5
    3056:	1e4a      	subs	r2, r1, #1
    3058:	4191      	sbcs	r1, r2
    305a:	4319      	orrs	r1, r3
    305c:	2307      	movs	r3, #7
    305e:	2200      	movs	r2, #0
    3060:	400b      	ands	r3, r1
    3062:	d009      	beq.n	3078 <__aeabi_ddiv+0x618>
    3064:	230f      	movs	r3, #15
    3066:	2200      	movs	r2, #0
    3068:	400b      	ands	r3, r1
    306a:	0008      	movs	r0, r1
    306c:	2b04      	cmp	r3, #4
    306e:	d1bd      	bne.n	2fec <__aeabi_ddiv+0x58c>
    3070:	0001      	movs	r1, r0
    3072:	0753      	lsls	r3, r2, #29
    3074:	0252      	lsls	r2, r2, #9
    3076:	0b12      	lsrs	r2, r2, #12
    3078:	08c9      	lsrs	r1, r1, #3
    307a:	4319      	orrs	r1, r3
    307c:	2301      	movs	r3, #1
    307e:	4688      	mov	r8, r1
    3080:	9902      	ldr	r1, [sp, #8]
    3082:	2400      	movs	r4, #0
    3084:	4019      	ands	r1, r3
    3086:	468c      	mov	ip, r1
    3088:	e5b8      	b.n	2bfc <__aeabi_ddiv+0x19c>
    308a:	4552      	cmp	r2, sl
    308c:	d8be      	bhi.n	300c <__aeabi_ddiv+0x5ac>
    308e:	468b      	mov	fp, r1
    3090:	2500      	movs	r5, #0
    3092:	e660      	b.n	2d56 <__aeabi_ddiv+0x2f6>
    3094:	9d03      	ldr	r5, [sp, #12]
    3096:	429d      	cmp	r5, r3
    3098:	d3c6      	bcc.n	3028 <__aeabi_ddiv+0x5c8>
    309a:	0011      	movs	r1, r2
    309c:	e762      	b.n	2f64 <__aeabi_ddiv+0x504>
    309e:	2500      	movs	r5, #0
    30a0:	e7d8      	b.n	3054 <__aeabi_ddiv+0x5f4>
    30a2:	2280      	movs	r2, #128	; 0x80
    30a4:	465b      	mov	r3, fp
    30a6:	0312      	lsls	r2, r2, #12
    30a8:	431a      	orrs	r2, r3
    30aa:	9b01      	ldr	r3, [sp, #4]
    30ac:	0312      	lsls	r2, r2, #12
    30ae:	0b12      	lsrs	r2, r2, #12
    30b0:	469c      	mov	ip, r3
    30b2:	4688      	mov	r8, r1
    30b4:	4c03      	ldr	r4, [pc, #12]	; (30c4 <__aeabi_ddiv+0x664>)
    30b6:	e5a1      	b.n	2bfc <__aeabi_ddiv+0x19c>
    30b8:	000003ff 	.word	0x000003ff
    30bc:	feffffff 	.word	0xfeffffff
    30c0:	000007fe 	.word	0x000007fe
    30c4:	000007ff 	.word	0x000007ff

000030c8 <__aeabi_dmul>:
    30c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    30ca:	4657      	mov	r7, sl
    30cc:	4645      	mov	r5, r8
    30ce:	46de      	mov	lr, fp
    30d0:	464e      	mov	r6, r9
    30d2:	b5e0      	push	{r5, r6, r7, lr}
    30d4:	030c      	lsls	r4, r1, #12
    30d6:	4698      	mov	r8, r3
    30d8:	004e      	lsls	r6, r1, #1
    30da:	0b23      	lsrs	r3, r4, #12
    30dc:	b087      	sub	sp, #28
    30de:	0007      	movs	r7, r0
    30e0:	4692      	mov	sl, r2
    30e2:	469b      	mov	fp, r3
    30e4:	0d76      	lsrs	r6, r6, #21
    30e6:	0fcd      	lsrs	r5, r1, #31
    30e8:	2e00      	cmp	r6, #0
    30ea:	d06b      	beq.n	31c4 <__aeabi_dmul+0xfc>
    30ec:	4b6d      	ldr	r3, [pc, #436]	; (32a4 <__aeabi_dmul+0x1dc>)
    30ee:	429e      	cmp	r6, r3
    30f0:	d035      	beq.n	315e <__aeabi_dmul+0x96>
    30f2:	2480      	movs	r4, #128	; 0x80
    30f4:	465b      	mov	r3, fp
    30f6:	0f42      	lsrs	r2, r0, #29
    30f8:	0424      	lsls	r4, r4, #16
    30fa:	00db      	lsls	r3, r3, #3
    30fc:	4314      	orrs	r4, r2
    30fe:	431c      	orrs	r4, r3
    3100:	00c3      	lsls	r3, r0, #3
    3102:	4699      	mov	r9, r3
    3104:	4b68      	ldr	r3, [pc, #416]	; (32a8 <__aeabi_dmul+0x1e0>)
    3106:	46a3      	mov	fp, r4
    3108:	469c      	mov	ip, r3
    310a:	2300      	movs	r3, #0
    310c:	2700      	movs	r7, #0
    310e:	4466      	add	r6, ip
    3110:	9302      	str	r3, [sp, #8]
    3112:	4643      	mov	r3, r8
    3114:	031c      	lsls	r4, r3, #12
    3116:	005a      	lsls	r2, r3, #1
    3118:	0fdb      	lsrs	r3, r3, #31
    311a:	4650      	mov	r0, sl
    311c:	0b24      	lsrs	r4, r4, #12
    311e:	0d52      	lsrs	r2, r2, #21
    3120:	4698      	mov	r8, r3
    3122:	d100      	bne.n	3126 <__aeabi_dmul+0x5e>
    3124:	e076      	b.n	3214 <__aeabi_dmul+0x14c>
    3126:	4b5f      	ldr	r3, [pc, #380]	; (32a4 <__aeabi_dmul+0x1dc>)
    3128:	429a      	cmp	r2, r3
    312a:	d06d      	beq.n	3208 <__aeabi_dmul+0x140>
    312c:	2380      	movs	r3, #128	; 0x80
    312e:	0f41      	lsrs	r1, r0, #29
    3130:	041b      	lsls	r3, r3, #16
    3132:	430b      	orrs	r3, r1
    3134:	495c      	ldr	r1, [pc, #368]	; (32a8 <__aeabi_dmul+0x1e0>)
    3136:	00e4      	lsls	r4, r4, #3
    3138:	468c      	mov	ip, r1
    313a:	431c      	orrs	r4, r3
    313c:	00c3      	lsls	r3, r0, #3
    313e:	2000      	movs	r0, #0
    3140:	4462      	add	r2, ip
    3142:	4641      	mov	r1, r8
    3144:	18b6      	adds	r6, r6, r2
    3146:	4069      	eors	r1, r5
    3148:	1c72      	adds	r2, r6, #1
    314a:	9101      	str	r1, [sp, #4]
    314c:	4694      	mov	ip, r2
    314e:	4307      	orrs	r7, r0
    3150:	2f0f      	cmp	r7, #15
    3152:	d900      	bls.n	3156 <__aeabi_dmul+0x8e>
    3154:	e0b0      	b.n	32b8 <__aeabi_dmul+0x1f0>
    3156:	4a55      	ldr	r2, [pc, #340]	; (32ac <__aeabi_dmul+0x1e4>)
    3158:	00bf      	lsls	r7, r7, #2
    315a:	59d2      	ldr	r2, [r2, r7]
    315c:	4697      	mov	pc, r2
    315e:	465b      	mov	r3, fp
    3160:	4303      	orrs	r3, r0
    3162:	4699      	mov	r9, r3
    3164:	d000      	beq.n	3168 <__aeabi_dmul+0xa0>
    3166:	e087      	b.n	3278 <__aeabi_dmul+0x1b0>
    3168:	2300      	movs	r3, #0
    316a:	469b      	mov	fp, r3
    316c:	3302      	adds	r3, #2
    316e:	2708      	movs	r7, #8
    3170:	9302      	str	r3, [sp, #8]
    3172:	e7ce      	b.n	3112 <__aeabi_dmul+0x4a>
    3174:	4642      	mov	r2, r8
    3176:	9201      	str	r2, [sp, #4]
    3178:	2802      	cmp	r0, #2
    317a:	d067      	beq.n	324c <__aeabi_dmul+0x184>
    317c:	2803      	cmp	r0, #3
    317e:	d100      	bne.n	3182 <__aeabi_dmul+0xba>
    3180:	e20e      	b.n	35a0 <__aeabi_dmul+0x4d8>
    3182:	2801      	cmp	r0, #1
    3184:	d000      	beq.n	3188 <__aeabi_dmul+0xc0>
    3186:	e162      	b.n	344e <__aeabi_dmul+0x386>
    3188:	2300      	movs	r3, #0
    318a:	2400      	movs	r4, #0
    318c:	2200      	movs	r2, #0
    318e:	4699      	mov	r9, r3
    3190:	9901      	ldr	r1, [sp, #4]
    3192:	4001      	ands	r1, r0
    3194:	b2cd      	uxtb	r5, r1
    3196:	2100      	movs	r1, #0
    3198:	0312      	lsls	r2, r2, #12
    319a:	0d0b      	lsrs	r3, r1, #20
    319c:	0b12      	lsrs	r2, r2, #12
    319e:	051b      	lsls	r3, r3, #20
    31a0:	4313      	orrs	r3, r2
    31a2:	4a43      	ldr	r2, [pc, #268]	; (32b0 <__aeabi_dmul+0x1e8>)
    31a4:	0524      	lsls	r4, r4, #20
    31a6:	4013      	ands	r3, r2
    31a8:	431c      	orrs	r4, r3
    31aa:	0064      	lsls	r4, r4, #1
    31ac:	07ed      	lsls	r5, r5, #31
    31ae:	0864      	lsrs	r4, r4, #1
    31b0:	432c      	orrs	r4, r5
    31b2:	4648      	mov	r0, r9
    31b4:	0021      	movs	r1, r4
    31b6:	b007      	add	sp, #28
    31b8:	bc3c      	pop	{r2, r3, r4, r5}
    31ba:	4690      	mov	r8, r2
    31bc:	4699      	mov	r9, r3
    31be:	46a2      	mov	sl, r4
    31c0:	46ab      	mov	fp, r5
    31c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    31c4:	4303      	orrs	r3, r0
    31c6:	4699      	mov	r9, r3
    31c8:	d04f      	beq.n	326a <__aeabi_dmul+0x1a2>
    31ca:	465b      	mov	r3, fp
    31cc:	2b00      	cmp	r3, #0
    31ce:	d100      	bne.n	31d2 <__aeabi_dmul+0x10a>
    31d0:	e189      	b.n	34e6 <__aeabi_dmul+0x41e>
    31d2:	4658      	mov	r0, fp
    31d4:	f000 fdea 	bl	3dac <__clzsi2>
    31d8:	0003      	movs	r3, r0
    31da:	3b0b      	subs	r3, #11
    31dc:	2b1c      	cmp	r3, #28
    31de:	dd00      	ble.n	31e2 <__aeabi_dmul+0x11a>
    31e0:	e17a      	b.n	34d8 <__aeabi_dmul+0x410>
    31e2:	221d      	movs	r2, #29
    31e4:	1ad3      	subs	r3, r2, r3
    31e6:	003a      	movs	r2, r7
    31e8:	0001      	movs	r1, r0
    31ea:	465c      	mov	r4, fp
    31ec:	40da      	lsrs	r2, r3
    31ee:	3908      	subs	r1, #8
    31f0:	408c      	lsls	r4, r1
    31f2:	0013      	movs	r3, r2
    31f4:	408f      	lsls	r7, r1
    31f6:	4323      	orrs	r3, r4
    31f8:	469b      	mov	fp, r3
    31fa:	46b9      	mov	r9, r7
    31fc:	2300      	movs	r3, #0
    31fe:	4e2d      	ldr	r6, [pc, #180]	; (32b4 <__aeabi_dmul+0x1ec>)
    3200:	2700      	movs	r7, #0
    3202:	1a36      	subs	r6, r6, r0
    3204:	9302      	str	r3, [sp, #8]
    3206:	e784      	b.n	3112 <__aeabi_dmul+0x4a>
    3208:	4653      	mov	r3, sl
    320a:	4323      	orrs	r3, r4
    320c:	d12a      	bne.n	3264 <__aeabi_dmul+0x19c>
    320e:	2400      	movs	r4, #0
    3210:	2002      	movs	r0, #2
    3212:	e796      	b.n	3142 <__aeabi_dmul+0x7a>
    3214:	4653      	mov	r3, sl
    3216:	4323      	orrs	r3, r4
    3218:	d020      	beq.n	325c <__aeabi_dmul+0x194>
    321a:	2c00      	cmp	r4, #0
    321c:	d100      	bne.n	3220 <__aeabi_dmul+0x158>
    321e:	e157      	b.n	34d0 <__aeabi_dmul+0x408>
    3220:	0020      	movs	r0, r4
    3222:	f000 fdc3 	bl	3dac <__clzsi2>
    3226:	0003      	movs	r3, r0
    3228:	3b0b      	subs	r3, #11
    322a:	2b1c      	cmp	r3, #28
    322c:	dd00      	ble.n	3230 <__aeabi_dmul+0x168>
    322e:	e149      	b.n	34c4 <__aeabi_dmul+0x3fc>
    3230:	211d      	movs	r1, #29
    3232:	1acb      	subs	r3, r1, r3
    3234:	4651      	mov	r1, sl
    3236:	0002      	movs	r2, r0
    3238:	40d9      	lsrs	r1, r3
    323a:	4653      	mov	r3, sl
    323c:	3a08      	subs	r2, #8
    323e:	4094      	lsls	r4, r2
    3240:	4093      	lsls	r3, r2
    3242:	430c      	orrs	r4, r1
    3244:	4a1b      	ldr	r2, [pc, #108]	; (32b4 <__aeabi_dmul+0x1ec>)
    3246:	1a12      	subs	r2, r2, r0
    3248:	2000      	movs	r0, #0
    324a:	e77a      	b.n	3142 <__aeabi_dmul+0x7a>
    324c:	2501      	movs	r5, #1
    324e:	9b01      	ldr	r3, [sp, #4]
    3250:	4c14      	ldr	r4, [pc, #80]	; (32a4 <__aeabi_dmul+0x1dc>)
    3252:	401d      	ands	r5, r3
    3254:	2300      	movs	r3, #0
    3256:	2200      	movs	r2, #0
    3258:	4699      	mov	r9, r3
    325a:	e79c      	b.n	3196 <__aeabi_dmul+0xce>
    325c:	2400      	movs	r4, #0
    325e:	2200      	movs	r2, #0
    3260:	2001      	movs	r0, #1
    3262:	e76e      	b.n	3142 <__aeabi_dmul+0x7a>
    3264:	4653      	mov	r3, sl
    3266:	2003      	movs	r0, #3
    3268:	e76b      	b.n	3142 <__aeabi_dmul+0x7a>
    326a:	2300      	movs	r3, #0
    326c:	469b      	mov	fp, r3
    326e:	3301      	adds	r3, #1
    3270:	2704      	movs	r7, #4
    3272:	2600      	movs	r6, #0
    3274:	9302      	str	r3, [sp, #8]
    3276:	e74c      	b.n	3112 <__aeabi_dmul+0x4a>
    3278:	2303      	movs	r3, #3
    327a:	4681      	mov	r9, r0
    327c:	270c      	movs	r7, #12
    327e:	9302      	str	r3, [sp, #8]
    3280:	e747      	b.n	3112 <__aeabi_dmul+0x4a>
    3282:	2280      	movs	r2, #128	; 0x80
    3284:	2300      	movs	r3, #0
    3286:	2500      	movs	r5, #0
    3288:	0312      	lsls	r2, r2, #12
    328a:	4699      	mov	r9, r3
    328c:	4c05      	ldr	r4, [pc, #20]	; (32a4 <__aeabi_dmul+0x1dc>)
    328e:	e782      	b.n	3196 <__aeabi_dmul+0xce>
    3290:	465c      	mov	r4, fp
    3292:	464b      	mov	r3, r9
    3294:	9802      	ldr	r0, [sp, #8]
    3296:	e76f      	b.n	3178 <__aeabi_dmul+0xb0>
    3298:	465c      	mov	r4, fp
    329a:	464b      	mov	r3, r9
    329c:	9501      	str	r5, [sp, #4]
    329e:	9802      	ldr	r0, [sp, #8]
    32a0:	e76a      	b.n	3178 <__aeabi_dmul+0xb0>
    32a2:	46c0      	nop			; (mov r8, r8)
    32a4:	000007ff 	.word	0x000007ff
    32a8:	fffffc01 	.word	0xfffffc01
    32ac:	00004c10 	.word	0x00004c10
    32b0:	800fffff 	.word	0x800fffff
    32b4:	fffffc0d 	.word	0xfffffc0d
    32b8:	464a      	mov	r2, r9
    32ba:	4649      	mov	r1, r9
    32bc:	0c17      	lsrs	r7, r2, #16
    32be:	0c1a      	lsrs	r2, r3, #16
    32c0:	041b      	lsls	r3, r3, #16
    32c2:	0c1b      	lsrs	r3, r3, #16
    32c4:	0408      	lsls	r0, r1, #16
    32c6:	0019      	movs	r1, r3
    32c8:	0c00      	lsrs	r0, r0, #16
    32ca:	4341      	muls	r1, r0
    32cc:	0015      	movs	r5, r2
    32ce:	4688      	mov	r8, r1
    32d0:	0019      	movs	r1, r3
    32d2:	437d      	muls	r5, r7
    32d4:	4379      	muls	r1, r7
    32d6:	9503      	str	r5, [sp, #12]
    32d8:	4689      	mov	r9, r1
    32da:	0029      	movs	r1, r5
    32dc:	0015      	movs	r5, r2
    32de:	4345      	muls	r5, r0
    32e0:	444d      	add	r5, r9
    32e2:	9502      	str	r5, [sp, #8]
    32e4:	4645      	mov	r5, r8
    32e6:	0c2d      	lsrs	r5, r5, #16
    32e8:	46aa      	mov	sl, r5
    32ea:	9d02      	ldr	r5, [sp, #8]
    32ec:	4455      	add	r5, sl
    32ee:	45a9      	cmp	r9, r5
    32f0:	d906      	bls.n	3300 <__aeabi_dmul+0x238>
    32f2:	468a      	mov	sl, r1
    32f4:	2180      	movs	r1, #128	; 0x80
    32f6:	0249      	lsls	r1, r1, #9
    32f8:	4689      	mov	r9, r1
    32fa:	44ca      	add	sl, r9
    32fc:	4651      	mov	r1, sl
    32fe:	9103      	str	r1, [sp, #12]
    3300:	0c29      	lsrs	r1, r5, #16
    3302:	9104      	str	r1, [sp, #16]
    3304:	4641      	mov	r1, r8
    3306:	0409      	lsls	r1, r1, #16
    3308:	042d      	lsls	r5, r5, #16
    330a:	0c09      	lsrs	r1, r1, #16
    330c:	4688      	mov	r8, r1
    330e:	0029      	movs	r1, r5
    3310:	0c25      	lsrs	r5, r4, #16
    3312:	0424      	lsls	r4, r4, #16
    3314:	4441      	add	r1, r8
    3316:	0c24      	lsrs	r4, r4, #16
    3318:	9105      	str	r1, [sp, #20]
    331a:	0021      	movs	r1, r4
    331c:	4341      	muls	r1, r0
    331e:	4688      	mov	r8, r1
    3320:	0021      	movs	r1, r4
    3322:	4379      	muls	r1, r7
    3324:	468a      	mov	sl, r1
    3326:	4368      	muls	r0, r5
    3328:	4641      	mov	r1, r8
    332a:	4450      	add	r0, sl
    332c:	4681      	mov	r9, r0
    332e:	0c08      	lsrs	r0, r1, #16
    3330:	4448      	add	r0, r9
    3332:	436f      	muls	r7, r5
    3334:	4582      	cmp	sl, r0
    3336:	d903      	bls.n	3340 <__aeabi_dmul+0x278>
    3338:	2180      	movs	r1, #128	; 0x80
    333a:	0249      	lsls	r1, r1, #9
    333c:	4689      	mov	r9, r1
    333e:	444f      	add	r7, r9
    3340:	0c01      	lsrs	r1, r0, #16
    3342:	4689      	mov	r9, r1
    3344:	0039      	movs	r1, r7
    3346:	4449      	add	r1, r9
    3348:	9102      	str	r1, [sp, #8]
    334a:	4641      	mov	r1, r8
    334c:	040f      	lsls	r7, r1, #16
    334e:	9904      	ldr	r1, [sp, #16]
    3350:	0c3f      	lsrs	r7, r7, #16
    3352:	4688      	mov	r8, r1
    3354:	0400      	lsls	r0, r0, #16
    3356:	19c0      	adds	r0, r0, r7
    3358:	4480      	add	r8, r0
    335a:	4641      	mov	r1, r8
    335c:	9104      	str	r1, [sp, #16]
    335e:	4659      	mov	r1, fp
    3360:	0c0f      	lsrs	r7, r1, #16
    3362:	0409      	lsls	r1, r1, #16
    3364:	0c09      	lsrs	r1, r1, #16
    3366:	4688      	mov	r8, r1
    3368:	4359      	muls	r1, r3
    336a:	468a      	mov	sl, r1
    336c:	0039      	movs	r1, r7
    336e:	4351      	muls	r1, r2
    3370:	4689      	mov	r9, r1
    3372:	4641      	mov	r1, r8
    3374:	434a      	muls	r2, r1
    3376:	4651      	mov	r1, sl
    3378:	0c09      	lsrs	r1, r1, #16
    337a:	468b      	mov	fp, r1
    337c:	437b      	muls	r3, r7
    337e:	18d2      	adds	r2, r2, r3
    3380:	445a      	add	r2, fp
    3382:	4293      	cmp	r3, r2
    3384:	d903      	bls.n	338e <__aeabi_dmul+0x2c6>
    3386:	2380      	movs	r3, #128	; 0x80
    3388:	025b      	lsls	r3, r3, #9
    338a:	469b      	mov	fp, r3
    338c:	44d9      	add	r9, fp
    338e:	4651      	mov	r1, sl
    3390:	0409      	lsls	r1, r1, #16
    3392:	0c09      	lsrs	r1, r1, #16
    3394:	468a      	mov	sl, r1
    3396:	4641      	mov	r1, r8
    3398:	4361      	muls	r1, r4
    339a:	437c      	muls	r4, r7
    339c:	0c13      	lsrs	r3, r2, #16
    339e:	0412      	lsls	r2, r2, #16
    33a0:	444b      	add	r3, r9
    33a2:	4452      	add	r2, sl
    33a4:	46a1      	mov	r9, r4
    33a6:	468a      	mov	sl, r1
    33a8:	003c      	movs	r4, r7
    33aa:	4641      	mov	r1, r8
    33ac:	436c      	muls	r4, r5
    33ae:	434d      	muls	r5, r1
    33b0:	4651      	mov	r1, sl
    33b2:	444d      	add	r5, r9
    33b4:	0c0f      	lsrs	r7, r1, #16
    33b6:	197d      	adds	r5, r7, r5
    33b8:	45a9      	cmp	r9, r5
    33ba:	d903      	bls.n	33c4 <__aeabi_dmul+0x2fc>
    33bc:	2180      	movs	r1, #128	; 0x80
    33be:	0249      	lsls	r1, r1, #9
    33c0:	4688      	mov	r8, r1
    33c2:	4444      	add	r4, r8
    33c4:	9f04      	ldr	r7, [sp, #16]
    33c6:	9903      	ldr	r1, [sp, #12]
    33c8:	46b8      	mov	r8, r7
    33ca:	4441      	add	r1, r8
    33cc:	468b      	mov	fp, r1
    33ce:	4583      	cmp	fp, r0
    33d0:	4180      	sbcs	r0, r0
    33d2:	4241      	negs	r1, r0
    33d4:	4688      	mov	r8, r1
    33d6:	4651      	mov	r1, sl
    33d8:	0408      	lsls	r0, r1, #16
    33da:	042f      	lsls	r7, r5, #16
    33dc:	0c00      	lsrs	r0, r0, #16
    33de:	183f      	adds	r7, r7, r0
    33e0:	4658      	mov	r0, fp
    33e2:	9902      	ldr	r1, [sp, #8]
    33e4:	1810      	adds	r0, r2, r0
    33e6:	4689      	mov	r9, r1
    33e8:	4290      	cmp	r0, r2
    33ea:	4192      	sbcs	r2, r2
    33ec:	444f      	add	r7, r9
    33ee:	46ba      	mov	sl, r7
    33f0:	4252      	negs	r2, r2
    33f2:	4699      	mov	r9, r3
    33f4:	4693      	mov	fp, r2
    33f6:	44c2      	add	sl, r8
    33f8:	44d1      	add	r9, sl
    33fa:	44cb      	add	fp, r9
    33fc:	428f      	cmp	r7, r1
    33fe:	41bf      	sbcs	r7, r7
    3400:	45c2      	cmp	sl, r8
    3402:	4189      	sbcs	r1, r1
    3404:	4599      	cmp	r9, r3
    3406:	419b      	sbcs	r3, r3
    3408:	4593      	cmp	fp, r2
    340a:	4192      	sbcs	r2, r2
    340c:	427f      	negs	r7, r7
    340e:	4249      	negs	r1, r1
    3410:	0c2d      	lsrs	r5, r5, #16
    3412:	4252      	negs	r2, r2
    3414:	430f      	orrs	r7, r1
    3416:	425b      	negs	r3, r3
    3418:	4313      	orrs	r3, r2
    341a:	197f      	adds	r7, r7, r5
    341c:	18ff      	adds	r7, r7, r3
    341e:	465b      	mov	r3, fp
    3420:	193c      	adds	r4, r7, r4
    3422:	0ddb      	lsrs	r3, r3, #23
    3424:	9a05      	ldr	r2, [sp, #20]
    3426:	0264      	lsls	r4, r4, #9
    3428:	431c      	orrs	r4, r3
    342a:	0243      	lsls	r3, r0, #9
    342c:	4313      	orrs	r3, r2
    342e:	1e5d      	subs	r5, r3, #1
    3430:	41ab      	sbcs	r3, r5
    3432:	465a      	mov	r2, fp
    3434:	0dc0      	lsrs	r0, r0, #23
    3436:	4303      	orrs	r3, r0
    3438:	0252      	lsls	r2, r2, #9
    343a:	4313      	orrs	r3, r2
    343c:	01e2      	lsls	r2, r4, #7
    343e:	d556      	bpl.n	34ee <__aeabi_dmul+0x426>
    3440:	2001      	movs	r0, #1
    3442:	085a      	lsrs	r2, r3, #1
    3444:	4003      	ands	r3, r0
    3446:	4313      	orrs	r3, r2
    3448:	07e2      	lsls	r2, r4, #31
    344a:	4313      	orrs	r3, r2
    344c:	0864      	lsrs	r4, r4, #1
    344e:	485a      	ldr	r0, [pc, #360]	; (35b8 <__aeabi_dmul+0x4f0>)
    3450:	4460      	add	r0, ip
    3452:	2800      	cmp	r0, #0
    3454:	dd4d      	ble.n	34f2 <__aeabi_dmul+0x42a>
    3456:	075a      	lsls	r2, r3, #29
    3458:	d009      	beq.n	346e <__aeabi_dmul+0x3a6>
    345a:	220f      	movs	r2, #15
    345c:	401a      	ands	r2, r3
    345e:	2a04      	cmp	r2, #4
    3460:	d005      	beq.n	346e <__aeabi_dmul+0x3a6>
    3462:	1d1a      	adds	r2, r3, #4
    3464:	429a      	cmp	r2, r3
    3466:	419b      	sbcs	r3, r3
    3468:	425b      	negs	r3, r3
    346a:	18e4      	adds	r4, r4, r3
    346c:	0013      	movs	r3, r2
    346e:	01e2      	lsls	r2, r4, #7
    3470:	d504      	bpl.n	347c <__aeabi_dmul+0x3b4>
    3472:	2080      	movs	r0, #128	; 0x80
    3474:	4a51      	ldr	r2, [pc, #324]	; (35bc <__aeabi_dmul+0x4f4>)
    3476:	00c0      	lsls	r0, r0, #3
    3478:	4014      	ands	r4, r2
    347a:	4460      	add	r0, ip
    347c:	4a50      	ldr	r2, [pc, #320]	; (35c0 <__aeabi_dmul+0x4f8>)
    347e:	4290      	cmp	r0, r2
    3480:	dd00      	ble.n	3484 <__aeabi_dmul+0x3bc>
    3482:	e6e3      	b.n	324c <__aeabi_dmul+0x184>
    3484:	2501      	movs	r5, #1
    3486:	08db      	lsrs	r3, r3, #3
    3488:	0762      	lsls	r2, r4, #29
    348a:	431a      	orrs	r2, r3
    348c:	0264      	lsls	r4, r4, #9
    348e:	9b01      	ldr	r3, [sp, #4]
    3490:	4691      	mov	r9, r2
    3492:	0b22      	lsrs	r2, r4, #12
    3494:	0544      	lsls	r4, r0, #21
    3496:	0d64      	lsrs	r4, r4, #21
    3498:	401d      	ands	r5, r3
    349a:	e67c      	b.n	3196 <__aeabi_dmul+0xce>
    349c:	2280      	movs	r2, #128	; 0x80
    349e:	4659      	mov	r1, fp
    34a0:	0312      	lsls	r2, r2, #12
    34a2:	4211      	tst	r1, r2
    34a4:	d008      	beq.n	34b8 <__aeabi_dmul+0x3f0>
    34a6:	4214      	tst	r4, r2
    34a8:	d106      	bne.n	34b8 <__aeabi_dmul+0x3f0>
    34aa:	4322      	orrs	r2, r4
    34ac:	0312      	lsls	r2, r2, #12
    34ae:	0b12      	lsrs	r2, r2, #12
    34b0:	4645      	mov	r5, r8
    34b2:	4699      	mov	r9, r3
    34b4:	4c43      	ldr	r4, [pc, #268]	; (35c4 <__aeabi_dmul+0x4fc>)
    34b6:	e66e      	b.n	3196 <__aeabi_dmul+0xce>
    34b8:	465b      	mov	r3, fp
    34ba:	431a      	orrs	r2, r3
    34bc:	0312      	lsls	r2, r2, #12
    34be:	0b12      	lsrs	r2, r2, #12
    34c0:	4c40      	ldr	r4, [pc, #256]	; (35c4 <__aeabi_dmul+0x4fc>)
    34c2:	e668      	b.n	3196 <__aeabi_dmul+0xce>
    34c4:	0003      	movs	r3, r0
    34c6:	4654      	mov	r4, sl
    34c8:	3b28      	subs	r3, #40	; 0x28
    34ca:	409c      	lsls	r4, r3
    34cc:	2300      	movs	r3, #0
    34ce:	e6b9      	b.n	3244 <__aeabi_dmul+0x17c>
    34d0:	f000 fc6c 	bl	3dac <__clzsi2>
    34d4:	3020      	adds	r0, #32
    34d6:	e6a6      	b.n	3226 <__aeabi_dmul+0x15e>
    34d8:	0003      	movs	r3, r0
    34da:	3b28      	subs	r3, #40	; 0x28
    34dc:	409f      	lsls	r7, r3
    34de:	2300      	movs	r3, #0
    34e0:	46bb      	mov	fp, r7
    34e2:	4699      	mov	r9, r3
    34e4:	e68a      	b.n	31fc <__aeabi_dmul+0x134>
    34e6:	f000 fc61 	bl	3dac <__clzsi2>
    34ea:	3020      	adds	r0, #32
    34ec:	e674      	b.n	31d8 <__aeabi_dmul+0x110>
    34ee:	46b4      	mov	ip, r6
    34f0:	e7ad      	b.n	344e <__aeabi_dmul+0x386>
    34f2:	2501      	movs	r5, #1
    34f4:	1a2a      	subs	r2, r5, r0
    34f6:	2a38      	cmp	r2, #56	; 0x38
    34f8:	dd06      	ble.n	3508 <__aeabi_dmul+0x440>
    34fa:	9b01      	ldr	r3, [sp, #4]
    34fc:	2400      	movs	r4, #0
    34fe:	401d      	ands	r5, r3
    3500:	2300      	movs	r3, #0
    3502:	2200      	movs	r2, #0
    3504:	4699      	mov	r9, r3
    3506:	e646      	b.n	3196 <__aeabi_dmul+0xce>
    3508:	2a1f      	cmp	r2, #31
    350a:	dc21      	bgt.n	3550 <__aeabi_dmul+0x488>
    350c:	2520      	movs	r5, #32
    350e:	0020      	movs	r0, r4
    3510:	1aad      	subs	r5, r5, r2
    3512:	001e      	movs	r6, r3
    3514:	40ab      	lsls	r3, r5
    3516:	40a8      	lsls	r0, r5
    3518:	40d6      	lsrs	r6, r2
    351a:	1e5d      	subs	r5, r3, #1
    351c:	41ab      	sbcs	r3, r5
    351e:	4330      	orrs	r0, r6
    3520:	4318      	orrs	r0, r3
    3522:	40d4      	lsrs	r4, r2
    3524:	0743      	lsls	r3, r0, #29
    3526:	d009      	beq.n	353c <__aeabi_dmul+0x474>
    3528:	230f      	movs	r3, #15
    352a:	4003      	ands	r3, r0
    352c:	2b04      	cmp	r3, #4
    352e:	d005      	beq.n	353c <__aeabi_dmul+0x474>
    3530:	0003      	movs	r3, r0
    3532:	1d18      	adds	r0, r3, #4
    3534:	4298      	cmp	r0, r3
    3536:	419b      	sbcs	r3, r3
    3538:	425b      	negs	r3, r3
    353a:	18e4      	adds	r4, r4, r3
    353c:	0223      	lsls	r3, r4, #8
    353e:	d521      	bpl.n	3584 <__aeabi_dmul+0x4bc>
    3540:	2501      	movs	r5, #1
    3542:	9b01      	ldr	r3, [sp, #4]
    3544:	2401      	movs	r4, #1
    3546:	401d      	ands	r5, r3
    3548:	2300      	movs	r3, #0
    354a:	2200      	movs	r2, #0
    354c:	4699      	mov	r9, r3
    354e:	e622      	b.n	3196 <__aeabi_dmul+0xce>
    3550:	251f      	movs	r5, #31
    3552:	0021      	movs	r1, r4
    3554:	426d      	negs	r5, r5
    3556:	1a28      	subs	r0, r5, r0
    3558:	40c1      	lsrs	r1, r0
    355a:	0008      	movs	r0, r1
    355c:	2a20      	cmp	r2, #32
    355e:	d01d      	beq.n	359c <__aeabi_dmul+0x4d4>
    3560:	355f      	adds	r5, #95	; 0x5f
    3562:	1aaa      	subs	r2, r5, r2
    3564:	4094      	lsls	r4, r2
    3566:	4323      	orrs	r3, r4
    3568:	1e5c      	subs	r4, r3, #1
    356a:	41a3      	sbcs	r3, r4
    356c:	2507      	movs	r5, #7
    356e:	4303      	orrs	r3, r0
    3570:	401d      	ands	r5, r3
    3572:	2200      	movs	r2, #0
    3574:	2d00      	cmp	r5, #0
    3576:	d009      	beq.n	358c <__aeabi_dmul+0x4c4>
    3578:	220f      	movs	r2, #15
    357a:	2400      	movs	r4, #0
    357c:	401a      	ands	r2, r3
    357e:	0018      	movs	r0, r3
    3580:	2a04      	cmp	r2, #4
    3582:	d1d6      	bne.n	3532 <__aeabi_dmul+0x46a>
    3584:	0003      	movs	r3, r0
    3586:	0765      	lsls	r5, r4, #29
    3588:	0264      	lsls	r4, r4, #9
    358a:	0b22      	lsrs	r2, r4, #12
    358c:	08db      	lsrs	r3, r3, #3
    358e:	432b      	orrs	r3, r5
    3590:	2501      	movs	r5, #1
    3592:	4699      	mov	r9, r3
    3594:	9b01      	ldr	r3, [sp, #4]
    3596:	2400      	movs	r4, #0
    3598:	401d      	ands	r5, r3
    359a:	e5fc      	b.n	3196 <__aeabi_dmul+0xce>
    359c:	2400      	movs	r4, #0
    359e:	e7e2      	b.n	3566 <__aeabi_dmul+0x49e>
    35a0:	2280      	movs	r2, #128	; 0x80
    35a2:	2501      	movs	r5, #1
    35a4:	0312      	lsls	r2, r2, #12
    35a6:	4322      	orrs	r2, r4
    35a8:	9901      	ldr	r1, [sp, #4]
    35aa:	0312      	lsls	r2, r2, #12
    35ac:	0b12      	lsrs	r2, r2, #12
    35ae:	400d      	ands	r5, r1
    35b0:	4699      	mov	r9, r3
    35b2:	4c04      	ldr	r4, [pc, #16]	; (35c4 <__aeabi_dmul+0x4fc>)
    35b4:	e5ef      	b.n	3196 <__aeabi_dmul+0xce>
    35b6:	46c0      	nop			; (mov r8, r8)
    35b8:	000003ff 	.word	0x000003ff
    35bc:	feffffff 	.word	0xfeffffff
    35c0:	000007fe 	.word	0x000007fe
    35c4:	000007ff 	.word	0x000007ff

000035c8 <__aeabi_dsub>:
    35c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    35ca:	4646      	mov	r6, r8
    35cc:	46d6      	mov	lr, sl
    35ce:	464f      	mov	r7, r9
    35d0:	030c      	lsls	r4, r1, #12
    35d2:	b5c0      	push	{r6, r7, lr}
    35d4:	0fcd      	lsrs	r5, r1, #31
    35d6:	004e      	lsls	r6, r1, #1
    35d8:	0a61      	lsrs	r1, r4, #9
    35da:	0f44      	lsrs	r4, r0, #29
    35dc:	430c      	orrs	r4, r1
    35de:	00c1      	lsls	r1, r0, #3
    35e0:	0058      	lsls	r0, r3, #1
    35e2:	0d40      	lsrs	r0, r0, #21
    35e4:	4684      	mov	ip, r0
    35e6:	468a      	mov	sl, r1
    35e8:	000f      	movs	r7, r1
    35ea:	0319      	lsls	r1, r3, #12
    35ec:	0f50      	lsrs	r0, r2, #29
    35ee:	0a49      	lsrs	r1, r1, #9
    35f0:	4301      	orrs	r1, r0
    35f2:	48c6      	ldr	r0, [pc, #792]	; (390c <__aeabi_dsub+0x344>)
    35f4:	0d76      	lsrs	r6, r6, #21
    35f6:	46a8      	mov	r8, r5
    35f8:	0fdb      	lsrs	r3, r3, #31
    35fa:	00d2      	lsls	r2, r2, #3
    35fc:	4584      	cmp	ip, r0
    35fe:	d100      	bne.n	3602 <__aeabi_dsub+0x3a>
    3600:	e0d8      	b.n	37b4 <__aeabi_dsub+0x1ec>
    3602:	2001      	movs	r0, #1
    3604:	4043      	eors	r3, r0
    3606:	42ab      	cmp	r3, r5
    3608:	d100      	bne.n	360c <__aeabi_dsub+0x44>
    360a:	e0a6      	b.n	375a <__aeabi_dsub+0x192>
    360c:	4660      	mov	r0, ip
    360e:	1a35      	subs	r5, r6, r0
    3610:	2d00      	cmp	r5, #0
    3612:	dc00      	bgt.n	3616 <__aeabi_dsub+0x4e>
    3614:	e105      	b.n	3822 <__aeabi_dsub+0x25a>
    3616:	2800      	cmp	r0, #0
    3618:	d110      	bne.n	363c <__aeabi_dsub+0x74>
    361a:	000b      	movs	r3, r1
    361c:	4313      	orrs	r3, r2
    361e:	d100      	bne.n	3622 <__aeabi_dsub+0x5a>
    3620:	e0d7      	b.n	37d2 <__aeabi_dsub+0x20a>
    3622:	1e6b      	subs	r3, r5, #1
    3624:	2b00      	cmp	r3, #0
    3626:	d000      	beq.n	362a <__aeabi_dsub+0x62>
    3628:	e14b      	b.n	38c2 <__aeabi_dsub+0x2fa>
    362a:	4653      	mov	r3, sl
    362c:	1a9f      	subs	r7, r3, r2
    362e:	45ba      	cmp	sl, r7
    3630:	4180      	sbcs	r0, r0
    3632:	1a64      	subs	r4, r4, r1
    3634:	4240      	negs	r0, r0
    3636:	1a24      	subs	r4, r4, r0
    3638:	2601      	movs	r6, #1
    363a:	e01e      	b.n	367a <__aeabi_dsub+0xb2>
    363c:	4bb3      	ldr	r3, [pc, #716]	; (390c <__aeabi_dsub+0x344>)
    363e:	429e      	cmp	r6, r3
    3640:	d048      	beq.n	36d4 <__aeabi_dsub+0x10c>
    3642:	2380      	movs	r3, #128	; 0x80
    3644:	041b      	lsls	r3, r3, #16
    3646:	4319      	orrs	r1, r3
    3648:	2d38      	cmp	r5, #56	; 0x38
    364a:	dd00      	ble.n	364e <__aeabi_dsub+0x86>
    364c:	e119      	b.n	3882 <__aeabi_dsub+0x2ba>
    364e:	2d1f      	cmp	r5, #31
    3650:	dd00      	ble.n	3654 <__aeabi_dsub+0x8c>
    3652:	e14c      	b.n	38ee <__aeabi_dsub+0x326>
    3654:	2320      	movs	r3, #32
    3656:	000f      	movs	r7, r1
    3658:	1b5b      	subs	r3, r3, r5
    365a:	0010      	movs	r0, r2
    365c:	409a      	lsls	r2, r3
    365e:	409f      	lsls	r7, r3
    3660:	40e8      	lsrs	r0, r5
    3662:	1e53      	subs	r3, r2, #1
    3664:	419a      	sbcs	r2, r3
    3666:	40e9      	lsrs	r1, r5
    3668:	4307      	orrs	r7, r0
    366a:	4317      	orrs	r7, r2
    366c:	4653      	mov	r3, sl
    366e:	1bdf      	subs	r7, r3, r7
    3670:	1a61      	subs	r1, r4, r1
    3672:	45ba      	cmp	sl, r7
    3674:	41a4      	sbcs	r4, r4
    3676:	4264      	negs	r4, r4
    3678:	1b0c      	subs	r4, r1, r4
    367a:	0223      	lsls	r3, r4, #8
    367c:	d400      	bmi.n	3680 <__aeabi_dsub+0xb8>
    367e:	e0c5      	b.n	380c <__aeabi_dsub+0x244>
    3680:	0264      	lsls	r4, r4, #9
    3682:	0a65      	lsrs	r5, r4, #9
    3684:	2d00      	cmp	r5, #0
    3686:	d100      	bne.n	368a <__aeabi_dsub+0xc2>
    3688:	e0f6      	b.n	3878 <__aeabi_dsub+0x2b0>
    368a:	0028      	movs	r0, r5
    368c:	f000 fb8e 	bl	3dac <__clzsi2>
    3690:	0003      	movs	r3, r0
    3692:	3b08      	subs	r3, #8
    3694:	2b1f      	cmp	r3, #31
    3696:	dd00      	ble.n	369a <__aeabi_dsub+0xd2>
    3698:	e0e9      	b.n	386e <__aeabi_dsub+0x2a6>
    369a:	2220      	movs	r2, #32
    369c:	003c      	movs	r4, r7
    369e:	1ad2      	subs	r2, r2, r3
    36a0:	409d      	lsls	r5, r3
    36a2:	40d4      	lsrs	r4, r2
    36a4:	409f      	lsls	r7, r3
    36a6:	4325      	orrs	r5, r4
    36a8:	429e      	cmp	r6, r3
    36aa:	dd00      	ble.n	36ae <__aeabi_dsub+0xe6>
    36ac:	e0db      	b.n	3866 <__aeabi_dsub+0x29e>
    36ae:	1b9e      	subs	r6, r3, r6
    36b0:	1c73      	adds	r3, r6, #1
    36b2:	2b1f      	cmp	r3, #31
    36b4:	dd00      	ble.n	36b8 <__aeabi_dsub+0xf0>
    36b6:	e10a      	b.n	38ce <__aeabi_dsub+0x306>
    36b8:	2220      	movs	r2, #32
    36ba:	0038      	movs	r0, r7
    36bc:	1ad2      	subs	r2, r2, r3
    36be:	0029      	movs	r1, r5
    36c0:	4097      	lsls	r7, r2
    36c2:	002c      	movs	r4, r5
    36c4:	4091      	lsls	r1, r2
    36c6:	40d8      	lsrs	r0, r3
    36c8:	1e7a      	subs	r2, r7, #1
    36ca:	4197      	sbcs	r7, r2
    36cc:	40dc      	lsrs	r4, r3
    36ce:	2600      	movs	r6, #0
    36d0:	4301      	orrs	r1, r0
    36d2:	430f      	orrs	r7, r1
    36d4:	077b      	lsls	r3, r7, #29
    36d6:	d009      	beq.n	36ec <__aeabi_dsub+0x124>
    36d8:	230f      	movs	r3, #15
    36da:	403b      	ands	r3, r7
    36dc:	2b04      	cmp	r3, #4
    36de:	d005      	beq.n	36ec <__aeabi_dsub+0x124>
    36e0:	1d3b      	adds	r3, r7, #4
    36e2:	42bb      	cmp	r3, r7
    36e4:	41bf      	sbcs	r7, r7
    36e6:	427f      	negs	r7, r7
    36e8:	19e4      	adds	r4, r4, r7
    36ea:	001f      	movs	r7, r3
    36ec:	0223      	lsls	r3, r4, #8
    36ee:	d525      	bpl.n	373c <__aeabi_dsub+0x174>
    36f0:	4b86      	ldr	r3, [pc, #536]	; (390c <__aeabi_dsub+0x344>)
    36f2:	3601      	adds	r6, #1
    36f4:	429e      	cmp	r6, r3
    36f6:	d100      	bne.n	36fa <__aeabi_dsub+0x132>
    36f8:	e0af      	b.n	385a <__aeabi_dsub+0x292>
    36fa:	4b85      	ldr	r3, [pc, #532]	; (3910 <__aeabi_dsub+0x348>)
    36fc:	2501      	movs	r5, #1
    36fe:	401c      	ands	r4, r3
    3700:	4643      	mov	r3, r8
    3702:	0762      	lsls	r2, r4, #29
    3704:	08ff      	lsrs	r7, r7, #3
    3706:	0264      	lsls	r4, r4, #9
    3708:	0576      	lsls	r6, r6, #21
    370a:	4317      	orrs	r7, r2
    370c:	0b24      	lsrs	r4, r4, #12
    370e:	0d76      	lsrs	r6, r6, #21
    3710:	401d      	ands	r5, r3
    3712:	2100      	movs	r1, #0
    3714:	0324      	lsls	r4, r4, #12
    3716:	0b23      	lsrs	r3, r4, #12
    3718:	0d0c      	lsrs	r4, r1, #20
    371a:	4a7e      	ldr	r2, [pc, #504]	; (3914 <__aeabi_dsub+0x34c>)
    371c:	0524      	lsls	r4, r4, #20
    371e:	431c      	orrs	r4, r3
    3720:	4014      	ands	r4, r2
    3722:	0533      	lsls	r3, r6, #20
    3724:	4323      	orrs	r3, r4
    3726:	005b      	lsls	r3, r3, #1
    3728:	07ed      	lsls	r5, r5, #31
    372a:	085b      	lsrs	r3, r3, #1
    372c:	432b      	orrs	r3, r5
    372e:	0038      	movs	r0, r7
    3730:	0019      	movs	r1, r3
    3732:	bc1c      	pop	{r2, r3, r4}
    3734:	4690      	mov	r8, r2
    3736:	4699      	mov	r9, r3
    3738:	46a2      	mov	sl, r4
    373a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    373c:	2501      	movs	r5, #1
    373e:	4643      	mov	r3, r8
    3740:	0762      	lsls	r2, r4, #29
    3742:	08ff      	lsrs	r7, r7, #3
    3744:	4317      	orrs	r7, r2
    3746:	08e4      	lsrs	r4, r4, #3
    3748:	401d      	ands	r5, r3
    374a:	4b70      	ldr	r3, [pc, #448]	; (390c <__aeabi_dsub+0x344>)
    374c:	429e      	cmp	r6, r3
    374e:	d036      	beq.n	37be <__aeabi_dsub+0x1f6>
    3750:	0324      	lsls	r4, r4, #12
    3752:	0576      	lsls	r6, r6, #21
    3754:	0b24      	lsrs	r4, r4, #12
    3756:	0d76      	lsrs	r6, r6, #21
    3758:	e7db      	b.n	3712 <__aeabi_dsub+0x14a>
    375a:	4663      	mov	r3, ip
    375c:	1af3      	subs	r3, r6, r3
    375e:	2b00      	cmp	r3, #0
    3760:	dc00      	bgt.n	3764 <__aeabi_dsub+0x19c>
    3762:	e094      	b.n	388e <__aeabi_dsub+0x2c6>
    3764:	4660      	mov	r0, ip
    3766:	2800      	cmp	r0, #0
    3768:	d035      	beq.n	37d6 <__aeabi_dsub+0x20e>
    376a:	4868      	ldr	r0, [pc, #416]	; (390c <__aeabi_dsub+0x344>)
    376c:	4286      	cmp	r6, r0
    376e:	d0b1      	beq.n	36d4 <__aeabi_dsub+0x10c>
    3770:	2780      	movs	r7, #128	; 0x80
    3772:	043f      	lsls	r7, r7, #16
    3774:	4339      	orrs	r1, r7
    3776:	2b38      	cmp	r3, #56	; 0x38
    3778:	dc00      	bgt.n	377c <__aeabi_dsub+0x1b4>
    377a:	e0fd      	b.n	3978 <__aeabi_dsub+0x3b0>
    377c:	430a      	orrs	r2, r1
    377e:	0017      	movs	r7, r2
    3780:	2100      	movs	r1, #0
    3782:	1e7a      	subs	r2, r7, #1
    3784:	4197      	sbcs	r7, r2
    3786:	4457      	add	r7, sl
    3788:	4557      	cmp	r7, sl
    378a:	4180      	sbcs	r0, r0
    378c:	1909      	adds	r1, r1, r4
    378e:	4244      	negs	r4, r0
    3790:	190c      	adds	r4, r1, r4
    3792:	0223      	lsls	r3, r4, #8
    3794:	d53a      	bpl.n	380c <__aeabi_dsub+0x244>
    3796:	4b5d      	ldr	r3, [pc, #372]	; (390c <__aeabi_dsub+0x344>)
    3798:	3601      	adds	r6, #1
    379a:	429e      	cmp	r6, r3
    379c:	d100      	bne.n	37a0 <__aeabi_dsub+0x1d8>
    379e:	e14b      	b.n	3a38 <__aeabi_dsub+0x470>
    37a0:	2201      	movs	r2, #1
    37a2:	4b5b      	ldr	r3, [pc, #364]	; (3910 <__aeabi_dsub+0x348>)
    37a4:	401c      	ands	r4, r3
    37a6:	087b      	lsrs	r3, r7, #1
    37a8:	4017      	ands	r7, r2
    37aa:	431f      	orrs	r7, r3
    37ac:	07e2      	lsls	r2, r4, #31
    37ae:	4317      	orrs	r7, r2
    37b0:	0864      	lsrs	r4, r4, #1
    37b2:	e78f      	b.n	36d4 <__aeabi_dsub+0x10c>
    37b4:	0008      	movs	r0, r1
    37b6:	4310      	orrs	r0, r2
    37b8:	d000      	beq.n	37bc <__aeabi_dsub+0x1f4>
    37ba:	e724      	b.n	3606 <__aeabi_dsub+0x3e>
    37bc:	e721      	b.n	3602 <__aeabi_dsub+0x3a>
    37be:	0023      	movs	r3, r4
    37c0:	433b      	orrs	r3, r7
    37c2:	d100      	bne.n	37c6 <__aeabi_dsub+0x1fe>
    37c4:	e1b9      	b.n	3b3a <__aeabi_dsub+0x572>
    37c6:	2280      	movs	r2, #128	; 0x80
    37c8:	0312      	lsls	r2, r2, #12
    37ca:	4314      	orrs	r4, r2
    37cc:	0324      	lsls	r4, r4, #12
    37ce:	0b24      	lsrs	r4, r4, #12
    37d0:	e79f      	b.n	3712 <__aeabi_dsub+0x14a>
    37d2:	002e      	movs	r6, r5
    37d4:	e77e      	b.n	36d4 <__aeabi_dsub+0x10c>
    37d6:	0008      	movs	r0, r1
    37d8:	4310      	orrs	r0, r2
    37da:	d100      	bne.n	37de <__aeabi_dsub+0x216>
    37dc:	e0ca      	b.n	3974 <__aeabi_dsub+0x3ac>
    37de:	1e58      	subs	r0, r3, #1
    37e0:	4684      	mov	ip, r0
    37e2:	2800      	cmp	r0, #0
    37e4:	d000      	beq.n	37e8 <__aeabi_dsub+0x220>
    37e6:	e0e7      	b.n	39b8 <__aeabi_dsub+0x3f0>
    37e8:	4452      	add	r2, sl
    37ea:	4552      	cmp	r2, sl
    37ec:	4180      	sbcs	r0, r0
    37ee:	1864      	adds	r4, r4, r1
    37f0:	4240      	negs	r0, r0
    37f2:	1824      	adds	r4, r4, r0
    37f4:	0017      	movs	r7, r2
    37f6:	2601      	movs	r6, #1
    37f8:	0223      	lsls	r3, r4, #8
    37fa:	d507      	bpl.n	380c <__aeabi_dsub+0x244>
    37fc:	2602      	movs	r6, #2
    37fe:	e7cf      	b.n	37a0 <__aeabi_dsub+0x1d8>
    3800:	4664      	mov	r4, ip
    3802:	432c      	orrs	r4, r5
    3804:	d100      	bne.n	3808 <__aeabi_dsub+0x240>
    3806:	e1b3      	b.n	3b70 <__aeabi_dsub+0x5a8>
    3808:	002c      	movs	r4, r5
    380a:	4667      	mov	r7, ip
    380c:	077b      	lsls	r3, r7, #29
    380e:	d000      	beq.n	3812 <__aeabi_dsub+0x24a>
    3810:	e762      	b.n	36d8 <__aeabi_dsub+0x110>
    3812:	0763      	lsls	r3, r4, #29
    3814:	08ff      	lsrs	r7, r7, #3
    3816:	431f      	orrs	r7, r3
    3818:	2501      	movs	r5, #1
    381a:	4643      	mov	r3, r8
    381c:	08e4      	lsrs	r4, r4, #3
    381e:	401d      	ands	r5, r3
    3820:	e793      	b.n	374a <__aeabi_dsub+0x182>
    3822:	2d00      	cmp	r5, #0
    3824:	d178      	bne.n	3918 <__aeabi_dsub+0x350>
    3826:	1c75      	adds	r5, r6, #1
    3828:	056d      	lsls	r5, r5, #21
    382a:	0d6d      	lsrs	r5, r5, #21
    382c:	2d01      	cmp	r5, #1
    382e:	dc00      	bgt.n	3832 <__aeabi_dsub+0x26a>
    3830:	e0f2      	b.n	3a18 <__aeabi_dsub+0x450>
    3832:	4650      	mov	r0, sl
    3834:	1a80      	subs	r0, r0, r2
    3836:	4582      	cmp	sl, r0
    3838:	41bf      	sbcs	r7, r7
    383a:	1a65      	subs	r5, r4, r1
    383c:	427f      	negs	r7, r7
    383e:	1bed      	subs	r5, r5, r7
    3840:	4684      	mov	ip, r0
    3842:	0228      	lsls	r0, r5, #8
    3844:	d400      	bmi.n	3848 <__aeabi_dsub+0x280>
    3846:	e08c      	b.n	3962 <__aeabi_dsub+0x39a>
    3848:	4650      	mov	r0, sl
    384a:	1a17      	subs	r7, r2, r0
    384c:	42ba      	cmp	r2, r7
    384e:	4192      	sbcs	r2, r2
    3850:	1b0c      	subs	r4, r1, r4
    3852:	4255      	negs	r5, r2
    3854:	1b65      	subs	r5, r4, r5
    3856:	4698      	mov	r8, r3
    3858:	e714      	b.n	3684 <__aeabi_dsub+0xbc>
    385a:	2501      	movs	r5, #1
    385c:	4643      	mov	r3, r8
    385e:	2400      	movs	r4, #0
    3860:	401d      	ands	r5, r3
    3862:	2700      	movs	r7, #0
    3864:	e755      	b.n	3712 <__aeabi_dsub+0x14a>
    3866:	4c2a      	ldr	r4, [pc, #168]	; (3910 <__aeabi_dsub+0x348>)
    3868:	1af6      	subs	r6, r6, r3
    386a:	402c      	ands	r4, r5
    386c:	e732      	b.n	36d4 <__aeabi_dsub+0x10c>
    386e:	003d      	movs	r5, r7
    3870:	3828      	subs	r0, #40	; 0x28
    3872:	4085      	lsls	r5, r0
    3874:	2700      	movs	r7, #0
    3876:	e717      	b.n	36a8 <__aeabi_dsub+0xe0>
    3878:	0038      	movs	r0, r7
    387a:	f000 fa97 	bl	3dac <__clzsi2>
    387e:	3020      	adds	r0, #32
    3880:	e706      	b.n	3690 <__aeabi_dsub+0xc8>
    3882:	430a      	orrs	r2, r1
    3884:	0017      	movs	r7, r2
    3886:	2100      	movs	r1, #0
    3888:	1e7a      	subs	r2, r7, #1
    388a:	4197      	sbcs	r7, r2
    388c:	e6ee      	b.n	366c <__aeabi_dsub+0xa4>
    388e:	2b00      	cmp	r3, #0
    3890:	d000      	beq.n	3894 <__aeabi_dsub+0x2cc>
    3892:	e0e5      	b.n	3a60 <__aeabi_dsub+0x498>
    3894:	1c73      	adds	r3, r6, #1
    3896:	469c      	mov	ip, r3
    3898:	055b      	lsls	r3, r3, #21
    389a:	0d5b      	lsrs	r3, r3, #21
    389c:	2b01      	cmp	r3, #1
    389e:	dc00      	bgt.n	38a2 <__aeabi_dsub+0x2da>
    38a0:	e09f      	b.n	39e2 <__aeabi_dsub+0x41a>
    38a2:	4b1a      	ldr	r3, [pc, #104]	; (390c <__aeabi_dsub+0x344>)
    38a4:	459c      	cmp	ip, r3
    38a6:	d100      	bne.n	38aa <__aeabi_dsub+0x2e2>
    38a8:	e0c5      	b.n	3a36 <__aeabi_dsub+0x46e>
    38aa:	4452      	add	r2, sl
    38ac:	4552      	cmp	r2, sl
    38ae:	4180      	sbcs	r0, r0
    38b0:	1864      	adds	r4, r4, r1
    38b2:	4240      	negs	r0, r0
    38b4:	1824      	adds	r4, r4, r0
    38b6:	07e7      	lsls	r7, r4, #31
    38b8:	0852      	lsrs	r2, r2, #1
    38ba:	4317      	orrs	r7, r2
    38bc:	0864      	lsrs	r4, r4, #1
    38be:	4666      	mov	r6, ip
    38c0:	e708      	b.n	36d4 <__aeabi_dsub+0x10c>
    38c2:	4812      	ldr	r0, [pc, #72]	; (390c <__aeabi_dsub+0x344>)
    38c4:	4285      	cmp	r5, r0
    38c6:	d100      	bne.n	38ca <__aeabi_dsub+0x302>
    38c8:	e085      	b.n	39d6 <__aeabi_dsub+0x40e>
    38ca:	001d      	movs	r5, r3
    38cc:	e6bc      	b.n	3648 <__aeabi_dsub+0x80>
    38ce:	0029      	movs	r1, r5
    38d0:	3e1f      	subs	r6, #31
    38d2:	40f1      	lsrs	r1, r6
    38d4:	2b20      	cmp	r3, #32
    38d6:	d100      	bne.n	38da <__aeabi_dsub+0x312>
    38d8:	e07f      	b.n	39da <__aeabi_dsub+0x412>
    38da:	2240      	movs	r2, #64	; 0x40
    38dc:	1ad3      	subs	r3, r2, r3
    38de:	409d      	lsls	r5, r3
    38e0:	432f      	orrs	r7, r5
    38e2:	1e7d      	subs	r5, r7, #1
    38e4:	41af      	sbcs	r7, r5
    38e6:	2400      	movs	r4, #0
    38e8:	430f      	orrs	r7, r1
    38ea:	2600      	movs	r6, #0
    38ec:	e78e      	b.n	380c <__aeabi_dsub+0x244>
    38ee:	002b      	movs	r3, r5
    38f0:	000f      	movs	r7, r1
    38f2:	3b20      	subs	r3, #32
    38f4:	40df      	lsrs	r7, r3
    38f6:	2d20      	cmp	r5, #32
    38f8:	d071      	beq.n	39de <__aeabi_dsub+0x416>
    38fa:	2340      	movs	r3, #64	; 0x40
    38fc:	1b5d      	subs	r5, r3, r5
    38fe:	40a9      	lsls	r1, r5
    3900:	430a      	orrs	r2, r1
    3902:	1e51      	subs	r1, r2, #1
    3904:	418a      	sbcs	r2, r1
    3906:	2100      	movs	r1, #0
    3908:	4317      	orrs	r7, r2
    390a:	e6af      	b.n	366c <__aeabi_dsub+0xa4>
    390c:	000007ff 	.word	0x000007ff
    3910:	ff7fffff 	.word	0xff7fffff
    3914:	800fffff 	.word	0x800fffff
    3918:	2e00      	cmp	r6, #0
    391a:	d03e      	beq.n	399a <__aeabi_dsub+0x3d2>
    391c:	4eb3      	ldr	r6, [pc, #716]	; (3bec <__aeabi_dsub+0x624>)
    391e:	45b4      	cmp	ip, r6
    3920:	d045      	beq.n	39ae <__aeabi_dsub+0x3e6>
    3922:	2680      	movs	r6, #128	; 0x80
    3924:	0436      	lsls	r6, r6, #16
    3926:	426d      	negs	r5, r5
    3928:	4334      	orrs	r4, r6
    392a:	2d38      	cmp	r5, #56	; 0x38
    392c:	dd00      	ble.n	3930 <__aeabi_dsub+0x368>
    392e:	e0a8      	b.n	3a82 <__aeabi_dsub+0x4ba>
    3930:	2d1f      	cmp	r5, #31
    3932:	dd00      	ble.n	3936 <__aeabi_dsub+0x36e>
    3934:	e11f      	b.n	3b76 <__aeabi_dsub+0x5ae>
    3936:	2620      	movs	r6, #32
    3938:	0027      	movs	r7, r4
    393a:	4650      	mov	r0, sl
    393c:	1b76      	subs	r6, r6, r5
    393e:	40b7      	lsls	r7, r6
    3940:	40e8      	lsrs	r0, r5
    3942:	4307      	orrs	r7, r0
    3944:	4650      	mov	r0, sl
    3946:	40b0      	lsls	r0, r6
    3948:	1e46      	subs	r6, r0, #1
    394a:	41b0      	sbcs	r0, r6
    394c:	40ec      	lsrs	r4, r5
    394e:	4338      	orrs	r0, r7
    3950:	1a17      	subs	r7, r2, r0
    3952:	42ba      	cmp	r2, r7
    3954:	4192      	sbcs	r2, r2
    3956:	1b0c      	subs	r4, r1, r4
    3958:	4252      	negs	r2, r2
    395a:	1aa4      	subs	r4, r4, r2
    395c:	4666      	mov	r6, ip
    395e:	4698      	mov	r8, r3
    3960:	e68b      	b.n	367a <__aeabi_dsub+0xb2>
    3962:	4664      	mov	r4, ip
    3964:	4667      	mov	r7, ip
    3966:	432c      	orrs	r4, r5
    3968:	d000      	beq.n	396c <__aeabi_dsub+0x3a4>
    396a:	e68b      	b.n	3684 <__aeabi_dsub+0xbc>
    396c:	2500      	movs	r5, #0
    396e:	2600      	movs	r6, #0
    3970:	2700      	movs	r7, #0
    3972:	e6ea      	b.n	374a <__aeabi_dsub+0x182>
    3974:	001e      	movs	r6, r3
    3976:	e6ad      	b.n	36d4 <__aeabi_dsub+0x10c>
    3978:	2b1f      	cmp	r3, #31
    397a:	dc60      	bgt.n	3a3e <__aeabi_dsub+0x476>
    397c:	2720      	movs	r7, #32
    397e:	1af8      	subs	r0, r7, r3
    3980:	000f      	movs	r7, r1
    3982:	4684      	mov	ip, r0
    3984:	4087      	lsls	r7, r0
    3986:	0010      	movs	r0, r2
    3988:	40d8      	lsrs	r0, r3
    398a:	4307      	orrs	r7, r0
    398c:	4660      	mov	r0, ip
    398e:	4082      	lsls	r2, r0
    3990:	1e50      	subs	r0, r2, #1
    3992:	4182      	sbcs	r2, r0
    3994:	40d9      	lsrs	r1, r3
    3996:	4317      	orrs	r7, r2
    3998:	e6f5      	b.n	3786 <__aeabi_dsub+0x1be>
    399a:	0026      	movs	r6, r4
    399c:	4650      	mov	r0, sl
    399e:	4306      	orrs	r6, r0
    39a0:	d005      	beq.n	39ae <__aeabi_dsub+0x3e6>
    39a2:	43ed      	mvns	r5, r5
    39a4:	2d00      	cmp	r5, #0
    39a6:	d0d3      	beq.n	3950 <__aeabi_dsub+0x388>
    39a8:	4e90      	ldr	r6, [pc, #576]	; (3bec <__aeabi_dsub+0x624>)
    39aa:	45b4      	cmp	ip, r6
    39ac:	d1bd      	bne.n	392a <__aeabi_dsub+0x362>
    39ae:	000c      	movs	r4, r1
    39b0:	0017      	movs	r7, r2
    39b2:	4666      	mov	r6, ip
    39b4:	4698      	mov	r8, r3
    39b6:	e68d      	b.n	36d4 <__aeabi_dsub+0x10c>
    39b8:	488c      	ldr	r0, [pc, #560]	; (3bec <__aeabi_dsub+0x624>)
    39ba:	4283      	cmp	r3, r0
    39bc:	d00b      	beq.n	39d6 <__aeabi_dsub+0x40e>
    39be:	4663      	mov	r3, ip
    39c0:	e6d9      	b.n	3776 <__aeabi_dsub+0x1ae>
    39c2:	2d00      	cmp	r5, #0
    39c4:	d000      	beq.n	39c8 <__aeabi_dsub+0x400>
    39c6:	e096      	b.n	3af6 <__aeabi_dsub+0x52e>
    39c8:	0008      	movs	r0, r1
    39ca:	4310      	orrs	r0, r2
    39cc:	d100      	bne.n	39d0 <__aeabi_dsub+0x408>
    39ce:	e0e2      	b.n	3b96 <__aeabi_dsub+0x5ce>
    39d0:	000c      	movs	r4, r1
    39d2:	0017      	movs	r7, r2
    39d4:	4698      	mov	r8, r3
    39d6:	4e85      	ldr	r6, [pc, #532]	; (3bec <__aeabi_dsub+0x624>)
    39d8:	e67c      	b.n	36d4 <__aeabi_dsub+0x10c>
    39da:	2500      	movs	r5, #0
    39dc:	e780      	b.n	38e0 <__aeabi_dsub+0x318>
    39de:	2100      	movs	r1, #0
    39e0:	e78e      	b.n	3900 <__aeabi_dsub+0x338>
    39e2:	0023      	movs	r3, r4
    39e4:	4650      	mov	r0, sl
    39e6:	4303      	orrs	r3, r0
    39e8:	2e00      	cmp	r6, #0
    39ea:	d000      	beq.n	39ee <__aeabi_dsub+0x426>
    39ec:	e0a8      	b.n	3b40 <__aeabi_dsub+0x578>
    39ee:	2b00      	cmp	r3, #0
    39f0:	d100      	bne.n	39f4 <__aeabi_dsub+0x42c>
    39f2:	e0de      	b.n	3bb2 <__aeabi_dsub+0x5ea>
    39f4:	000b      	movs	r3, r1
    39f6:	4313      	orrs	r3, r2
    39f8:	d100      	bne.n	39fc <__aeabi_dsub+0x434>
    39fa:	e66b      	b.n	36d4 <__aeabi_dsub+0x10c>
    39fc:	4452      	add	r2, sl
    39fe:	4552      	cmp	r2, sl
    3a00:	4180      	sbcs	r0, r0
    3a02:	1864      	adds	r4, r4, r1
    3a04:	4240      	negs	r0, r0
    3a06:	1824      	adds	r4, r4, r0
    3a08:	0017      	movs	r7, r2
    3a0a:	0223      	lsls	r3, r4, #8
    3a0c:	d400      	bmi.n	3a10 <__aeabi_dsub+0x448>
    3a0e:	e6fd      	b.n	380c <__aeabi_dsub+0x244>
    3a10:	4b77      	ldr	r3, [pc, #476]	; (3bf0 <__aeabi_dsub+0x628>)
    3a12:	4666      	mov	r6, ip
    3a14:	401c      	ands	r4, r3
    3a16:	e65d      	b.n	36d4 <__aeabi_dsub+0x10c>
    3a18:	0025      	movs	r5, r4
    3a1a:	4650      	mov	r0, sl
    3a1c:	4305      	orrs	r5, r0
    3a1e:	2e00      	cmp	r6, #0
    3a20:	d1cf      	bne.n	39c2 <__aeabi_dsub+0x3fa>
    3a22:	2d00      	cmp	r5, #0
    3a24:	d14f      	bne.n	3ac6 <__aeabi_dsub+0x4fe>
    3a26:	000c      	movs	r4, r1
    3a28:	4314      	orrs	r4, r2
    3a2a:	d100      	bne.n	3a2e <__aeabi_dsub+0x466>
    3a2c:	e0a0      	b.n	3b70 <__aeabi_dsub+0x5a8>
    3a2e:	000c      	movs	r4, r1
    3a30:	0017      	movs	r7, r2
    3a32:	4698      	mov	r8, r3
    3a34:	e64e      	b.n	36d4 <__aeabi_dsub+0x10c>
    3a36:	4666      	mov	r6, ip
    3a38:	2400      	movs	r4, #0
    3a3a:	2700      	movs	r7, #0
    3a3c:	e685      	b.n	374a <__aeabi_dsub+0x182>
    3a3e:	001f      	movs	r7, r3
    3a40:	0008      	movs	r0, r1
    3a42:	3f20      	subs	r7, #32
    3a44:	40f8      	lsrs	r0, r7
    3a46:	0007      	movs	r7, r0
    3a48:	2b20      	cmp	r3, #32
    3a4a:	d100      	bne.n	3a4e <__aeabi_dsub+0x486>
    3a4c:	e08e      	b.n	3b6c <__aeabi_dsub+0x5a4>
    3a4e:	2040      	movs	r0, #64	; 0x40
    3a50:	1ac3      	subs	r3, r0, r3
    3a52:	4099      	lsls	r1, r3
    3a54:	430a      	orrs	r2, r1
    3a56:	1e51      	subs	r1, r2, #1
    3a58:	418a      	sbcs	r2, r1
    3a5a:	2100      	movs	r1, #0
    3a5c:	4317      	orrs	r7, r2
    3a5e:	e692      	b.n	3786 <__aeabi_dsub+0x1be>
    3a60:	2e00      	cmp	r6, #0
    3a62:	d114      	bne.n	3a8e <__aeabi_dsub+0x4c6>
    3a64:	0026      	movs	r6, r4
    3a66:	4650      	mov	r0, sl
    3a68:	4306      	orrs	r6, r0
    3a6a:	d062      	beq.n	3b32 <__aeabi_dsub+0x56a>
    3a6c:	43db      	mvns	r3, r3
    3a6e:	2b00      	cmp	r3, #0
    3a70:	d15c      	bne.n	3b2c <__aeabi_dsub+0x564>
    3a72:	1887      	adds	r7, r0, r2
    3a74:	4297      	cmp	r7, r2
    3a76:	4192      	sbcs	r2, r2
    3a78:	1864      	adds	r4, r4, r1
    3a7a:	4252      	negs	r2, r2
    3a7c:	18a4      	adds	r4, r4, r2
    3a7e:	4666      	mov	r6, ip
    3a80:	e687      	b.n	3792 <__aeabi_dsub+0x1ca>
    3a82:	4650      	mov	r0, sl
    3a84:	4320      	orrs	r0, r4
    3a86:	1e44      	subs	r4, r0, #1
    3a88:	41a0      	sbcs	r0, r4
    3a8a:	2400      	movs	r4, #0
    3a8c:	e760      	b.n	3950 <__aeabi_dsub+0x388>
    3a8e:	4e57      	ldr	r6, [pc, #348]	; (3bec <__aeabi_dsub+0x624>)
    3a90:	45b4      	cmp	ip, r6
    3a92:	d04e      	beq.n	3b32 <__aeabi_dsub+0x56a>
    3a94:	2680      	movs	r6, #128	; 0x80
    3a96:	0436      	lsls	r6, r6, #16
    3a98:	425b      	negs	r3, r3
    3a9a:	4334      	orrs	r4, r6
    3a9c:	2b38      	cmp	r3, #56	; 0x38
    3a9e:	dd00      	ble.n	3aa2 <__aeabi_dsub+0x4da>
    3aa0:	e07f      	b.n	3ba2 <__aeabi_dsub+0x5da>
    3aa2:	2b1f      	cmp	r3, #31
    3aa4:	dd00      	ble.n	3aa8 <__aeabi_dsub+0x4e0>
    3aa6:	e08b      	b.n	3bc0 <__aeabi_dsub+0x5f8>
    3aa8:	2620      	movs	r6, #32
    3aaa:	0027      	movs	r7, r4
    3aac:	4650      	mov	r0, sl
    3aae:	1af6      	subs	r6, r6, r3
    3ab0:	40b7      	lsls	r7, r6
    3ab2:	40d8      	lsrs	r0, r3
    3ab4:	4307      	orrs	r7, r0
    3ab6:	4650      	mov	r0, sl
    3ab8:	40b0      	lsls	r0, r6
    3aba:	1e46      	subs	r6, r0, #1
    3abc:	41b0      	sbcs	r0, r6
    3abe:	4307      	orrs	r7, r0
    3ac0:	40dc      	lsrs	r4, r3
    3ac2:	18bf      	adds	r7, r7, r2
    3ac4:	e7d6      	b.n	3a74 <__aeabi_dsub+0x4ac>
    3ac6:	000d      	movs	r5, r1
    3ac8:	4315      	orrs	r5, r2
    3aca:	d100      	bne.n	3ace <__aeabi_dsub+0x506>
    3acc:	e602      	b.n	36d4 <__aeabi_dsub+0x10c>
    3ace:	4650      	mov	r0, sl
    3ad0:	1a80      	subs	r0, r0, r2
    3ad2:	4582      	cmp	sl, r0
    3ad4:	41bf      	sbcs	r7, r7
    3ad6:	1a65      	subs	r5, r4, r1
    3ad8:	427f      	negs	r7, r7
    3ada:	1bed      	subs	r5, r5, r7
    3adc:	4684      	mov	ip, r0
    3ade:	0228      	lsls	r0, r5, #8
    3ae0:	d400      	bmi.n	3ae4 <__aeabi_dsub+0x51c>
    3ae2:	e68d      	b.n	3800 <__aeabi_dsub+0x238>
    3ae4:	4650      	mov	r0, sl
    3ae6:	1a17      	subs	r7, r2, r0
    3ae8:	42ba      	cmp	r2, r7
    3aea:	4192      	sbcs	r2, r2
    3aec:	1b0c      	subs	r4, r1, r4
    3aee:	4252      	negs	r2, r2
    3af0:	1aa4      	subs	r4, r4, r2
    3af2:	4698      	mov	r8, r3
    3af4:	e5ee      	b.n	36d4 <__aeabi_dsub+0x10c>
    3af6:	000d      	movs	r5, r1
    3af8:	4315      	orrs	r5, r2
    3afa:	d100      	bne.n	3afe <__aeabi_dsub+0x536>
    3afc:	e76b      	b.n	39d6 <__aeabi_dsub+0x40e>
    3afe:	4650      	mov	r0, sl
    3b00:	0767      	lsls	r7, r4, #29
    3b02:	08c0      	lsrs	r0, r0, #3
    3b04:	4307      	orrs	r7, r0
    3b06:	2080      	movs	r0, #128	; 0x80
    3b08:	08e4      	lsrs	r4, r4, #3
    3b0a:	0300      	lsls	r0, r0, #12
    3b0c:	4204      	tst	r4, r0
    3b0e:	d007      	beq.n	3b20 <__aeabi_dsub+0x558>
    3b10:	08cd      	lsrs	r5, r1, #3
    3b12:	4205      	tst	r5, r0
    3b14:	d104      	bne.n	3b20 <__aeabi_dsub+0x558>
    3b16:	002c      	movs	r4, r5
    3b18:	4698      	mov	r8, r3
    3b1a:	08d7      	lsrs	r7, r2, #3
    3b1c:	0749      	lsls	r1, r1, #29
    3b1e:	430f      	orrs	r7, r1
    3b20:	0f7b      	lsrs	r3, r7, #29
    3b22:	00e4      	lsls	r4, r4, #3
    3b24:	431c      	orrs	r4, r3
    3b26:	00ff      	lsls	r7, r7, #3
    3b28:	4e30      	ldr	r6, [pc, #192]	; (3bec <__aeabi_dsub+0x624>)
    3b2a:	e5d3      	b.n	36d4 <__aeabi_dsub+0x10c>
    3b2c:	4e2f      	ldr	r6, [pc, #188]	; (3bec <__aeabi_dsub+0x624>)
    3b2e:	45b4      	cmp	ip, r6
    3b30:	d1b4      	bne.n	3a9c <__aeabi_dsub+0x4d4>
    3b32:	000c      	movs	r4, r1
    3b34:	0017      	movs	r7, r2
    3b36:	4666      	mov	r6, ip
    3b38:	e5cc      	b.n	36d4 <__aeabi_dsub+0x10c>
    3b3a:	2700      	movs	r7, #0
    3b3c:	2400      	movs	r4, #0
    3b3e:	e5e8      	b.n	3712 <__aeabi_dsub+0x14a>
    3b40:	2b00      	cmp	r3, #0
    3b42:	d039      	beq.n	3bb8 <__aeabi_dsub+0x5f0>
    3b44:	000b      	movs	r3, r1
    3b46:	4313      	orrs	r3, r2
    3b48:	d100      	bne.n	3b4c <__aeabi_dsub+0x584>
    3b4a:	e744      	b.n	39d6 <__aeabi_dsub+0x40e>
    3b4c:	08c0      	lsrs	r0, r0, #3
    3b4e:	0767      	lsls	r7, r4, #29
    3b50:	4307      	orrs	r7, r0
    3b52:	2080      	movs	r0, #128	; 0x80
    3b54:	08e4      	lsrs	r4, r4, #3
    3b56:	0300      	lsls	r0, r0, #12
    3b58:	4204      	tst	r4, r0
    3b5a:	d0e1      	beq.n	3b20 <__aeabi_dsub+0x558>
    3b5c:	08cb      	lsrs	r3, r1, #3
    3b5e:	4203      	tst	r3, r0
    3b60:	d1de      	bne.n	3b20 <__aeabi_dsub+0x558>
    3b62:	08d7      	lsrs	r7, r2, #3
    3b64:	0749      	lsls	r1, r1, #29
    3b66:	430f      	orrs	r7, r1
    3b68:	001c      	movs	r4, r3
    3b6a:	e7d9      	b.n	3b20 <__aeabi_dsub+0x558>
    3b6c:	2100      	movs	r1, #0
    3b6e:	e771      	b.n	3a54 <__aeabi_dsub+0x48c>
    3b70:	2500      	movs	r5, #0
    3b72:	2700      	movs	r7, #0
    3b74:	e5e9      	b.n	374a <__aeabi_dsub+0x182>
    3b76:	002e      	movs	r6, r5
    3b78:	0027      	movs	r7, r4
    3b7a:	3e20      	subs	r6, #32
    3b7c:	40f7      	lsrs	r7, r6
    3b7e:	2d20      	cmp	r5, #32
    3b80:	d02f      	beq.n	3be2 <__aeabi_dsub+0x61a>
    3b82:	2640      	movs	r6, #64	; 0x40
    3b84:	1b75      	subs	r5, r6, r5
    3b86:	40ac      	lsls	r4, r5
    3b88:	4650      	mov	r0, sl
    3b8a:	4320      	orrs	r0, r4
    3b8c:	1e44      	subs	r4, r0, #1
    3b8e:	41a0      	sbcs	r0, r4
    3b90:	2400      	movs	r4, #0
    3b92:	4338      	orrs	r0, r7
    3b94:	e6dc      	b.n	3950 <__aeabi_dsub+0x388>
    3b96:	2480      	movs	r4, #128	; 0x80
    3b98:	2500      	movs	r5, #0
    3b9a:	0324      	lsls	r4, r4, #12
    3b9c:	4e13      	ldr	r6, [pc, #76]	; (3bec <__aeabi_dsub+0x624>)
    3b9e:	2700      	movs	r7, #0
    3ba0:	e5d3      	b.n	374a <__aeabi_dsub+0x182>
    3ba2:	4650      	mov	r0, sl
    3ba4:	4320      	orrs	r0, r4
    3ba6:	0007      	movs	r7, r0
    3ba8:	1e78      	subs	r0, r7, #1
    3baa:	4187      	sbcs	r7, r0
    3bac:	2400      	movs	r4, #0
    3bae:	18bf      	adds	r7, r7, r2
    3bb0:	e760      	b.n	3a74 <__aeabi_dsub+0x4ac>
    3bb2:	000c      	movs	r4, r1
    3bb4:	0017      	movs	r7, r2
    3bb6:	e58d      	b.n	36d4 <__aeabi_dsub+0x10c>
    3bb8:	000c      	movs	r4, r1
    3bba:	0017      	movs	r7, r2
    3bbc:	4e0b      	ldr	r6, [pc, #44]	; (3bec <__aeabi_dsub+0x624>)
    3bbe:	e589      	b.n	36d4 <__aeabi_dsub+0x10c>
    3bc0:	001e      	movs	r6, r3
    3bc2:	0027      	movs	r7, r4
    3bc4:	3e20      	subs	r6, #32
    3bc6:	40f7      	lsrs	r7, r6
    3bc8:	2b20      	cmp	r3, #32
    3bca:	d00c      	beq.n	3be6 <__aeabi_dsub+0x61e>
    3bcc:	2640      	movs	r6, #64	; 0x40
    3bce:	1af3      	subs	r3, r6, r3
    3bd0:	409c      	lsls	r4, r3
    3bd2:	4650      	mov	r0, sl
    3bd4:	4320      	orrs	r0, r4
    3bd6:	1e44      	subs	r4, r0, #1
    3bd8:	41a0      	sbcs	r0, r4
    3bda:	4307      	orrs	r7, r0
    3bdc:	2400      	movs	r4, #0
    3bde:	18bf      	adds	r7, r7, r2
    3be0:	e748      	b.n	3a74 <__aeabi_dsub+0x4ac>
    3be2:	2400      	movs	r4, #0
    3be4:	e7d0      	b.n	3b88 <__aeabi_dsub+0x5c0>
    3be6:	2400      	movs	r4, #0
    3be8:	e7f3      	b.n	3bd2 <__aeabi_dsub+0x60a>
    3bea:	46c0      	nop			; (mov r8, r8)
    3bec:	000007ff 	.word	0x000007ff
    3bf0:	ff7fffff 	.word	0xff7fffff

00003bf4 <__aeabi_f2d>:
    3bf4:	0041      	lsls	r1, r0, #1
    3bf6:	0e09      	lsrs	r1, r1, #24
    3bf8:	1c4b      	adds	r3, r1, #1
    3bfa:	b570      	push	{r4, r5, r6, lr}
    3bfc:	b2db      	uxtb	r3, r3
    3bfe:	0246      	lsls	r6, r0, #9
    3c00:	0a75      	lsrs	r5, r6, #9
    3c02:	0fc4      	lsrs	r4, r0, #31
    3c04:	2b01      	cmp	r3, #1
    3c06:	dd14      	ble.n	3c32 <__aeabi_f2d+0x3e>
    3c08:	23e0      	movs	r3, #224	; 0xe0
    3c0a:	009b      	lsls	r3, r3, #2
    3c0c:	076d      	lsls	r5, r5, #29
    3c0e:	0b36      	lsrs	r6, r6, #12
    3c10:	18cb      	adds	r3, r1, r3
    3c12:	2100      	movs	r1, #0
    3c14:	0d0a      	lsrs	r2, r1, #20
    3c16:	0028      	movs	r0, r5
    3c18:	0512      	lsls	r2, r2, #20
    3c1a:	4d1c      	ldr	r5, [pc, #112]	; (3c8c <__aeabi_f2d+0x98>)
    3c1c:	4332      	orrs	r2, r6
    3c1e:	055b      	lsls	r3, r3, #21
    3c20:	402a      	ands	r2, r5
    3c22:	085b      	lsrs	r3, r3, #1
    3c24:	4313      	orrs	r3, r2
    3c26:	005b      	lsls	r3, r3, #1
    3c28:	07e4      	lsls	r4, r4, #31
    3c2a:	085b      	lsrs	r3, r3, #1
    3c2c:	4323      	orrs	r3, r4
    3c2e:	0019      	movs	r1, r3
    3c30:	bd70      	pop	{r4, r5, r6, pc}
    3c32:	2900      	cmp	r1, #0
    3c34:	d114      	bne.n	3c60 <__aeabi_f2d+0x6c>
    3c36:	2d00      	cmp	r5, #0
    3c38:	d01e      	beq.n	3c78 <__aeabi_f2d+0x84>
    3c3a:	0028      	movs	r0, r5
    3c3c:	f000 f8b6 	bl	3dac <__clzsi2>
    3c40:	280a      	cmp	r0, #10
    3c42:	dc1c      	bgt.n	3c7e <__aeabi_f2d+0x8a>
    3c44:	230b      	movs	r3, #11
    3c46:	002a      	movs	r2, r5
    3c48:	1a1b      	subs	r3, r3, r0
    3c4a:	40da      	lsrs	r2, r3
    3c4c:	0003      	movs	r3, r0
    3c4e:	3315      	adds	r3, #21
    3c50:	409d      	lsls	r5, r3
    3c52:	4b0f      	ldr	r3, [pc, #60]	; (3c90 <__aeabi_f2d+0x9c>)
    3c54:	0312      	lsls	r2, r2, #12
    3c56:	1a1b      	subs	r3, r3, r0
    3c58:	055b      	lsls	r3, r3, #21
    3c5a:	0b16      	lsrs	r6, r2, #12
    3c5c:	0d5b      	lsrs	r3, r3, #21
    3c5e:	e7d8      	b.n	3c12 <__aeabi_f2d+0x1e>
    3c60:	2d00      	cmp	r5, #0
    3c62:	d006      	beq.n	3c72 <__aeabi_f2d+0x7e>
    3c64:	0b32      	lsrs	r2, r6, #12
    3c66:	2680      	movs	r6, #128	; 0x80
    3c68:	0336      	lsls	r6, r6, #12
    3c6a:	076d      	lsls	r5, r5, #29
    3c6c:	4316      	orrs	r6, r2
    3c6e:	4b09      	ldr	r3, [pc, #36]	; (3c94 <__aeabi_f2d+0xa0>)
    3c70:	e7cf      	b.n	3c12 <__aeabi_f2d+0x1e>
    3c72:	4b08      	ldr	r3, [pc, #32]	; (3c94 <__aeabi_f2d+0xa0>)
    3c74:	2600      	movs	r6, #0
    3c76:	e7cc      	b.n	3c12 <__aeabi_f2d+0x1e>
    3c78:	2300      	movs	r3, #0
    3c7a:	2600      	movs	r6, #0
    3c7c:	e7c9      	b.n	3c12 <__aeabi_f2d+0x1e>
    3c7e:	0003      	movs	r3, r0
    3c80:	002a      	movs	r2, r5
    3c82:	3b0b      	subs	r3, #11
    3c84:	409a      	lsls	r2, r3
    3c86:	2500      	movs	r5, #0
    3c88:	e7e3      	b.n	3c52 <__aeabi_f2d+0x5e>
    3c8a:	46c0      	nop			; (mov r8, r8)
    3c8c:	800fffff 	.word	0x800fffff
    3c90:	00000389 	.word	0x00000389
    3c94:	000007ff 	.word	0x000007ff

00003c98 <__aeabi_d2f>:
    3c98:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c9a:	004c      	lsls	r4, r1, #1
    3c9c:	0d64      	lsrs	r4, r4, #21
    3c9e:	030b      	lsls	r3, r1, #12
    3ca0:	1c62      	adds	r2, r4, #1
    3ca2:	0f45      	lsrs	r5, r0, #29
    3ca4:	0a5b      	lsrs	r3, r3, #9
    3ca6:	0552      	lsls	r2, r2, #21
    3ca8:	432b      	orrs	r3, r5
    3caa:	0fc9      	lsrs	r1, r1, #31
    3cac:	00c5      	lsls	r5, r0, #3
    3cae:	0d52      	lsrs	r2, r2, #21
    3cb0:	2a01      	cmp	r2, #1
    3cb2:	dd28      	ble.n	3d06 <__aeabi_d2f+0x6e>
    3cb4:	4a3a      	ldr	r2, [pc, #232]	; (3da0 <__aeabi_d2f+0x108>)
    3cb6:	18a6      	adds	r6, r4, r2
    3cb8:	2efe      	cmp	r6, #254	; 0xfe
    3cba:	dc1b      	bgt.n	3cf4 <__aeabi_d2f+0x5c>
    3cbc:	2e00      	cmp	r6, #0
    3cbe:	dd3e      	ble.n	3d3e <__aeabi_d2f+0xa6>
    3cc0:	0180      	lsls	r0, r0, #6
    3cc2:	0002      	movs	r2, r0
    3cc4:	1e50      	subs	r0, r2, #1
    3cc6:	4182      	sbcs	r2, r0
    3cc8:	0f6d      	lsrs	r5, r5, #29
    3cca:	432a      	orrs	r2, r5
    3ccc:	00db      	lsls	r3, r3, #3
    3cce:	4313      	orrs	r3, r2
    3cd0:	075a      	lsls	r2, r3, #29
    3cd2:	d004      	beq.n	3cde <__aeabi_d2f+0x46>
    3cd4:	220f      	movs	r2, #15
    3cd6:	401a      	ands	r2, r3
    3cd8:	2a04      	cmp	r2, #4
    3cda:	d000      	beq.n	3cde <__aeabi_d2f+0x46>
    3cdc:	3304      	adds	r3, #4
    3cde:	2280      	movs	r2, #128	; 0x80
    3ce0:	04d2      	lsls	r2, r2, #19
    3ce2:	401a      	ands	r2, r3
    3ce4:	d05a      	beq.n	3d9c <__aeabi_d2f+0x104>
    3ce6:	3601      	adds	r6, #1
    3ce8:	2eff      	cmp	r6, #255	; 0xff
    3cea:	d003      	beq.n	3cf4 <__aeabi_d2f+0x5c>
    3cec:	019b      	lsls	r3, r3, #6
    3cee:	0a5b      	lsrs	r3, r3, #9
    3cf0:	b2f4      	uxtb	r4, r6
    3cf2:	e001      	b.n	3cf8 <__aeabi_d2f+0x60>
    3cf4:	24ff      	movs	r4, #255	; 0xff
    3cf6:	2300      	movs	r3, #0
    3cf8:	0258      	lsls	r0, r3, #9
    3cfa:	05e4      	lsls	r4, r4, #23
    3cfc:	0a40      	lsrs	r0, r0, #9
    3cfe:	07c9      	lsls	r1, r1, #31
    3d00:	4320      	orrs	r0, r4
    3d02:	4308      	orrs	r0, r1
    3d04:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3d06:	2c00      	cmp	r4, #0
    3d08:	d007      	beq.n	3d1a <__aeabi_d2f+0x82>
    3d0a:	431d      	orrs	r5, r3
    3d0c:	d0f2      	beq.n	3cf4 <__aeabi_d2f+0x5c>
    3d0e:	2080      	movs	r0, #128	; 0x80
    3d10:	00db      	lsls	r3, r3, #3
    3d12:	0480      	lsls	r0, r0, #18
    3d14:	4303      	orrs	r3, r0
    3d16:	26ff      	movs	r6, #255	; 0xff
    3d18:	e7da      	b.n	3cd0 <__aeabi_d2f+0x38>
    3d1a:	432b      	orrs	r3, r5
    3d1c:	d003      	beq.n	3d26 <__aeabi_d2f+0x8e>
    3d1e:	2305      	movs	r3, #5
    3d20:	08db      	lsrs	r3, r3, #3
    3d22:	2cff      	cmp	r4, #255	; 0xff
    3d24:	d003      	beq.n	3d2e <__aeabi_d2f+0x96>
    3d26:	025b      	lsls	r3, r3, #9
    3d28:	0a5b      	lsrs	r3, r3, #9
    3d2a:	b2e4      	uxtb	r4, r4
    3d2c:	e7e4      	b.n	3cf8 <__aeabi_d2f+0x60>
    3d2e:	2b00      	cmp	r3, #0
    3d30:	d032      	beq.n	3d98 <__aeabi_d2f+0x100>
    3d32:	2080      	movs	r0, #128	; 0x80
    3d34:	03c0      	lsls	r0, r0, #15
    3d36:	4303      	orrs	r3, r0
    3d38:	025b      	lsls	r3, r3, #9
    3d3a:	0a5b      	lsrs	r3, r3, #9
    3d3c:	e7dc      	b.n	3cf8 <__aeabi_d2f+0x60>
    3d3e:	0032      	movs	r2, r6
    3d40:	3217      	adds	r2, #23
    3d42:	db14      	blt.n	3d6e <__aeabi_d2f+0xd6>
    3d44:	2280      	movs	r2, #128	; 0x80
    3d46:	271e      	movs	r7, #30
    3d48:	0412      	lsls	r2, r2, #16
    3d4a:	4313      	orrs	r3, r2
    3d4c:	1bbf      	subs	r7, r7, r6
    3d4e:	2f1f      	cmp	r7, #31
    3d50:	dc0f      	bgt.n	3d72 <__aeabi_d2f+0xda>
    3d52:	4a14      	ldr	r2, [pc, #80]	; (3da4 <__aeabi_d2f+0x10c>)
    3d54:	4694      	mov	ip, r2
    3d56:	4464      	add	r4, ip
    3d58:	002a      	movs	r2, r5
    3d5a:	40a5      	lsls	r5, r4
    3d5c:	002e      	movs	r6, r5
    3d5e:	40a3      	lsls	r3, r4
    3d60:	1e75      	subs	r5, r6, #1
    3d62:	41ae      	sbcs	r6, r5
    3d64:	40fa      	lsrs	r2, r7
    3d66:	4333      	orrs	r3, r6
    3d68:	4313      	orrs	r3, r2
    3d6a:	2600      	movs	r6, #0
    3d6c:	e7b0      	b.n	3cd0 <__aeabi_d2f+0x38>
    3d6e:	2400      	movs	r4, #0
    3d70:	e7d5      	b.n	3d1e <__aeabi_d2f+0x86>
    3d72:	2202      	movs	r2, #2
    3d74:	4252      	negs	r2, r2
    3d76:	1b96      	subs	r6, r2, r6
    3d78:	001a      	movs	r2, r3
    3d7a:	40f2      	lsrs	r2, r6
    3d7c:	2f20      	cmp	r7, #32
    3d7e:	d009      	beq.n	3d94 <__aeabi_d2f+0xfc>
    3d80:	4809      	ldr	r0, [pc, #36]	; (3da8 <__aeabi_d2f+0x110>)
    3d82:	4684      	mov	ip, r0
    3d84:	4464      	add	r4, ip
    3d86:	40a3      	lsls	r3, r4
    3d88:	432b      	orrs	r3, r5
    3d8a:	1e5d      	subs	r5, r3, #1
    3d8c:	41ab      	sbcs	r3, r5
    3d8e:	2600      	movs	r6, #0
    3d90:	4313      	orrs	r3, r2
    3d92:	e79d      	b.n	3cd0 <__aeabi_d2f+0x38>
    3d94:	2300      	movs	r3, #0
    3d96:	e7f7      	b.n	3d88 <__aeabi_d2f+0xf0>
    3d98:	2300      	movs	r3, #0
    3d9a:	e7ad      	b.n	3cf8 <__aeabi_d2f+0x60>
    3d9c:	0034      	movs	r4, r6
    3d9e:	e7bf      	b.n	3d20 <__aeabi_d2f+0x88>
    3da0:	fffffc80 	.word	0xfffffc80
    3da4:	fffffc82 	.word	0xfffffc82
    3da8:	fffffca2 	.word	0xfffffca2

00003dac <__clzsi2>:
    3dac:	211c      	movs	r1, #28
    3dae:	2301      	movs	r3, #1
    3db0:	041b      	lsls	r3, r3, #16
    3db2:	4298      	cmp	r0, r3
    3db4:	d301      	bcc.n	3dba <__clzsi2+0xe>
    3db6:	0c00      	lsrs	r0, r0, #16
    3db8:	3910      	subs	r1, #16
    3dba:	0a1b      	lsrs	r3, r3, #8
    3dbc:	4298      	cmp	r0, r3
    3dbe:	d301      	bcc.n	3dc4 <__clzsi2+0x18>
    3dc0:	0a00      	lsrs	r0, r0, #8
    3dc2:	3908      	subs	r1, #8
    3dc4:	091b      	lsrs	r3, r3, #4
    3dc6:	4298      	cmp	r0, r3
    3dc8:	d301      	bcc.n	3dce <__clzsi2+0x22>
    3dca:	0900      	lsrs	r0, r0, #4
    3dcc:	3904      	subs	r1, #4
    3dce:	a202      	add	r2, pc, #8	; (adr r2, 3dd8 <__clzsi2+0x2c>)
    3dd0:	5c10      	ldrb	r0, [r2, r0]
    3dd2:	1840      	adds	r0, r0, r1
    3dd4:	4770      	bx	lr
    3dd6:	46c0      	nop			; (mov r8, r8)
    3dd8:	02020304 	.word	0x02020304
    3ddc:	01010101 	.word	0x01010101
	...

00003de8 <__libc_init_array>:
    3de8:	b570      	push	{r4, r5, r6, lr}
    3dea:	2600      	movs	r6, #0
    3dec:	4d0c      	ldr	r5, [pc, #48]	; (3e20 <__libc_init_array+0x38>)
    3dee:	4c0d      	ldr	r4, [pc, #52]	; (3e24 <__libc_init_array+0x3c>)
    3df0:	1b64      	subs	r4, r4, r5
    3df2:	10a4      	asrs	r4, r4, #2
    3df4:	42a6      	cmp	r6, r4
    3df6:	d109      	bne.n	3e0c <__libc_init_array+0x24>
    3df8:	2600      	movs	r6, #0
    3dfa:	f000 ff73 	bl	4ce4 <_init>
    3dfe:	4d0a      	ldr	r5, [pc, #40]	; (3e28 <__libc_init_array+0x40>)
    3e00:	4c0a      	ldr	r4, [pc, #40]	; (3e2c <__libc_init_array+0x44>)
    3e02:	1b64      	subs	r4, r4, r5
    3e04:	10a4      	asrs	r4, r4, #2
    3e06:	42a6      	cmp	r6, r4
    3e08:	d105      	bne.n	3e16 <__libc_init_array+0x2e>
    3e0a:	bd70      	pop	{r4, r5, r6, pc}
    3e0c:	00b3      	lsls	r3, r6, #2
    3e0e:	58eb      	ldr	r3, [r5, r3]
    3e10:	4798      	blx	r3
    3e12:	3601      	adds	r6, #1
    3e14:	e7ee      	b.n	3df4 <__libc_init_array+0xc>
    3e16:	00b3      	lsls	r3, r6, #2
    3e18:	58eb      	ldr	r3, [r5, r3]
    3e1a:	4798      	blx	r3
    3e1c:	3601      	adds	r6, #1
    3e1e:	e7f2      	b.n	3e06 <__libc_init_array+0x1e>
    3e20:	00004cf0 	.word	0x00004cf0
    3e24:	00004cf0 	.word	0x00004cf0
    3e28:	00004cf0 	.word	0x00004cf0
    3e2c:	00004cf4 	.word	0x00004cf4

00003e30 <memcpy>:
    3e30:	2300      	movs	r3, #0
    3e32:	b510      	push	{r4, lr}
    3e34:	429a      	cmp	r2, r3
    3e36:	d100      	bne.n	3e3a <memcpy+0xa>
    3e38:	bd10      	pop	{r4, pc}
    3e3a:	5ccc      	ldrb	r4, [r1, r3]
    3e3c:	54c4      	strb	r4, [r0, r3]
    3e3e:	3301      	adds	r3, #1
    3e40:	e7f8      	b.n	3e34 <memcpy+0x4>

00003e42 <memset>:
    3e42:	0003      	movs	r3, r0
    3e44:	1882      	adds	r2, r0, r2
    3e46:	4293      	cmp	r3, r2
    3e48:	d100      	bne.n	3e4c <memset+0xa>
    3e4a:	4770      	bx	lr
    3e4c:	7019      	strb	r1, [r3, #0]
    3e4e:	3301      	adds	r3, #1
    3e50:	e7f9      	b.n	3e46 <memset+0x4>

00003e52 <strlen>:
    3e52:	2300      	movs	r3, #0
    3e54:	5cc2      	ldrb	r2, [r0, r3]
    3e56:	3301      	adds	r3, #1
    3e58:	2a00      	cmp	r2, #0
    3e5a:	d1fb      	bne.n	3e54 <strlen+0x2>
    3e5c:	1e58      	subs	r0, r3, #1
    3e5e:	4770      	bx	lr

00003e60 <strncpy>:
    3e60:	b570      	push	{r4, r5, r6, lr}
    3e62:	0004      	movs	r4, r0
    3e64:	2a00      	cmp	r2, #0
    3e66:	d100      	bne.n	3e6a <strncpy+0xa>
    3e68:	bd70      	pop	{r4, r5, r6, pc}
    3e6a:	780d      	ldrb	r5, [r1, #0]
    3e6c:	1e56      	subs	r6, r2, #1
    3e6e:	1c63      	adds	r3, r4, #1
    3e70:	7025      	strb	r5, [r4, #0]
    3e72:	3101      	adds	r1, #1
    3e74:	2d00      	cmp	r5, #0
    3e76:	d105      	bne.n	3e84 <strncpy+0x24>
    3e78:	18a4      	adds	r4, r4, r2
    3e7a:	429c      	cmp	r4, r3
    3e7c:	d0f4      	beq.n	3e68 <strncpy+0x8>
    3e7e:	701d      	strb	r5, [r3, #0]
    3e80:	3301      	adds	r3, #1
    3e82:	e7fa      	b.n	3e7a <strncpy+0x1a>
    3e84:	001c      	movs	r4, r3
    3e86:	0032      	movs	r2, r6
    3e88:	e7ec      	b.n	3e64 <strncpy+0x4>

00003e8a <_vsniprintf_r>:
    3e8a:	b530      	push	{r4, r5, lr}
    3e8c:	0014      	movs	r4, r2
    3e8e:	b09b      	sub	sp, #108	; 0x6c
    3e90:	0005      	movs	r5, r0
    3e92:	001a      	movs	r2, r3
    3e94:	2c00      	cmp	r4, #0
    3e96:	da05      	bge.n	3ea4 <_vsniprintf_r+0x1a>
    3e98:	238b      	movs	r3, #139	; 0x8b
    3e9a:	6003      	str	r3, [r0, #0]
    3e9c:	2001      	movs	r0, #1
    3e9e:	4240      	negs	r0, r0
    3ea0:	b01b      	add	sp, #108	; 0x6c
    3ea2:	bd30      	pop	{r4, r5, pc}
    3ea4:	2382      	movs	r3, #130	; 0x82
    3ea6:	4668      	mov	r0, sp
    3ea8:	009b      	lsls	r3, r3, #2
    3eaa:	8183      	strh	r3, [r0, #12]
    3eac:	2300      	movs	r3, #0
    3eae:	9100      	str	r1, [sp, #0]
    3eb0:	9104      	str	r1, [sp, #16]
    3eb2:	429c      	cmp	r4, r3
    3eb4:	d000      	beq.n	3eb8 <_vsniprintf_r+0x2e>
    3eb6:	1e63      	subs	r3, r4, #1
    3eb8:	9302      	str	r3, [sp, #8]
    3eba:	9305      	str	r3, [sp, #20]
    3ebc:	2301      	movs	r3, #1
    3ebe:	4669      	mov	r1, sp
    3ec0:	425b      	negs	r3, r3
    3ec2:	81cb      	strh	r3, [r1, #14]
    3ec4:	0028      	movs	r0, r5
    3ec6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    3ec8:	f000 f8d6 	bl	4078 <_svfiprintf_r>
    3ecc:	1c43      	adds	r3, r0, #1
    3ece:	da01      	bge.n	3ed4 <_vsniprintf_r+0x4a>
    3ed0:	238b      	movs	r3, #139	; 0x8b
    3ed2:	602b      	str	r3, [r5, #0]
    3ed4:	2c00      	cmp	r4, #0
    3ed6:	d0e3      	beq.n	3ea0 <_vsniprintf_r+0x16>
    3ed8:	2300      	movs	r3, #0
    3eda:	9a00      	ldr	r2, [sp, #0]
    3edc:	7013      	strb	r3, [r2, #0]
    3ede:	e7df      	b.n	3ea0 <_vsniprintf_r+0x16>

00003ee0 <vsniprintf>:
    3ee0:	b507      	push	{r0, r1, r2, lr}
    3ee2:	9300      	str	r3, [sp, #0]
    3ee4:	0013      	movs	r3, r2
    3ee6:	000a      	movs	r2, r1
    3ee8:	0001      	movs	r1, r0
    3eea:	4802      	ldr	r0, [pc, #8]	; (3ef4 <vsniprintf+0x14>)
    3eec:	6800      	ldr	r0, [r0, #0]
    3eee:	f7ff ffcc 	bl	3e8a <_vsniprintf_r>
    3ef2:	bd0e      	pop	{r1, r2, r3, pc}
    3ef4:	20000000 	.word	0x20000000

00003ef8 <_malloc_r>:
    3ef8:	2303      	movs	r3, #3
    3efa:	b570      	push	{r4, r5, r6, lr}
    3efc:	1ccd      	adds	r5, r1, #3
    3efe:	439d      	bics	r5, r3
    3f00:	3508      	adds	r5, #8
    3f02:	0006      	movs	r6, r0
    3f04:	2d0c      	cmp	r5, #12
    3f06:	d21e      	bcs.n	3f46 <_malloc_r+0x4e>
    3f08:	250c      	movs	r5, #12
    3f0a:	42a9      	cmp	r1, r5
    3f0c:	d81d      	bhi.n	3f4a <_malloc_r+0x52>
    3f0e:	0030      	movs	r0, r6
    3f10:	f000 fb6d 	bl	45ee <__malloc_lock>
    3f14:	4a25      	ldr	r2, [pc, #148]	; (3fac <_malloc_r+0xb4>)
    3f16:	6814      	ldr	r4, [r2, #0]
    3f18:	0021      	movs	r1, r4
    3f1a:	2900      	cmp	r1, #0
    3f1c:	d119      	bne.n	3f52 <_malloc_r+0x5a>
    3f1e:	4c24      	ldr	r4, [pc, #144]	; (3fb0 <_malloc_r+0xb8>)
    3f20:	6823      	ldr	r3, [r4, #0]
    3f22:	2b00      	cmp	r3, #0
    3f24:	d103      	bne.n	3f2e <_malloc_r+0x36>
    3f26:	0030      	movs	r0, r6
    3f28:	f000 fb32 	bl	4590 <_sbrk_r>
    3f2c:	6020      	str	r0, [r4, #0]
    3f2e:	0029      	movs	r1, r5
    3f30:	0030      	movs	r0, r6
    3f32:	f000 fb2d 	bl	4590 <_sbrk_r>
    3f36:	1c43      	adds	r3, r0, #1
    3f38:	d12c      	bne.n	3f94 <_malloc_r+0x9c>
    3f3a:	230c      	movs	r3, #12
    3f3c:	0030      	movs	r0, r6
    3f3e:	6033      	str	r3, [r6, #0]
    3f40:	f000 fb56 	bl	45f0 <__malloc_unlock>
    3f44:	e003      	b.n	3f4e <_malloc_r+0x56>
    3f46:	2d00      	cmp	r5, #0
    3f48:	dadf      	bge.n	3f0a <_malloc_r+0x12>
    3f4a:	230c      	movs	r3, #12
    3f4c:	6033      	str	r3, [r6, #0]
    3f4e:	2000      	movs	r0, #0
    3f50:	bd70      	pop	{r4, r5, r6, pc}
    3f52:	680b      	ldr	r3, [r1, #0]
    3f54:	1b5b      	subs	r3, r3, r5
    3f56:	d41a      	bmi.n	3f8e <_malloc_r+0x96>
    3f58:	2b0b      	cmp	r3, #11
    3f5a:	d903      	bls.n	3f64 <_malloc_r+0x6c>
    3f5c:	600b      	str	r3, [r1, #0]
    3f5e:	18cc      	adds	r4, r1, r3
    3f60:	6025      	str	r5, [r4, #0]
    3f62:	e003      	b.n	3f6c <_malloc_r+0x74>
    3f64:	428c      	cmp	r4, r1
    3f66:	d10e      	bne.n	3f86 <_malloc_r+0x8e>
    3f68:	6863      	ldr	r3, [r4, #4]
    3f6a:	6013      	str	r3, [r2, #0]
    3f6c:	0030      	movs	r0, r6
    3f6e:	f000 fb3f 	bl	45f0 <__malloc_unlock>
    3f72:	0020      	movs	r0, r4
    3f74:	2207      	movs	r2, #7
    3f76:	300b      	adds	r0, #11
    3f78:	1d23      	adds	r3, r4, #4
    3f7a:	4390      	bics	r0, r2
    3f7c:	1ac3      	subs	r3, r0, r3
    3f7e:	d0e7      	beq.n	3f50 <_malloc_r+0x58>
    3f80:	425a      	negs	r2, r3
    3f82:	50e2      	str	r2, [r4, r3]
    3f84:	e7e4      	b.n	3f50 <_malloc_r+0x58>
    3f86:	684b      	ldr	r3, [r1, #4]
    3f88:	6063      	str	r3, [r4, #4]
    3f8a:	000c      	movs	r4, r1
    3f8c:	e7ee      	b.n	3f6c <_malloc_r+0x74>
    3f8e:	000c      	movs	r4, r1
    3f90:	6849      	ldr	r1, [r1, #4]
    3f92:	e7c2      	b.n	3f1a <_malloc_r+0x22>
    3f94:	2303      	movs	r3, #3
    3f96:	1cc4      	adds	r4, r0, #3
    3f98:	439c      	bics	r4, r3
    3f9a:	42a0      	cmp	r0, r4
    3f9c:	d0e0      	beq.n	3f60 <_malloc_r+0x68>
    3f9e:	1a21      	subs	r1, r4, r0
    3fa0:	0030      	movs	r0, r6
    3fa2:	f000 faf5 	bl	4590 <_sbrk_r>
    3fa6:	1c43      	adds	r3, r0, #1
    3fa8:	d1da      	bne.n	3f60 <_malloc_r+0x68>
    3faa:	e7c6      	b.n	3f3a <_malloc_r+0x42>
    3fac:	200000bc 	.word	0x200000bc
    3fb0:	200000c0 	.word	0x200000c0

00003fb4 <__ssputs_r>:
    3fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3fb6:	688e      	ldr	r6, [r1, #8]
    3fb8:	b085      	sub	sp, #20
    3fba:	0007      	movs	r7, r0
    3fbc:	000c      	movs	r4, r1
    3fbe:	9203      	str	r2, [sp, #12]
    3fc0:	9301      	str	r3, [sp, #4]
    3fc2:	429e      	cmp	r6, r3
    3fc4:	d839      	bhi.n	403a <__ssputs_r+0x86>
    3fc6:	2390      	movs	r3, #144	; 0x90
    3fc8:	898a      	ldrh	r2, [r1, #12]
    3fca:	00db      	lsls	r3, r3, #3
    3fcc:	421a      	tst	r2, r3
    3fce:	d034      	beq.n	403a <__ssputs_r+0x86>
    3fd0:	2503      	movs	r5, #3
    3fd2:	6909      	ldr	r1, [r1, #16]
    3fd4:	6823      	ldr	r3, [r4, #0]
    3fd6:	1a5b      	subs	r3, r3, r1
    3fd8:	9302      	str	r3, [sp, #8]
    3fda:	6963      	ldr	r3, [r4, #20]
    3fdc:	9802      	ldr	r0, [sp, #8]
    3fde:	435d      	muls	r5, r3
    3fe0:	0feb      	lsrs	r3, r5, #31
    3fe2:	195d      	adds	r5, r3, r5
    3fe4:	9b01      	ldr	r3, [sp, #4]
    3fe6:	106d      	asrs	r5, r5, #1
    3fe8:	3301      	adds	r3, #1
    3fea:	181b      	adds	r3, r3, r0
    3fec:	42ab      	cmp	r3, r5
    3fee:	d900      	bls.n	3ff2 <__ssputs_r+0x3e>
    3ff0:	001d      	movs	r5, r3
    3ff2:	0553      	lsls	r3, r2, #21
    3ff4:	d532      	bpl.n	405c <__ssputs_r+0xa8>
    3ff6:	0029      	movs	r1, r5
    3ff8:	0038      	movs	r0, r7
    3ffa:	f7ff ff7d 	bl	3ef8 <_malloc_r>
    3ffe:	1e06      	subs	r6, r0, #0
    4000:	d109      	bne.n	4016 <__ssputs_r+0x62>
    4002:	230c      	movs	r3, #12
    4004:	603b      	str	r3, [r7, #0]
    4006:	2340      	movs	r3, #64	; 0x40
    4008:	2001      	movs	r0, #1
    400a:	89a2      	ldrh	r2, [r4, #12]
    400c:	4240      	negs	r0, r0
    400e:	4313      	orrs	r3, r2
    4010:	81a3      	strh	r3, [r4, #12]
    4012:	b005      	add	sp, #20
    4014:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4016:	9a02      	ldr	r2, [sp, #8]
    4018:	6921      	ldr	r1, [r4, #16]
    401a:	f7ff ff09 	bl	3e30 <memcpy>
    401e:	89a3      	ldrh	r3, [r4, #12]
    4020:	4a14      	ldr	r2, [pc, #80]	; (4074 <__ssputs_r+0xc0>)
    4022:	401a      	ands	r2, r3
    4024:	2380      	movs	r3, #128	; 0x80
    4026:	4313      	orrs	r3, r2
    4028:	81a3      	strh	r3, [r4, #12]
    402a:	9b02      	ldr	r3, [sp, #8]
    402c:	6126      	str	r6, [r4, #16]
    402e:	18f6      	adds	r6, r6, r3
    4030:	6026      	str	r6, [r4, #0]
    4032:	6165      	str	r5, [r4, #20]
    4034:	9e01      	ldr	r6, [sp, #4]
    4036:	1aed      	subs	r5, r5, r3
    4038:	60a5      	str	r5, [r4, #8]
    403a:	9b01      	ldr	r3, [sp, #4]
    403c:	42b3      	cmp	r3, r6
    403e:	d200      	bcs.n	4042 <__ssputs_r+0x8e>
    4040:	001e      	movs	r6, r3
    4042:	0032      	movs	r2, r6
    4044:	9903      	ldr	r1, [sp, #12]
    4046:	6820      	ldr	r0, [r4, #0]
    4048:	f000 fabf 	bl	45ca <memmove>
    404c:	68a3      	ldr	r3, [r4, #8]
    404e:	2000      	movs	r0, #0
    4050:	1b9b      	subs	r3, r3, r6
    4052:	60a3      	str	r3, [r4, #8]
    4054:	6823      	ldr	r3, [r4, #0]
    4056:	199e      	adds	r6, r3, r6
    4058:	6026      	str	r6, [r4, #0]
    405a:	e7da      	b.n	4012 <__ssputs_r+0x5e>
    405c:	002a      	movs	r2, r5
    405e:	0038      	movs	r0, r7
    4060:	f000 fb12 	bl	4688 <_realloc_r>
    4064:	1e06      	subs	r6, r0, #0
    4066:	d1e0      	bne.n	402a <__ssputs_r+0x76>
    4068:	6921      	ldr	r1, [r4, #16]
    406a:	0038      	movs	r0, r7
    406c:	f000 fac2 	bl	45f4 <_free_r>
    4070:	e7c7      	b.n	4002 <__ssputs_r+0x4e>
    4072:	46c0      	nop			; (mov r8, r8)
    4074:	fffffb7f 	.word	0xfffffb7f

00004078 <_svfiprintf_r>:
    4078:	b5f0      	push	{r4, r5, r6, r7, lr}
    407a:	b09f      	sub	sp, #124	; 0x7c
    407c:	9002      	str	r0, [sp, #8]
    407e:	9305      	str	r3, [sp, #20]
    4080:	898b      	ldrh	r3, [r1, #12]
    4082:	000f      	movs	r7, r1
    4084:	0016      	movs	r6, r2
    4086:	061b      	lsls	r3, r3, #24
    4088:	d511      	bpl.n	40ae <_svfiprintf_r+0x36>
    408a:	690b      	ldr	r3, [r1, #16]
    408c:	2b00      	cmp	r3, #0
    408e:	d10e      	bne.n	40ae <_svfiprintf_r+0x36>
    4090:	2140      	movs	r1, #64	; 0x40
    4092:	f7ff ff31 	bl	3ef8 <_malloc_r>
    4096:	6038      	str	r0, [r7, #0]
    4098:	6138      	str	r0, [r7, #16]
    409a:	2800      	cmp	r0, #0
    409c:	d105      	bne.n	40aa <_svfiprintf_r+0x32>
    409e:	230c      	movs	r3, #12
    40a0:	9a02      	ldr	r2, [sp, #8]
    40a2:	3801      	subs	r0, #1
    40a4:	6013      	str	r3, [r2, #0]
    40a6:	b01f      	add	sp, #124	; 0x7c
    40a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    40aa:	2340      	movs	r3, #64	; 0x40
    40ac:	617b      	str	r3, [r7, #20]
    40ae:	2300      	movs	r3, #0
    40b0:	ad06      	add	r5, sp, #24
    40b2:	616b      	str	r3, [r5, #20]
    40b4:	3320      	adds	r3, #32
    40b6:	766b      	strb	r3, [r5, #25]
    40b8:	3310      	adds	r3, #16
    40ba:	76ab      	strb	r3, [r5, #26]
    40bc:	0034      	movs	r4, r6
    40be:	7823      	ldrb	r3, [r4, #0]
    40c0:	2b00      	cmp	r3, #0
    40c2:	d147      	bne.n	4154 <_svfiprintf_r+0xdc>
    40c4:	1ba3      	subs	r3, r4, r6
    40c6:	9304      	str	r3, [sp, #16]
    40c8:	d00d      	beq.n	40e6 <_svfiprintf_r+0x6e>
    40ca:	1ba3      	subs	r3, r4, r6
    40cc:	0032      	movs	r2, r6
    40ce:	0039      	movs	r1, r7
    40d0:	9802      	ldr	r0, [sp, #8]
    40d2:	f7ff ff6f 	bl	3fb4 <__ssputs_r>
    40d6:	1c43      	adds	r3, r0, #1
    40d8:	d100      	bne.n	40dc <_svfiprintf_r+0x64>
    40da:	e0b5      	b.n	4248 <_svfiprintf_r+0x1d0>
    40dc:	696a      	ldr	r2, [r5, #20]
    40de:	9b04      	ldr	r3, [sp, #16]
    40e0:	4694      	mov	ip, r2
    40e2:	4463      	add	r3, ip
    40e4:	616b      	str	r3, [r5, #20]
    40e6:	7823      	ldrb	r3, [r4, #0]
    40e8:	2b00      	cmp	r3, #0
    40ea:	d100      	bne.n	40ee <_svfiprintf_r+0x76>
    40ec:	e0ac      	b.n	4248 <_svfiprintf_r+0x1d0>
    40ee:	2201      	movs	r2, #1
    40f0:	2300      	movs	r3, #0
    40f2:	4252      	negs	r2, r2
    40f4:	606a      	str	r2, [r5, #4]
    40f6:	a902      	add	r1, sp, #8
    40f8:	3254      	adds	r2, #84	; 0x54
    40fa:	1852      	adds	r2, r2, r1
    40fc:	3401      	adds	r4, #1
    40fe:	602b      	str	r3, [r5, #0]
    4100:	60eb      	str	r3, [r5, #12]
    4102:	60ab      	str	r3, [r5, #8]
    4104:	7013      	strb	r3, [r2, #0]
    4106:	65ab      	str	r3, [r5, #88]	; 0x58
    4108:	4e58      	ldr	r6, [pc, #352]	; (426c <_svfiprintf_r+0x1f4>)
    410a:	2205      	movs	r2, #5
    410c:	7821      	ldrb	r1, [r4, #0]
    410e:	0030      	movs	r0, r6
    4110:	f000 fa50 	bl	45b4 <memchr>
    4114:	1c62      	adds	r2, r4, #1
    4116:	2800      	cmp	r0, #0
    4118:	d120      	bne.n	415c <_svfiprintf_r+0xe4>
    411a:	6829      	ldr	r1, [r5, #0]
    411c:	06cb      	lsls	r3, r1, #27
    411e:	d504      	bpl.n	412a <_svfiprintf_r+0xb2>
    4120:	2353      	movs	r3, #83	; 0x53
    4122:	ae02      	add	r6, sp, #8
    4124:	3020      	adds	r0, #32
    4126:	199b      	adds	r3, r3, r6
    4128:	7018      	strb	r0, [r3, #0]
    412a:	070b      	lsls	r3, r1, #28
    412c:	d504      	bpl.n	4138 <_svfiprintf_r+0xc0>
    412e:	2353      	movs	r3, #83	; 0x53
    4130:	202b      	movs	r0, #43	; 0x2b
    4132:	ae02      	add	r6, sp, #8
    4134:	199b      	adds	r3, r3, r6
    4136:	7018      	strb	r0, [r3, #0]
    4138:	7823      	ldrb	r3, [r4, #0]
    413a:	2b2a      	cmp	r3, #42	; 0x2a
    413c:	d016      	beq.n	416c <_svfiprintf_r+0xf4>
    413e:	2000      	movs	r0, #0
    4140:	210a      	movs	r1, #10
    4142:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4144:	7822      	ldrb	r2, [r4, #0]
    4146:	3a30      	subs	r2, #48	; 0x30
    4148:	2a09      	cmp	r2, #9
    414a:	d955      	bls.n	41f8 <_svfiprintf_r+0x180>
    414c:	2800      	cmp	r0, #0
    414e:	d015      	beq.n	417c <_svfiprintf_r+0x104>
    4150:	9309      	str	r3, [sp, #36]	; 0x24
    4152:	e013      	b.n	417c <_svfiprintf_r+0x104>
    4154:	2b25      	cmp	r3, #37	; 0x25
    4156:	d0b5      	beq.n	40c4 <_svfiprintf_r+0x4c>
    4158:	3401      	adds	r4, #1
    415a:	e7b0      	b.n	40be <_svfiprintf_r+0x46>
    415c:	2301      	movs	r3, #1
    415e:	1b80      	subs	r0, r0, r6
    4160:	4083      	lsls	r3, r0
    4162:	6829      	ldr	r1, [r5, #0]
    4164:	0014      	movs	r4, r2
    4166:	430b      	orrs	r3, r1
    4168:	602b      	str	r3, [r5, #0]
    416a:	e7cd      	b.n	4108 <_svfiprintf_r+0x90>
    416c:	9b05      	ldr	r3, [sp, #20]
    416e:	1d18      	adds	r0, r3, #4
    4170:	681b      	ldr	r3, [r3, #0]
    4172:	9005      	str	r0, [sp, #20]
    4174:	2b00      	cmp	r3, #0
    4176:	db39      	blt.n	41ec <_svfiprintf_r+0x174>
    4178:	9309      	str	r3, [sp, #36]	; 0x24
    417a:	0014      	movs	r4, r2
    417c:	7823      	ldrb	r3, [r4, #0]
    417e:	2b2e      	cmp	r3, #46	; 0x2e
    4180:	d10b      	bne.n	419a <_svfiprintf_r+0x122>
    4182:	7863      	ldrb	r3, [r4, #1]
    4184:	1c62      	adds	r2, r4, #1
    4186:	2b2a      	cmp	r3, #42	; 0x2a
    4188:	d13e      	bne.n	4208 <_svfiprintf_r+0x190>
    418a:	9b05      	ldr	r3, [sp, #20]
    418c:	3402      	adds	r4, #2
    418e:	1d1a      	adds	r2, r3, #4
    4190:	681b      	ldr	r3, [r3, #0]
    4192:	9205      	str	r2, [sp, #20]
    4194:	2b00      	cmp	r3, #0
    4196:	db34      	blt.n	4202 <_svfiprintf_r+0x18a>
    4198:	9307      	str	r3, [sp, #28]
    419a:	4e35      	ldr	r6, [pc, #212]	; (4270 <_svfiprintf_r+0x1f8>)
    419c:	7821      	ldrb	r1, [r4, #0]
    419e:	2203      	movs	r2, #3
    41a0:	0030      	movs	r0, r6
    41a2:	f000 fa07 	bl	45b4 <memchr>
    41a6:	2800      	cmp	r0, #0
    41a8:	d006      	beq.n	41b8 <_svfiprintf_r+0x140>
    41aa:	2340      	movs	r3, #64	; 0x40
    41ac:	1b80      	subs	r0, r0, r6
    41ae:	4083      	lsls	r3, r0
    41b0:	682a      	ldr	r2, [r5, #0]
    41b2:	3401      	adds	r4, #1
    41b4:	4313      	orrs	r3, r2
    41b6:	602b      	str	r3, [r5, #0]
    41b8:	7821      	ldrb	r1, [r4, #0]
    41ba:	2206      	movs	r2, #6
    41bc:	482d      	ldr	r0, [pc, #180]	; (4274 <_svfiprintf_r+0x1fc>)
    41be:	1c66      	adds	r6, r4, #1
    41c0:	7629      	strb	r1, [r5, #24]
    41c2:	f000 f9f7 	bl	45b4 <memchr>
    41c6:	2800      	cmp	r0, #0
    41c8:	d046      	beq.n	4258 <_svfiprintf_r+0x1e0>
    41ca:	4b2b      	ldr	r3, [pc, #172]	; (4278 <_svfiprintf_r+0x200>)
    41cc:	2b00      	cmp	r3, #0
    41ce:	d12f      	bne.n	4230 <_svfiprintf_r+0x1b8>
    41d0:	6829      	ldr	r1, [r5, #0]
    41d2:	9b05      	ldr	r3, [sp, #20]
    41d4:	2207      	movs	r2, #7
    41d6:	05c9      	lsls	r1, r1, #23
    41d8:	d528      	bpl.n	422c <_svfiprintf_r+0x1b4>
    41da:	189b      	adds	r3, r3, r2
    41dc:	4393      	bics	r3, r2
    41de:	3308      	adds	r3, #8
    41e0:	9305      	str	r3, [sp, #20]
    41e2:	696b      	ldr	r3, [r5, #20]
    41e4:	9a03      	ldr	r2, [sp, #12]
    41e6:	189b      	adds	r3, r3, r2
    41e8:	616b      	str	r3, [r5, #20]
    41ea:	e767      	b.n	40bc <_svfiprintf_r+0x44>
    41ec:	425b      	negs	r3, r3
    41ee:	60eb      	str	r3, [r5, #12]
    41f0:	2302      	movs	r3, #2
    41f2:	430b      	orrs	r3, r1
    41f4:	602b      	str	r3, [r5, #0]
    41f6:	e7c0      	b.n	417a <_svfiprintf_r+0x102>
    41f8:	434b      	muls	r3, r1
    41fa:	3401      	adds	r4, #1
    41fc:	189b      	adds	r3, r3, r2
    41fe:	2001      	movs	r0, #1
    4200:	e7a0      	b.n	4144 <_svfiprintf_r+0xcc>
    4202:	2301      	movs	r3, #1
    4204:	425b      	negs	r3, r3
    4206:	e7c7      	b.n	4198 <_svfiprintf_r+0x120>
    4208:	2300      	movs	r3, #0
    420a:	0014      	movs	r4, r2
    420c:	200a      	movs	r0, #10
    420e:	001a      	movs	r2, r3
    4210:	606b      	str	r3, [r5, #4]
    4212:	7821      	ldrb	r1, [r4, #0]
    4214:	3930      	subs	r1, #48	; 0x30
    4216:	2909      	cmp	r1, #9
    4218:	d903      	bls.n	4222 <_svfiprintf_r+0x1aa>
    421a:	2b00      	cmp	r3, #0
    421c:	d0bd      	beq.n	419a <_svfiprintf_r+0x122>
    421e:	9207      	str	r2, [sp, #28]
    4220:	e7bb      	b.n	419a <_svfiprintf_r+0x122>
    4222:	4342      	muls	r2, r0
    4224:	3401      	adds	r4, #1
    4226:	1852      	adds	r2, r2, r1
    4228:	2301      	movs	r3, #1
    422a:	e7f2      	b.n	4212 <_svfiprintf_r+0x19a>
    422c:	3307      	adds	r3, #7
    422e:	e7d5      	b.n	41dc <_svfiprintf_r+0x164>
    4230:	ab05      	add	r3, sp, #20
    4232:	9300      	str	r3, [sp, #0]
    4234:	003a      	movs	r2, r7
    4236:	4b11      	ldr	r3, [pc, #68]	; (427c <_svfiprintf_r+0x204>)
    4238:	0029      	movs	r1, r5
    423a:	9802      	ldr	r0, [sp, #8]
    423c:	e000      	b.n	4240 <_svfiprintf_r+0x1c8>
    423e:	bf00      	nop
    4240:	9003      	str	r0, [sp, #12]
    4242:	9b03      	ldr	r3, [sp, #12]
    4244:	3301      	adds	r3, #1
    4246:	d1cc      	bne.n	41e2 <_svfiprintf_r+0x16a>
    4248:	89bb      	ldrh	r3, [r7, #12]
    424a:	980b      	ldr	r0, [sp, #44]	; 0x2c
    424c:	065b      	lsls	r3, r3, #25
    424e:	d400      	bmi.n	4252 <_svfiprintf_r+0x1da>
    4250:	e729      	b.n	40a6 <_svfiprintf_r+0x2e>
    4252:	2001      	movs	r0, #1
    4254:	4240      	negs	r0, r0
    4256:	e726      	b.n	40a6 <_svfiprintf_r+0x2e>
    4258:	ab05      	add	r3, sp, #20
    425a:	9300      	str	r3, [sp, #0]
    425c:	003a      	movs	r2, r7
    425e:	4b07      	ldr	r3, [pc, #28]	; (427c <_svfiprintf_r+0x204>)
    4260:	0029      	movs	r1, r5
    4262:	9802      	ldr	r0, [sp, #8]
    4264:	f000 f87a 	bl	435c <_printf_i>
    4268:	e7ea      	b.n	4240 <_svfiprintf_r+0x1c8>
    426a:	46c0      	nop			; (mov r8, r8)
    426c:	00004cb0 	.word	0x00004cb0
    4270:	00004cb6 	.word	0x00004cb6
    4274:	00004cba 	.word	0x00004cba
    4278:	00000000 	.word	0x00000000
    427c:	00003fb5 	.word	0x00003fb5

00004280 <_printf_common>:
    4280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    4282:	0015      	movs	r5, r2
    4284:	9301      	str	r3, [sp, #4]
    4286:	688a      	ldr	r2, [r1, #8]
    4288:	690b      	ldr	r3, [r1, #16]
    428a:	9000      	str	r0, [sp, #0]
    428c:	000c      	movs	r4, r1
    428e:	4293      	cmp	r3, r2
    4290:	da00      	bge.n	4294 <_printf_common+0x14>
    4292:	0013      	movs	r3, r2
    4294:	0022      	movs	r2, r4
    4296:	602b      	str	r3, [r5, #0]
    4298:	3243      	adds	r2, #67	; 0x43
    429a:	7812      	ldrb	r2, [r2, #0]
    429c:	2a00      	cmp	r2, #0
    429e:	d001      	beq.n	42a4 <_printf_common+0x24>
    42a0:	3301      	adds	r3, #1
    42a2:	602b      	str	r3, [r5, #0]
    42a4:	6823      	ldr	r3, [r4, #0]
    42a6:	069b      	lsls	r3, r3, #26
    42a8:	d502      	bpl.n	42b0 <_printf_common+0x30>
    42aa:	682b      	ldr	r3, [r5, #0]
    42ac:	3302      	adds	r3, #2
    42ae:	602b      	str	r3, [r5, #0]
    42b0:	2706      	movs	r7, #6
    42b2:	6823      	ldr	r3, [r4, #0]
    42b4:	401f      	ands	r7, r3
    42b6:	d027      	beq.n	4308 <_printf_common+0x88>
    42b8:	0023      	movs	r3, r4
    42ba:	3343      	adds	r3, #67	; 0x43
    42bc:	781b      	ldrb	r3, [r3, #0]
    42be:	1e5a      	subs	r2, r3, #1
    42c0:	4193      	sbcs	r3, r2
    42c2:	6822      	ldr	r2, [r4, #0]
    42c4:	0692      	lsls	r2, r2, #26
    42c6:	d430      	bmi.n	432a <_printf_common+0xaa>
    42c8:	0022      	movs	r2, r4
    42ca:	9901      	ldr	r1, [sp, #4]
    42cc:	3243      	adds	r2, #67	; 0x43
    42ce:	9800      	ldr	r0, [sp, #0]
    42d0:	9e08      	ldr	r6, [sp, #32]
    42d2:	47b0      	blx	r6
    42d4:	1c43      	adds	r3, r0, #1
    42d6:	d025      	beq.n	4324 <_printf_common+0xa4>
    42d8:	2306      	movs	r3, #6
    42da:	6820      	ldr	r0, [r4, #0]
    42dc:	682a      	ldr	r2, [r5, #0]
    42de:	68e1      	ldr	r1, [r4, #12]
    42e0:	4003      	ands	r3, r0
    42e2:	2500      	movs	r5, #0
    42e4:	2b04      	cmp	r3, #4
    42e6:	d103      	bne.n	42f0 <_printf_common+0x70>
    42e8:	1a8d      	subs	r5, r1, r2
    42ea:	43eb      	mvns	r3, r5
    42ec:	17db      	asrs	r3, r3, #31
    42ee:	401d      	ands	r5, r3
    42f0:	68a3      	ldr	r3, [r4, #8]
    42f2:	6922      	ldr	r2, [r4, #16]
    42f4:	4293      	cmp	r3, r2
    42f6:	dd01      	ble.n	42fc <_printf_common+0x7c>
    42f8:	1a9b      	subs	r3, r3, r2
    42fa:	18ed      	adds	r5, r5, r3
    42fc:	2700      	movs	r7, #0
    42fe:	42bd      	cmp	r5, r7
    4300:	d120      	bne.n	4344 <_printf_common+0xc4>
    4302:	2000      	movs	r0, #0
    4304:	e010      	b.n	4328 <_printf_common+0xa8>
    4306:	3701      	adds	r7, #1
    4308:	68e3      	ldr	r3, [r4, #12]
    430a:	682a      	ldr	r2, [r5, #0]
    430c:	1a9b      	subs	r3, r3, r2
    430e:	429f      	cmp	r7, r3
    4310:	dad2      	bge.n	42b8 <_printf_common+0x38>
    4312:	0022      	movs	r2, r4
    4314:	2301      	movs	r3, #1
    4316:	3219      	adds	r2, #25
    4318:	9901      	ldr	r1, [sp, #4]
    431a:	9800      	ldr	r0, [sp, #0]
    431c:	9e08      	ldr	r6, [sp, #32]
    431e:	47b0      	blx	r6
    4320:	1c43      	adds	r3, r0, #1
    4322:	d1f0      	bne.n	4306 <_printf_common+0x86>
    4324:	2001      	movs	r0, #1
    4326:	4240      	negs	r0, r0
    4328:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    432a:	2030      	movs	r0, #48	; 0x30
    432c:	18e1      	adds	r1, r4, r3
    432e:	3143      	adds	r1, #67	; 0x43
    4330:	7008      	strb	r0, [r1, #0]
    4332:	0021      	movs	r1, r4
    4334:	1c5a      	adds	r2, r3, #1
    4336:	3145      	adds	r1, #69	; 0x45
    4338:	7809      	ldrb	r1, [r1, #0]
    433a:	18a2      	adds	r2, r4, r2
    433c:	3243      	adds	r2, #67	; 0x43
    433e:	3302      	adds	r3, #2
    4340:	7011      	strb	r1, [r2, #0]
    4342:	e7c1      	b.n	42c8 <_printf_common+0x48>
    4344:	0022      	movs	r2, r4
    4346:	2301      	movs	r3, #1
    4348:	321a      	adds	r2, #26
    434a:	9901      	ldr	r1, [sp, #4]
    434c:	9800      	ldr	r0, [sp, #0]
    434e:	9e08      	ldr	r6, [sp, #32]
    4350:	47b0      	blx	r6
    4352:	1c43      	adds	r3, r0, #1
    4354:	d0e6      	beq.n	4324 <_printf_common+0xa4>
    4356:	3701      	adds	r7, #1
    4358:	e7d1      	b.n	42fe <_printf_common+0x7e>
	...

0000435c <_printf_i>:
    435c:	b5f0      	push	{r4, r5, r6, r7, lr}
    435e:	b08b      	sub	sp, #44	; 0x2c
    4360:	9206      	str	r2, [sp, #24]
    4362:	000a      	movs	r2, r1
    4364:	3243      	adds	r2, #67	; 0x43
    4366:	9307      	str	r3, [sp, #28]
    4368:	9005      	str	r0, [sp, #20]
    436a:	9204      	str	r2, [sp, #16]
    436c:	7e0a      	ldrb	r2, [r1, #24]
    436e:	000c      	movs	r4, r1
    4370:	9b10      	ldr	r3, [sp, #64]	; 0x40
    4372:	2a6e      	cmp	r2, #110	; 0x6e
    4374:	d100      	bne.n	4378 <_printf_i+0x1c>
    4376:	e08f      	b.n	4498 <_printf_i+0x13c>
    4378:	d817      	bhi.n	43aa <_printf_i+0x4e>
    437a:	2a63      	cmp	r2, #99	; 0x63
    437c:	d02c      	beq.n	43d8 <_printf_i+0x7c>
    437e:	d808      	bhi.n	4392 <_printf_i+0x36>
    4380:	2a00      	cmp	r2, #0
    4382:	d100      	bne.n	4386 <_printf_i+0x2a>
    4384:	e099      	b.n	44ba <_printf_i+0x15e>
    4386:	2a58      	cmp	r2, #88	; 0x58
    4388:	d054      	beq.n	4434 <_printf_i+0xd8>
    438a:	0026      	movs	r6, r4
    438c:	3642      	adds	r6, #66	; 0x42
    438e:	7032      	strb	r2, [r6, #0]
    4390:	e029      	b.n	43e6 <_printf_i+0x8a>
    4392:	2a64      	cmp	r2, #100	; 0x64
    4394:	d001      	beq.n	439a <_printf_i+0x3e>
    4396:	2a69      	cmp	r2, #105	; 0x69
    4398:	d1f7      	bne.n	438a <_printf_i+0x2e>
    439a:	6821      	ldr	r1, [r4, #0]
    439c:	681a      	ldr	r2, [r3, #0]
    439e:	0608      	lsls	r0, r1, #24
    43a0:	d523      	bpl.n	43ea <_printf_i+0x8e>
    43a2:	1d11      	adds	r1, r2, #4
    43a4:	6019      	str	r1, [r3, #0]
    43a6:	6815      	ldr	r5, [r2, #0]
    43a8:	e025      	b.n	43f6 <_printf_i+0x9a>
    43aa:	2a73      	cmp	r2, #115	; 0x73
    43ac:	d100      	bne.n	43b0 <_printf_i+0x54>
    43ae:	e088      	b.n	44c2 <_printf_i+0x166>
    43b0:	d808      	bhi.n	43c4 <_printf_i+0x68>
    43b2:	2a6f      	cmp	r2, #111	; 0x6f
    43b4:	d029      	beq.n	440a <_printf_i+0xae>
    43b6:	2a70      	cmp	r2, #112	; 0x70
    43b8:	d1e7      	bne.n	438a <_printf_i+0x2e>
    43ba:	2220      	movs	r2, #32
    43bc:	6809      	ldr	r1, [r1, #0]
    43be:	430a      	orrs	r2, r1
    43c0:	6022      	str	r2, [r4, #0]
    43c2:	e003      	b.n	43cc <_printf_i+0x70>
    43c4:	2a75      	cmp	r2, #117	; 0x75
    43c6:	d020      	beq.n	440a <_printf_i+0xae>
    43c8:	2a78      	cmp	r2, #120	; 0x78
    43ca:	d1de      	bne.n	438a <_printf_i+0x2e>
    43cc:	0022      	movs	r2, r4
    43ce:	2178      	movs	r1, #120	; 0x78
    43d0:	3245      	adds	r2, #69	; 0x45
    43d2:	7011      	strb	r1, [r2, #0]
    43d4:	4a6c      	ldr	r2, [pc, #432]	; (4588 <_printf_i+0x22c>)
    43d6:	e030      	b.n	443a <_printf_i+0xde>
    43d8:	000e      	movs	r6, r1
    43da:	681a      	ldr	r2, [r3, #0]
    43dc:	3642      	adds	r6, #66	; 0x42
    43de:	1d11      	adds	r1, r2, #4
    43e0:	6019      	str	r1, [r3, #0]
    43e2:	6813      	ldr	r3, [r2, #0]
    43e4:	7033      	strb	r3, [r6, #0]
    43e6:	2301      	movs	r3, #1
    43e8:	e079      	b.n	44de <_printf_i+0x182>
    43ea:	0649      	lsls	r1, r1, #25
    43ec:	d5d9      	bpl.n	43a2 <_printf_i+0x46>
    43ee:	1d11      	adds	r1, r2, #4
    43f0:	6019      	str	r1, [r3, #0]
    43f2:	2300      	movs	r3, #0
    43f4:	5ed5      	ldrsh	r5, [r2, r3]
    43f6:	2d00      	cmp	r5, #0
    43f8:	da03      	bge.n	4402 <_printf_i+0xa6>
    43fa:	232d      	movs	r3, #45	; 0x2d
    43fc:	9a04      	ldr	r2, [sp, #16]
    43fe:	426d      	negs	r5, r5
    4400:	7013      	strb	r3, [r2, #0]
    4402:	4b62      	ldr	r3, [pc, #392]	; (458c <_printf_i+0x230>)
    4404:	270a      	movs	r7, #10
    4406:	9303      	str	r3, [sp, #12]
    4408:	e02f      	b.n	446a <_printf_i+0x10e>
    440a:	6820      	ldr	r0, [r4, #0]
    440c:	6819      	ldr	r1, [r3, #0]
    440e:	0605      	lsls	r5, r0, #24
    4410:	d503      	bpl.n	441a <_printf_i+0xbe>
    4412:	1d08      	adds	r0, r1, #4
    4414:	6018      	str	r0, [r3, #0]
    4416:	680d      	ldr	r5, [r1, #0]
    4418:	e005      	b.n	4426 <_printf_i+0xca>
    441a:	0640      	lsls	r0, r0, #25
    441c:	d5f9      	bpl.n	4412 <_printf_i+0xb6>
    441e:	680d      	ldr	r5, [r1, #0]
    4420:	1d08      	adds	r0, r1, #4
    4422:	6018      	str	r0, [r3, #0]
    4424:	b2ad      	uxth	r5, r5
    4426:	4b59      	ldr	r3, [pc, #356]	; (458c <_printf_i+0x230>)
    4428:	2708      	movs	r7, #8
    442a:	9303      	str	r3, [sp, #12]
    442c:	2a6f      	cmp	r2, #111	; 0x6f
    442e:	d018      	beq.n	4462 <_printf_i+0x106>
    4430:	270a      	movs	r7, #10
    4432:	e016      	b.n	4462 <_printf_i+0x106>
    4434:	3145      	adds	r1, #69	; 0x45
    4436:	700a      	strb	r2, [r1, #0]
    4438:	4a54      	ldr	r2, [pc, #336]	; (458c <_printf_i+0x230>)
    443a:	9203      	str	r2, [sp, #12]
    443c:	681a      	ldr	r2, [r3, #0]
    443e:	6821      	ldr	r1, [r4, #0]
    4440:	1d10      	adds	r0, r2, #4
    4442:	6018      	str	r0, [r3, #0]
    4444:	6815      	ldr	r5, [r2, #0]
    4446:	0608      	lsls	r0, r1, #24
    4448:	d522      	bpl.n	4490 <_printf_i+0x134>
    444a:	07cb      	lsls	r3, r1, #31
    444c:	d502      	bpl.n	4454 <_printf_i+0xf8>
    444e:	2320      	movs	r3, #32
    4450:	4319      	orrs	r1, r3
    4452:	6021      	str	r1, [r4, #0]
    4454:	2710      	movs	r7, #16
    4456:	2d00      	cmp	r5, #0
    4458:	d103      	bne.n	4462 <_printf_i+0x106>
    445a:	2320      	movs	r3, #32
    445c:	6822      	ldr	r2, [r4, #0]
    445e:	439a      	bics	r2, r3
    4460:	6022      	str	r2, [r4, #0]
    4462:	0023      	movs	r3, r4
    4464:	2200      	movs	r2, #0
    4466:	3343      	adds	r3, #67	; 0x43
    4468:	701a      	strb	r2, [r3, #0]
    446a:	6863      	ldr	r3, [r4, #4]
    446c:	60a3      	str	r3, [r4, #8]
    446e:	2b00      	cmp	r3, #0
    4470:	db5c      	blt.n	452c <_printf_i+0x1d0>
    4472:	2204      	movs	r2, #4
    4474:	6821      	ldr	r1, [r4, #0]
    4476:	4391      	bics	r1, r2
    4478:	6021      	str	r1, [r4, #0]
    447a:	2d00      	cmp	r5, #0
    447c:	d158      	bne.n	4530 <_printf_i+0x1d4>
    447e:	9e04      	ldr	r6, [sp, #16]
    4480:	2b00      	cmp	r3, #0
    4482:	d064      	beq.n	454e <_printf_i+0x1f2>
    4484:	0026      	movs	r6, r4
    4486:	9b03      	ldr	r3, [sp, #12]
    4488:	3642      	adds	r6, #66	; 0x42
    448a:	781b      	ldrb	r3, [r3, #0]
    448c:	7033      	strb	r3, [r6, #0]
    448e:	e05e      	b.n	454e <_printf_i+0x1f2>
    4490:	0648      	lsls	r0, r1, #25
    4492:	d5da      	bpl.n	444a <_printf_i+0xee>
    4494:	b2ad      	uxth	r5, r5
    4496:	e7d8      	b.n	444a <_printf_i+0xee>
    4498:	6809      	ldr	r1, [r1, #0]
    449a:	681a      	ldr	r2, [r3, #0]
    449c:	0608      	lsls	r0, r1, #24
    449e:	d505      	bpl.n	44ac <_printf_i+0x150>
    44a0:	1d11      	adds	r1, r2, #4
    44a2:	6019      	str	r1, [r3, #0]
    44a4:	6813      	ldr	r3, [r2, #0]
    44a6:	6962      	ldr	r2, [r4, #20]
    44a8:	601a      	str	r2, [r3, #0]
    44aa:	e006      	b.n	44ba <_printf_i+0x15e>
    44ac:	0649      	lsls	r1, r1, #25
    44ae:	d5f7      	bpl.n	44a0 <_printf_i+0x144>
    44b0:	1d11      	adds	r1, r2, #4
    44b2:	6019      	str	r1, [r3, #0]
    44b4:	6813      	ldr	r3, [r2, #0]
    44b6:	8aa2      	ldrh	r2, [r4, #20]
    44b8:	801a      	strh	r2, [r3, #0]
    44ba:	2300      	movs	r3, #0
    44bc:	9e04      	ldr	r6, [sp, #16]
    44be:	6123      	str	r3, [r4, #16]
    44c0:	e054      	b.n	456c <_printf_i+0x210>
    44c2:	681a      	ldr	r2, [r3, #0]
    44c4:	1d11      	adds	r1, r2, #4
    44c6:	6019      	str	r1, [r3, #0]
    44c8:	6816      	ldr	r6, [r2, #0]
    44ca:	2100      	movs	r1, #0
    44cc:	6862      	ldr	r2, [r4, #4]
    44ce:	0030      	movs	r0, r6
    44d0:	f000 f870 	bl	45b4 <memchr>
    44d4:	2800      	cmp	r0, #0
    44d6:	d001      	beq.n	44dc <_printf_i+0x180>
    44d8:	1b80      	subs	r0, r0, r6
    44da:	6060      	str	r0, [r4, #4]
    44dc:	6863      	ldr	r3, [r4, #4]
    44de:	6123      	str	r3, [r4, #16]
    44e0:	2300      	movs	r3, #0
    44e2:	9a04      	ldr	r2, [sp, #16]
    44e4:	7013      	strb	r3, [r2, #0]
    44e6:	e041      	b.n	456c <_printf_i+0x210>
    44e8:	6923      	ldr	r3, [r4, #16]
    44ea:	0032      	movs	r2, r6
    44ec:	9906      	ldr	r1, [sp, #24]
    44ee:	9805      	ldr	r0, [sp, #20]
    44f0:	9d07      	ldr	r5, [sp, #28]
    44f2:	47a8      	blx	r5
    44f4:	1c43      	adds	r3, r0, #1
    44f6:	d043      	beq.n	4580 <_printf_i+0x224>
    44f8:	6823      	ldr	r3, [r4, #0]
    44fa:	2500      	movs	r5, #0
    44fc:	079b      	lsls	r3, r3, #30
    44fe:	d40f      	bmi.n	4520 <_printf_i+0x1c4>
    4500:	9b09      	ldr	r3, [sp, #36]	; 0x24
    4502:	68e0      	ldr	r0, [r4, #12]
    4504:	4298      	cmp	r0, r3
    4506:	da3d      	bge.n	4584 <_printf_i+0x228>
    4508:	0018      	movs	r0, r3
    450a:	e03b      	b.n	4584 <_printf_i+0x228>
    450c:	0022      	movs	r2, r4
    450e:	2301      	movs	r3, #1
    4510:	3219      	adds	r2, #25
    4512:	9906      	ldr	r1, [sp, #24]
    4514:	9805      	ldr	r0, [sp, #20]
    4516:	9e07      	ldr	r6, [sp, #28]
    4518:	47b0      	blx	r6
    451a:	1c43      	adds	r3, r0, #1
    451c:	d030      	beq.n	4580 <_printf_i+0x224>
    451e:	3501      	adds	r5, #1
    4520:	68e3      	ldr	r3, [r4, #12]
    4522:	9a09      	ldr	r2, [sp, #36]	; 0x24
    4524:	1a9b      	subs	r3, r3, r2
    4526:	429d      	cmp	r5, r3
    4528:	dbf0      	blt.n	450c <_printf_i+0x1b0>
    452a:	e7e9      	b.n	4500 <_printf_i+0x1a4>
    452c:	2d00      	cmp	r5, #0
    452e:	d0a9      	beq.n	4484 <_printf_i+0x128>
    4530:	9e04      	ldr	r6, [sp, #16]
    4532:	0028      	movs	r0, r5
    4534:	0039      	movs	r1, r7
    4536:	f7fd fb8d 	bl	1c54 <__aeabi_uidivmod>
    453a:	9b03      	ldr	r3, [sp, #12]
    453c:	3e01      	subs	r6, #1
    453e:	5c5b      	ldrb	r3, [r3, r1]
    4540:	0028      	movs	r0, r5
    4542:	7033      	strb	r3, [r6, #0]
    4544:	0039      	movs	r1, r7
    4546:	f7fd faff 	bl	1b48 <__udivsi3>
    454a:	1e05      	subs	r5, r0, #0
    454c:	d1f1      	bne.n	4532 <_printf_i+0x1d6>
    454e:	2f08      	cmp	r7, #8
    4550:	d109      	bne.n	4566 <_printf_i+0x20a>
    4552:	6823      	ldr	r3, [r4, #0]
    4554:	07db      	lsls	r3, r3, #31
    4556:	d506      	bpl.n	4566 <_printf_i+0x20a>
    4558:	6863      	ldr	r3, [r4, #4]
    455a:	6922      	ldr	r2, [r4, #16]
    455c:	4293      	cmp	r3, r2
    455e:	dc02      	bgt.n	4566 <_printf_i+0x20a>
    4560:	2330      	movs	r3, #48	; 0x30
    4562:	3e01      	subs	r6, #1
    4564:	7033      	strb	r3, [r6, #0]
    4566:	9b04      	ldr	r3, [sp, #16]
    4568:	1b9b      	subs	r3, r3, r6
    456a:	6123      	str	r3, [r4, #16]
    456c:	9b07      	ldr	r3, [sp, #28]
    456e:	aa09      	add	r2, sp, #36	; 0x24
    4570:	9300      	str	r3, [sp, #0]
    4572:	0021      	movs	r1, r4
    4574:	9b06      	ldr	r3, [sp, #24]
    4576:	9805      	ldr	r0, [sp, #20]
    4578:	f7ff fe82 	bl	4280 <_printf_common>
    457c:	1c43      	adds	r3, r0, #1
    457e:	d1b3      	bne.n	44e8 <_printf_i+0x18c>
    4580:	2001      	movs	r0, #1
    4582:	4240      	negs	r0, r0
    4584:	b00b      	add	sp, #44	; 0x2c
    4586:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4588:	00004cd2 	.word	0x00004cd2
    458c:	00004cc1 	.word	0x00004cc1

00004590 <_sbrk_r>:
    4590:	2300      	movs	r3, #0
    4592:	b570      	push	{r4, r5, r6, lr}
    4594:	4c06      	ldr	r4, [pc, #24]	; (45b0 <_sbrk_r+0x20>)
    4596:	0005      	movs	r5, r0
    4598:	0008      	movs	r0, r1
    459a:	6023      	str	r3, [r4, #0]
    459c:	f7fc f98c 	bl	8b8 <_sbrk>
    45a0:	1c43      	adds	r3, r0, #1
    45a2:	d103      	bne.n	45ac <_sbrk_r+0x1c>
    45a4:	6823      	ldr	r3, [r4, #0]
    45a6:	2b00      	cmp	r3, #0
    45a8:	d000      	beq.n	45ac <_sbrk_r+0x1c>
    45aa:	602b      	str	r3, [r5, #0]
    45ac:	bd70      	pop	{r4, r5, r6, pc}
    45ae:	46c0      	nop			; (mov r8, r8)
    45b0:	20000198 	.word	0x20000198

000045b4 <memchr>:
    45b4:	b2c9      	uxtb	r1, r1
    45b6:	1882      	adds	r2, r0, r2
    45b8:	4290      	cmp	r0, r2
    45ba:	d101      	bne.n	45c0 <memchr+0xc>
    45bc:	2000      	movs	r0, #0
    45be:	4770      	bx	lr
    45c0:	7803      	ldrb	r3, [r0, #0]
    45c2:	428b      	cmp	r3, r1
    45c4:	d0fb      	beq.n	45be <memchr+0xa>
    45c6:	3001      	adds	r0, #1
    45c8:	e7f6      	b.n	45b8 <memchr+0x4>

000045ca <memmove>:
    45ca:	b510      	push	{r4, lr}
    45cc:	4288      	cmp	r0, r1
    45ce:	d902      	bls.n	45d6 <memmove+0xc>
    45d0:	188b      	adds	r3, r1, r2
    45d2:	4298      	cmp	r0, r3
    45d4:	d308      	bcc.n	45e8 <memmove+0x1e>
    45d6:	2300      	movs	r3, #0
    45d8:	429a      	cmp	r2, r3
    45da:	d007      	beq.n	45ec <memmove+0x22>
    45dc:	5ccc      	ldrb	r4, [r1, r3]
    45de:	54c4      	strb	r4, [r0, r3]
    45e0:	3301      	adds	r3, #1
    45e2:	e7f9      	b.n	45d8 <memmove+0xe>
    45e4:	5c8b      	ldrb	r3, [r1, r2]
    45e6:	5483      	strb	r3, [r0, r2]
    45e8:	3a01      	subs	r2, #1
    45ea:	d2fb      	bcs.n	45e4 <memmove+0x1a>
    45ec:	bd10      	pop	{r4, pc}

000045ee <__malloc_lock>:
    45ee:	4770      	bx	lr

000045f0 <__malloc_unlock>:
    45f0:	4770      	bx	lr
	...

000045f4 <_free_r>:
    45f4:	b570      	push	{r4, r5, r6, lr}
    45f6:	0005      	movs	r5, r0
    45f8:	2900      	cmp	r1, #0
    45fa:	d010      	beq.n	461e <_free_r+0x2a>
    45fc:	1f0c      	subs	r4, r1, #4
    45fe:	6823      	ldr	r3, [r4, #0]
    4600:	2b00      	cmp	r3, #0
    4602:	da00      	bge.n	4606 <_free_r+0x12>
    4604:	18e4      	adds	r4, r4, r3
    4606:	0028      	movs	r0, r5
    4608:	f7ff fff1 	bl	45ee <__malloc_lock>
    460c:	4a1d      	ldr	r2, [pc, #116]	; (4684 <_free_r+0x90>)
    460e:	6813      	ldr	r3, [r2, #0]
    4610:	2b00      	cmp	r3, #0
    4612:	d105      	bne.n	4620 <_free_r+0x2c>
    4614:	6063      	str	r3, [r4, #4]
    4616:	6014      	str	r4, [r2, #0]
    4618:	0028      	movs	r0, r5
    461a:	f7ff ffe9 	bl	45f0 <__malloc_unlock>
    461e:	bd70      	pop	{r4, r5, r6, pc}
    4620:	42a3      	cmp	r3, r4
    4622:	d909      	bls.n	4638 <_free_r+0x44>
    4624:	6821      	ldr	r1, [r4, #0]
    4626:	1860      	adds	r0, r4, r1
    4628:	4283      	cmp	r3, r0
    462a:	d1f3      	bne.n	4614 <_free_r+0x20>
    462c:	6818      	ldr	r0, [r3, #0]
    462e:	685b      	ldr	r3, [r3, #4]
    4630:	1841      	adds	r1, r0, r1
    4632:	6021      	str	r1, [r4, #0]
    4634:	e7ee      	b.n	4614 <_free_r+0x20>
    4636:	0013      	movs	r3, r2
    4638:	685a      	ldr	r2, [r3, #4]
    463a:	2a00      	cmp	r2, #0
    463c:	d001      	beq.n	4642 <_free_r+0x4e>
    463e:	42a2      	cmp	r2, r4
    4640:	d9f9      	bls.n	4636 <_free_r+0x42>
    4642:	6819      	ldr	r1, [r3, #0]
    4644:	1858      	adds	r0, r3, r1
    4646:	42a0      	cmp	r0, r4
    4648:	d10b      	bne.n	4662 <_free_r+0x6e>
    464a:	6820      	ldr	r0, [r4, #0]
    464c:	1809      	adds	r1, r1, r0
    464e:	1858      	adds	r0, r3, r1
    4650:	6019      	str	r1, [r3, #0]
    4652:	4282      	cmp	r2, r0
    4654:	d1e0      	bne.n	4618 <_free_r+0x24>
    4656:	6810      	ldr	r0, [r2, #0]
    4658:	6852      	ldr	r2, [r2, #4]
    465a:	1841      	adds	r1, r0, r1
    465c:	6019      	str	r1, [r3, #0]
    465e:	605a      	str	r2, [r3, #4]
    4660:	e7da      	b.n	4618 <_free_r+0x24>
    4662:	42a0      	cmp	r0, r4
    4664:	d902      	bls.n	466c <_free_r+0x78>
    4666:	230c      	movs	r3, #12
    4668:	602b      	str	r3, [r5, #0]
    466a:	e7d5      	b.n	4618 <_free_r+0x24>
    466c:	6821      	ldr	r1, [r4, #0]
    466e:	1860      	adds	r0, r4, r1
    4670:	4282      	cmp	r2, r0
    4672:	d103      	bne.n	467c <_free_r+0x88>
    4674:	6810      	ldr	r0, [r2, #0]
    4676:	6852      	ldr	r2, [r2, #4]
    4678:	1841      	adds	r1, r0, r1
    467a:	6021      	str	r1, [r4, #0]
    467c:	6062      	str	r2, [r4, #4]
    467e:	605c      	str	r4, [r3, #4]
    4680:	e7ca      	b.n	4618 <_free_r+0x24>
    4682:	46c0      	nop			; (mov r8, r8)
    4684:	200000bc 	.word	0x200000bc

00004688 <_realloc_r>:
    4688:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    468a:	0007      	movs	r7, r0
    468c:	000d      	movs	r5, r1
    468e:	0016      	movs	r6, r2
    4690:	2900      	cmp	r1, #0
    4692:	d105      	bne.n	46a0 <_realloc_r+0x18>
    4694:	0011      	movs	r1, r2
    4696:	f7ff fc2f 	bl	3ef8 <_malloc_r>
    469a:	0004      	movs	r4, r0
    469c:	0020      	movs	r0, r4
    469e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    46a0:	2a00      	cmp	r2, #0
    46a2:	d103      	bne.n	46ac <_realloc_r+0x24>
    46a4:	f7ff ffa6 	bl	45f4 <_free_r>
    46a8:	0034      	movs	r4, r6
    46aa:	e7f7      	b.n	469c <_realloc_r+0x14>
    46ac:	f000 f812 	bl	46d4 <_malloc_usable_size_r>
    46b0:	002c      	movs	r4, r5
    46b2:	4286      	cmp	r6, r0
    46b4:	d9f2      	bls.n	469c <_realloc_r+0x14>
    46b6:	0031      	movs	r1, r6
    46b8:	0038      	movs	r0, r7
    46ba:	f7ff fc1d 	bl	3ef8 <_malloc_r>
    46be:	1e04      	subs	r4, r0, #0
    46c0:	d0ec      	beq.n	469c <_realloc_r+0x14>
    46c2:	0029      	movs	r1, r5
    46c4:	0032      	movs	r2, r6
    46c6:	f7ff fbb3 	bl	3e30 <memcpy>
    46ca:	0029      	movs	r1, r5
    46cc:	0038      	movs	r0, r7
    46ce:	f7ff ff91 	bl	45f4 <_free_r>
    46d2:	e7e3      	b.n	469c <_realloc_r+0x14>

000046d4 <_malloc_usable_size_r>:
    46d4:	1f0b      	subs	r3, r1, #4
    46d6:	681b      	ldr	r3, [r3, #0]
    46d8:	1f18      	subs	r0, r3, #4
    46da:	2b00      	cmp	r3, #0
    46dc:	da01      	bge.n	46e2 <_malloc_usable_size_r+0xe>
    46de:	580b      	ldr	r3, [r1, r0]
    46e0:	18c0      	adds	r0, r0, r3
    46e2:	4770      	bx	lr
    46e4:	682f2e2e 	.word	0x682f2e2e
    46e8:	732f6c61 	.word	0x732f6c61
    46ec:	682f6372 	.word	0x682f6372
    46f0:	695f6c61 	.word	0x695f6c61
    46f4:	6d5f6332 	.word	0x6d5f6332
    46f8:	6e79735f 	.word	0x6e79735f
    46fc:	00632e63 	.word	0x00632e63
    4700:	682f2e2e 	.word	0x682f2e2e
    4704:	732f6c61 	.word	0x732f6c61
    4708:	682f6372 	.word	0x682f6372
    470c:	695f6c61 	.word	0x695f6c61
    4710:	00632e6f 	.word	0x00632e6f
    4714:	682f2e2e 	.word	0x682f2e2e
    4718:	732f6c61 	.word	0x732f6c61
    471c:	682f6372 	.word	0x682f6372
    4720:	755f6c61 	.word	0x755f6c61
    4724:	74726173 	.word	0x74726173
    4728:	7973615f 	.word	0x7973615f
    472c:	632e636e 	.word	0x632e636e
    4730:	00000000 	.word	0x00000000
    4734:	682f2e2e 	.word	0x682f2e2e
    4738:	752f6c61 	.word	0x752f6c61
    473c:	736c6974 	.word	0x736c6974
    4740:	6372732f 	.word	0x6372732f
    4744:	6974752f 	.word	0x6974752f
    4748:	725f736c 	.word	0x725f736c
    474c:	62676e69 	.word	0x62676e69
    4750:	65666675 	.word	0x65666675
    4754:	00632e72 	.word	0x00632e72

00004758 <_usarts>:
    4758:	00000005 40100004 00030000 0000fb15     .......@........
    4768:	00000000                                ....

0000476c <_i2cms>:
    476c:	00000001 00200014 00000100 00000022     ...... ....."...
    477c:	00d70000 007a1200                       ......z.

00004784 <_i2css>:
	...

00004794 <sercomspi_regs>:
	...
    47a8:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    47b8:	65735f6c 6d6f6372 0000632e 70696843     l_sercom.c..Chip
    47c8:	6d614e20 09203a65 0a0d7325 00000000      Name: .%s......
    47d8:	756e614d 74636166 72657275 2509203a     Manufacturer: .%
    47e8:	000a0d73 65746e49 63616672 72502065     s...Interface Pr
    47f8:	636f746f 203a6c6f 0d732509 0000000a     otocol: .%s.....
    4808:	70707553 5620796c 20746c6f 3a78614d     Supply Volt Max:
    4818:	2e250920 56206631 00000a0d 70707553      .%.1f V....Supp
    4828:	5620796c 20746c6f 3a6e694d 2e250920     ly Volt Min: .%.
    4838:	56206631 00000a0d 6978614d 206d756d     1f V....Maximum 
    4848:	72727543 3a746e65 2e250920 75206631     Current: .%.1f u
    4858:	000a0d41 2078614d 706d6554 74617265     A...Max Temperat
    4868:	3a657275 2e250920 43206631 00000a0d     ure: .%.1f C....
    4878:	65766944 65562072 6f697372 09203a6e     Diver Version: .
    4888:	2e255609 252e6631 0d64322e 0000000a     .V%.1f.%.2d.....
    4898:	6d65540a 3a432070 322e2520 00000a66     .Temp C: %.2f...
    48a8:	706d6554 203a4620 66322e25 0000000a     Temp F: %.2f....
    48b8:	696d7548 79746964 2e25203a 000a6632     Humidity: %.2f..
    48c8:	20776172 61746164 7830203a 78322e25     raw data: 0x%.2x
    48d8:	0000000a 7265730a 206c6169 626d756e     .....serial numb
    48e8:	3a207265 756c2520 0000000a              er : %lu....

000048f4 <READ_PRECISION>:
    48f4:	00e0f6fd                                ....

000048f8 <HEATER_POWER>:
    48f8:	242f3239 0000151e 34746873 203a7830     92/$....sht40x: 
    4908:	6c696166 74206465 7325206f 000a0d2e     failed to %s....
    4918:	34746873 203a7830 616c6564 736d5f79     sht40x: delay_ms
    4928:	20736920 6c6c756e 00000a0d 34746873      is null....sht4
    4938:	203a7830 5f633269 74696e69 20736920     0x: i2c_init is 
    4948:	6c6c756e 00000a0d 34746873 203a7830     null....sht40x: 
    4958:	5f633269 6e696564 69207469 756e2073     i2c_deinit is nu
    4968:	0a0d6c6c 00000000 34746873 203a7830     ll......sht40x: 
    4978:	5f633269 64616572 20736920 6c6c756e     i2c_read is null
    4988:	00000a0d 34746873 203a7830 5f633269     ....sht40x: i2c_
    4998:	74697277 73692065 6c756e20 000a0d6c     write is null...
    49a8:	74696e69 696c6169 6920657a 00006332     initialize i2c..
    49b8:	692d6564 6974696e 7a696c61 32692065     de-initialize i2
    49c8:	00000063 20746567 20633269 72646461     c...get i2c addr
    49d8:	00737365 20746567 69766564 76206563     ess.get device v
    49e8:	61697261 0000746e 74697277 65742065     ariant..write te
    49f8:	6120706d 6820646e 64696d75 20797469     mp and humidity 
    4a08:	00646d63 64616572 6d657420 6e612070     cmd.read temp an
    4a18:	75682064 6964696d 00007974 74697277     d humidity..writ
    4a28:	49552065 6d632044 00000064 20746567     e UID cmd...get 
    4a38:	00444955 74697277 65682065 72657461     UID.write heater
    4a48:	646d6320 00000000 72206f74 74657365      cmd....to reset
    4a58:	00000000 34544853 00000030 00433249     ....SHT40...I2C.
    4a68:	736e6553 6f697269 0000006e 74696e69     Sensirion...init
    4a78:	696c6169 0000657a 20746573 69766564     ialize..set devi
    4a88:	76206563 61697261 0000746e 20746573     ce variant..set 
    4a98:	69766564 69206563 61206332 65726464     device i2c addre
    4aa8:	00007373 64616572 74616420 00000061     ss..read data...
    4ab8:	64616572 6d617320 20656c70 61746164     read sample data
    4ac8:	00000000 64616572 72657320 206c6169     ....read serial 
    4ad8:	626d756e 00007265 69746361 65746176     number..activate
    4ae8:	61656820 00726574 74666f73 73657220      heater.soft res
    4af8:	73207465 6f736e65 00000072 20746567     et sensor...get 
    4b08:	72646461 00737365 000021b4 00002184     address..!...!..
    4b18:	00002196 000020d8 00002196 0000217a     .!... ...!..z!..
    4b28:	00002196 000020d8 00002184 00002184     .!... ...!...!..
    4b38:	0000217a 000020d8 000020e0 000020e0     z!... ... ... ..
    4b48:	000020e0 0000219c 00002184 00002184     . ...!...!...!..
    4b58:	00002158 0000223c 00002158 0000217a     X!..<"..X!..z!..
    4b68:	00002158 0000223c 00002184 00002184     X!..<"...!...!..
    4b78:	0000217a 0000223c 000020e0 000020e0     z!..<"... ... ..
    4b88:	000020e0 00002246 00002534 00002484     . ..F"..4%...$..
    4b98:	00002484 00002482 00002526 00002526     .$...$..&%..&%..
    4ba8:	0000251c 00002482 00002526 0000251c     .%...$..&%...%..
    4bb8:	00002526 00002482 0000252c 0000252c     &%...$..,%..,%..
    4bc8:	0000252c 000025bc 00002c58 00002c3a     ,%...%..X,..:,..
    4bd8:	00002bf4 00002b12 00002bf4 00002c2c     .+...+...+..,,..
    4be8:	00002bf4 00002b12 00002c3a 00002c3a     .+...+..:,..:,..
    4bf8:	00002c2c 00002b12 00002b0a 00002b0a     ,,...+...+...+..
    4c08:	00002b0a 00002e70 000032b8 00003178     .+..p....2..x1..
    4c18:	00003178 00003174 00003290 00003290     x1..t1...2...2..
    4c28:	00003282 00003174 00003290 00003282     .2..t1...2...2..
    4c38:	00003290 00003174 00003298 00003298     .2..t1...2...2..
    4c48:	00003298 0000349c                       .2...4..

00004c50 <__sf_fake_stderr>:
	...

00004c70 <__sf_fake_stdin>:
	...

00004c90 <__sf_fake_stdout>:
	...
    4cb0:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    4cc0:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    4cd0:	31300046 35343332 39383736 64636261     F.0123456789abcd
    4ce0:	00006665                                ef..

00004ce4 <_init>:
    4ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4ce6:	46c0      	nop			; (mov r8, r8)
    4ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cea:	bc08      	pop	{r3}
    4cec:	469e      	mov	lr, r3
    4cee:	4770      	bx	lr

00004cf0 <__init_array_start>:
    4cf0:	000000dd 	.word	0x000000dd

00004cf4 <_fini>:
    4cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4cf6:	46c0      	nop			; (mov r8, r8)
    4cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
    4cfa:	bc08      	pop	{r3}
    4cfc:	469e      	mov	lr, r3
    4cfe:	4770      	bx	lr

00004d00 <__fini_array_start>:
    4d00:	000000b5 	.word	0x000000b5
