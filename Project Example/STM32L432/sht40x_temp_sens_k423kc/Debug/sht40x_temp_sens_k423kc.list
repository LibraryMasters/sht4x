
sht40x_temp_sens_k423kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007af8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007c4  08007c88  08007c88  00017c88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800844c  0800844c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800844c  0800844c  0001844c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008454  08008454  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008458  08008458  00018458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800845c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001dc  08008638  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08008638  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb95  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023fc  00000000  00000000  0002fda1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  000321a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00032f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002184a  00000000  00000000  00033b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010824  00000000  00000000  000553d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c412d  00000000  00000000  00065bf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00129d23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000489c  00000000  00000000  00129d74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007c70 	.word	0x08007c70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007c70 	.word	0x08007c70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b086      	sub	sp, #24
 8000f50:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f001 f864 	bl	800201e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 f8ef 	bl	8001138 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5a:	f000 f9a3 	bl	80012a4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f5e:	f000 f931 	bl	80011c4 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000f62:	f000 f96f 	bl	8001244 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HAL_Delay(500);
 8000f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f6a:	f001 f8cd 	bl	8002108 <HAL_Delay>

	sht40x_basic_initialize(SHT40_AD1B_VARIANT);
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 ff18 	bl	8001da4 <sht40x_basic_initialize>
	sht40x_info(&sht40xInfo);
 8000f74:	485a      	ldr	r0, [pc, #360]	; (80010e0 <main+0x194>)
 8000f76:	f000 fec9 	bl	8001d0c <sht40x_info>

	sht40x_interface_debug_print("Chip Name: \t%s\r\n", sht40xInfo.chip_name);
 8000f7a:	4959      	ldr	r1, [pc, #356]	; (80010e0 <main+0x194>)
 8000f7c:	4859      	ldr	r0, [pc, #356]	; (80010e4 <main+0x198>)
 8000f7e:	f001 f80e 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Manufacturer: \t%s\r\n",sht40xInfo.manufacturer_name);
 8000f82:	4959      	ldr	r1, [pc, #356]	; (80010e8 <main+0x19c>)
 8000f84:	4859      	ldr	r0, [pc, #356]	; (80010ec <main+0x1a0>)
 8000f86:	f001 f80a 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Interface Protocol: \t%s\r\n", sht40xInfo.interface);
 8000f8a:	4959      	ldr	r1, [pc, #356]	; (80010f0 <main+0x1a4>)
 8000f8c:	4859      	ldr	r0, [pc, #356]	; (80010f4 <main+0x1a8>)
 8000f8e:	f001 f806 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Supply Volt Max: \t%.1f V\r\n",sht40xInfo.supply_voltage_max_v);
 8000f92:	4b53      	ldr	r3, [pc, #332]	; (80010e0 <main+0x194>)
 8000f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fad6 	bl	8000548 <__aeabi_f2d>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4855      	ldr	r0, [pc, #340]	; (80010f8 <main+0x1ac>)
 8000fa2:	f000 fffc 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Supply Volt Min: \t%.1f V\r\n",sht40xInfo.supply_voltage_min_v);
 8000fa6:	4b4e      	ldr	r3, [pc, #312]	; (80010e0 <main+0x194>)
 8000fa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff facc 	bl	8000548 <__aeabi_f2d>
 8000fb0:	4602      	mov	r2, r0
 8000fb2:	460b      	mov	r3, r1
 8000fb4:	4851      	ldr	r0, [pc, #324]	; (80010fc <main+0x1b0>)
 8000fb6:	f000 fff2 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Maximum Current: \t%.1f uA\r\n",sht40xInfo.max_current_ma);
 8000fba:	4b49      	ldr	r3, [pc, #292]	; (80010e0 <main+0x194>)
 8000fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fac2 	bl	8000548 <__aeabi_f2d>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	484d      	ldr	r0, [pc, #308]	; (8001100 <main+0x1b4>)
 8000fca:	f000 ffe8 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Max Temperature: \t%.1f C\r\n",sht40xInfo.temperature_max);
 8000fce:	4b44      	ldr	r3, [pc, #272]	; (80010e0 <main+0x194>)
 8000fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f7ff fab8 	bl	8000548 <__aeabi_f2d>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4849      	ldr	r0, [pc, #292]	; (8001104 <main+0x1b8>)
 8000fde:	f000 ffde 	bl	8001f9e <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Diver Version: \t\tV%.1f.%.2d\r\n",(sht40xInfo.driver_version /1000), (uint8_t)(sht40xInfo.driver_version - (uint8_t)(sht40xInfo.driver_version / 100)*100));
 8000fe2:	4b3f      	ldr	r3, [pc, #252]	; (80010e0 <main+0x194>)
 8000fe4:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8000fe8:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001108 <main+0x1bc>
 8000fec:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000ff0:	ee16 0a90 	vmov	r0, s13
 8000ff4:	f7ff faa8 	bl	8000548 <__aeabi_f2d>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	460b      	mov	r3, r1
 8000ffc:	4938      	ldr	r1, [pc, #224]	; (80010e0 <main+0x194>)
 8000ffe:	ed91 7a0f 	vldr	s14, [r1, #60]	; 0x3c
 8001002:	4937      	ldr	r1, [pc, #220]	; (80010e0 <main+0x194>)
 8001004:	edd1 6a0f 	vldr	s13, [r1, #60]	; 0x3c
 8001008:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800110c <main+0x1c0>
 800100c:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001010:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001014:	edc7 7a01 	vstr	s15, [r7, #4]
 8001018:	7939      	ldrb	r1, [r7, #4]
 800101a:	b2c9      	uxtb	r1, r1
 800101c:	4608      	mov	r0, r1
 800101e:	2164      	movs	r1, #100	; 0x64
 8001020:	fb00 f101 	mul.w	r1, r0, r1
 8001024:	ee07 1a90 	vmov	s15, r1
 8001028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800102c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001030:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001034:	edc7 7a01 	vstr	s15, [r7, #4]
 8001038:	7939      	ldrb	r1, [r7, #4]
 800103a:	b2c9      	uxtb	r1, r1
 800103c:	9100      	str	r1, [sp, #0]
 800103e:	4834      	ldr	r0, [pc, #208]	; (8001110 <main+0x1c4>)
 8001040:	f000 ffad 	bl	8001f9e <sht40x_interface_debug_print>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 8001044:	2120      	movs	r1, #32
 8001046:	4833      	ldr	r0, [pc, #204]	; (8001114 <main+0x1c8>)
 8001048:	f001 faea 	bl	8002620 <HAL_GPIO_TogglePin>
		sht40x_interface_delay_ms(3000);
 800104c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001050:	f000 ff9a 	bl	8001f88 <sht40x_interface_delay_ms>

		err =  sht40x_basic_get_temp_rh(SHT40X_PRECISION_HIGH, &dataRead);                               /**< Take temperature and humidity measurement */
 8001054:	4930      	ldr	r1, [pc, #192]	; (8001118 <main+0x1cc>)
 8001056:	2000      	movs	r0, #0
 8001058:	f000 ff0e 	bl	8001e78 <sht40x_basic_get_temp_rh>
 800105c:	4603      	mov	r3, r0
 800105e:	461a      	mov	r2, r3
 8001060:	4b2e      	ldr	r3, [pc, #184]	; (800111c <main+0x1d0>)
 8001062:	601a      	str	r2, [r3, #0]
		sht40x_interface_debug_print("\nTemp C: %.2f\n", dataRead.temperature_C);
 8001064:	4b2c      	ldr	r3, [pc, #176]	; (8001118 <main+0x1cc>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4618      	mov	r0, r3
 800106a:	f7ff fa6d 	bl	8000548 <__aeabi_f2d>
 800106e:	4602      	mov	r2, r0
 8001070:	460b      	mov	r3, r1
 8001072:	482b      	ldr	r0, [pc, #172]	; (8001120 <main+0x1d4>)
 8001074:	f000 ff93 	bl	8001f9e <sht40x_interface_debug_print>
		sht40x_interface_debug_print("Temp F: %.2f\n", dataRead.temperature_F);
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <main+0x1cc>)
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa63 	bl	8000548 <__aeabi_f2d>
 8001082:	4602      	mov	r2, r0
 8001084:	460b      	mov	r3, r1
 8001086:	4827      	ldr	r0, [pc, #156]	; (8001124 <main+0x1d8>)
 8001088:	f000 ff89 	bl	8001f9e <sht40x_interface_debug_print>
		sht40x_interface_debug_print("Humidity: %.2f\n", dataRead.humidity);
 800108c:	4b22      	ldr	r3, [pc, #136]	; (8001118 <main+0x1cc>)
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	4618      	mov	r0, r3
 8001092:	f7ff fa59 	bl	8000548 <__aeabi_f2d>
 8001096:	4602      	mov	r2, r0
 8001098:	460b      	mov	r3, r1
 800109a:	4823      	ldr	r0, [pc, #140]	; (8001128 <main+0x1dc>)
 800109c:	f000 ff7f 	bl	8001f9e <sht40x_interface_debug_print>

		for(int index = 0; index < RESPONSE_LENGTH; index++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	e00b      	b.n	80010be <main+0x172>
			sht40x_interface_debug_print("raw data: 0x%.2x\n", dataRead.rawData[index]);
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <main+0x1cc>)
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	4413      	add	r3, r2
 80010ac:	330c      	adds	r3, #12
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	4619      	mov	r1, r3
 80010b2:	481e      	ldr	r0, [pc, #120]	; (800112c <main+0x1e0>)
 80010b4:	f000 ff73 	bl	8001f9e <sht40x_interface_debug_print>
		for(int index = 0; index < RESPONSE_LENGTH; index++){
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	3301      	adds	r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	2b05      	cmp	r3, #5
 80010c2:	ddf0      	ble.n	80010a6 <main+0x15a>
		}

		err = sht40x_basic_get_serial_number( (uint32_t*)&UID );                                         /**< Read sensor unique ID (Serial number) */
 80010c4:	481a      	ldr	r0, [pc, #104]	; (8001130 <main+0x1e4>)
 80010c6:	f000 fef5 	bl	8001eb4 <sht40x_basic_get_serial_number>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <main+0x1d0>)
 80010d0:	601a      	str	r2, [r3, #0]
		sht40x_interface_debug_print("\nserial number : %lu\n", UID);
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <main+0x1e4>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4619      	mov	r1, r3
 80010d8:	4816      	ldr	r0, [pc, #88]	; (8001134 <main+0x1e8>)
 80010da:	f000 ff60 	bl	8001f9e <sht40x_interface_debug_print>
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80010de:	e7b1      	b.n	8001044 <main+0xf8>
 80010e0:	200002d0 	.word	0x200002d0
 80010e4:	08007c88 	.word	0x08007c88
 80010e8:	200002da 	.word	0x200002da
 80010ec:	08007c9c 	.word	0x08007c9c
 80010f0:	200002f3 	.word	0x200002f3
 80010f4:	08007cb0 	.word	0x08007cb0
 80010f8:	08007ccc 	.word	0x08007ccc
 80010fc:	08007ce8 	.word	0x08007ce8
 8001100:	08007d04 	.word	0x08007d04
 8001104:	08007d20 	.word	0x08007d20
 8001108:	447a0000 	.word	0x447a0000
 800110c:	42c80000 	.word	0x42c80000
 8001110:	08007d3c 	.word	0x08007d3c
 8001114:	48000400 	.word	0x48000400
 8001118:	20000310 	.word	0x20000310
 800111c:	20000324 	.word	0x20000324
 8001120:	08007d5c 	.word	0x08007d5c
 8001124:	08007d6c 	.word	0x08007d6c
 8001128:	08007d7c 	.word	0x08007d7c
 800112c:	08007d8c 	.word	0x08007d8c
 8001130:	20000328 	.word	0x20000328
 8001134:	08007da0 	.word	0x08007da0

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b096      	sub	sp, #88	; 0x58
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0314 	add.w	r3, r7, #20
 8001142:	2244      	movs	r2, #68	; 0x44
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 fe7a 	bl	8004e40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	463b      	mov	r3, r7
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800115a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800115e:	f002 f811 	bl	8003184 <HAL_PWREx_ControlVoltageScaling>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001168:	f000 f950 	bl	800140c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800116c:	2302      	movs	r3, #2
 800116e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001170:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001174:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001176:	2310      	movs	r3, #16
 8001178:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800117a:	2300      	movs	r3, #0
 800117c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4618      	mov	r0, r3
 8001184:	f002 f854 	bl	8003230 <HAL_RCC_OscConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 800118e:	f000 f93d 	bl	800140c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001192:	230f      	movs	r3, #15
 8001194:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001196:	2301      	movs	r3, #1
 8001198:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011a2:	2300      	movs	r3, #0
 80011a4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011a6:	463b      	mov	r3, r7
 80011a8:	2100      	movs	r1, #0
 80011aa:	4618      	mov	r0, r3
 80011ac:	f002 fc54 	bl	8003a58 <HAL_RCC_ClockConfig>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <SystemClock_Config+0x82>
  {
    Error_Handler();
 80011b6:	f000 f929 	bl	800140c <Error_Handler>
  }
}
 80011ba:	bf00      	nop
 80011bc:	3758      	adds	r7, #88	; 0x58
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
	...

080011c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ca:	4a1c      	ldr	r2, [pc, #112]	; (800123c <MX_I2C1_Init+0x78>)
 80011cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80011ce:	4b1a      	ldr	r3, [pc, #104]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d0:	4a1b      	ldr	r2, [pc, #108]	; (8001240 <MX_I2C1_Init+0x7c>)
 80011d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80011d4:	4b18      	ldr	r3, [pc, #96]	; (8001238 <MX_I2C1_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011da:	4b17      	ldr	r3, [pc, #92]	; (8001238 <MX_I2C1_Init+0x74>)
 80011dc:	2201      	movs	r2, #1
 80011de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_I2C1_Init+0x74>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2C1_Init+0x74>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_I2C1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_I2C1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011fe:	480e      	ldr	r0, [pc, #56]	; (8001238 <MX_I2C1_Init+0x74>)
 8001200:	f001 fa28 	bl	8002654 <HAL_I2C_Init>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800120a:	f000 f8ff 	bl	800140c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800120e:	2100      	movs	r1, #0
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_I2C1_Init+0x74>)
 8001212:	f001 ff11 	bl	8003038 <HAL_I2CEx_ConfigAnalogFilter>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800121c:	f000 f8f6 	bl	800140c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001220:	2100      	movs	r1, #0
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_I2C1_Init+0x74>)
 8001224:	f001 ff53 	bl	80030ce <HAL_I2CEx_ConfigDigitalFilter>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800122e:	f000 f8ed 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	200001f8 	.word	0x200001f8
 800123c:	40005400 	.word	0x40005400
 8001240:	00303d5b 	.word	0x00303d5b

08001244 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001248:	4b14      	ldr	r3, [pc, #80]	; (800129c <MX_USART2_UART_Init+0x58>)
 800124a:	4a15      	ldr	r2, [pc, #84]	; (80012a0 <MX_USART2_UART_Init+0x5c>)
 800124c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001250:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001254:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001256:	4b11      	ldr	r3, [pc, #68]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001258:	2200      	movs	r2, #0
 800125a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <MX_USART2_UART_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001264:	2200      	movs	r2, #0
 8001266:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <MX_USART2_UART_Init+0x58>)
 800126a:	220c      	movs	r2, #12
 800126c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126e:	4b0b      	ldr	r3, [pc, #44]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800127a:	4b08      	ldr	r3, [pc, #32]	; (800129c <MX_USART2_UART_Init+0x58>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001282:	2200      	movs	r2, #0
 8001284:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001286:	4805      	ldr	r0, [pc, #20]	; (800129c <MX_USART2_UART_Init+0x58>)
 8001288:	f003 f8f2 	bl	8004470 <HAL_UART_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001292:	f000 f8bb 	bl	800140c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	2000024c 	.word	0x2000024c
 80012a0:	40004400 	.word	0x40004400

080012a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b088      	sub	sp, #32
 80012a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]
 80012b4:	609a      	str	r2, [r3, #8]
 80012b6:	60da      	str	r2, [r3, #12]
 80012b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ba:	4b22      	ldr	r3, [pc, #136]	; (8001344 <MX_GPIO_Init+0xa0>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012be:	4a21      	ldr	r2, [pc, #132]	; (8001344 <MX_GPIO_Init+0xa0>)
 80012c0:	f043 0301 	orr.w	r3, r3, #1
 80012c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <MX_GPIO_Init+0xa0>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ca:	f003 0301 	and.w	r3, r3, #1
 80012ce:	60bb      	str	r3, [r7, #8]
 80012d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d2:	4b1c      	ldr	r3, [pc, #112]	; (8001344 <MX_GPIO_Init+0xa0>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d6:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <MX_GPIO_Init+0xa0>)
 80012d8:	f043 0302 	orr.w	r3, r3, #2
 80012dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012de:	4b19      	ldr	r3, [pc, #100]	; (8001344 <MX_GPIO_Init+0xa0>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2101      	movs	r1, #1
 80012ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f2:	f001 f97d 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2120      	movs	r1, #32
 80012fa:	4813      	ldr	r0, [pc, #76]	; (8001348 <MX_GPIO_Init+0xa4>)
 80012fc:	f001 f978 	bl	80025f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : RED_LED_Pin */
  GPIO_InitStruct.Pin = RED_LED_Pin;
 8001300:	2301      	movs	r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001304:	2301      	movs	r3, #1
 8001306:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130c:	2300      	movs	r3, #0
 800130e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f000 ffff 	bl	800231c <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_LED_Pin */
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 800131e:	2320      	movs	r3, #32
 8001320:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001322:	2301      	movs	r3, #1
 8001324:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800132e:	f107 030c 	add.w	r3, r7, #12
 8001332:	4619      	mov	r1, r3
 8001334:	4804      	ldr	r0, [pc, #16]	; (8001348 <MX_GPIO_Init+0xa4>)
 8001336:	f000 fff1 	bl	800231c <HAL_GPIO_Init>

}
 800133a:	bf00      	nop
 800133c:	3720      	adds	r7, #32
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40021000 	.word	0x40021000
 8001348:	48000400 	.word	0x48000400

0800134c <serial_print>:
 * @param[in] length is the data size
 * @return
 * @note		none
 * */
void serial_print(const char *pString, uint8_t u8Length)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
 8001354:	460b      	mov	r3, r1
 8001356:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2, (const char *) pString, u8Length, HAL_MAX_DELAY);
 8001358:	78fb      	ldrb	r3, [r7, #3]
 800135a:	b29a      	uxth	r2, r3
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4803      	ldr	r0, [pc, #12]	; (8001370 <serial_print+0x24>)
 8001364:	f003 f8d2 	bl	800450c <HAL_UART_Transmit>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	2000024c 	.word	0x2000024c

08001374 <i2c_write>:
 * 			- 0 sucess
 * 			- 1 failed to write
 * @note	none
 * */
uint8_t i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af02      	add	r7, sp, #8
 800137a:	603a      	str	r2, [r7, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
 8001382:	460b      	mov	r3, r1
 8001384:	71bb      	strb	r3, [r7, #6]
 8001386:	4613      	mov	r3, r2
 8001388:	80bb      	strh	r3, [r7, #4]
    int err;
    err = HAL_I2C_Master_Transmit(&hi2c1, (addr << 1), (uint8_t *)&reg, 1, 1000);
 800138a:	79fb      	ldrb	r3, [r7, #7]
 800138c:	b29b      	uxth	r3, r3
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	b299      	uxth	r1, r3
 8001392:	1dba      	adds	r2, r7, #6
 8001394:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	4807      	ldr	r0, [pc, #28]	; (80013bc <i2c_write+0x48>)
 800139e:	f001 f9e9 	bl	8002774 <HAL_I2C_Master_Transmit>
 80013a2:	4603      	mov	r3, r0
 80013a4:	60fb      	str	r3, [r7, #12]
	if(err != HAL_OK)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <i2c_write+0x3c>
	{
		return 1;				/**< failed */
 80013ac:	2301      	movs	r3, #1
 80013ae:	e000      	b.n	80013b2 <i2c_write+0x3e>
	}
	return 0;                   /**< success */
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3710      	adds	r7, #16
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	200001f8 	.word	0x200001f8

080013c0 <i2c_read>:
 * 			- 1 failed to read
 * @note	none
 * */

uint8_t i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af02      	add	r7, sp, #8
 80013c6:	603a      	str	r2, [r7, #0]
 80013c8:	461a      	mov	r2, r3
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
 80013ce:	460b      	mov	r3, r1
 80013d0:	71bb      	strb	r3, [r7, #6]
 80013d2:	4613      	mov	r3, r2
 80013d4:	80bb      	strh	r3, [r7, #4]
    int err;
	err = HAL_I2C_Master_Receive(&hi2c1, (addr << 1), (uint8_t *)buf, len, 1000);
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	b299      	uxth	r1, r3
 80013de:	88bb      	ldrh	r3, [r7, #4]
 80013e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013e4:	9200      	str	r2, [sp, #0]
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	4807      	ldr	r0, [pc, #28]	; (8001408 <i2c_read+0x48>)
 80013ea:	f001 fab7 	bl	800295c <HAL_I2C_Master_Receive>
 80013ee:	4603      	mov	r3, r0
 80013f0:	60fb      	str	r3, [r7, #12]
	if(err !=  HAL_OK)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <i2c_read+0x3c>
	{
		return 1;				/**< failed */
 80013f8:	2301      	movs	r3, #1
 80013fa:	e000      	b.n	80013fe <i2c_read+0x3e>
	}

	return 0;                   /**< success */
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001f8 	.word	0x200001f8

0800140c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001410:	b672      	cpsid	i
}
 8001412:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001414:	e7fe      	b.n	8001414 <Error_Handler+0x8>
	...

08001418 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001418:	b480      	push	{r7}
 800141a:	b083      	sub	sp, #12
 800141c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141e:	4b0f      	ldr	r3, [pc, #60]	; (800145c <HAL_MspInit+0x44>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	4a0e      	ldr	r2, [pc, #56]	; (800145c <HAL_MspInit+0x44>)
 8001424:	f043 0301 	orr.w	r3, r3, #1
 8001428:	6613      	str	r3, [r2, #96]	; 0x60
 800142a:	4b0c      	ldr	r3, [pc, #48]	; (800145c <HAL_MspInit+0x44>)
 800142c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800142e:	f003 0301 	and.w	r3, r3, #1
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	4b09      	ldr	r3, [pc, #36]	; (800145c <HAL_MspInit+0x44>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_MspInit+0x44>)
 800143c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001440:	6593      	str	r3, [r2, #88]	; 0x58
 8001442:	4b06      	ldr	r3, [pc, #24]	; (800145c <HAL_MspInit+0x44>)
 8001444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144e:	bf00      	nop
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b09e      	sub	sp, #120	; 0x78
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	2254      	movs	r2, #84	; 0x54
 800147e:	2100      	movs	r1, #0
 8001480:	4618      	mov	r0, r3
 8001482:	f003 fcdd 	bl	8004e40 <memset>
  if(hi2c->Instance==I2C1)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1e      	ldr	r2, [pc, #120]	; (8001504 <HAL_I2C_MspInit+0xa4>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d135      	bne.n	80014fc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001490:	2340      	movs	r3, #64	; 0x40
 8001492:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001494:	2300      	movs	r3, #0
 8001496:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	4618      	mov	r0, r3
 800149e:	f002 fcff 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80014a8:	f7ff ffb0 	bl	800140c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	4b16      	ldr	r3, [pc, #88]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 80014ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b0:	4a15      	ldr	r2, [pc, #84]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 80014b2:	f043 0302 	orr.w	r3, r3, #2
 80014b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014b8:	4b13      	ldr	r3, [pc, #76]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 80014ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014bc:	f003 0302 	and.w	r3, r3, #2
 80014c0:	60fb      	str	r3, [r7, #12]
 80014c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80014c4:	23c0      	movs	r3, #192	; 0xc0
 80014c6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014c8:	2312      	movs	r3, #18
 80014ca:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014cc:	2300      	movs	r3, #0
 80014ce:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d0:	2303      	movs	r3, #3
 80014d2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014d4:	2304      	movs	r3, #4
 80014d6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80014dc:	4619      	mov	r1, r3
 80014de:	480b      	ldr	r0, [pc, #44]	; (800150c <HAL_I2C_MspInit+0xac>)
 80014e0:	f000 ff1c 	bl	800231c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 80014e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014e8:	4a07      	ldr	r2, [pc, #28]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 80014ea:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014ee:	6593      	str	r3, [r2, #88]	; 0x58
 80014f0:	4b05      	ldr	r3, [pc, #20]	; (8001508 <HAL_I2C_MspInit+0xa8>)
 80014f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014f8:	60bb      	str	r3, [r7, #8]
 80014fa:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014fc:	bf00      	nop
 80014fe:	3778      	adds	r7, #120	; 0x78
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40005400 	.word	0x40005400
 8001508:	40021000 	.word	0x40021000
 800150c:	48000400 	.word	0x48000400

08001510 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b09e      	sub	sp, #120	; 0x78
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001518:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001528:	f107 0310 	add.w	r3, r7, #16
 800152c:	2254      	movs	r2, #84	; 0x54
 800152e:	2100      	movs	r1, #0
 8001530:	4618      	mov	r0, r3
 8001532:	f003 fc85 	bl	8004e40 <memset>
  if(huart->Instance==USART2)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a1f      	ldr	r2, [pc, #124]	; (80015b8 <HAL_UART_MspInit+0xa8>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d136      	bne.n	80015ae <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001540:	2302      	movs	r3, #2
 8001542:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001544:	2300      	movs	r3, #0
 8001546:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001548:	f107 0310 	add.w	r3, r7, #16
 800154c:	4618      	mov	r0, r3
 800154e:	f002 fca7 	bl	8003ea0 <HAL_RCCEx_PeriphCLKConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001558:	f7ff ff58 	bl	800140c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_UART_MspInit+0xac>)
 800155e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_UART_MspInit+0xac>)
 8001562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001566:	6593      	str	r3, [r2, #88]	; 0x58
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_UART_MspInit+0xac>)
 800156a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	4b11      	ldr	r3, [pc, #68]	; (80015bc <HAL_UART_MspInit+0xac>)
 8001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001578:	4a10      	ldr	r2, [pc, #64]	; (80015bc <HAL_UART_MspInit+0xac>)
 800157a:	f043 0301 	orr.w	r3, r3, #1
 800157e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001580:	4b0e      	ldr	r3, [pc, #56]	; (80015bc <HAL_UART_MspInit+0xac>)
 8001582:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001584:	f003 0301 	and.w	r3, r3, #1
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800158c:	230c      	movs	r3, #12
 800158e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800159c:	2307      	movs	r3, #7
 800159e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015a4:	4619      	mov	r1, r3
 80015a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015aa:	f000 feb7 	bl	800231c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015ae:	bf00      	nop
 80015b0:	3778      	adds	r7, #120	; 0x78
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40004400 	.word	0x40004400
 80015bc:	40021000 	.word	0x40021000

080015c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015c4:	e7fe      	b.n	80015c4 <NMI_Handler+0x4>

080015c6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015c6:	b480      	push	{r7}
 80015c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ca:	e7fe      	b.n	80015ca <HardFault_Handler+0x4>

080015cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015cc:	b480      	push	{r7}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <MemManage_Handler+0x4>

080015d2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015d2:	b480      	push	{r7}
 80015d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015d6:	e7fe      	b.n	80015d6 <BusFault_Handler+0x4>

080015d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015dc:	e7fe      	b.n	80015dc <UsageFault_Handler+0x4>

080015de <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f0:	bf00      	nop
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800160c:	f000 fd5c 	bl	80020c8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}

08001614 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
	return 1;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr

08001624 <_kill>:

int _kill(int pid, int sig)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b082      	sub	sp, #8
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800162e:	f003 fbdd 	bl	8004dec <__errno>
 8001632:	4603      	mov	r3, r0
 8001634:	2216      	movs	r2, #22
 8001636:	601a      	str	r2, [r3, #0]
	return -1;
 8001638:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163c:	4618      	mov	r0, r3
 800163e:	3708      	adds	r7, #8
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}

08001644 <_exit>:

void _exit (int status)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800164c:	f04f 31ff 	mov.w	r1, #4294967295
 8001650:	6878      	ldr	r0, [r7, #4]
 8001652:	f7ff ffe7 	bl	8001624 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001656:	e7fe      	b.n	8001656 <_exit+0x12>

08001658 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b086      	sub	sp, #24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]
 8001668:	e00a      	b.n	8001680 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800166a:	f3af 8000 	nop.w
 800166e:	4601      	mov	r1, r0
 8001670:	68bb      	ldr	r3, [r7, #8]
 8001672:	1c5a      	adds	r2, r3, #1
 8001674:	60ba      	str	r2, [r7, #8]
 8001676:	b2ca      	uxtb	r2, r1
 8001678:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	3301      	adds	r3, #1
 800167e:	617b      	str	r3, [r7, #20]
 8001680:	697a      	ldr	r2, [r7, #20]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	429a      	cmp	r2, r3
 8001686:	dbf0      	blt.n	800166a <_read+0x12>
	}

return len;
 8001688:	687b      	ldr	r3, [r7, #4]
}
 800168a:	4618      	mov	r0, r3
 800168c:	3718      	adds	r7, #24
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}

08001692 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001692:	b580      	push	{r7, lr}
 8001694:	b086      	sub	sp, #24
 8001696:	af00      	add	r7, sp, #0
 8001698:	60f8      	str	r0, [r7, #12]
 800169a:	60b9      	str	r1, [r7, #8]
 800169c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800169e:	2300      	movs	r3, #0
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	e009      	b.n	80016b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	1c5a      	adds	r2, r3, #1
 80016a8:	60ba      	str	r2, [r7, #8]
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	4618      	mov	r0, r3
 80016ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	3301      	adds	r3, #1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	429a      	cmp	r2, r3
 80016be:	dbf1      	blt.n	80016a4 <_write+0x12>
	}
	return len;
 80016c0:	687b      	ldr	r3, [r7, #4]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3718      	adds	r7, #24
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}

080016ca <_close>:

int _close(int file)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
	return -1;
 80016d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	370c      	adds	r7, #12
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
 80016ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016f2:	605a      	str	r2, [r3, #4]
	return 0;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
	return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001718:	b480      	push	{r7}
 800171a:	b085      	sub	sp, #20
 800171c:	af00      	add	r7, sp, #0
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	60b9      	str	r1, [r7, #8]
 8001722:	607a      	str	r2, [r7, #4]
	return 0;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3714      	adds	r7, #20
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800173c:	4a14      	ldr	r2, [pc, #80]	; (8001790 <_sbrk+0x5c>)
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <_sbrk+0x60>)
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001748:	4b13      	ldr	r3, [pc, #76]	; (8001798 <_sbrk+0x64>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d102      	bne.n	8001756 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001750:	4b11      	ldr	r3, [pc, #68]	; (8001798 <_sbrk+0x64>)
 8001752:	4a12      	ldr	r2, [pc, #72]	; (800179c <_sbrk+0x68>)
 8001754:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001756:	4b10      	ldr	r3, [pc, #64]	; (8001798 <_sbrk+0x64>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	4413      	add	r3, r2
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	429a      	cmp	r2, r3
 8001762:	d207      	bcs.n	8001774 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001764:	f003 fb42 	bl	8004dec <__errno>
 8001768:	4603      	mov	r3, r0
 800176a:	220c      	movs	r2, #12
 800176c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176e:	f04f 33ff 	mov.w	r3, #4294967295
 8001772:	e009      	b.n	8001788 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <_sbrk+0x64>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177a:	4b07      	ldr	r3, [pc, #28]	; (8001798 <_sbrk+0x64>)
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4413      	add	r3, r2
 8001782:	4a05      	ldr	r2, [pc, #20]	; (8001798 <_sbrk+0x64>)
 8001784:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001786:	68fb      	ldr	r3, [r7, #12]
}
 8001788:	4618      	mov	r0, r3
 800178a:	3718      	adds	r7, #24
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	20010000 	.word	0x20010000
 8001794:	00000400 	.word	0x00000400
 8001798:	2000032c 	.word	0x2000032c
 800179c:	20000368 	.word	0x20000368

080017a0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <SystemInit+0x20>)
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <SystemInit+0x20>)
 80017ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017b4:	bf00      	nop
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017c8:	f7ff ffea 	bl	80017a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017cc:	480c      	ldr	r0, [pc, #48]	; (8001800 <LoopForever+0x6>)
  ldr r1, =_edata
 80017ce:	490d      	ldr	r1, [pc, #52]	; (8001804 <LoopForever+0xa>)
  ldr r2, =_sidata
 80017d0:	4a0d      	ldr	r2, [pc, #52]	; (8001808 <LoopForever+0xe>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0a      	ldr	r2, [pc, #40]	; (800180c <LoopForever+0x12>)
  ldr r4, =_ebss
 80017e4:	4c0a      	ldr	r4, [pc, #40]	; (8001810 <LoopForever+0x16>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017f2:	f003 fb01 	bl	8004df8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80017f6:	f7ff fba9 	bl	8000f4c <main>

080017fa <LoopForever>:

LoopForever:
    b LoopForever
 80017fa:	e7fe      	b.n	80017fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80017fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001800:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001804:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001808:	0800845c 	.word	0x0800845c
  ldr r2, =_sbss
 800180c:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001810:	20000364 	.word	0x20000364

08001814 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001814:	e7fe      	b.n	8001814 <ADC1_IRQHandler>

08001816 <a_sht40x_i2c_write>:
            - 0 success
            - 1 failed to write
* @note none
*/
uint8_t a_sht40x_i2c_write(sht40x_handle_t *const pHandle, uint8_t u8Reg, void *pBuf, uint8_t u8Length)
{
 8001816:	b590      	push	{r4, r7, lr}
 8001818:	b085      	sub	sp, #20
 800181a:	af00      	add	r7, sp, #0
 800181c:	60f8      	str	r0, [r7, #12]
 800181e:	607a      	str	r2, [r7, #4]
 8001820:	461a      	mov	r2, r3
 8001822:	460b      	mov	r3, r1
 8001824:	72fb      	strb	r3, [r7, #11]
 8001826:	4613      	mov	r3, r2
 8001828:	72bb      	strb	r3, [r7, #10]
    if(pHandle->i2c_write(pHandle->i2c_address, u8Reg, (uint8_t*)pBuf, u8Length) !=  0)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	68dc      	ldr	r4, [r3, #12]
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	7e18      	ldrb	r0, [r3, #24]
 8001832:	7abb      	ldrb	r3, [r7, #10]
 8001834:	b29b      	uxth	r3, r3
 8001836:	7af9      	ldrb	r1, [r7, #11]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	47a0      	blx	r4
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <a_sht40x_i2c_write+0x30>
    {
        return 1;                                      /**< return an error if failed to execute */
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <a_sht40x_i2c_write+0x32>
    }
    return 0;                                          /**< return success */
 8001846:	2300      	movs	r3, #0
}
 8001848:	4618      	mov	r0, r3
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <a_sht40x_i2c_read>:
*          - 1 failed to read
* @note none
*/

uint8_t a_sht40x_i2c_read(sht40x_handle_t  *const pHandle, uint16_t u8Reg, void *pBuf, uint8_t u8Length)
{
 8001850:	b590      	push	{r4, r7, lr}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	607a      	str	r2, [r7, #4]
 800185a:	461a      	mov	r2, r3
 800185c:	460b      	mov	r3, r1
 800185e:	817b      	strh	r3, [r7, #10]
 8001860:	4613      	mov	r3, r2
 8001862:	727b      	strb	r3, [r7, #9]
    if(pHandle->i2c_read(pHandle->i2c_address, u8Reg, (uint8_t*)pBuf, u8Length) != 0)
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	689c      	ldr	r4, [r3, #8]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	7e18      	ldrb	r0, [r3, #24]
 800186c:	897b      	ldrh	r3, [r7, #10]
 800186e:	b2d9      	uxtb	r1, r3
 8001870:	7a7b      	ldrb	r3, [r7, #9]
 8001872:	b29b      	uxth	r3, r3
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	47a0      	blx	r4
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <a_sht40x_i2c_read+0x32>
    {
        return 1;                                       /**< return an error if failed to execute */
 800187e:	2301      	movs	r3, #1
 8001880:	e000      	b.n	8001884 <a_sht40x_i2c_read+0x34>
    }
    return 0;                                           /**< return success */
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	bd90      	pop	{r4, r7, pc}

0800188c <a_sht40x_print_error_msg>:
* @param[in] *pBuffer point to the string to be printed
* @return none
* @note   none
*/
void a_sht40x_print_error_msg(sht40x_handle_t *const pHandle, char *const pBuffer)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
#ifdef SHT40X_DEBUG_MODE
    pHandle->debug_print("sht40x: failed to %s.\r\n", pBuffer);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	6839      	ldr	r1, [r7, #0]
 800189c:	4802      	ldr	r0, [pc, #8]	; (80018a8 <a_sht40x_print_error_msg+0x1c>)
 800189e:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	08007db8 	.word	0x08007db8

080018ac <sht40x_init>:
 *            - 2 pHandle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t sht40x_init(sht40x_handle_t *pHandle)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b082      	sub	sp, #8
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]

    if(pHandle == NULL)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d101      	bne.n	80018be <sht40x_init+0x12>
        return 2;     /**< return failed error */
 80018ba:	2302      	movs	r3, #2
 80018bc:	e047      	b.n	800194e <sht40x_init+0xa2>
    if(pHandle->debug_print == NULL)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <sht40x_init+0x1e>
        return 3;      /**< return failed error */
 80018c6:	2303      	movs	r3, #3
 80018c8:	e041      	b.n	800194e <sht40x_init+0xa2>

    if(pHandle->delay_ms == NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	691b      	ldr	r3, [r3, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d105      	bne.n	80018de <sht40x_init+0x32>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: delay_ms is null\r\n");
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	695b      	ldr	r3, [r3, #20]
 80018d6:	4820      	ldr	r0, [pc, #128]	; (8001958 <sht40x_init+0xac>)
 80018d8:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
        return 3;
 80018da:	2303      	movs	r3, #3
 80018dc:	e037      	b.n	800194e <sht40x_init+0xa2>
    }

    if(pHandle->i2c_init == NULL )
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d105      	bne.n	80018f2 <sht40x_init+0x46>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_init is null\r\n");
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	695b      	ldr	r3, [r3, #20]
 80018ea:	481c      	ldr	r0, [pc, #112]	; (800195c <sht40x_init+0xb0>)
 80018ec:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
        return 3;
 80018ee:	2303      	movs	r3, #3
 80018f0:	e02d      	b.n	800194e <sht40x_init+0xa2>
    }

    if(pHandle->i2c_deinit == NULL )
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <sht40x_init+0x5a>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_deinit is null\r\n");
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	695b      	ldr	r3, [r3, #20]
 80018fe:	4818      	ldr	r0, [pc, #96]	; (8001960 <sht40x_init+0xb4>)
 8001900:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
        return 3;
 8001902:	2303      	movs	r3, #3
 8001904:	e023      	b.n	800194e <sht40x_init+0xa2>
    }

    if(pHandle->i2c_read == NULL )
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d105      	bne.n	800191a <sht40x_init+0x6e>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_read is null\r\n");
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	695b      	ldr	r3, [r3, #20]
 8001912:	4814      	ldr	r0, [pc, #80]	; (8001964 <sht40x_init+0xb8>)
 8001914:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
        return 3;
 8001916:	2303      	movs	r3, #3
 8001918:	e019      	b.n	800194e <sht40x_init+0xa2>
    }

    if(pHandle->i2c_write == NULL )
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	68db      	ldr	r3, [r3, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d105      	bne.n	800192e <sht40x_init+0x82>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_write is null\r\n");
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	4810      	ldr	r0, [pc, #64]	; (8001968 <sht40x_init+0xbc>)
 8001928:	4798      	blx	r3
#endif // SHT40X_DEBUG_MODE
        return 3;
 800192a:	2303      	movs	r3, #3
 800192c:	e00f      	b.n	800194e <sht40x_init+0xa2>
    }

    if(pHandle->i2c_init())
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4798      	blx	r3
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <sht40x_init+0x9a>
    {
        a_sht40x_print_error_msg(pHandle, "initialize i2c");
 800193a:	490c      	ldr	r1, [pc, #48]	; (800196c <sht40x_init+0xc0>)
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f7ff ffa5 	bl	800188c <a_sht40x_print_error_msg>
        return 1 ;
 8001942:	2301      	movs	r3, #1
 8001944:	e003      	b.n	800194e <sht40x_init+0xa2>
    }
    pHandle->inited = 1;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2201      	movs	r2, #1
 800194a:	769a      	strb	r2, [r3, #26]
    return 0;                   /**< return success */
 800194c:	2300      	movs	r3, #0
}
 800194e:	4618      	mov	r0, r3
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}
 8001956:	bf00      	nop
 8001958:	08007dd0 	.word	0x08007dd0
 800195c:	08007dec 	.word	0x08007dec
 8001960:	08007e08 	.word	0x08007e08
 8001964:	08007e28 	.word	0x08007e28
 8001968:	08007e44 	.word	0x08007e44
 800196c:	08007e60 	.word	0x08007e60

08001970 <sht40x_set_addr>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_set_addr(sht40x_handle_t *const pHandle)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]

    if(pHandle == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <sht40x_set_addr+0x12>
        return 2;     /**< return failed error */
 800197e:	2302      	movs	r3, #2
 8001980:	e016      	b.n	80019b0 <sht40x_set_addr+0x40>
    if(pHandle->inited != 1)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e9b      	ldrb	r3, [r3, #26]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d001      	beq.n	800198e <sht40x_set_addr+0x1e>
        return 3;      /**< return failed error */
 800198a:	2303      	movs	r3, #3
 800198c:	e010      	b.n	80019b0 <sht40x_set_addr+0x40>

    pHandle->i2c_address = pHandle->addres;
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	7eda      	ldrb	r2, [r3, #27]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	761a      	strb	r2, [r3, #24]
    if(pHandle->i2c_address !=  pHandle->addres)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7e1a      	ldrb	r2, [r3, #24]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	7edb      	ldrb	r3, [r3, #27]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d005      	beq.n	80019ae <sht40x_set_addr+0x3e>
    {
        a_sht40x_print_error_msg(pHandle, "set i2c address");
 80019a2:	4905      	ldr	r1, [pc, #20]	; (80019b8 <sht40x_set_addr+0x48>)
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff71 	bl	800188c <a_sht40x_print_error_msg>
        return 1;           /*< failed */
 80019aa:	2301      	movs	r3, #1
 80019ac:	e000      	b.n	80019b0 <sht40x_set_addr+0x40>
    }

    return 0;     /*< success */
 80019ae:	2300      	movs	r3, #0
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	3708      	adds	r7, #8
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}
 80019b8:	08007e84 	.word	0x08007e84

080019bc <sht40x_set_variant>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_set_variant(sht40x_handle_t *const pHandle, sht40x_variant_t variant)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]

    if(pHandle == NULL)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d101      	bne.n	80019d2 <sht40x_set_variant+0x16>
        return 2;     /**< return failed error */
 80019ce:	2302      	movs	r3, #2
 80019d0:	e033      	b.n	8001a3a <sht40x_set_variant+0x7e>
    if(pHandle->inited != 1)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	7e9b      	ldrb	r3, [r3, #26]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d001      	beq.n	80019de <sht40x_set_variant+0x22>
        return 3;      /**< return failed error */
 80019da:	2303      	movs	r3, #3
 80019dc:	e02d      	b.n	8001a3a <sht40x_set_variant+0x7e>

    pHandle->variant = variant;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	78fa      	ldrb	r2, [r7, #3]
 80019e2:	765a      	strb	r2, [r3, #25]
    if(pHandle->variant != variant)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e5b      	ldrb	r3, [r3, #25]
 80019e8:	78fa      	ldrb	r2, [r7, #3]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d005      	beq.n	80019fa <sht40x_set_variant+0x3e>
    {
        a_sht40x_print_error_msg(pHandle, "set device variant");
 80019ee:	4915      	ldr	r1, [pc, #84]	; (8001a44 <sht40x_set_variant+0x88>)
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f7ff ff4b 	bl	800188c <a_sht40x_print_error_msg>
        return 1;   /**< failed*/
 80019f6:	2301      	movs	r3, #1
 80019f8:	e01f      	b.n	8001a3a <sht40x_set_variant+0x7e>
    }

    switch(variant)
 80019fa:	78fb      	ldrb	r3, [r7, #3]
 80019fc:	2b03      	cmp	r3, #3
 80019fe:	d81b      	bhi.n	8001a38 <sht40x_set_variant+0x7c>
 8001a00:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <sht40x_set_variant+0x4c>)
 8001a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a06:	bf00      	nop
 8001a08:	08001a19 	.word	0x08001a19
 8001a0c:	08001a21 	.word	0x08001a21
 8001a10:	08001a29 	.word	0x08001a29
 8001a14:	08001a31 	.word	0x08001a31
    {

        case SHT40_AD1B_VARIANT:
        {
            pHandle->addres = (sht40x_i2c_address_t)SHT40_AD1B_IIC_ADDRESS;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2244      	movs	r2, #68	; 0x44
 8001a1c:	76da      	strb	r2, [r3, #27]
            break;
 8001a1e:	e00b      	b.n	8001a38 <sht40x_set_variant+0x7c>
        }


        case SHT40_BD1B_VARIANT:
        {
            pHandle->addres = (sht40x_i2c_address_t)SHT40_BD1B_IIC_ADDRESS;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2245      	movs	r2, #69	; 0x45
 8001a24:	76da      	strb	r2, [r3, #27]
            break;
 8001a26:	e007      	b.n	8001a38 <sht40x_set_variant+0x7c>
        }


        case SHT41_AD1B_VARIANT:
        {
            pHandle->addres = (sht40x_i2c_address_t)SHT41_AD1B_IIC_ADDRESS;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2244      	movs	r2, #68	; 0x44
 8001a2c:	76da      	strb	r2, [r3, #27]
            break;
 8001a2e:	e003      	b.n	8001a38 <sht40x_set_variant+0x7c>
        }


        case SHT45_AD1B_VARIANT:
        {
            pHandle->addres = (sht40x_i2c_address_t)SHT45_AD1B_IIC_ADDRESS;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2244      	movs	r2, #68	; 0x44
 8001a34:	76da      	strb	r2, [r3, #27]
            break;
 8001a36:	bf00      	nop
        }

    }

    return 0;   /**< success */
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	08007ea4 	.word	0x08007ea4

08001a48 <sht40x_get_temp_rh>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_get_temp_rh(sht40x_handle_t *const pHandle,  sht40x_precision_t precision, sht40x_data_t *pData)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	460b      	mov	r3, r1
 8001a52:	607a      	str	r2, [r7, #4]
 8001a54:	72fb      	strb	r3, [r7, #11]
    uint8_t err;
    uint8_t pStatus[RESPONSE_LENGTH];

    if(pHandle == NULL)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <sht40x_get_temp_rh+0x18>
        return 2;     /**< return failed error */
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	e0c9      	b.n	8001bf4 <sht40x_get_temp_rh+0x1ac>
    if(pHandle->inited != 1)
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	7e9b      	ldrb	r3, [r3, #26]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d001      	beq.n	8001a6c <sht40x_get_temp_rh+0x24>
        return 3;      /**< return failed error */
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e0c3      	b.n	8001bf4 <sht40x_get_temp_rh+0x1ac>

    err = a_sht40x_i2c_write(pHandle, READ_PRECISION[precision], DUMMY_DATA, 0);
 8001a6c:	7afb      	ldrb	r3, [r7, #11]
 8001a6e:	4a68      	ldr	r2, [pc, #416]	; (8001c10 <sht40x_get_temp_rh+0x1c8>)
 8001a70:	5cd1      	ldrb	r1, [r2, r3]
 8001a72:	2300      	movs	r3, #0
 8001a74:	2200      	movs	r2, #0
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	f7ff fecd 	bl	8001816 <a_sht40x_i2c_write>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	75fb      	strb	r3, [r7, #23]
    if(err)
 8001a80:	7dfb      	ldrb	r3, [r7, #23]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d005      	beq.n	8001a92 <sht40x_get_temp_rh+0x4a>
    {
        a_sht40x_print_error_msg(pHandle, "write temp and humidity cmd");
 8001a86:	4963      	ldr	r1, [pc, #396]	; (8001c14 <sht40x_get_temp_rh+0x1cc>)
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	f7ff feff 	bl	800188c <a_sht40x_print_error_msg>
        return err;  /**< failed*/
 8001a8e:	7dfb      	ldrb	r3, [r7, #23]
 8001a90:	e0b0      	b.n	8001bf4 <sht40x_get_temp_rh+0x1ac>
    }

    pHandle->delay_ms(10);      /**< wait 10 ms for conversion to complete */
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	691b      	ldr	r3, [r3, #16]
 8001a96:	200a      	movs	r0, #10
 8001a98:	4798      	blx	r3

    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)pStatus, RESPONSE_LENGTH);  /**< read result */
 8001a9a:	f107 0210 	add.w	r2, r7, #16
 8001a9e:	2306      	movs	r3, #6
 8001aa0:	2100      	movs	r1, #0
 8001aa2:	68f8      	ldr	r0, [r7, #12]
 8001aa4:	f7ff fed4 	bl	8001850 <a_sht40x_i2c_read>
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	75fb      	strb	r3, [r7, #23]
    if(err)
 8001aac:	7dfb      	ldrb	r3, [r7, #23]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d005      	beq.n	8001abe <sht40x_get_temp_rh+0x76>
    {
        a_sht40x_print_error_msg(pHandle, "read temp and humidity");
 8001ab2:	4959      	ldr	r1, [pc, #356]	; (8001c18 <sht40x_get_temp_rh+0x1d0>)
 8001ab4:	68f8      	ldr	r0, [r7, #12]
 8001ab6:	f7ff fee9 	bl	800188c <a_sht40x_print_error_msg>
        return err;  /**< failed*/
 8001aba:	7dfb      	ldrb	r3, [r7, #23]
 8001abc:	e09a      	b.n	8001bf4 <sht40x_get_temp_rh+0x1ac>
    }
    pData->temperature_C = (pStatus[0] << 8) |  pStatus[1];
 8001abe:	7c3b      	ldrb	r3, [r7, #16]
 8001ac0:	021b      	lsls	r3, r3, #8
 8001ac2:	7c7a      	ldrb	r2, [r7, #17]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	ee07 3a90 	vmov	s15, r3
 8001aca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	edc3 7a00 	vstr	s15, [r3]
    pData->temperature_C = ((pData->temperature_C/65535.0) * 175) - 45;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7fe fd35 	bl	8000548 <__aeabi_f2d>
 8001ade:	a348      	add	r3, pc, #288	; (adr r3, 8001c00 <sht40x_get_temp_rh+0x1b8>)
 8001ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae4:	f7fe feb2 	bl	800084c <__aeabi_ddiv>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	460b      	mov	r3, r1
 8001aec:	4610      	mov	r0, r2
 8001aee:	4619      	mov	r1, r3
 8001af0:	a345      	add	r3, pc, #276	; (adr r3, 8001c08 <sht40x_get_temp_rh+0x1c0>)
 8001af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001af6:	f7fe fd7f 	bl	80005f8 <__aeabi_dmul>
 8001afa:	4602      	mov	r2, r0
 8001afc:	460b      	mov	r3, r1
 8001afe:	4610      	mov	r0, r2
 8001b00:	4619      	mov	r1, r3
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <sht40x_get_temp_rh+0x1d4>)
 8001b08:	f7fe fbbe 	bl	8000288 <__aeabi_dsub>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	460b      	mov	r3, r1
 8001b10:	4610      	mov	r0, r2
 8001b12:	4619      	mov	r1, r3
 8001b14:	f7ff f848 	bl	8000ba8 <__aeabi_d2f>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	601a      	str	r2, [r3, #0]
    pData->temperature_F = (pData->temperature_C * 9/5) + 32;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	edd3 7a00 	vldr	s15, [r3]
 8001b24:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001b28:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b2c:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001b30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b34:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001c20 <sht40x_get_temp_rh+0x1d8>
 8001b38:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	edc3 7a01 	vstr	s15, [r3, #4]

    pData->humidity = (pStatus[3] << 8) | pStatus[4];
 8001b42:	7cfb      	ldrb	r3, [r7, #19]
 8001b44:	021b      	lsls	r3, r3, #8
 8001b46:	7d3a      	ldrb	r2, [r7, #20]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	ee07 3a90 	vmov	s15, r3
 8001b4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	edc3 7a02 	vstr	s15, [r3, #8]
    pData->humidity = ((pData->humidity/65535.0) * 125) - 6;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	f7fe fcf3 	bl	8000548 <__aeabi_f2d>
 8001b62:	a327      	add	r3, pc, #156	; (adr r3, 8001c00 <sht40x_get_temp_rh+0x1b8>)
 8001b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b68:	f7fe fe70 	bl	800084c <__aeabi_ddiv>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	4610      	mov	r0, r2
 8001b72:	4619      	mov	r1, r3
 8001b74:	f04f 0200 	mov.w	r2, #0
 8001b78:	4b2a      	ldr	r3, [pc, #168]	; (8001c24 <sht40x_get_temp_rh+0x1dc>)
 8001b7a:	f7fe fd3d 	bl	80005f8 <__aeabi_dmul>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b27      	ldr	r3, [pc, #156]	; (8001c28 <sht40x_get_temp_rh+0x1e0>)
 8001b8c:	f7fe fb7c 	bl	8000288 <__aeabi_dsub>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4610      	mov	r0, r2
 8001b96:	4619      	mov	r1, r3
 8001b98:	f7ff f806 	bl	8000ba8 <__aeabi_d2f>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	609a      	str	r2, [r3, #8]

        /**error handler***/
    pData->humidity =  pData->humidity > HUMIDITY_MAX ? HUMIDITY_MAX: pData->humidity;                     /**< if humidity is high than max allowed, set to 100 */
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001ba8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001c2c <sht40x_get_temp_rh+0x1e4>
 8001bac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb4:	dd01      	ble.n	8001bba <sht40x_get_temp_rh+0x172>
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <sht40x_get_temp_rh+0x1e8>)
 8001bb8:	e001      	b.n	8001bbe <sht40x_get_temp_rh+0x176>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	6093      	str	r3, [r2, #8]
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8001bc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	d502      	bpl.n	8001bd8 <sht40x_get_temp_rh+0x190>
 8001bd2:	f04f 0300 	mov.w	r3, #0
 8001bd6:	e001      	b.n	8001bdc <sht40x_get_temp_rh+0x194>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	6093      	str	r3, [r2, #8]

    memcpy(pData->rawData, pStatus, RESPONSE_LENGTH);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	330c      	adds	r3, #12
 8001be4:	461a      	mov	r2, r3
 8001be6:	f107 0310 	add.w	r3, r7, #16
 8001bea:	6818      	ldr	r0, [r3, #0]
 8001bec:	6010      	str	r0, [r2, #0]
 8001bee:	889b      	ldrh	r3, [r3, #4]
 8001bf0:	8093      	strh	r3, [r2, #4]

    return 0;
 8001bf2:	2300      	movs	r3, #0
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3718      	adds	r7, #24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	f3af 8000 	nop.w
 8001c00:	00000000 	.word	0x00000000
 8001c04:	40efffe0 	.word	0x40efffe0
 8001c08:	00000000 	.word	0x00000000
 8001c0c:	4065e000 	.word	0x4065e000
 8001c10:	08008070 	.word	0x08008070
 8001c14:	08007ecc 	.word	0x08007ecc
 8001c18:	08007ee8 	.word	0x08007ee8
 8001c1c:	40468000 	.word	0x40468000
 8001c20:	42000000 	.word	0x42000000
 8001c24:	405f4000 	.word	0x405f4000
 8001c28:	40180000 	.word	0x40180000
 8001c2c:	42c80000 	.word	0x42c80000
 8001c30:	42c80000 	.word	0x42c80000

08001c34 <sht40x_get_serial_number>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_get_serial_number(sht40x_handle_t *const pHandle, uint32_t *pSerial_Number)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
    uint8_t err;
    uint8_t temp_data[4];         /**< temporary data to hold serial number */
    uint8_t count = 3;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	77fb      	strb	r3, [r7, #31]
    uint8_t dataOut[4];
    int index;

    if(pHandle == NULL)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d101      	bne.n	8001c4c <sht40x_get_serial_number+0x18>
        return 2;     /**< return failed error */
 8001c48:	2302      	movs	r3, #2
 8001c4a:	e055      	b.n	8001cf8 <sht40x_get_serial_number+0xc4>
    if(pHandle->inited != 1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	7e9b      	ldrb	r3, [r3, #26]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d001      	beq.n	8001c58 <sht40x_get_serial_number+0x24>
        return 3;      /**< return failed error */
 8001c54:	2303      	movs	r3, #3
 8001c56:	e04f      	b.n	8001cf8 <sht40x_get_serial_number+0xc4>

    memset(temp_data, 0, 4);
 8001c58:	f107 0310 	add.w	r3, r7, #16
 8001c5c:	2204      	movs	r2, #4
 8001c5e:	2100      	movs	r1, #0
 8001c60:	4618      	mov	r0, r3
 8001c62:	f003 f8ed 	bl	8004e40 <memset>

     err = a_sht40x_i2c_write(pHandle, SHT40X_READ_SERIAL_NUMBER_CMD, DUMMY_DATA, 0);
 8001c66:	2300      	movs	r3, #0
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2189      	movs	r1, #137	; 0x89
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f7ff fdd2 	bl	8001816 <a_sht40x_i2c_write>
 8001c72:	4603      	mov	r3, r0
 8001c74:	75fb      	strb	r3, [r7, #23]
    if(err)
 8001c76:	7dfb      	ldrb	r3, [r7, #23]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d005      	beq.n	8001c88 <sht40x_get_serial_number+0x54>
    {
        a_sht40x_print_error_msg(pHandle, "write UID cmd");
 8001c7c:	4920      	ldr	r1, [pc, #128]	; (8001d00 <sht40x_get_serial_number+0xcc>)
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f7ff fe04 	bl	800188c <a_sht40x_print_error_msg>
        return err;  /**< failed*/
 8001c84:	7dfb      	ldrb	r3, [r7, #23]
 8001c86:	e037      	b.n	8001cf8 <sht40x_get_serial_number+0xc4>
    }

    pHandle->delay_ms(10);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691b      	ldr	r3, [r3, #16]
 8001c8c:	200a      	movs	r0, #10
 8001c8e:	4798      	blx	r3

    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)temp_data, RESPONSE_LENGTH);
 8001c90:	f107 0210 	add.w	r2, r7, #16
 8001c94:	2306      	movs	r3, #6
 8001c96:	2100      	movs	r1, #0
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff fdd9 	bl	8001850 <a_sht40x_i2c_read>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	75fb      	strb	r3, [r7, #23]
    if(err)
 8001ca2:	7dfb      	ldrb	r3, [r7, #23]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d005      	beq.n	8001cb4 <sht40x_get_serial_number+0x80>
    {
        a_sht40x_print_error_msg(pHandle, "get UID");
 8001ca8:	4916      	ldr	r1, [pc, #88]	; (8001d04 <sht40x_get_serial_number+0xd0>)
 8001caa:	6878      	ldr	r0, [r7, #4]
 8001cac:	f7ff fdee 	bl	800188c <a_sht40x_print_error_msg>
        return err;  /**< failed*/
 8001cb0:	7dfb      	ldrb	r3, [r7, #23]
 8001cb2:	e021      	b.n	8001cf8 <sht40x_get_serial_number+0xc4>
    }

	temp_data[2] = temp_data[3];
 8001cb4:	7cfb      	ldrb	r3, [r7, #19]
 8001cb6:	74bb      	strb	r3, [r7, #18]
	temp_data[3] = temp_data[4];
 8001cb8:	7d3b      	ldrb	r3, [r7, #20]
 8001cba:	74fb      	strb	r3, [r7, #19]

  for( index = 0; index < 4; ++index)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	61bb      	str	r3, [r7, #24]
 8001cc0:	e00f      	b.n	8001ce2 <sht40x_get_serial_number+0xae>
    {
        dataOut[count] = temp_data[index];     /**< move data into a temporarily buffer in reverse order*/
 8001cc2:	7ffb      	ldrb	r3, [r7, #31]
 8001cc4:	f107 0110 	add.w	r1, r7, #16
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	440a      	add	r2, r1
 8001ccc:	7812      	ldrb	r2, [r2, #0]
 8001cce:	3320      	adds	r3, #32
 8001cd0:	443b      	add	r3, r7
 8001cd2:	f803 2c14 	strb.w	r2, [r3, #-20]
        count--;
 8001cd6:	7ffb      	ldrb	r3, [r7, #31]
 8001cd8:	3b01      	subs	r3, #1
 8001cda:	77fb      	strb	r3, [r7, #31]
  for( index = 0; index < 4; ++index)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	61bb      	str	r3, [r7, #24]
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	2b03      	cmp	r3, #3
 8001ce6:	ddec      	ble.n	8001cc2 <sht40x_get_serial_number+0x8e>
 8001ce8:	68fb      	ldr	r3, [r7, #12]
    }
   memcpy(serial.pBuffer, dataOut, 4);
 8001cea:	4a07      	ldr	r2, [pc, #28]	; (8001d08 <sht40x_get_serial_number+0xd4>)
 8001cec:	6013      	str	r3, [r2, #0]
  *pSerial_Number = serial.raw;
 8001cee:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <sht40x_get_serial_number+0xd4>)
 8001cf0:	681a      	ldr	r2, [r3, #0]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	601a      	str	r2, [r3, #0]

    return 0;           /**< success */
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3720      	adds	r7, #32
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	08007f00 	.word	0x08007f00
 8001d04:	08007f10 	.word	0x08007f10
 8001d08:	20000330 	.word	0x20000330

08001d0c <sht40x_info>:
 *             - 0 success
 *             - 2 pHandle is NULL
 * @note       none
 */
uint8_t sht40x_info(sht40x_info_t *const pInfo)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b082      	sub	sp, #8
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
    if (pInfo == NULL)     /**< check if handle is null */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d101      	bne.n	8001d1e <sht40x_info+0x12>
    {
        return 2;              /**<failed, return error */
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e02b      	b.n	8001d76 <sht40x_info+0x6a>
    }
    memset(pInfo, 0, sizeof (sht40x_info_t));                        /**< initialize sht40x info structure */
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	2100      	movs	r1, #0
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f003 f88c 	bl	8004e40 <memset>
    strncpy(pInfo->chip_name, CHIP_NAME, 10);                        /**< copy chip name */
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	220a      	movs	r2, #10
 8001d2c:	4914      	ldr	r1, [pc, #80]	; (8001d80 <sht40x_info+0x74>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f003 fcf8 	bl	8005724 <strncpy>
    strncpy(pInfo->interface, INTERFACE, 8);                         /**< copy interface name */
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3323      	adds	r3, #35	; 0x23
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4912      	ldr	r1, [pc, #72]	; (8001d84 <sht40x_info+0x78>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fcf1 	bl	8005724 <strncpy>
    strncpy(pInfo->manufacturer_name, MANUFACTURER_NAME, 25);        /**< copy manufacturer name */
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	330a      	adds	r3, #10
 8001d46:	2219      	movs	r2, #25
 8001d48:	490f      	ldr	r1, [pc, #60]	; (8001d88 <sht40x_info+0x7c>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fcea 	bl	8005724 <strncpy>
    pInfo->supply_voltage_max_v = SUPPLY_VOLTAGE_MAX;                /**< set minimal supply voltage */
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <sht40x_info+0x80>)
 8001d54:	62da      	str	r2, [r3, #44]	; 0x2c
    pInfo->supply_voltage_min_v = SUPPLY_VOLTAGE_MIN;                /**< set maximum supply voltage */
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <sht40x_info+0x84>)
 8001d5a:	629a      	str	r2, [r3, #40]	; 0x28
    pInfo->max_current_ma = MAX_CURRENT;                             /**< set maximum current */
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a0d      	ldr	r2, [pc, #52]	; (8001d94 <sht40x_info+0x88>)
 8001d60:	631a      	str	r2, [r3, #48]	; 0x30
    pInfo->temperature_max = TEMPERATURE_MAX;                        /**< set minimal temperature */
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	; (8001d98 <sht40x_info+0x8c>)
 8001d66:	639a      	str	r2, [r3, #56]	; 0x38
    pInfo->temperature_min = TEMPERATURE_MIN;                        /**< set maximum temperature */
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	4a0c      	ldr	r2, [pc, #48]	; (8001d9c <sht40x_info+0x90>)
 8001d6c:	635a      	str	r2, [r3, #52]	; 0x34
    pInfo->driver_version = DRIVER_VERSION;                          /**< set driver version */
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a0b      	ldr	r2, [pc, #44]	; (8001da0 <sht40x_info+0x94>)
 8001d72:	63da      	str	r2, [r3, #60]	; 0x3c

    return 0;                                                        /**< return success */
 8001d74:	2300      	movs	r3, #0
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3708      	adds	r7, #8
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	08007f38 	.word	0x08007f38
 8001d84:	08007f40 	.word	0x08007f40
 8001d88:	08007f44 	.word	0x08007f44
 8001d8c:	40666666 	.word	0x40666666
 8001d90:	3fe66666 	.word	0x3fe66666
 8001d94:	3dcccccd 	.word	0x3dcccccd
 8001d98:	42fa0000 	.word	0x42fa0000
 8001d9c:	c2200000 	.word	0xc2200000
 8001da0:	44960000 	.word	0x44960000

08001da4 <sht40x_basic_initialize>:
 *          - 1 initialize failed
 * @note    none
 */

uint8_t sht40x_basic_initialize(sht40x_variant_t variant)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b084      	sub	sp, #16
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	4603      	mov	r3, r0
 8001dac:	71fb      	strb	r3, [r7, #7]

    volatile uint8_t err;

    /*link function*/
    DRIVER_SHT40X_LINK_INIT(&sht40x_handler, sht40x_handle_t);                               /**< Link the  */
 8001dae:	221c      	movs	r2, #28
 8001db0:	2100      	movs	r1, #0
 8001db2:	4827      	ldr	r0, [pc, #156]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001db4:	f003 f844 	bl	8004e40 <memset>
    DRIVER_SHT40X_LINK_I2C_INIT(&sht40x_handler, sht40x_interface_i2c_init);                 /**< Link the i2c initialize function */
 8001db8:	4b25      	ldr	r3, [pc, #148]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dba:	4a26      	ldr	r2, [pc, #152]	; (8001e54 <sht40x_basic_initialize+0xb0>)
 8001dbc:	601a      	str	r2, [r3, #0]
    DRIVER_SHT40X_LINK_I2C_DEINIT(&sht40x_handler, sht40x_interface_i2c_deinit);             /**< Link the the i2c de-initialize function */
 8001dbe:	4b24      	ldr	r3, [pc, #144]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dc0:	4a25      	ldr	r2, [pc, #148]	; (8001e58 <sht40x_basic_initialize+0xb4>)
 8001dc2:	605a      	str	r2, [r3, #4]
    DRIVER_SHT40X_LINK_I2C_WRITE(&sht40x_handler, sht40x_interface_i2c_write);               /**< Link the i2c  write function */
 8001dc4:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dc6:	4a25      	ldr	r2, [pc, #148]	; (8001e5c <sht40x_basic_initialize+0xb8>)
 8001dc8:	60da      	str	r2, [r3, #12]
    DRIVER_SHT40X_LINK_I2C_READ(&sht40x_handler, sht40x_interface_i2c_read);                 /**< Link the i2c read function */
 8001dca:	4b21      	ldr	r3, [pc, #132]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dcc:	4a24      	ldr	r2, [pc, #144]	; (8001e60 <sht40x_basic_initialize+0xbc>)
 8001dce:	609a      	str	r2, [r3, #8]
    DRIVER_SHT40X_LINK_DELAY_MS(&sht40x_handler,sht40x_interface_delay_ms);                  /**< Link delay function */
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dd2:	4a24      	ldr	r2, [pc, #144]	; (8001e64 <sht40x_basic_initialize+0xc0>)
 8001dd4:	611a      	str	r2, [r3, #16]
    DRIVER_SHT40X_LINK_DEBUG_PRINT(&sht40x_handler, sht40x_interface_debug_print);           /**< Link the the debug print function */
 8001dd6:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dd8:	4a23      	ldr	r2, [pc, #140]	; (8001e68 <sht40x_basic_initialize+0xc4>)
 8001dda:	615a      	str	r2, [r3, #20]

    /* sht40x initialize */
    err = sht40x_init(&sht40x_handler);
 8001ddc:	481c      	ldr	r0, [pc, #112]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001dde:	f7ff fd65 	bl	80018ac <sht40x_init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	73fb      	strb	r3, [r7, #15]
    if(err)
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	b2db      	uxtb	r3, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d006      	beq.n	8001dfc <sht40x_basic_initialize+0x58>
    {
        a_sht40x_print_error_msg(&sht40x_handler, "initialize");
 8001dee:	491f      	ldr	r1, [pc, #124]	; (8001e6c <sht40x_basic_initialize+0xc8>)
 8001df0:	4817      	ldr	r0, [pc, #92]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001df2:	f7ff fd4b 	bl	800188c <a_sht40x_print_error_msg>
        return err;       /**< failed */
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	e025      	b.n	8001e48 <sht40x_basic_initialize+0xa4>
    }

    /* set device variant */
    err = sht40x_set_variant(&sht40x_handler, variant);
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4813      	ldr	r0, [pc, #76]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001e02:	f7ff fddb 	bl	80019bc <sht40x_set_variant>
 8001e06:	4603      	mov	r3, r0
 8001e08:	73fb      	strb	r3, [r7, #15]
    if(err)
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d006      	beq.n	8001e20 <sht40x_basic_initialize+0x7c>
    {
        a_sht40x_print_error_msg(&sht40x_handler, "set device variant");
 8001e12:	4917      	ldr	r1, [pc, #92]	; (8001e70 <sht40x_basic_initialize+0xcc>)
 8001e14:	480e      	ldr	r0, [pc, #56]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001e16:	f7ff fd39 	bl	800188c <a_sht40x_print_error_msg>
        return err;   /**< failed */
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	e013      	b.n	8001e48 <sht40x_basic_initialize+0xa4>
    }

    /** set device address */
    err= sht40x_set_addr(&sht40x_handler);
 8001e20:	480b      	ldr	r0, [pc, #44]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001e22:	f7ff fda5 	bl	8001970 <sht40x_set_addr>
 8001e26:	4603      	mov	r3, r0
 8001e28:	73fb      	strb	r3, [r7, #15]
    if(err)
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d006      	beq.n	8001e40 <sht40x_basic_initialize+0x9c>
    {
         a_sht40x_print_error_msg(&sht40x_handler, "set device i2c address");
 8001e32:	4910      	ldr	r1, [pc, #64]	; (8001e74 <sht40x_basic_initialize+0xd0>)
 8001e34:	4806      	ldr	r0, [pc, #24]	; (8001e50 <sht40x_basic_initialize+0xac>)
 8001e36:	f7ff fd29 	bl	800188c <a_sht40x_print_error_msg>
        return err;
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	e003      	b.n	8001e48 <sht40x_basic_initialize+0xa4>
    }

    sht40x_interface_delay_ms(10);         /**< wait 10 ms after initialize complete */
 8001e40:	200a      	movs	r0, #10
 8001e42:	f000 f8a1 	bl	8001f88 <sht40x_interface_delay_ms>

    return 0;   /**< success */
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3710      	adds	r7, #16
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	20000334 	.word	0x20000334
 8001e54:	08001ee9 	.word	0x08001ee9
 8001e58:	08001ef9 	.word	0x08001ef9
 8001e5c:	08001f49 	.word	0x08001f49
 8001e60:	08001f09 	.word	0x08001f09
 8001e64:	08001f89 	.word	0x08001f89
 8001e68:	08001f9f 	.word	0x08001f9f
 8001e6c:	08007f50 	.word	0x08007f50
 8001e70:	08007f5c 	.word	0x08007f5c
 8001e74:	08007f70 	.word	0x08007f70

08001e78 <sht40x_basic_get_temp_rh>:
 *            - 0 success
 *            - 1 failed to get temp/humidity
 * @note      none
 */
uint8_t sht40x_basic_get_temp_rh(sht40x_precision_t precision, sht40x_data_t *pData)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	71fb      	strb	r3, [r7, #7]
    if(sht40x_get_temp_rh(&sht40x_handler, precision, pData) != SHT40X_DRV_OK)
 8001e84:	79fb      	ldrb	r3, [r7, #7]
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4808      	ldr	r0, [pc, #32]	; (8001eac <sht40x_basic_get_temp_rh+0x34>)
 8001e8c:	f7ff fddc 	bl	8001a48 <sht40x_get_temp_rh>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <sht40x_basic_get_temp_rh+0x2a>
    {
        a_sht40x_print_error_msg(&sht40x_handler, "read data");
 8001e96:	4906      	ldr	r1, [pc, #24]	; (8001eb0 <sht40x_basic_get_temp_rh+0x38>)
 8001e98:	4804      	ldr	r0, [pc, #16]	; (8001eac <sht40x_basic_get_temp_rh+0x34>)
 8001e9a:	f7ff fcf7 	bl	800188c <a_sht40x_print_error_msg>
        return 1; /**< failed */
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e000      	b.n	8001ea4 <sht40x_basic_get_temp_rh+0x2c>
    }
    return 0;   /**< success*/
 8001ea2:	2300      	movs	r3, #0
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3708      	adds	r7, #8
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	20000334 	.word	0x20000334
 8001eb0:	08007f9c 	.word	0x08007f9c

08001eb4 <sht40x_basic_get_serial_number>:
 *            - 0 success
 *            - 1 failed to get S/N
 * @note      none
 */
uint8_t sht40x_basic_get_serial_number(uint32_t *pSerial_Number)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  if(sht40x_get_serial_number(&sht40x_handler, (uint32_t *)pSerial_Number) != SHT40X_DRV_OK)
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	4808      	ldr	r0, [pc, #32]	; (8001ee0 <sht40x_basic_get_serial_number+0x2c>)
 8001ec0:	f7ff feb8 	bl	8001c34 <sht40x_get_serial_number>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <sht40x_basic_get_serial_number+0x22>
  {
     a_sht40x_print_error_msg(&sht40x_handler, "read serial number");
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <sht40x_basic_get_serial_number+0x30>)
 8001ecc:	4804      	ldr	r0, [pc, #16]	; (8001ee0 <sht40x_basic_get_serial_number+0x2c>)
 8001ece:	f7ff fcdd 	bl	800188c <a_sht40x_print_error_msg>
     return 1; /**< failed */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e000      	b.n	8001ed8 <sht40x_basic_get_serial_number+0x24>
  }
  return 0;     /**< success */
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3708      	adds	r7, #8
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	20000334 	.word	0x20000334
 8001ee4:	08007fbc 	.word	0x08007fbc

08001ee8 <sht40x_interface_i2c_init>:
*         - 0 success
*         - 1 i2c init failed
* @note   none
*/
uint8_t sht40x_interface_i2c_init(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef6:	4770      	bx	lr

08001ef8 <sht40x_interface_i2c_deinit>:
 * @return status code
 *          - 0 success
 *          - 1 i2c deinit fail
 */
uint8_t sht40x_interface_i2c_deinit(void)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
    /*call your i2c de-initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <sht40x_interface_i2c_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t sht40x_interface_i2c_read(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	603a      	str	r2, [r7, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4603      	mov	r3, r0
 8001f14:	71fb      	strb	r3, [r7, #7]
 8001f16:	460b      	mov	r3, r1
 8001f18:	71bb      	strb	r3, [r7, #6]
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	80bb      	strh	r3, [r7, #4]
    /*call your i2c read function here*/
    /*user code begin */
	   if( i2c_read(addr, reg, buf, len) != 0)
 8001f1e:	88bb      	ldrh	r3, [r7, #4]
 8001f20:	79b9      	ldrb	r1, [r7, #6]
 8001f22:	79f8      	ldrb	r0, [r7, #7]
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	f7ff fa4b 	bl	80013c0 <i2c_read>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d004      	beq.n	8001f3a <sht40x_interface_i2c_read+0x32>
	   {
		   sht40x_interface_debug_print("i2c read failed\n");
 8001f30:	4804      	ldr	r0, [pc, #16]	; (8001f44 <sht40x_interface_i2c_read+0x3c>)
 8001f32:	f000 f834 	bl	8001f9e <sht40x_interface_debug_print>
		   return 1;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <sht40x_interface_i2c_read+0x34>
	   }
    /*user code end*/
    return 0; /**< success */
 8001f3a:	2300      	movs	r3, #0
}
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	3708      	adds	r7, #8
 8001f40:	46bd      	mov	sp, r7
 8001f42:	bd80      	pop	{r7, pc}
 8001f44:	08008000 	.word	0x08008000

08001f48 <sht40x_interface_i2c_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t sht40x_interface_i2c_write(uint8_t addr, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	603a      	str	r2, [r7, #0]
 8001f50:	461a      	mov	r2, r3
 8001f52:	4603      	mov	r3, r0
 8001f54:	71fb      	strb	r3, [r7, #7]
 8001f56:	460b      	mov	r3, r1
 8001f58:	71bb      	strb	r3, [r7, #6]
 8001f5a:	4613      	mov	r3, r2
 8001f5c:	80bb      	strh	r3, [r7, #4]
    /*call your i2c write function here*/
    /*user code begin */
    if(i2c_write(addr, reg, buf, len) !=  0)
 8001f5e:	88bb      	ldrh	r3, [r7, #4]
 8001f60:	79b9      	ldrb	r1, [r7, #6]
 8001f62:	79f8      	ldrb	r0, [r7, #7]
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	f7ff fa05 	bl	8001374 <i2c_write>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d004      	beq.n	8001f7a <sht40x_interface_i2c_write+0x32>
    {
    	sht40x_interface_debug_print("i2c write failed\n");
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <sht40x_interface_i2c_write+0x3c>)
 8001f72:	f000 f814 	bl	8001f9e <sht40x_interface_debug_print>
    	return 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e000      	b.n	8001f7c <sht40x_interface_i2c_write+0x34>
    }
    /*user code end*/
    return 0; /**< success */
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	08008014 	.word	0x08008014

08001f88 <sht40x_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] u32Ms is the time in milliseconds
 * @note      none
 */
void sht40x_interface_delay_ms(uint32_t u32Ms)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
    /*call your delay function here*/
    /*user code begin */
	  HAL_Delay(u32Ms);
 8001f90:	6878      	ldr	r0, [r7, #4]
 8001f92:	f000 f8b9 	bl	8002108 <HAL_Delay>
    /*user code end*/
}
 8001f96:	bf00      	nop
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <sht40x_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void sht40x_interface_debug_print(const char *const fmt, ...)
{
 8001f9e:	b40f      	push	{r0, r1, r2, r3}
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0c2      	sub	sp, #264	; 0x108
 8001fa4:	af00      	add	r7, sp, #0
//#ifdef SHT40X_DEBUG_MODE
	volatile char str[256];
	    volatile uint8_t len;
	    va_list args;

	    memset((char *) str, 0, sizeof (char)*256);
 8001fa6:	f107 0308 	add.w	r3, r7, #8
 8001faa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fae:	2100      	movs	r1, #0
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f002 ff45 	bl	8004e40 <memset>
	    va_start(args, fmt);
 8001fb6:	f507 728a 	add.w	r2, r7, #276	; 0x114
 8001fba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fc2:	601a      	str	r2, [r3, #0]
	    vsnprintf((char *) str, 256, (char const *) fmt, args);
 8001fc4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001fc8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001fcc:	f107 0008 	add.w	r0, r7, #8
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8001fd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fda:	f003 fbe1 	bl	80057a0 <vsniprintf>
	    va_end(args);

	    len = strlen((char *) str);
 8001fde:	f107 0308 	add.w	r3, r7, #8
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe f8f4 	bl	80001d0 <strlen>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ff0:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001ff4:	701a      	strb	r2, [r3, #0]
	    //   EUSART1_Write_Text((const char *) str, len);        /**< example of a usart function */
	       (void)serial_print((const char *)str, len);                  /**< example of printf function, comment out if used */
 8001ff6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ffa:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	f107 0308 	add.w	r3, r7, #8
 8002006:	4611      	mov	r1, r2
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff f99f 	bl	800134c <serial_print>

    /*user code end*/
//#endif
}
 800200e:	bf00      	nop
 8002010:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8002014:	46bd      	mov	sp, r7
 8002016:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800201a:	b004      	add	sp, #16
 800201c:	4770      	bx	lr

0800201e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002024:	2300      	movs	r3, #0
 8002026:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f943 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800202e:	200f      	movs	r0, #15
 8002030:	f000 f80e 	bl	8002050 <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	71fb      	strb	r3, [r7, #7]
 800203e:	e001      	b.n	8002044 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002040:	f7ff f9ea 	bl	8001418 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002044:	79fb      	ldrb	r3, [r7, #7]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002058:	2300      	movs	r3, #0
 800205a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800205c:	4b17      	ldr	r3, [pc, #92]	; (80020bc <HAL_InitTick+0x6c>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002064:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_InitTick+0x70>)
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	4b14      	ldr	r3, [pc, #80]	; (80020bc <HAL_InitTick+0x6c>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	4619      	mov	r1, r3
 800206e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002072:	fbb3 f3f1 	udiv	r3, r3, r1
 8002076:	fbb2 f3f3 	udiv	r3, r2, r3
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f941 	bl	8002302 <HAL_SYSTICK_Config>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b0f      	cmp	r3, #15
 800208a:	d809      	bhi.n	80020a0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800208c:	2200      	movs	r2, #0
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	f04f 30ff 	mov.w	r0, #4294967295
 8002094:	f000 f919 	bl	80022ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002098:	4a0a      	ldr	r2, [pc, #40]	; (80020c4 <HAL_InitTick+0x74>)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6013      	str	r3, [r2, #0]
 800209e:	e007      	b.n	80020b0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	73fb      	strb	r3, [r7, #15]
 80020a4:	e004      	b.n	80020b0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73fb      	strb	r3, [r7, #15]
 80020aa:	e001      	b.n	80020b0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	20000008 	.word	0x20000008
 80020c0:	20000000 	.word	0x20000000
 80020c4:	20000004 	.word	0x20000004

080020c8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020c8:	b480      	push	{r7}
 80020ca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020cc:	4b06      	ldr	r3, [pc, #24]	; (80020e8 <HAL_IncTick+0x20>)
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	461a      	mov	r2, r3
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_IncTick+0x24>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4413      	add	r3, r2
 80020d8:	4a04      	ldr	r2, [pc, #16]	; (80020ec <HAL_IncTick+0x24>)
 80020da:	6013      	str	r3, [r2, #0]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	20000008 	.word	0x20000008
 80020ec:	20000350 	.word	0x20000350

080020f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  return uwTick;
 80020f4:	4b03      	ldr	r3, [pc, #12]	; (8002104 <HAL_GetTick+0x14>)
 80020f6:	681b      	ldr	r3, [r3, #0]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	20000350 	.word	0x20000350

08002108 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002110:	f7ff ffee 	bl	80020f0 <HAL_GetTick>
 8002114:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002120:	d005      	beq.n	800212e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002122:	4b0a      	ldr	r3, [pc, #40]	; (800214c <HAL_Delay+0x44>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	4413      	add	r3, r2
 800212c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800212e:	bf00      	nop
 8002130:	f7ff ffde 	bl	80020f0 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	68fa      	ldr	r2, [r7, #12]
 800213c:	429a      	cmp	r2, r3
 800213e:	d8f7      	bhi.n	8002130 <HAL_Delay+0x28>
  {
  }
}
 8002140:	bf00      	nop
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000008 	.word	0x20000008

08002150 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002150:	b480      	push	{r7}
 8002152:	b085      	sub	sp, #20
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	f003 0307 	and.w	r3, r3, #7
 800215e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002160:	4b0c      	ldr	r3, [pc, #48]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800216c:	4013      	ands	r3, r2
 800216e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800217c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002182:	4a04      	ldr	r2, [pc, #16]	; (8002194 <__NVIC_SetPriorityGrouping+0x44>)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	60d3      	str	r3, [r2, #12]
}
 8002188:	bf00      	nop
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr
 8002194:	e000ed00 	.word	0xe000ed00

08002198 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800219c:	4b04      	ldr	r3, [pc, #16]	; (80021b0 <__NVIC_GetPriorityGrouping+0x18>)
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	f003 0307 	and.w	r3, r3, #7
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	; (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	; (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	; 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	; (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	; (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	; (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff47 	bl	8002150 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff5c 	bl	8002198 <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff ffb0 	bl	8002270 <SysTick_Config>
 8002310:	4603      	mov	r3, r0
}
 8002312:	4618      	mov	r0, r3
 8002314:	3708      	adds	r7, #8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
	...

0800231c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002326:	2300      	movs	r3, #0
 8002328:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800232a:	e148      	b.n	80025be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	2101      	movs	r1, #1
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	fa01 f303 	lsl.w	r3, r1, r3
 8002338:	4013      	ands	r3, r2
 800233a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	f000 813a 	beq.w	80025b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f003 0303 	and.w	r3, r3, #3
 800234c:	2b01      	cmp	r3, #1
 800234e:	d005      	beq.n	800235c <HAL_GPIO_Init+0x40>
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d130      	bne.n	80023be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	005b      	lsls	r3, r3, #1
 8002366:	2203      	movs	r2, #3
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	43db      	mvns	r3, r3
 800236e:	693a      	ldr	r2, [r7, #16]
 8002370:	4013      	ands	r3, r2
 8002372:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68da      	ldr	r2, [r3, #12]
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	005b      	lsls	r3, r3, #1
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002392:	2201      	movs	r2, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	4013      	ands	r3, r2
 80023a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	091b      	lsrs	r3, r3, #4
 80023a8:	f003 0201 	and.w	r2, r3, #1
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	693a      	ldr	r2, [r7, #16]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	693a      	ldr	r2, [r7, #16]
 80023bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
 80023c6:	2b03      	cmp	r3, #3
 80023c8:	d017      	beq.n	80023fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	68db      	ldr	r3, [r3, #12]
 80023ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4013      	ands	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	693a      	ldr	r2, [r7, #16]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	693a      	ldr	r2, [r7, #16]
 80023f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f003 0303 	and.w	r3, r3, #3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d123      	bne.n	800244e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	08da      	lsrs	r2, r3, #3
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	3208      	adds	r2, #8
 800240e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002412:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002414:	697b      	ldr	r3, [r7, #20]
 8002416:	f003 0307 	and.w	r3, r3, #7
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	220f      	movs	r2, #15
 800241e:	fa02 f303 	lsl.w	r3, r2, r3
 8002422:	43db      	mvns	r3, r3
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4013      	ands	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	691a      	ldr	r2, [r3, #16]
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	009b      	lsls	r3, r3, #2
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	08da      	lsrs	r2, r3, #3
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	3208      	adds	r2, #8
 8002448:	6939      	ldr	r1, [r7, #16]
 800244a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	2203      	movs	r2, #3
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43db      	mvns	r3, r3
 8002460:	693a      	ldr	r2, [r7, #16]
 8002462:	4013      	ands	r3, r2
 8002464:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f003 0203 	and.w	r2, r3, #3
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	005b      	lsls	r3, r3, #1
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	693a      	ldr	r2, [r7, #16]
 8002480:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800248a:	2b00      	cmp	r3, #0
 800248c:	f000 8094 	beq.w	80025b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002490:	4b52      	ldr	r3, [pc, #328]	; (80025dc <HAL_GPIO_Init+0x2c0>)
 8002492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002494:	4a51      	ldr	r2, [pc, #324]	; (80025dc <HAL_GPIO_Init+0x2c0>)
 8002496:	f043 0301 	orr.w	r3, r3, #1
 800249a:	6613      	str	r3, [r2, #96]	; 0x60
 800249c:	4b4f      	ldr	r3, [pc, #316]	; (80025dc <HAL_GPIO_Init+0x2c0>)
 800249e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024a0:	f003 0301 	and.w	r3, r3, #1
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80024a8:	4a4d      	ldr	r2, [pc, #308]	; (80025e0 <HAL_GPIO_Init+0x2c4>)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	089b      	lsrs	r3, r3, #2
 80024ae:	3302      	adds	r3, #2
 80024b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	009b      	lsls	r3, r3, #2
 80024be:	220f      	movs	r2, #15
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024d2:	d00d      	beq.n	80024f0 <HAL_GPIO_Init+0x1d4>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a43      	ldr	r2, [pc, #268]	; (80025e4 <HAL_GPIO_Init+0x2c8>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d007      	beq.n	80024ec <HAL_GPIO_Init+0x1d0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a42      	ldr	r2, [pc, #264]	; (80025e8 <HAL_GPIO_Init+0x2cc>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d101      	bne.n	80024e8 <HAL_GPIO_Init+0x1cc>
 80024e4:	2302      	movs	r3, #2
 80024e6:	e004      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024e8:	2307      	movs	r3, #7
 80024ea:	e002      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024ec:	2301      	movs	r3, #1
 80024ee:	e000      	b.n	80024f2 <HAL_GPIO_Init+0x1d6>
 80024f0:	2300      	movs	r3, #0
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	f002 0203 	and.w	r2, r2, #3
 80024f8:	0092      	lsls	r2, r2, #2
 80024fa:	4093      	lsls	r3, r2
 80024fc:	693a      	ldr	r2, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002502:	4937      	ldr	r1, [pc, #220]	; (80025e0 <HAL_GPIO_Init+0x2c4>)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	089b      	lsrs	r3, r3, #2
 8002508:	3302      	adds	r3, #2
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	43db      	mvns	r3, r3
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4013      	ands	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800252c:	693a      	ldr	r2, [r7, #16]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	4313      	orrs	r3, r2
 8002532:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002534:	4a2d      	ldr	r2, [pc, #180]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800253a:	4b2c      	ldr	r3, [pc, #176]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	43db      	mvns	r3, r3
 8002544:	693a      	ldr	r2, [r7, #16]
 8002546:	4013      	ands	r3, r2
 8002548:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002556:	693a      	ldr	r2, [r7, #16]
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4313      	orrs	r3, r2
 800255c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800255e:	4a23      	ldr	r2, [pc, #140]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002560:	693b      	ldr	r3, [r7, #16]
 8002562:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	43db      	mvns	r3, r3
 800256e:	693a      	ldr	r2, [r7, #16]
 8002570:	4013      	ands	r3, r2
 8002572:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002588:	4a18      	ldr	r2, [pc, #96]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800258e:	4b17      	ldr	r3, [pc, #92]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	43db      	mvns	r3, r3
 8002598:	693a      	ldr	r2, [r7, #16]
 800259a:	4013      	ands	r3, r2
 800259c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80025aa:	693a      	ldr	r2, [r7, #16]
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80025b2:	4a0e      	ldr	r2, [pc, #56]	; (80025ec <HAL_GPIO_Init+0x2d0>)
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80025b8:	697b      	ldr	r3, [r7, #20]
 80025ba:	3301      	adds	r3, #1
 80025bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	fa22 f303 	lsr.w	r3, r2, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	f47f aeaf 	bne.w	800232c <HAL_GPIO_Init+0x10>
  }
}
 80025ce:	bf00      	nop
 80025d0:	bf00      	nop
 80025d2:	371c      	adds	r7, #28
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	40021000 	.word	0x40021000
 80025e0:	40010000 	.word	0x40010000
 80025e4:	48000400 	.word	0x48000400
 80025e8:	48000800 	.word	0x48000800
 80025ec:	40010400 	.word	0x40010400

080025f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	460b      	mov	r3, r1
 80025fa:	807b      	strh	r3, [r7, #2]
 80025fc:	4613      	mov	r3, r2
 80025fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002600:	787b      	ldrb	r3, [r7, #1]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002606:	887a      	ldrh	r2, [r7, #2]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800260c:	e002      	b.n	8002614 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800260e:	887a      	ldrh	r2, [r7, #2]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
 8002628:	460b      	mov	r3, r1
 800262a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	695b      	ldr	r3, [r3, #20]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	4013      	ands	r3, r2
 8002638:	041a      	lsls	r2, r3, #16
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	43d9      	mvns	r1, r3
 800263e:	887b      	ldrh	r3, [r7, #2]
 8002640:	400b      	ands	r3, r1
 8002642:	431a      	orrs	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	619a      	str	r2, [r3, #24]
}
 8002648:	bf00      	nop
 800264a:	3714      	adds	r7, #20
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d101      	bne.n	8002666 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e081      	b.n	800276a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d106      	bne.n	8002680 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f7fe fef0 	bl	8001460 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2224      	movs	r2, #36	; 0x24
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681a      	ldr	r2, [r3, #0]
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f022 0201 	bic.w	r2, r2, #1
 8002696:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	685a      	ldr	r2, [r3, #4]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026a4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80026b4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d107      	bne.n	80026ce <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80026ca:	609a      	str	r2, [r3, #8]
 80026cc:	e006      	b.n	80026dc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80026da:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d104      	bne.n	80026ee <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026ec:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026fc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002700:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	68da      	ldr	r2, [r3, #12]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002710:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	691a      	ldr	r2, [r3, #16]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	695b      	ldr	r3, [r3, #20]
 800271a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	699b      	ldr	r3, [r3, #24]
 8002722:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	430a      	orrs	r2, r1
 800272a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	69d9      	ldr	r1, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a1a      	ldr	r2, [r3, #32]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f042 0201 	orr.w	r2, r2, #1
 800274a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2220      	movs	r2, #32
 8002756:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2200      	movs	r2, #0
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3708      	adds	r7, #8
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
	...

08002774 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b088      	sub	sp, #32
 8002778:	af02      	add	r7, sp, #8
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	461a      	mov	r2, r3
 8002780:	460b      	mov	r3, r1
 8002782:	817b      	strh	r3, [r7, #10]
 8002784:	4613      	mov	r3, r2
 8002786:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	f040 80da 	bne.w	800294a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800279c:	2b01      	cmp	r3, #1
 800279e:	d101      	bne.n	80027a4 <HAL_I2C_Master_Transmit+0x30>
 80027a0:	2302      	movs	r3, #2
 80027a2:	e0d3      	b.n	800294c <HAL_I2C_Master_Transmit+0x1d8>
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80027ac:	f7ff fca0 	bl	80020f0 <HAL_GetTick>
 80027b0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	9300      	str	r3, [sp, #0]
 80027b6:	2319      	movs	r3, #25
 80027b8:	2201      	movs	r2, #1
 80027ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027be:	68f8      	ldr	r0, [r7, #12]
 80027c0:	f000 f9e6 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e0be      	b.n	800294c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2221      	movs	r2, #33	; 0x21
 80027d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2210      	movs	r2, #16
 80027da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	2200      	movs	r2, #0
 80027e2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	893a      	ldrh	r2, [r7, #8]
 80027ee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	2bff      	cmp	r3, #255	; 0xff
 80027fe:	d90e      	bls.n	800281e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	22ff      	movs	r2, #255	; 0xff
 8002804:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800280a:	b2da      	uxtb	r2, r3
 800280c:	8979      	ldrh	r1, [r7, #10]
 800280e:	4b51      	ldr	r3, [pc, #324]	; (8002954 <HAL_I2C_Master_Transmit+0x1e0>)
 8002810:	9300      	str	r3, [sp, #0]
 8002812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 fbdc 	bl	8002fd4 <I2C_TransferConfig>
 800281c:	e06c      	b.n	80028f8 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002822:	b29a      	uxth	r2, r3
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800282c:	b2da      	uxtb	r2, r3
 800282e:	8979      	ldrh	r1, [r7, #10]
 8002830:	4b48      	ldr	r3, [pc, #288]	; (8002954 <HAL_I2C_Master_Transmit+0x1e0>)
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 fbcb 	bl	8002fd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800283e:	e05b      	b.n	80028f8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	6a39      	ldr	r1, [r7, #32]
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f000 f9e3 	bl	8002c10 <I2C_WaitOnTXISFlagUntilTimeout>
 800284a:	4603      	mov	r3, r0
 800284c:	2b00      	cmp	r3, #0
 800284e:	d001      	beq.n	8002854 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e07b      	b.n	800294c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002858:	781a      	ldrb	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002864:	1c5a      	adds	r2, r3, #1
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800286e:	b29b      	uxth	r3, r3
 8002870:	3b01      	subs	r3, #1
 8002872:	b29a      	uxth	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800287c:	3b01      	subs	r3, #1
 800287e:	b29a      	uxth	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002888:	b29b      	uxth	r3, r3
 800288a:	2b00      	cmp	r3, #0
 800288c:	d034      	beq.n	80028f8 <HAL_I2C_Master_Transmit+0x184>
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	2b00      	cmp	r3, #0
 8002894:	d130      	bne.n	80028f8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	6a3b      	ldr	r3, [r7, #32]
 800289c:	2200      	movs	r2, #0
 800289e:	2180      	movs	r1, #128	; 0x80
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f000 f975 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d001      	beq.n	80028b0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e04d      	b.n	800294c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	2bff      	cmp	r3, #255	; 0xff
 80028b8:	d90e      	bls.n	80028d8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	22ff      	movs	r2, #255	; 0xff
 80028be:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	8979      	ldrh	r1, [r7, #10]
 80028c8:	2300      	movs	r3, #0
 80028ca:	9300      	str	r3, [sp, #0]
 80028cc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 fb7f 	bl	8002fd4 <I2C_TransferConfig>
 80028d6:	e00f      	b.n	80028f8 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028dc:	b29a      	uxth	r2, r3
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e6:	b2da      	uxtb	r2, r3
 80028e8:	8979      	ldrh	r1, [r7, #10]
 80028ea:	2300      	movs	r3, #0
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fb6e 	bl	8002fd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fc:	b29b      	uxth	r3, r3
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d19e      	bne.n	8002840 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	6a39      	ldr	r1, [r7, #32]
 8002906:	68f8      	ldr	r0, [r7, #12]
 8002908:	f000 f9c2 	bl	8002c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 800290c:	4603      	mov	r3, r0
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e01a      	b.n	800294c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2220      	movs	r2, #32
 800291c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	6859      	ldr	r1, [r3, #4]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_I2C_Master_Transmit+0x1e4>)
 800292a:	400b      	ands	r3, r1
 800292c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	2220      	movs	r2, #32
 8002932:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	2200      	movs	r2, #0
 800293a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	2200      	movs	r2, #0
 8002942:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002946:	2300      	movs	r3, #0
 8002948:	e000      	b.n	800294c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800294a:	2302      	movs	r3, #2
  }
}
 800294c:	4618      	mov	r0, r3
 800294e:	3718      	adds	r7, #24
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	80002000 	.word	0x80002000
 8002958:	fe00e800 	.word	0xfe00e800

0800295c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b088      	sub	sp, #32
 8002960:	af02      	add	r7, sp, #8
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	607a      	str	r2, [r7, #4]
 8002966:	461a      	mov	r2, r3
 8002968:	460b      	mov	r3, r1
 800296a:	817b      	strh	r3, [r7, #10]
 800296c:	4613      	mov	r3, r2
 800296e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b20      	cmp	r3, #32
 800297a:	f040 80db 	bne.w	8002b34 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_I2C_Master_Receive+0x30>
 8002988:	2302      	movs	r3, #2
 800298a:	e0d4      	b.n	8002b36 <HAL_I2C_Master_Receive+0x1da>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002994:	f7ff fbac 	bl	80020f0 <HAL_GetTick>
 8002998:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2319      	movs	r3, #25
 80029a0:	2201      	movs	r2, #1
 80029a2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80029a6:	68f8      	ldr	r0, [r7, #12]
 80029a8:	f000 f8f2 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d001      	beq.n	80029b6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e0bf      	b.n	8002b36 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2222      	movs	r2, #34	; 0x22
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2210      	movs	r2, #16
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	893a      	ldrh	r2, [r7, #8]
 80029d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2bff      	cmp	r3, #255	; 0xff
 80029e6:	d90e      	bls.n	8002a06 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	22ff      	movs	r2, #255	; 0xff
 80029ec:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f2:	b2da      	uxtb	r2, r3
 80029f4:	8979      	ldrh	r1, [r7, #10]
 80029f6:	4b52      	ldr	r3, [pc, #328]	; (8002b40 <HAL_I2C_Master_Receive+0x1e4>)
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80029fe:	68f8      	ldr	r0, [r7, #12]
 8002a00:	f000 fae8 	bl	8002fd4 <I2C_TransferConfig>
 8002a04:	e06d      	b.n	8002ae2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a14:	b2da      	uxtb	r2, r3
 8002a16:	8979      	ldrh	r1, [r7, #10]
 8002a18:	4b49      	ldr	r3, [pc, #292]	; (8002b40 <HAL_I2C_Master_Receive+0x1e4>)
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a20:	68f8      	ldr	r0, [r7, #12]
 8002a22:	f000 fad7 	bl	8002fd4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002a26:	e05c      	b.n	8002ae2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a28:	697a      	ldr	r2, [r7, #20]
 8002a2a:	6a39      	ldr	r1, [r7, #32]
 8002a2c:	68f8      	ldr	r0, [r7, #12]
 8002a2e:	f000 f96b 	bl	8002d08 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a32:	4603      	mov	r3, r0
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d001      	beq.n	8002a3c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e07c      	b.n	8002b36 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a46:	b2d2      	uxtb	r2, r2
 8002a48:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4e:	1c5a      	adds	r2, r3, #1
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	b29a      	uxth	r2, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	3b01      	subs	r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d034      	beq.n	8002ae2 <HAL_I2C_Master_Receive+0x186>
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d130      	bne.n	8002ae2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2200      	movs	r2, #0
 8002a88:	2180      	movs	r1, #128	; 0x80
 8002a8a:	68f8      	ldr	r0, [r7, #12]
 8002a8c:	f000 f880 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 8002a90:	4603      	mov	r3, r0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d001      	beq.n	8002a9a <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002a96:	2301      	movs	r3, #1
 8002a98:	e04d      	b.n	8002b36 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	2bff      	cmp	r3, #255	; 0xff
 8002aa2:	d90e      	bls.n	8002ac2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	22ff      	movs	r2, #255	; 0xff
 8002aa8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aae:	b2da      	uxtb	r2, r3
 8002ab0:	8979      	ldrh	r1, [r7, #10]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	9300      	str	r3, [sp, #0]
 8002ab6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002aba:	68f8      	ldr	r0, [r7, #12]
 8002abc:	f000 fa8a 	bl	8002fd4 <I2C_TransferConfig>
 8002ac0:	e00f      	b.n	8002ae2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	8979      	ldrh	r1, [r7, #10]
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002adc:	68f8      	ldr	r0, [r7, #12]
 8002ade:	f000 fa79 	bl	8002fd4 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d19d      	bne.n	8002a28 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002aec:	697a      	ldr	r2, [r7, #20]
 8002aee:	6a39      	ldr	r1, [r7, #32]
 8002af0:	68f8      	ldr	r0, [r7, #12]
 8002af2:	f000 f8cd 	bl	8002c90 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002af6:	4603      	mov	r3, r0
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d001      	beq.n	8002b00 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e01a      	b.n	8002b36 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	2220      	movs	r2, #32
 8002b06:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6859      	ldr	r1, [r3, #4]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_I2C_Master_Receive+0x1e8>)
 8002b14:	400b      	ands	r3, r1
 8002b16:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	80002400 	.word	0x80002400
 8002b44:	fe00e800 	.word	0xfe00e800

08002b48 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	699b      	ldr	r3, [r3, #24]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b02      	cmp	r3, #2
 8002b5c:	d103      	bne.n	8002b66 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2200      	movs	r2, #0
 8002b64:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d007      	beq.n	8002b84 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	699a      	ldr	r2, [r3, #24]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f042 0201 	orr.w	r2, r2, #1
 8002b82:	619a      	str	r2, [r3, #24]
  }
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	e022      	b.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba8:	d01e      	beq.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002baa:	f7ff faa1 	bl	80020f0 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d302      	bcc.n	8002bc0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d113      	bne.n	8002be8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc4:	f043 0220 	orr.w	r2, r3, #32
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2220      	movs	r2, #32
 8002bd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e00f      	b.n	8002c08 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	68ba      	ldr	r2, [r7, #8]
 8002bf4:	429a      	cmp	r2, r3
 8002bf6:	bf0c      	ite	eq
 8002bf8:	2301      	moveq	r3, #1
 8002bfa:	2300      	movne	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	461a      	mov	r2, r3
 8002c00:	79fb      	ldrb	r3, [r7, #7]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d0cd      	beq.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3710      	adds	r7, #16
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	bd80      	pop	{r7, pc}

08002c10 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	60f8      	str	r0, [r7, #12]
 8002c18:	60b9      	str	r1, [r7, #8]
 8002c1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c1c:	e02c      	b.n	8002c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	68f8      	ldr	r0, [r7, #12]
 8002c24:	f000 f8ea 	bl	8002dfc <I2C_IsErrorOccurred>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e02a      	b.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c38:	d01e      	beq.n	8002c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c3a:	f7ff fa59 	bl	80020f0 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	68ba      	ldr	r2, [r7, #8]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d302      	bcc.n	8002c50 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d113      	bne.n	8002c78 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2220      	movs	r2, #32
 8002c60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2200      	movs	r2, #0
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	699b      	ldr	r3, [r3, #24]
 8002c7e:	f003 0302 	and.w	r3, r3, #2
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d1cb      	bne.n	8002c1e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002c9c:	e028      	b.n	8002cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	68b9      	ldr	r1, [r7, #8]
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f8aa 	bl	8002dfc <I2C_IsErrorOccurred>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e026      	b.n	8002d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cb2:	f7ff fa1d 	bl	80020f0 <HAL_GetTick>
 8002cb6:	4602      	mov	r2, r0
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	1ad3      	subs	r3, r2, r3
 8002cbc:	68ba      	ldr	r2, [r7, #8]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d302      	bcc.n	8002cc8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d113      	bne.n	8002cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ccc:	f043 0220 	orr.w	r2, r3, #32
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	2220      	movs	r2, #32
 8002cd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e007      	b.n	8002d00 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b20      	cmp	r3, #32
 8002cfc:	d1cf      	bne.n	8002c9e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3710      	adds	r7, #16
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}

08002d08 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b084      	sub	sp, #16
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	60b9      	str	r1, [r7, #8]
 8002d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002d14:	e064      	b.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	68b9      	ldr	r1, [r7, #8]
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f86e 	bl	8002dfc <I2C_IsErrorOccurred>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e062      	b.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	f003 0320 	and.w	r3, r3, #32
 8002d34:	2b20      	cmp	r3, #32
 8002d36:	d138      	bne.n	8002daa <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d105      	bne.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d001      	beq.n	8002d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	e04e      	b.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	f003 0310 	and.w	r3, r3, #16
 8002d5c:	2b10      	cmp	r3, #16
 8002d5e:	d107      	bne.n	8002d70 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2210      	movs	r2, #16
 8002d66:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2204      	movs	r2, #4
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
 8002d6e:	e002      	b.n	8002d76 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2220      	movs	r2, #32
 8002d7c:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	6859      	ldr	r1, [r3, #4]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	4b1b      	ldr	r3, [pc, #108]	; (8002df8 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002d8a:	400b      	ands	r3, r1
 8002d8c:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2220      	movs	r2, #32
 8002d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002daa:	f7ff f9a1 	bl	80020f0 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	68ba      	ldr	r2, [r7, #8]
 8002db6:	429a      	cmp	r2, r3
 8002db8:	d302      	bcc.n	8002dc0 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10f      	bne.n	8002de0 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc4:	f043 0220 	orr.w	r2, r3, #32
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2220      	movs	r2, #32
 8002dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e007      	b.n	8002df0 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f003 0304 	and.w	r3, r3, #4
 8002dea:	2b04      	cmp	r3, #4
 8002dec:	d193      	bne.n	8002d16 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}
 8002df8:	fe00e800 	.word	0xfe00e800

08002dfc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08a      	sub	sp, #40	; 0x28
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	60f8      	str	r0, [r7, #12]
 8002e04:	60b9      	str	r1, [r7, #8]
 8002e06:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002e16:	2300      	movs	r3, #0
 8002e18:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002e1e:	69bb      	ldr	r3, [r7, #24]
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d075      	beq.n	8002f14 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e30:	e056      	b.n	8002ee0 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002e32:	68bb      	ldr	r3, [r7, #8]
 8002e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e38:	d052      	beq.n	8002ee0 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e3a:	f7ff f959 	bl	80020f0 <HAL_GetTick>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	1ad3      	subs	r3, r2, r3
 8002e44:	68ba      	ldr	r2, [r7, #8]
 8002e46:	429a      	cmp	r2, r3
 8002e48:	d302      	bcc.n	8002e50 <I2C_IsErrorOccurred+0x54>
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d147      	bne.n	8002ee0 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e5a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e62:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	699b      	ldr	r3, [r3, #24]
 8002e6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e72:	d12e      	bne.n	8002ed2 <I2C_IsErrorOccurred+0xd6>
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e7a:	d02a      	beq.n	8002ed2 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002e7c:	7cfb      	ldrb	r3, [r7, #19]
 8002e7e:	2b20      	cmp	r3, #32
 8002e80:	d027      	beq.n	8002ed2 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	685a      	ldr	r2, [r3, #4]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e90:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e92:	f7ff f92d 	bl	80020f0 <HAL_GetTick>
 8002e96:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e98:	e01b      	b.n	8002ed2 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e9a:	f7ff f929 	bl	80020f0 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	69fb      	ldr	r3, [r7, #28]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	2b19      	cmp	r3, #25
 8002ea6:	d914      	bls.n	8002ed2 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eac:	f043 0220 	orr.w	r2, r3, #32
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0320 	and.w	r3, r3, #32
 8002edc:	2b20      	cmp	r3, #32
 8002ede:	d1dc      	bne.n	8002e9a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	f003 0320 	and.w	r3, r3, #32
 8002eea:	2b20      	cmp	r3, #32
 8002eec:	d003      	beq.n	8002ef6 <I2C_IsErrorOccurred+0xfa>
 8002eee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d09d      	beq.n	8002e32 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d103      	bne.n	8002f06 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2220      	movs	r2, #32
 8002f04:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002f06:	6a3b      	ldr	r3, [r7, #32]
 8002f08:	f043 0304 	orr.w	r3, r3, #4
 8002f0c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002f1c:	69bb      	ldr	r3, [r7, #24]
 8002f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00b      	beq.n	8002f3e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002f26:	6a3b      	ldr	r3, [r7, #32]
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002f36:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d00b      	beq.n	8002f60 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002f48:	6a3b      	ldr	r3, [r7, #32]
 8002f4a:	f043 0308 	orr.w	r3, r3, #8
 8002f4e:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f58:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002f60:	69bb      	ldr	r3, [r7, #24]
 8002f62:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d00b      	beq.n	8002f82 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002f6a:	6a3b      	ldr	r3, [r7, #32]
 8002f6c:	f043 0302 	orr.w	r3, r3, #2
 8002f70:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f7a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002f82:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d01c      	beq.n	8002fc4 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f8a:	68f8      	ldr	r0, [r7, #12]
 8002f8c:	f7ff fddc 	bl	8002b48 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6859      	ldr	r1, [r3, #4]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681a      	ldr	r2, [r3, #0]
 8002f9a:	4b0d      	ldr	r3, [pc, #52]	; (8002fd0 <I2C_IsErrorOccurred+0x1d4>)
 8002f9c:	400b      	ands	r3, r1
 8002f9e:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2220      	movs	r2, #32
 8002fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002fc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3728      	adds	r7, #40	; 0x28
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	fe00e800 	.word	0xfe00e800

08002fd4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b087      	sub	sp, #28
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	60f8      	str	r0, [r7, #12]
 8002fdc:	607b      	str	r3, [r7, #4]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	817b      	strh	r3, [r7, #10]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002fe6:	897b      	ldrh	r3, [r7, #10]
 8002fe8:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002fec:	7a7b      	ldrb	r3, [r7, #9]
 8002fee:	041b      	lsls	r3, r3, #16
 8002ff0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ff4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ffa:	6a3b      	ldr	r3, [r7, #32]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003002:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	6a3b      	ldr	r3, [r7, #32]
 800300c:	0d5b      	lsrs	r3, r3, #21
 800300e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <I2C_TransferConfig+0x60>)
 8003014:	430b      	orrs	r3, r1
 8003016:	43db      	mvns	r3, r3
 8003018:	ea02 0103 	and.w	r1, r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	697a      	ldr	r2, [r7, #20]
 8003022:	430a      	orrs	r2, r1
 8003024:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003026:	bf00      	nop
 8003028:	371c      	adds	r7, #28
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	03ff63ff 	.word	0x03ff63ff

08003038 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b20      	cmp	r3, #32
 800304c:	d138      	bne.n	80030c0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003054:	2b01      	cmp	r3, #1
 8003056:	d101      	bne.n	800305c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003058:	2302      	movs	r3, #2
 800305a:	e032      	b.n	80030c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2201      	movs	r2, #1
 8003060:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2224      	movs	r2, #36	; 0x24
 8003068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	681a      	ldr	r2, [r3, #0]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f022 0201 	bic.w	r2, r2, #1
 800307a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800308a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6819      	ldr	r1, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	683a      	ldr	r2, [r7, #0]
 8003098:	430a      	orrs	r2, r1
 800309a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0201 	orr.w	r2, r2, #1
 80030aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80030bc:	2300      	movs	r3, #0
 80030be:	e000      	b.n	80030c2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80030c0:	2302      	movs	r3, #2
  }
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80030ce:	b480      	push	{r7}
 80030d0:	b085      	sub	sp, #20
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	6078      	str	r0, [r7, #4]
 80030d6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b20      	cmp	r3, #32
 80030e2:	d139      	bne.n	8003158 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d101      	bne.n	80030f2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80030ee:	2302      	movs	r3, #2
 80030f0:	e033      	b.n	800315a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2201      	movs	r2, #1
 80030f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2224      	movs	r2, #36	; 0x24
 80030fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003120:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	021b      	lsls	r3, r3, #8
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	68fa      	ldr	r2, [r7, #12]
 8003132:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2220      	movs	r2, #32
 8003148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003154:	2300      	movs	r3, #0
 8003156:	e000      	b.n	800315a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003158:	2302      	movs	r3, #2
  }
}
 800315a:	4618      	mov	r0, r3
 800315c:	3714      	adds	r7, #20
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr
	...

08003168 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800316c:	4b04      	ldr	r3, [pc, #16]	; (8003180 <HAL_PWREx_GetVoltageRange+0x18>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003174:	4618      	mov	r0, r3
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40007000 	.word	0x40007000

08003184 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003184:	b480      	push	{r7}
 8003186:	b085      	sub	sp, #20
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003192:	d130      	bne.n	80031f6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003194:	4b23      	ldr	r3, [pc, #140]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d038      	beq.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80031a2:	4b20      	ldr	r3, [pc, #128]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031aa:	4a1e      	ldr	r2, [pc, #120]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80031b0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80031b2:	4b1d      	ldr	r3, [pc, #116]	; (8003228 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2232      	movs	r2, #50	; 0x32
 80031b8:	fb02 f303 	mul.w	r3, r2, r3
 80031bc:	4a1b      	ldr	r2, [pc, #108]	; (800322c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80031be:	fba2 2303 	umull	r2, r3, r2, r3
 80031c2:	0c9b      	lsrs	r3, r3, #18
 80031c4:	3301      	adds	r3, #1
 80031c6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031c8:	e002      	b.n	80031d0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80031d0:	4b14      	ldr	r3, [pc, #80]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031d2:	695b      	ldr	r3, [r3, #20]
 80031d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031dc:	d102      	bne.n	80031e4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1f2      	bne.n	80031ca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031e4:	4b0f      	ldr	r3, [pc, #60]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031f0:	d110      	bne.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e00f      	b.n	8003216 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80031f6:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80031fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003202:	d007      	beq.n	8003214 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003204:	4b07      	ldr	r3, [pc, #28]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800320c:	4a05      	ldr	r2, [pc, #20]	; (8003224 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800320e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003212:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40007000 	.word	0x40007000
 8003228:	20000000 	.word	0x20000000
 800322c:	431bde83 	.word	0x431bde83

08003230 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b088      	sub	sp, #32
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d102      	bne.n	8003244 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800323e:	2301      	movs	r3, #1
 8003240:	f000 bc02 	b.w	8003a48 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003244:	4b96      	ldr	r3, [pc, #600]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	f003 030c 	and.w	r3, r3, #12
 800324c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800324e:	4b94      	ldr	r3, [pc, #592]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0310 	and.w	r3, r3, #16
 8003260:	2b00      	cmp	r3, #0
 8003262:	f000 80e4 	beq.w	800342e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d007      	beq.n	800327c <HAL_RCC_OscConfig+0x4c>
 800326c:	69bb      	ldr	r3, [r7, #24]
 800326e:	2b0c      	cmp	r3, #12
 8003270:	f040 808b 	bne.w	800338a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003274:	697b      	ldr	r3, [r7, #20]
 8003276:	2b01      	cmp	r3, #1
 8003278:	f040 8087 	bne.w	800338a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f003 0302 	and.w	r3, r3, #2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d005      	beq.n	8003294 <HAL_RCC_OscConfig+0x64>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e3d9      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1a      	ldr	r2, [r3, #32]
 8003298:	4b81      	ldr	r3, [pc, #516]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0308 	and.w	r3, r3, #8
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d004      	beq.n	80032ae <HAL_RCC_OscConfig+0x7e>
 80032a4:	4b7e      	ldr	r3, [pc, #504]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ac:	e005      	b.n	80032ba <HAL_RCC_OscConfig+0x8a>
 80032ae:	4b7c      	ldr	r3, [pc, #496]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032b4:	091b      	lsrs	r3, r3, #4
 80032b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d223      	bcs.n	8003306 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f000 fd8c 	bl	8003de0 <RCC_SetFlashLatencyFromMSIRange>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d001      	beq.n	80032d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e3ba      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d2:	4b73      	ldr	r3, [pc, #460]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a72      	ldr	r2, [pc, #456]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	496d      	ldr	r1, [pc, #436]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f0:	4b6b      	ldr	r3, [pc, #428]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	4968      	ldr	r1, [pc, #416]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]
 8003304:	e025      	b.n	8003352 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003306:	4b66      	ldr	r3, [pc, #408]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a65      	ldr	r2, [pc, #404]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800330c:	f043 0308 	orr.w	r3, r3, #8
 8003310:	6013      	str	r3, [r2, #0]
 8003312:	4b63      	ldr	r3, [pc, #396]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4960      	ldr	r1, [pc, #384]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003324:	4b5e      	ldr	r3, [pc, #376]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	69db      	ldr	r3, [r3, #28]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	495b      	ldr	r1, [pc, #364]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003334:	4313      	orrs	r3, r2
 8003336:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a1b      	ldr	r3, [r3, #32]
 8003342:	4618      	mov	r0, r3
 8003344:	f000 fd4c 	bl	8003de0 <RCC_SetFlashLatencyFromMSIRange>
 8003348:	4603      	mov	r3, r0
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e37a      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003352:	f000 fc81 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003356:	4602      	mov	r2, r0
 8003358:	4b51      	ldr	r3, [pc, #324]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800335a:	689b      	ldr	r3, [r3, #8]
 800335c:	091b      	lsrs	r3, r3, #4
 800335e:	f003 030f 	and.w	r3, r3, #15
 8003362:	4950      	ldr	r1, [pc, #320]	; (80034a4 <HAL_RCC_OscConfig+0x274>)
 8003364:	5ccb      	ldrb	r3, [r1, r3]
 8003366:	f003 031f 	and.w	r3, r3, #31
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a4e      	ldr	r2, [pc, #312]	; (80034a8 <HAL_RCC_OscConfig+0x278>)
 8003370:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003372:	4b4e      	ldr	r3, [pc, #312]	; (80034ac <HAL_RCC_OscConfig+0x27c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fe6a 	bl	8002050 <HAL_InitTick>
 800337c:	4603      	mov	r3, r0
 800337e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003380:	7bfb      	ldrb	r3, [r7, #15]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d052      	beq.n	800342c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003386:	7bfb      	ldrb	r3, [r7, #15]
 8003388:	e35e      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	699b      	ldr	r3, [r3, #24]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d032      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003392:	4b43      	ldr	r3, [pc, #268]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a42      	ldr	r2, [pc, #264]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003398:	f043 0301 	orr.w	r3, r3, #1
 800339c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800339e:	f7fe fea7 	bl	80020f0 <HAL_GetTick>
 80033a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033a4:	e008      	b.n	80033b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033a6:	f7fe fea3 	bl	80020f0 <HAL_GetTick>
 80033aa:	4602      	mov	r2, r0
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	1ad3      	subs	r3, r2, r3
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d901      	bls.n	80033b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80033b4:	2303      	movs	r3, #3
 80033b6:	e347      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80033b8:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0f0      	beq.n	80033a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80033c4:	4b36      	ldr	r3, [pc, #216]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a35      	ldr	r2, [pc, #212]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033ca:	f043 0308 	orr.w	r3, r3, #8
 80033ce:	6013      	str	r3, [r2, #0]
 80033d0:	4b33      	ldr	r3, [pc, #204]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	4930      	ldr	r1, [pc, #192]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033de:	4313      	orrs	r3, r2
 80033e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	69db      	ldr	r3, [r3, #28]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	492b      	ldr	r1, [pc, #172]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
 80033f6:	e01a      	b.n	800342e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033f8:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a28      	ldr	r2, [pc, #160]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 80033fe:	f023 0301 	bic.w	r3, r3, #1
 8003402:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003404:	f7fe fe74 	bl	80020f0 <HAL_GetTick>
 8003408:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800340a:	e008      	b.n	800341e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800340c:	f7fe fe70 	bl	80020f0 <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	693b      	ldr	r3, [r7, #16]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	2b02      	cmp	r3, #2
 8003418:	d901      	bls.n	800341e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e314      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	2b00      	cmp	r3, #0
 8003428:	d1f0      	bne.n	800340c <HAL_RCC_OscConfig+0x1dc>
 800342a:	e000      	b.n	800342e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800342c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b00      	cmp	r3, #0
 8003438:	d073      	beq.n	8003522 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800343a:	69bb      	ldr	r3, [r7, #24]
 800343c:	2b08      	cmp	r3, #8
 800343e:	d005      	beq.n	800344c <HAL_RCC_OscConfig+0x21c>
 8003440:	69bb      	ldr	r3, [r7, #24]
 8003442:	2b0c      	cmp	r3, #12
 8003444:	d10e      	bne.n	8003464 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003446:	697b      	ldr	r3, [r7, #20]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d10b      	bne.n	8003464 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800344c:	4b14      	ldr	r3, [pc, #80]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d063      	beq.n	8003520 <HAL_RCC_OscConfig+0x2f0>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d15f      	bne.n	8003520 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e2f1      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800346c:	d106      	bne.n	800347c <HAL_RCC_OscConfig+0x24c>
 800346e:	4b0c      	ldr	r3, [pc, #48]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a0b      	ldr	r2, [pc, #44]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003478:	6013      	str	r3, [r2, #0]
 800347a:	e025      	b.n	80034c8 <HAL_RCC_OscConfig+0x298>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003484:	d114      	bne.n	80034b0 <HAL_RCC_OscConfig+0x280>
 8003486:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a05      	ldr	r2, [pc, #20]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 800348c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003490:	6013      	str	r3, [r2, #0]
 8003492:	4b03      	ldr	r3, [pc, #12]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a02      	ldr	r2, [pc, #8]	; (80034a0 <HAL_RCC_OscConfig+0x270>)
 8003498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800349c:	6013      	str	r3, [r2, #0]
 800349e:	e013      	b.n	80034c8 <HAL_RCC_OscConfig+0x298>
 80034a0:	40021000 	.word	0x40021000
 80034a4:	08008028 	.word	0x08008028
 80034a8:	20000000 	.word	0x20000000
 80034ac:	20000004 	.word	0x20000004
 80034b0:	4ba0      	ldr	r3, [pc, #640]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a9f      	ldr	r2, [pc, #636]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034ba:	6013      	str	r3, [r2, #0]
 80034bc:	4b9d      	ldr	r3, [pc, #628]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a9c      	ldr	r2, [pc, #624]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80034c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d013      	beq.n	80034f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d0:	f7fe fe0e 	bl	80020f0 <HAL_GetTick>
 80034d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034d6:	e008      	b.n	80034ea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034d8:	f7fe fe0a 	bl	80020f0 <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	2b64      	cmp	r3, #100	; 0x64
 80034e4:	d901      	bls.n	80034ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034e6:	2303      	movs	r3, #3
 80034e8:	e2ae      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034ea:	4b92      	ldr	r3, [pc, #584]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d0f0      	beq.n	80034d8 <HAL_RCC_OscConfig+0x2a8>
 80034f6:	e014      	b.n	8003522 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fdfa 	bl	80020f0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003500:	f7fe fdf6 	bl	80020f0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b64      	cmp	r3, #100	; 0x64
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e29a      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003512:	4b88      	ldr	r3, [pc, #544]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x2d0>
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003520:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b00      	cmp	r3, #0
 800352c:	d060      	beq.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800352e:	69bb      	ldr	r3, [r7, #24]
 8003530:	2b04      	cmp	r3, #4
 8003532:	d005      	beq.n	8003540 <HAL_RCC_OscConfig+0x310>
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	2b0c      	cmp	r3, #12
 8003538:	d119      	bne.n	800356e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d116      	bne.n	800356e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003540:	4b7c      	ldr	r3, [pc, #496]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_OscConfig+0x328>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e277      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003558:	4b76      	ldr	r3, [pc, #472]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	061b      	lsls	r3, r3, #24
 8003566:	4973      	ldr	r1, [pc, #460]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003568:	4313      	orrs	r3, r2
 800356a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800356c:	e040      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d023      	beq.n	80035be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003576:	4b6f      	ldr	r3, [pc, #444]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a6e      	ldr	r2, [pc, #440]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800357c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003580:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003582:	f7fe fdb5 	bl	80020f0 <HAL_GetTick>
 8003586:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003588:	e008      	b.n	800359c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800358a:	f7fe fdb1 	bl	80020f0 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	2b02      	cmp	r3, #2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e255      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800359c:	4b65      	ldr	r3, [pc, #404]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d0f0      	beq.n	800358a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035a8:	4b62      	ldr	r3, [pc, #392]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035aa:	685b      	ldr	r3, [r3, #4]
 80035ac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	495f      	ldr	r1, [pc, #380]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
 80035bc:	e018      	b.n	80035f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035be:	4b5d      	ldr	r3, [pc, #372]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4a5c      	ldr	r2, [pc, #368]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe fd91 	bl	80020f0 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035d2:	f7fe fd8d 	bl	80020f0 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e231      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035e4:	4b53      	ldr	r3, [pc, #332]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1f0      	bne.n	80035d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 0308 	and.w	r3, r3, #8
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d03c      	beq.n	8003676 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d01c      	beq.n	800363e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003604:	4b4b      	ldr	r3, [pc, #300]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360a:	4a4a      	ldr	r2, [pc, #296]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003614:	f7fe fd6c 	bl	80020f0 <HAL_GetTick>
 8003618:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800361a:	e008      	b.n	800362e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361c:	f7fe fd68 	bl	80020f0 <HAL_GetTick>
 8003620:	4602      	mov	r2, r0
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	1ad3      	subs	r3, r2, r3
 8003626:	2b02      	cmp	r3, #2
 8003628:	d901      	bls.n	800362e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e20c      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800362e:	4b41      	ldr	r3, [pc, #260]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003630:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0ef      	beq.n	800361c <HAL_RCC_OscConfig+0x3ec>
 800363c:	e01b      	b.n	8003676 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800363e:	4b3d      	ldr	r3, [pc, #244]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003644:	4a3b      	ldr	r2, [pc, #236]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003646:	f023 0301 	bic.w	r3, r3, #1
 800364a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800364e:	f7fe fd4f 	bl	80020f0 <HAL_GetTick>
 8003652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003654:	e008      	b.n	8003668 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003656:	f7fe fd4b 	bl	80020f0 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d901      	bls.n	8003668 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e1ef      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003668:	4b32      	ldr	r3, [pc, #200]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800366a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d1ef      	bne.n	8003656 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 0304 	and.w	r3, r3, #4
 800367e:	2b00      	cmp	r3, #0
 8003680:	f000 80a6 	beq.w	80037d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003684:	2300      	movs	r3, #0
 8003686:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003688:	4b2a      	ldr	r3, [pc, #168]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003694:	4b27      	ldr	r3, [pc, #156]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003698:	4a26      	ldr	r2, [pc, #152]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 800369a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800369e:	6593      	str	r3, [r2, #88]	; 0x58
 80036a0:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80036a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036ac:	2301      	movs	r3, #1
 80036ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036b0:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d118      	bne.n	80036ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80036bc:	4b1e      	ldr	r3, [pc, #120]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a1d      	ldr	r2, [pc, #116]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c8:	f7fe fd12 	bl	80020f0 <HAL_GetTick>
 80036cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ce:	e008      	b.n	80036e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d0:	f7fe fd0e 	bl	80020f0 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	2b02      	cmp	r3, #2
 80036dc:	d901      	bls.n	80036e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036de:	2303      	movs	r3, #3
 80036e0:	e1b2      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_OscConfig+0x508>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d0f0      	beq.n	80036d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	689b      	ldr	r3, [r3, #8]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d108      	bne.n	8003708 <HAL_RCC_OscConfig+0x4d8>
 80036f6:	4b0f      	ldr	r3, [pc, #60]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80036f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036fc:	4a0d      	ldr	r2, [pc, #52]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 80036fe:	f043 0301 	orr.w	r3, r3, #1
 8003702:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003706:	e029      	b.n	800375c <HAL_RCC_OscConfig+0x52c>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b05      	cmp	r3, #5
 800370e:	d115      	bne.n	800373c <HAL_RCC_OscConfig+0x50c>
 8003710:	4b08      	ldr	r3, [pc, #32]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003716:	4a07      	ldr	r2, [pc, #28]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003718:	f043 0304 	orr.w	r3, r3, #4
 800371c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003720:	4b04      	ldr	r3, [pc, #16]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003726:	4a03      	ldr	r2, [pc, #12]	; (8003734 <HAL_RCC_OscConfig+0x504>)
 8003728:	f043 0301 	orr.w	r3, r3, #1
 800372c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003730:	e014      	b.n	800375c <HAL_RCC_OscConfig+0x52c>
 8003732:	bf00      	nop
 8003734:	40021000 	.word	0x40021000
 8003738:	40007000 	.word	0x40007000
 800373c:	4b9a      	ldr	r3, [pc, #616]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 800373e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003742:	4a99      	ldr	r2, [pc, #612]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800374c:	4b96      	ldr	r3, [pc, #600]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	4a95      	ldr	r2, [pc, #596]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003754:	f023 0304 	bic.w	r3, r3, #4
 8003758:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	2b00      	cmp	r3, #0
 8003762:	d016      	beq.n	8003792 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003764:	f7fe fcc4 	bl	80020f0 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800376a:	e00a      	b.n	8003782 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800376c:	f7fe fcc0 	bl	80020f0 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	f241 3288 	movw	r2, #5000	; 0x1388
 800377a:	4293      	cmp	r3, r2
 800377c:	d901      	bls.n	8003782 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e162      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003782:	4b89      	ldr	r3, [pc, #548]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003784:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d0ed      	beq.n	800376c <HAL_RCC_OscConfig+0x53c>
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003792:	f7fe fcad 	bl	80020f0 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003798:	e00a      	b.n	80037b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800379a:	f7fe fca9 	bl	80020f0 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d901      	bls.n	80037b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e14b      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80037b0:	4b7d      	ldr	r3, [pc, #500]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1ed      	bne.n	800379a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80037be:	7ffb      	ldrb	r3, [r7, #31]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d105      	bne.n	80037d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037c4:	4b78      	ldr	r3, [pc, #480]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80037c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037c8:	4a77      	ldr	r2, [pc, #476]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80037ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80037ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0320 	and.w	r3, r3, #32
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d03c      	beq.n	8003856 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d01c      	beq.n	800381e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037e4:	4b70      	ldr	r3, [pc, #448]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80037e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ea:	4a6f      	ldr	r2, [pc, #444]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80037ec:	f043 0301 	orr.w	r3, r3, #1
 80037f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f4:	f7fe fc7c 	bl	80020f0 <HAL_GetTick>
 80037f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037fa:	e008      	b.n	800380e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037fc:	f7fe fc78 	bl	80020f0 <HAL_GetTick>
 8003800:	4602      	mov	r2, r0
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	2b02      	cmp	r3, #2
 8003808:	d901      	bls.n	800380e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e11c      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800380e:	4b66      	ldr	r3, [pc, #408]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003810:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003814:	f003 0302 	and.w	r3, r3, #2
 8003818:	2b00      	cmp	r3, #0
 800381a:	d0ef      	beq.n	80037fc <HAL_RCC_OscConfig+0x5cc>
 800381c:	e01b      	b.n	8003856 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800381e:	4b62      	ldr	r3, [pc, #392]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003820:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003824:	4a60      	ldr	r2, [pc, #384]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003826:	f023 0301 	bic.w	r3, r3, #1
 800382a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800382e:	f7fe fc5f 	bl	80020f0 <HAL_GetTick>
 8003832:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003834:	e008      	b.n	8003848 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003836:	f7fe fc5b 	bl	80020f0 <HAL_GetTick>
 800383a:	4602      	mov	r2, r0
 800383c:	693b      	ldr	r3, [r7, #16]
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	2b02      	cmp	r3, #2
 8003842:	d901      	bls.n	8003848 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003844:	2303      	movs	r3, #3
 8003846:	e0ff      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003848:	4b57      	ldr	r3, [pc, #348]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 800384a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1ef      	bne.n	8003836 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800385a:	2b00      	cmp	r3, #0
 800385c:	f000 80f3 	beq.w	8003a46 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003864:	2b02      	cmp	r3, #2
 8003866:	f040 80c9 	bne.w	80039fc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800386a:	4b4f      	ldr	r3, [pc, #316]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f003 0203 	and.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	429a      	cmp	r2, r3
 800387c:	d12c      	bne.n	80038d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003888:	3b01      	subs	r3, #1
 800388a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d123      	bne.n	80038d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800389a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d11b      	bne.n	80038d8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038aa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d113      	bne.n	80038d8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	3b01      	subs	r3, #1
 80038be:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d109      	bne.n	80038d8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	085b      	lsrs	r3, r3, #1
 80038d0:	3b01      	subs	r3, #1
 80038d2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d06b      	beq.n	80039b0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b0c      	cmp	r3, #12
 80038dc:	d062      	beq.n	80039a4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038de:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0ac      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038ee:	4b2e      	ldr	r3, [pc, #184]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a2d      	ldr	r2, [pc, #180]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 80038f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038f8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038fa:	f7fe fbf9 	bl	80020f0 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003902:	f7fe fbf5 	bl	80020f0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e099      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003914:	4b24      	ldr	r3, [pc, #144]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003920:	4b21      	ldr	r3, [pc, #132]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	4b21      	ldr	r3, [pc, #132]	; (80039ac <HAL_RCC_OscConfig+0x77c>)
 8003926:	4013      	ands	r3, r2
 8003928:	687a      	ldr	r2, [r7, #4]
 800392a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003930:	3a01      	subs	r2, #1
 8003932:	0112      	lsls	r2, r2, #4
 8003934:	4311      	orrs	r1, r2
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800393a:	0212      	lsls	r2, r2, #8
 800393c:	4311      	orrs	r1, r2
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003942:	0852      	lsrs	r2, r2, #1
 8003944:	3a01      	subs	r2, #1
 8003946:	0552      	lsls	r2, r2, #21
 8003948:	4311      	orrs	r1, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800394e:	0852      	lsrs	r2, r2, #1
 8003950:	3a01      	subs	r2, #1
 8003952:	0652      	lsls	r2, r2, #25
 8003954:	4311      	orrs	r1, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800395a:	06d2      	lsls	r2, r2, #27
 800395c:	430a      	orrs	r2, r1
 800395e:	4912      	ldr	r1, [pc, #72]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003960:	4313      	orrs	r3, r2
 8003962:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003964:	4b10      	ldr	r3, [pc, #64]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a0f      	ldr	r2, [pc, #60]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 800396a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800396e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003970:	4b0d      	ldr	r3, [pc, #52]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	4a0c      	ldr	r2, [pc, #48]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800397a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800397c:	f7fe fbb8 	bl	80020f0 <HAL_GetTick>
 8003980:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003982:	e008      	b.n	8003996 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003984:	f7fe fbb4 	bl	80020f0 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b02      	cmp	r3, #2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e058      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003996:	4b04      	ldr	r3, [pc, #16]	; (80039a8 <HAL_RCC_OscConfig+0x778>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0f0      	beq.n	8003984 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039a2:	e050      	b.n	8003a46 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e04f      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
 80039a8:	40021000 	.word	0x40021000
 80039ac:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b0:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d144      	bne.n	8003a46 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80039bc:	4b24      	ldr	r3, [pc, #144]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 80039c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039c6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039c8:	4b21      	ldr	r3, [pc, #132]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 80039ca:	68db      	ldr	r3, [r3, #12]
 80039cc:	4a20      	ldr	r2, [pc, #128]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 80039ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039d2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039d4:	f7fe fb8c 	bl	80020f0 <HAL_GetTick>
 80039d8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039da:	e008      	b.n	80039ee <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039dc:	f7fe fb88 	bl	80020f0 <HAL_GetTick>
 80039e0:	4602      	mov	r2, r0
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	1ad3      	subs	r3, r2, r3
 80039e6:	2b02      	cmp	r3, #2
 80039e8:	d901      	bls.n	80039ee <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80039ea:	2303      	movs	r3, #3
 80039ec:	e02c      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039ee:	4b18      	ldr	r3, [pc, #96]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d0f0      	beq.n	80039dc <HAL_RCC_OscConfig+0x7ac>
 80039fa:	e024      	b.n	8003a46 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	2b0c      	cmp	r3, #12
 8003a00:	d01f      	beq.n	8003a42 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a12      	ldr	r2, [pc, #72]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 8003a08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a0e:	f7fe fb6f 	bl	80020f0 <HAL_GetTick>
 8003a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a14:	e008      	b.n	8003a28 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a16:	f7fe fb6b 	bl	80020f0 <HAL_GetTick>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	1ad3      	subs	r3, r2, r3
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d901      	bls.n	8003a28 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8003a24:	2303      	movs	r3, #3
 8003a26:	e00f      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a28:	4b09      	ldr	r3, [pc, #36]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d1f0      	bne.n	8003a16 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8003a34:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 8003a36:	68da      	ldr	r2, [r3, #12]
 8003a38:	4905      	ldr	r1, [pc, #20]	; (8003a50 <HAL_RCC_OscConfig+0x820>)
 8003a3a:	4b06      	ldr	r3, [pc, #24]	; (8003a54 <HAL_RCC_OscConfig+0x824>)
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	60cb      	str	r3, [r1, #12]
 8003a40:	e001      	b.n	8003a46 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e000      	b.n	8003a48 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8003a46:	2300      	movs	r3, #0
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3720      	adds	r7, #32
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	40021000 	.word	0x40021000
 8003a54:	feeefffc 	.word	0xfeeefffc

08003a58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d101      	bne.n	8003a6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0e7      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a6c:	4b75      	ldr	r3, [pc, #468]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f003 0307 	and.w	r3, r3, #7
 8003a74:	683a      	ldr	r2, [r7, #0]
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d910      	bls.n	8003a9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a7a:	4b72      	ldr	r3, [pc, #456]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f023 0207 	bic.w	r2, r3, #7
 8003a82:	4970      	ldr	r1, [pc, #448]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a8a:	4b6e      	ldr	r3, [pc, #440]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0307 	and.w	r3, r3, #7
 8003a92:	683a      	ldr	r2, [r7, #0]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e0cf      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0302 	and.w	r3, r3, #2
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d010      	beq.n	8003aca <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	689a      	ldr	r2, [r3, #8]
 8003aac:	4b66      	ldr	r3, [pc, #408]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ab4:	429a      	cmp	r2, r3
 8003ab6:	d908      	bls.n	8003aca <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ab8:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003aba:	689b      	ldr	r3, [r3, #8]
 8003abc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	4960      	ldr	r1, [pc, #384]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d04c      	beq.n	8003b70 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	2b03      	cmp	r3, #3
 8003adc:	d107      	bne.n	8003aee <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ade:	4b5a      	ldr	r3, [pc, #360]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d121      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	e0a6      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	2b02      	cmp	r3, #2
 8003af4:	d107      	bne.n	8003b06 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003af6:	4b54      	ldr	r3, [pc, #336]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d115      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e09a      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d107      	bne.n	8003b1e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b0e:	4b4e      	ldr	r3, [pc, #312]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d109      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e08e      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b1e:	4b4a      	ldr	r3, [pc, #296]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d101      	bne.n	8003b2e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e086      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b2e:	4b46      	ldr	r3, [pc, #280]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b30:	689b      	ldr	r3, [r3, #8]
 8003b32:	f023 0203 	bic.w	r2, r3, #3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	4943      	ldr	r1, [pc, #268]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b40:	f7fe fad6 	bl	80020f0 <HAL_GetTick>
 8003b44:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b46:	e00a      	b.n	8003b5e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b48:	f7fe fad2 	bl	80020f0 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d901      	bls.n	8003b5e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e06e      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b5e:	4b3a      	ldr	r3, [pc, #232]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 020c 	and.w	r2, r3, #12
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	009b      	lsls	r3, r3, #2
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d1eb      	bne.n	8003b48 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d010      	beq.n	8003b9e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	4b31      	ldr	r3, [pc, #196]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b82:	689b      	ldr	r3, [r3, #8]
 8003b84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d208      	bcs.n	8003b9e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b8c:	4b2e      	ldr	r3, [pc, #184]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	492b      	ldr	r1, [pc, #172]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b9e:	4b29      	ldr	r3, [pc, #164]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0307 	and.w	r3, r3, #7
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d210      	bcs.n	8003bce <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f023 0207 	bic.w	r2, r3, #7
 8003bb4:	4923      	ldr	r1, [pc, #140]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bbc:	4b21      	ldr	r3, [pc, #132]	; (8003c44 <HAL_RCC_ClockConfig+0x1ec>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f003 0307 	and.w	r3, r3, #7
 8003bc4:	683a      	ldr	r2, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d001      	beq.n	8003bce <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	e036      	b.n	8003c3c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0304 	and.w	r3, r3, #4
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003bda:	4b1b      	ldr	r3, [pc, #108]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	4918      	ldr	r1, [pc, #96]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 0308 	and.w	r3, r3, #8
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d009      	beq.n	8003c0c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bf8:	4b13      	ldr	r3, [pc, #76]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	4910      	ldr	r1, [pc, #64]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c0c:	f000 f824 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8003c10:	4602      	mov	r2, r0
 8003c12:	4b0d      	ldr	r3, [pc, #52]	; (8003c48 <HAL_RCC_ClockConfig+0x1f0>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	091b      	lsrs	r3, r3, #4
 8003c18:	f003 030f 	and.w	r3, r3, #15
 8003c1c:	490b      	ldr	r1, [pc, #44]	; (8003c4c <HAL_RCC_ClockConfig+0x1f4>)
 8003c1e:	5ccb      	ldrb	r3, [r1, r3]
 8003c20:	f003 031f 	and.w	r3, r3, #31
 8003c24:	fa22 f303 	lsr.w	r3, r2, r3
 8003c28:	4a09      	ldr	r2, [pc, #36]	; (8003c50 <HAL_RCC_ClockConfig+0x1f8>)
 8003c2a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c2c:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1fc>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f7fe fa0d 	bl	8002050 <HAL_InitTick>
 8003c36:	4603      	mov	r3, r0
 8003c38:	72fb      	strb	r3, [r7, #11]

  return status;
 8003c3a:	7afb      	ldrb	r3, [r7, #11]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	40022000 	.word	0x40022000
 8003c48:	40021000 	.word	0x40021000
 8003c4c:	08008028 	.word	0x08008028
 8003c50:	20000000 	.word	0x20000000
 8003c54:	20000004 	.word	0x20000004

08003c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b089      	sub	sp, #36	; 0x24
 8003c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	61fb      	str	r3, [r7, #28]
 8003c62:	2300      	movs	r3, #0
 8003c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c66:	4b3e      	ldr	r3, [pc, #248]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f003 030c 	and.w	r3, r3, #12
 8003c6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c70:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0303 	and.w	r3, r3, #3
 8003c78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d005      	beq.n	8003c8c <HAL_RCC_GetSysClockFreq+0x34>
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b0c      	cmp	r3, #12
 8003c84:	d121      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d11e      	bne.n	8003cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003c8c:	4b34      	ldr	r3, [pc, #208]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f003 0308 	and.w	r3, r3, #8
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d107      	bne.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003c98:	4b31      	ldr	r3, [pc, #196]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c9e:	0a1b      	lsrs	r3, r3, #8
 8003ca0:	f003 030f 	and.w	r3, r3, #15
 8003ca4:	61fb      	str	r3, [r7, #28]
 8003ca6:	e005      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003ca8:	4b2d      	ldr	r3, [pc, #180]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	091b      	lsrs	r3, r3, #4
 8003cae:	f003 030f 	and.w	r3, r3, #15
 8003cb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003cb4:	4a2b      	ldr	r2, [pc, #172]	; (8003d64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10d      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003cc8:	e00a      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b04      	cmp	r3, #4
 8003cce:	d102      	bne.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003cd2:	61bb      	str	r3, [r7, #24]
 8003cd4:	e004      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	2b08      	cmp	r3, #8
 8003cda:	d101      	bne.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003cdc:	4b23      	ldr	r3, [pc, #140]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003cde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	2b0c      	cmp	r3, #12
 8003ce4:	d134      	bne.n	8003d50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b02      	cmp	r3, #2
 8003cf4:	d003      	beq.n	8003cfe <HAL_RCC_GetSysClockFreq+0xa6>
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	2b03      	cmp	r3, #3
 8003cfa:	d003      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0xac>
 8003cfc:	e005      	b.n	8003d0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003cfe:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d00:	617b      	str	r3, [r7, #20]
      break;
 8003d02:	e005      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d04:	4b19      	ldr	r3, [pc, #100]	; (8003d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8003d06:	617b      	str	r3, [r7, #20]
      break;
 8003d08:	e002      	b.n	8003d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	617b      	str	r3, [r7, #20]
      break;
 8003d0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d10:	4b13      	ldr	r3, [pc, #76]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	091b      	lsrs	r3, r3, #4
 8003d16:	f003 0307 	and.w	r3, r3, #7
 8003d1a:	3301      	adds	r3, #1
 8003d1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	0a1b      	lsrs	r3, r3, #8
 8003d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	fb03 f202 	mul.w	r2, r3, r2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d36:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	0e5b      	lsrs	r3, r3, #25
 8003d3c:	f003 0303 	and.w	r3, r3, #3
 8003d40:	3301      	adds	r3, #1
 8003d42:	005b      	lsls	r3, r3, #1
 8003d44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d50:	69bb      	ldr	r3, [r7, #24]
}
 8003d52:	4618      	mov	r0, r3
 8003d54:	3724      	adds	r7, #36	; 0x24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	40021000 	.word	0x40021000
 8003d64:	08008040 	.word	0x08008040
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	007a1200 	.word	0x007a1200

08003d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d74:	4b03      	ldr	r3, [pc, #12]	; (8003d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d76:	681b      	ldr	r3, [r3, #0]
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	20000000 	.word	0x20000000

08003d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d8c:	f7ff fff0 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003d90:	4602      	mov	r2, r0
 8003d92:	4b06      	ldr	r3, [pc, #24]	; (8003dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d94:	689b      	ldr	r3, [r3, #8]
 8003d96:	0a1b      	lsrs	r3, r3, #8
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	4904      	ldr	r1, [pc, #16]	; (8003db0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d9e:	5ccb      	ldrb	r3, [r1, r3]
 8003da0:	f003 031f 	and.w	r3, r3, #31
 8003da4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40021000 	.word	0x40021000
 8003db0:	08008038 	.word	0x08008038

08003db4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003db8:	f7ff ffda 	bl	8003d70 <HAL_RCC_GetHCLKFreq>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	4b06      	ldr	r3, [pc, #24]	; (8003dd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	0adb      	lsrs	r3, r3, #11
 8003dc4:	f003 0307 	and.w	r3, r3, #7
 8003dc8:	4904      	ldr	r1, [pc, #16]	; (8003ddc <HAL_RCC_GetPCLK2Freq+0x28>)
 8003dca:	5ccb      	ldrb	r3, [r1, r3]
 8003dcc:	f003 031f 	and.w	r3, r3, #31
 8003dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	40021000 	.word	0x40021000
 8003ddc:	08008038 	.word	0x08008038

08003de0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003de8:	2300      	movs	r3, #0
 8003dea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003dec:	4b2a      	ldr	r3, [pc, #168]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003dee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003df0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003df8:	f7ff f9b6 	bl	8003168 <HAL_PWREx_GetVoltageRange>
 8003dfc:	6178      	str	r0, [r7, #20]
 8003dfe:	e014      	b.n	8003e2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e04:	4a24      	ldr	r2, [pc, #144]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003e0c:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e14:	60fb      	str	r3, [r7, #12]
 8003e16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e18:	f7ff f9a6 	bl	8003168 <HAL_PWREx_GetVoltageRange>
 8003e1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e22:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003e24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e30:	d10b      	bne.n	8003e4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b80      	cmp	r3, #128	; 0x80
 8003e36:	d919      	bls.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2ba0      	cmp	r3, #160	; 0xa0
 8003e3c:	d902      	bls.n	8003e44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e3e:	2302      	movs	r3, #2
 8003e40:	613b      	str	r3, [r7, #16]
 8003e42:	e013      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e44:	2301      	movs	r3, #1
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e010      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d902      	bls.n	8003e56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003e50:	2303      	movs	r3, #3
 8003e52:	613b      	str	r3, [r7, #16]
 8003e54:	e00a      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2b80      	cmp	r3, #128	; 0x80
 8003e5a:	d102      	bne.n	8003e62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e5c:	2302      	movs	r3, #2
 8003e5e:	613b      	str	r3, [r7, #16]
 8003e60:	e004      	b.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d101      	bne.n	8003e6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e68:	2301      	movs	r3, #1
 8003e6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f023 0207 	bic.w	r2, r3, #7
 8003e74:	4909      	ldr	r1, [pc, #36]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003e7c:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 0307 	and.w	r3, r3, #7
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d001      	beq.n	8003e8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e000      	b.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3718      	adds	r7, #24
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	40021000 	.word	0x40021000
 8003e9c:	40022000 	.word	0x40022000

08003ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b086      	sub	sp, #24
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003eac:	2300      	movs	r3, #0
 8003eae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d031      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003ec4:	d01a      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003ec6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003eca:	d814      	bhi.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d009      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003ed4:	d10f      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003ed6:	4b5d      	ldr	r3, [pc, #372]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003ed8:	68db      	ldr	r3, [r3, #12]
 8003eda:	4a5c      	ldr	r2, [pc, #368]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003edc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ee0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ee2:	e00c      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	3304      	adds	r3, #4
 8003ee8:	2100      	movs	r1, #0
 8003eea:	4618      	mov	r0, r3
 8003eec:	f000 f9ce 	bl	800428c <RCCEx_PLLSAI1_Config>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ef4:	e003      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	74fb      	strb	r3, [r7, #19]
      break;
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8003efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003efe:	7cfb      	ldrb	r3, [r7, #19]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10b      	bne.n	8003f1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f04:	4b51      	ldr	r3, [pc, #324]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f12:	494e      	ldr	r1, [pc, #312]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003f1a:	e001      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f1c:	7cfb      	ldrb	r3, [r7, #19]
 8003f1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 809e 	beq.w	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f32:	4b46      	ldr	r3, [pc, #280]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d101      	bne.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e000      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8003f42:	2300      	movs	r3, #0
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00d      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f48:	4b40      	ldr	r3, [pc, #256]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f4c:	4a3f      	ldr	r2, [pc, #252]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f52:	6593      	str	r3, [r2, #88]	; 0x58
 8003f54:	4b3d      	ldr	r3, [pc, #244]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f60:	2301      	movs	r3, #1
 8003f62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f64:	4b3a      	ldr	r3, [pc, #232]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003f70:	f7fe f8be 	bl	80020f0 <HAL_GetTick>
 8003f74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f76:	e009      	b.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f78:	f7fe f8ba 	bl	80020f0 <HAL_GetTick>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	1ad3      	subs	r3, r2, r3
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d902      	bls.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8003f86:	2303      	movs	r3, #3
 8003f88:	74fb      	strb	r3, [r7, #19]
        break;
 8003f8a:	e005      	b.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f8c:	4b30      	ldr	r3, [pc, #192]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0ef      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8003f98:	7cfb      	ldrb	r3, [r7, #19]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d15a      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f9e:	4b2b      	ldr	r3, [pc, #172]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fa8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb4:	697a      	ldr	r2, [r7, #20]
 8003fb6:	429a      	cmp	r2, r3
 8003fb8:	d019      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003fba:	4b24      	ldr	r3, [pc, #144]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003fc6:	4b21      	ldr	r3, [pc, #132]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	4a1f      	ldr	r2, [pc, #124]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003fd6:	4b1d      	ldr	r3, [pc, #116]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	4a1b      	ldr	r2, [pc, #108]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003fe6:	4a19      	ldr	r2, [pc, #100]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d016      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fe f87a 	bl	80020f0 <HAL_GetTick>
 8003ffc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ffe:	e00b      	b.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fe f876 	bl	80020f0 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d902      	bls.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	74fb      	strb	r3, [r7, #19]
            break;
 8004016:	e006      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004018:	4b0c      	ldr	r3, [pc, #48]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800401a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0ec      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8004026:	7cfb      	ldrb	r3, [r7, #19]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d10b      	bne.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800402c:	4b07      	ldr	r3, [pc, #28]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800402e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004032:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	4904      	ldr	r1, [pc, #16]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800403c:	4313      	orrs	r3, r2
 800403e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004042:	e009      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004044:	7cfb      	ldrb	r3, [r7, #19]
 8004046:	74bb      	strb	r3, [r7, #18]
 8004048:	e006      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800404a:	bf00      	nop
 800404c:	40021000 	.word	0x40021000
 8004050:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	7cfb      	ldrb	r3, [r7, #19]
 8004056:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004058:	7c7b      	ldrb	r3, [r7, #17]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d105      	bne.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800405e:	4b8a      	ldr	r3, [pc, #552]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004062:	4a89      	ldr	r2, [pc, #548]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004064:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004068:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0301 	and.w	r3, r3, #1
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004076:	4b84      	ldr	r3, [pc, #528]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004078:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800407c:	f023 0203 	bic.w	r2, r3, #3
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4980      	ldr	r1, [pc, #512]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0302 	and.w	r3, r3, #2
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004098:	4b7b      	ldr	r3, [pc, #492]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	f023 020c 	bic.w	r2, r3, #12
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	4978      	ldr	r1, [pc, #480]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040ba:	4b73      	ldr	r3, [pc, #460]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040c0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	496f      	ldr	r1, [pc, #444]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040dc:	4b6a      	ldr	r3, [pc, #424]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040e2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ea:	4967      	ldr	r1, [pc, #412]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040fe:	4b62      	ldr	r3, [pc, #392]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004104:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800410c:	495e      	ldr	r1, [pc, #376]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004120:	4b59      	ldr	r3, [pc, #356]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004126:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4956      	ldr	r1, [pc, #344]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00a      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004142:	4b51      	ldr	r3, [pc, #324]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004150:	494d      	ldr	r1, [pc, #308]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d028      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004164:	4b48      	ldr	r3, [pc, #288]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800416a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004172:	4945      	ldr	r1, [pc, #276]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800417e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004182:	d106      	bne.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004184:	4b40      	ldr	r3, [pc, #256]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4a3f      	ldr	r2, [pc, #252]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800418a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800418e:	60d3      	str	r3, [r2, #12]
 8004190:	e011      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800419a:	d10c      	bne.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	3304      	adds	r3, #4
 80041a0:	2101      	movs	r1, #1
 80041a2:	4618      	mov	r0, r3
 80041a4:	f000 f872 	bl	800428c <RCCEx_PLLSAI1_Config>
 80041a8:	4603      	mov	r3, r0
 80041aa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041ac:	7cfb      	ldrb	r3, [r7, #19]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d001      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80041b2:	7cfb      	ldrb	r3, [r7, #19]
 80041b4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d028      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041c2:	4b31      	ldr	r3, [pc, #196]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041d0:	492d      	ldr	r1, [pc, #180]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041d2:	4313      	orrs	r3, r2
 80041d4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e0:	d106      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e2:	4b29      	ldr	r3, [pc, #164]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	4a28      	ldr	r2, [pc, #160]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80041e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ec:	60d3      	str	r3, [r2, #12]
 80041ee:	e011      	b.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041f8:	d10c      	bne.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	3304      	adds	r3, #4
 80041fe:	2101      	movs	r1, #1
 8004200:	4618      	mov	r0, r3
 8004202:	f000 f843 	bl	800428c <RCCEx_PLLSAI1_Config>
 8004206:	4603      	mov	r3, r0
 8004208:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800420a:	7cfb      	ldrb	r3, [r7, #19]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d001      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8004210:	7cfb      	ldrb	r3, [r7, #19]
 8004212:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800421c:	2b00      	cmp	r3, #0
 800421e:	d01c      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004220:	4b19      	ldr	r3, [pc, #100]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004226:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	4916      	ldr	r1, [pc, #88]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004230:	4313      	orrs	r3, r2
 8004232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800423a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423e:	d10c      	bne.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	3304      	adds	r3, #4
 8004244:	2102      	movs	r1, #2
 8004246:	4618      	mov	r0, r3
 8004248:	f000 f820 	bl	800428c <RCCEx_PLLSAI1_Config>
 800424c:	4603      	mov	r3, r0
 800424e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8004256:	7cfb      	ldrb	r3, [r7, #19]
 8004258:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	4904      	ldr	r1, [pc, #16]	; (8004288 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800427c:	7cbb      	ldrb	r3, [r7, #18]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3718      	adds	r7, #24
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40021000 	.word	0x40021000

0800428c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004296:	2300      	movs	r3, #0
 8004298:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800429a:	4b74      	ldr	r3, [pc, #464]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 800429c:	68db      	ldr	r3, [r3, #12]
 800429e:	f003 0303 	and.w	r3, r3, #3
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d018      	beq.n	80042d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80042a6:	4b71      	ldr	r3, [pc, #452]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	f003 0203 	and.w	r2, r3, #3
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d10d      	bne.n	80042d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
       ||
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d009      	beq.n	80042d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80042be:	4b6b      	ldr	r3, [pc, #428]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	091b      	lsrs	r3, r3, #4
 80042c4:	f003 0307 	and.w	r3, r3, #7
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
       ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d047      	beq.n	8004362 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80042d2:	2301      	movs	r3, #1
 80042d4:	73fb      	strb	r3, [r7, #15]
 80042d6:	e044      	b.n	8004362 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2b03      	cmp	r3, #3
 80042de:	d018      	beq.n	8004312 <RCCEx_PLLSAI1_Config+0x86>
 80042e0:	2b03      	cmp	r3, #3
 80042e2:	d825      	bhi.n	8004330 <RCCEx_PLLSAI1_Config+0xa4>
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d002      	beq.n	80042ee <RCCEx_PLLSAI1_Config+0x62>
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d009      	beq.n	8004300 <RCCEx_PLLSAI1_Config+0x74>
 80042ec:	e020      	b.n	8004330 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80042ee:	4b5f      	ldr	r3, [pc, #380]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d11d      	bne.n	8004336 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80042fe:	e01a      	b.n	8004336 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004300:	4b5a      	ldr	r3, [pc, #360]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004308:	2b00      	cmp	r3, #0
 800430a:	d116      	bne.n	800433a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004310:	e013      	b.n	800433a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004312:	4b56      	ldr	r3, [pc, #344]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10f      	bne.n	800433e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800431e:	4b53      	ldr	r3, [pc, #332]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004326:	2b00      	cmp	r3, #0
 8004328:	d109      	bne.n	800433e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800432e:	e006      	b.n	800433e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	73fb      	strb	r3, [r7, #15]
      break;
 8004334:	e004      	b.n	8004340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004336:	bf00      	nop
 8004338:	e002      	b.n	8004340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800433a:	bf00      	nop
 800433c:	e000      	b.n	8004340 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800433e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004340:	7bfb      	ldrb	r3, [r7, #15]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10d      	bne.n	8004362 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004346:	4b49      	ldr	r3, [pc, #292]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004348:	68db      	ldr	r3, [r3, #12]
 800434a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6819      	ldr	r1, [r3, #0]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	3b01      	subs	r3, #1
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	430b      	orrs	r3, r1
 800435c:	4943      	ldr	r1, [pc, #268]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 800435e:	4313      	orrs	r3, r2
 8004360:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004362:	7bfb      	ldrb	r3, [r7, #15]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d17c      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004368:	4b40      	ldr	r3, [pc, #256]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a3f      	ldr	r2, [pc, #252]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd febc 	bl	80020f0 <HAL_GetTick>
 8004378:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800437a:	e009      	b.n	8004390 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800437c:	f7fd feb8 	bl	80020f0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d902      	bls.n	8004390 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	73fb      	strb	r3, [r7, #15]
        break;
 800438e:	e005      	b.n	800439c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004390:	4b36      	ldr	r3, [pc, #216]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1ef      	bne.n	800437c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800439c:	7bfb      	ldrb	r3, [r7, #15]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d15f      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d110      	bne.n	80043ca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043a8:	4b30      	ldr	r3, [pc, #192]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80043b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	6892      	ldr	r2, [r2, #8]
 80043b8:	0211      	lsls	r1, r2, #8
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	68d2      	ldr	r2, [r2, #12]
 80043be:	06d2      	lsls	r2, r2, #27
 80043c0:	430a      	orrs	r2, r1
 80043c2:	492a      	ldr	r1, [pc, #168]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	610b      	str	r3, [r1, #16]
 80043c8:	e027      	b.n	800441a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d112      	bne.n	80043f6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043d0:	4b26      	ldr	r3, [pc, #152]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043d2:	691b      	ldr	r3, [r3, #16]
 80043d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80043d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80043dc:	687a      	ldr	r2, [r7, #4]
 80043de:	6892      	ldr	r2, [r2, #8]
 80043e0:	0211      	lsls	r1, r2, #8
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6912      	ldr	r2, [r2, #16]
 80043e6:	0852      	lsrs	r2, r2, #1
 80043e8:	3a01      	subs	r2, #1
 80043ea:	0552      	lsls	r2, r2, #21
 80043ec:	430a      	orrs	r2, r1
 80043ee:	491f      	ldr	r1, [pc, #124]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	610b      	str	r3, [r1, #16]
 80043f4:	e011      	b.n	800441a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80043f6:	4b1d      	ldr	r3, [pc, #116]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80043fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6892      	ldr	r2, [r2, #8]
 8004406:	0211      	lsls	r1, r2, #8
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	6952      	ldr	r2, [r2, #20]
 800440c:	0852      	lsrs	r2, r2, #1
 800440e:	3a01      	subs	r2, #1
 8004410:	0652      	lsls	r2, r2, #25
 8004412:	430a      	orrs	r2, r1
 8004414:	4915      	ldr	r1, [pc, #84]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004416:	4313      	orrs	r3, r2
 8004418:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800441a:	4b14      	ldr	r3, [pc, #80]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a13      	ldr	r2, [pc, #76]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004420:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004424:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004426:	f7fd fe63 	bl	80020f0 <HAL_GetTick>
 800442a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800442c:	e009      	b.n	8004442 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800442e:	f7fd fe5f 	bl	80020f0 <HAL_GetTick>
 8004432:	4602      	mov	r2, r0
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	1ad3      	subs	r3, r2, r3
 8004438:	2b02      	cmp	r3, #2
 800443a:	d902      	bls.n	8004442 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	73fb      	strb	r3, [r7, #15]
          break;
 8004440:	e005      	b.n	800444e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004442:	4b0a      	ldr	r3, [pc, #40]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0ef      	beq.n	800442e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800444e:	7bfb      	ldrb	r3, [r7, #15]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d106      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004454:	4b05      	ldr	r3, [pc, #20]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 8004456:	691a      	ldr	r2, [r3, #16]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	4903      	ldr	r1, [pc, #12]	; (800446c <RCCEx_PLLSAI1_Config+0x1e0>)
 800445e:	4313      	orrs	r3, r2
 8004460:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004462:	7bfb      	ldrb	r3, [r7, #15]
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40021000 	.word	0x40021000

08004470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e040      	b.n	8004504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fd f83c 	bl	8001510 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f8c0 	bl	8004634 <UART_SetConfig>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fae0 	bl	8004a8c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fb67 	bl	8004bd0 <UART_CheckIdleState>
 8004502:	4603      	mov	r3, r0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004520:	2b20      	cmp	r3, #32
 8004522:	f040 8082 	bne.w	800462a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d002      	beq.n	8004532 <HAL_UART_Transmit+0x26>
 800452c:	88fb      	ldrh	r3, [r7, #6]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d101      	bne.n	8004536 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07a      	b.n	800462c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800453c:	2b01      	cmp	r3, #1
 800453e:	d101      	bne.n	8004544 <HAL_UART_Transmit+0x38>
 8004540:	2302      	movs	r3, #2
 8004542:	e073      	b.n	800462c <HAL_UART_Transmit+0x120>
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2200      	movs	r2, #0
 8004550:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2221      	movs	r2, #33	; 0x21
 8004558:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800455a:	f7fd fdc9 	bl	80020f0 <HAL_GetTick>
 800455e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	88fa      	ldrh	r2, [r7, #6]
 8004564:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	88fa      	ldrh	r2, [r7, #6]
 800456c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004578:	d108      	bne.n	800458c <HAL_UART_Transmit+0x80>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d104      	bne.n	800458c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8004582:	2300      	movs	r3, #0
 8004584:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	61bb      	str	r3, [r7, #24]
 800458a:	e003      	b.n	8004594 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004590:	2300      	movs	r3, #0
 8004592:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2200      	movs	r2, #0
 8004598:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800459c:	e02d      	b.n	80045fa <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	697b      	ldr	r3, [r7, #20]
 80045a4:	2200      	movs	r2, #0
 80045a6:	2180      	movs	r1, #128	; 0x80
 80045a8:	68f8      	ldr	r0, [r7, #12]
 80045aa:	f000 fb5a 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d001      	beq.n	80045b8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045b4:	2303      	movs	r3, #3
 80045b6:	e039      	b.n	800462c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d10b      	bne.n	80045d6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	881a      	ldrh	r2, [r3, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ca:	b292      	uxth	r2, r2
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	3302      	adds	r3, #2
 80045d2:	61bb      	str	r3, [r7, #24]
 80045d4:	e008      	b.n	80045e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	781a      	ldrb	r2, [r3, #0]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	b292      	uxth	r2, r2
 80045e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ee:	b29b      	uxth	r3, r3
 80045f0:	3b01      	subs	r3, #1
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1cb      	bne.n	800459e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2140      	movs	r1, #64	; 0x40
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb26 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e005      	b.n	800462c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e000      	b.n	800462c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800462a:	2302      	movs	r3, #2
  }
}
 800462c:	4618      	mov	r0, r3
 800462e:	3720      	adds	r7, #32
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004634:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004638:	b08a      	sub	sp, #40	; 0x28
 800463a:	af00      	add	r7, sp, #0
 800463c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800463e:	2300      	movs	r3, #0
 8004640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	431a      	orrs	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	431a      	orrs	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4313      	orrs	r3, r2
 800465a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	4bb4      	ldr	r3, [pc, #720]	; (8004934 <UART_SetConfig+0x300>)
 8004664:	4013      	ands	r3, r2
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	6812      	ldr	r2, [r2, #0]
 800466a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800466c:	430b      	orrs	r3, r1
 800466e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	68da      	ldr	r2, [r3, #12]
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	430a      	orrs	r2, r1
 8004684:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4aa9      	ldr	r2, [pc, #676]	; (8004938 <UART_SetConfig+0x304>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d004      	beq.n	80046a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800469c:	4313      	orrs	r3, r2
 800469e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	689b      	ldr	r3, [r3, #8]
 80046a6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	430a      	orrs	r2, r1
 80046b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4aa0      	ldr	r2, [pc, #640]	; (800493c <UART_SetConfig+0x308>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d126      	bne.n	800470c <UART_SetConfig+0xd8>
 80046be:	4ba0      	ldr	r3, [pc, #640]	; (8004940 <UART_SetConfig+0x30c>)
 80046c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046c4:	f003 0303 	and.w	r3, r3, #3
 80046c8:	2b03      	cmp	r3, #3
 80046ca:	d81b      	bhi.n	8004704 <UART_SetConfig+0xd0>
 80046cc:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <UART_SetConfig+0xa0>)
 80046ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d2:	bf00      	nop
 80046d4:	080046e5 	.word	0x080046e5
 80046d8:	080046f5 	.word	0x080046f5
 80046dc:	080046ed 	.word	0x080046ed
 80046e0:	080046fd 	.word	0x080046fd
 80046e4:	2301      	movs	r3, #1
 80046e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046ea:	e080      	b.n	80047ee <UART_SetConfig+0x1ba>
 80046ec:	2302      	movs	r3, #2
 80046ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046f2:	e07c      	b.n	80047ee <UART_SetConfig+0x1ba>
 80046f4:	2304      	movs	r3, #4
 80046f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80046fa:	e078      	b.n	80047ee <UART_SetConfig+0x1ba>
 80046fc:	2308      	movs	r3, #8
 80046fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004702:	e074      	b.n	80047ee <UART_SetConfig+0x1ba>
 8004704:	2310      	movs	r3, #16
 8004706:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800470a:	e070      	b.n	80047ee <UART_SetConfig+0x1ba>
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a8c      	ldr	r2, [pc, #560]	; (8004944 <UART_SetConfig+0x310>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d138      	bne.n	8004788 <UART_SetConfig+0x154>
 8004716:	4b8a      	ldr	r3, [pc, #552]	; (8004940 <UART_SetConfig+0x30c>)
 8004718:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471c:	f003 030c 	and.w	r3, r3, #12
 8004720:	2b0c      	cmp	r3, #12
 8004722:	d82d      	bhi.n	8004780 <UART_SetConfig+0x14c>
 8004724:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0xf8>)
 8004726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472a:	bf00      	nop
 800472c:	08004761 	.word	0x08004761
 8004730:	08004781 	.word	0x08004781
 8004734:	08004781 	.word	0x08004781
 8004738:	08004781 	.word	0x08004781
 800473c:	08004771 	.word	0x08004771
 8004740:	08004781 	.word	0x08004781
 8004744:	08004781 	.word	0x08004781
 8004748:	08004781 	.word	0x08004781
 800474c:	08004769 	.word	0x08004769
 8004750:	08004781 	.word	0x08004781
 8004754:	08004781 	.word	0x08004781
 8004758:	08004781 	.word	0x08004781
 800475c:	08004779 	.word	0x08004779
 8004760:	2300      	movs	r3, #0
 8004762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004766:	e042      	b.n	80047ee <UART_SetConfig+0x1ba>
 8004768:	2302      	movs	r3, #2
 800476a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800476e:	e03e      	b.n	80047ee <UART_SetConfig+0x1ba>
 8004770:	2304      	movs	r3, #4
 8004772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004776:	e03a      	b.n	80047ee <UART_SetConfig+0x1ba>
 8004778:	2308      	movs	r3, #8
 800477a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800477e:	e036      	b.n	80047ee <UART_SetConfig+0x1ba>
 8004780:	2310      	movs	r3, #16
 8004782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004786:	e032      	b.n	80047ee <UART_SetConfig+0x1ba>
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a6a      	ldr	r2, [pc, #424]	; (8004938 <UART_SetConfig+0x304>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d12a      	bne.n	80047e8 <UART_SetConfig+0x1b4>
 8004792:	4b6b      	ldr	r3, [pc, #428]	; (8004940 <UART_SetConfig+0x30c>)
 8004794:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004798:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800479c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a0:	d01a      	beq.n	80047d8 <UART_SetConfig+0x1a4>
 80047a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80047a6:	d81b      	bhi.n	80047e0 <UART_SetConfig+0x1ac>
 80047a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047ac:	d00c      	beq.n	80047c8 <UART_SetConfig+0x194>
 80047ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047b2:	d815      	bhi.n	80047e0 <UART_SetConfig+0x1ac>
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d003      	beq.n	80047c0 <UART_SetConfig+0x18c>
 80047b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80047bc:	d008      	beq.n	80047d0 <UART_SetConfig+0x19c>
 80047be:	e00f      	b.n	80047e0 <UART_SetConfig+0x1ac>
 80047c0:	2300      	movs	r3, #0
 80047c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047c6:	e012      	b.n	80047ee <UART_SetConfig+0x1ba>
 80047c8:	2302      	movs	r3, #2
 80047ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047ce:	e00e      	b.n	80047ee <UART_SetConfig+0x1ba>
 80047d0:	2304      	movs	r3, #4
 80047d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047d6:	e00a      	b.n	80047ee <UART_SetConfig+0x1ba>
 80047d8:	2308      	movs	r3, #8
 80047da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047de:	e006      	b.n	80047ee <UART_SetConfig+0x1ba>
 80047e0:	2310      	movs	r3, #16
 80047e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80047e6:	e002      	b.n	80047ee <UART_SetConfig+0x1ba>
 80047e8:	2310      	movs	r3, #16
 80047ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a51      	ldr	r2, [pc, #324]	; (8004938 <UART_SetConfig+0x304>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d17a      	bne.n	80048ee <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80047f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d824      	bhi.n	800484a <UART_SetConfig+0x216>
 8004800:	a201      	add	r2, pc, #4	; (adr r2, 8004808 <UART_SetConfig+0x1d4>)
 8004802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004806:	bf00      	nop
 8004808:	0800482d 	.word	0x0800482d
 800480c:	0800484b 	.word	0x0800484b
 8004810:	08004835 	.word	0x08004835
 8004814:	0800484b 	.word	0x0800484b
 8004818:	0800483b 	.word	0x0800483b
 800481c:	0800484b 	.word	0x0800484b
 8004820:	0800484b 	.word	0x0800484b
 8004824:	0800484b 	.word	0x0800484b
 8004828:	08004843 	.word	0x08004843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800482c:	f7ff faac 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8004830:	61f8      	str	r0, [r7, #28]
        break;
 8004832:	e010      	b.n	8004856 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004834:	4b44      	ldr	r3, [pc, #272]	; (8004948 <UART_SetConfig+0x314>)
 8004836:	61fb      	str	r3, [r7, #28]
        break;
 8004838:	e00d      	b.n	8004856 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800483a:	f7ff fa0d 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 800483e:	61f8      	str	r0, [r7, #28]
        break;
 8004840:	e009      	b.n	8004856 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004846:	61fb      	str	r3, [r7, #28]
        break;
 8004848:	e005      	b.n	8004856 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8107 	beq.w	8004a6c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	685a      	ldr	r2, [r3, #4]
 8004862:	4613      	mov	r3, r2
 8004864:	005b      	lsls	r3, r3, #1
 8004866:	4413      	add	r3, r2
 8004868:	69fa      	ldr	r2, [r7, #28]
 800486a:	429a      	cmp	r2, r3
 800486c:	d305      	bcc.n	800487a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	685b      	ldr	r3, [r3, #4]
 8004872:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	429a      	cmp	r2, r3
 8004878:	d903      	bls.n	8004882 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004880:	e0f4      	b.n	8004a6c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	2200      	movs	r2, #0
 8004886:	461c      	mov	r4, r3
 8004888:	4615      	mov	r5, r2
 800488a:	f04f 0200 	mov.w	r2, #0
 800488e:	f04f 0300 	mov.w	r3, #0
 8004892:	022b      	lsls	r3, r5, #8
 8004894:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004898:	0222      	lsls	r2, r4, #8
 800489a:	68f9      	ldr	r1, [r7, #12]
 800489c:	6849      	ldr	r1, [r1, #4]
 800489e:	0849      	lsrs	r1, r1, #1
 80048a0:	2000      	movs	r0, #0
 80048a2:	4688      	mov	r8, r1
 80048a4:	4681      	mov	r9, r0
 80048a6:	eb12 0a08 	adds.w	sl, r2, r8
 80048aa:	eb43 0b09 	adc.w	fp, r3, r9
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2200      	movs	r2, #0
 80048b4:	603b      	str	r3, [r7, #0]
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048bc:	4650      	mov	r0, sl
 80048be:	4659      	mov	r1, fp
 80048c0:	f7fc f9c2 	bl	8000c48 <__aeabi_uldivmod>
 80048c4:	4602      	mov	r2, r0
 80048c6:	460b      	mov	r3, r1
 80048c8:	4613      	mov	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048d2:	d308      	bcc.n	80048e6 <UART_SetConfig+0x2b2>
 80048d4:	69bb      	ldr	r3, [r7, #24]
 80048d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048da:	d204      	bcs.n	80048e6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	69ba      	ldr	r2, [r7, #24]
 80048e2:	60da      	str	r2, [r3, #12]
 80048e4:	e0c2      	b.n	8004a6c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80048e6:	2301      	movs	r3, #1
 80048e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80048ec:	e0be      	b.n	8004a6c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	69db      	ldr	r3, [r3, #28]
 80048f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048f6:	d16a      	bne.n	80049ce <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80048f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d834      	bhi.n	800496a <UART_SetConfig+0x336>
 8004900:	a201      	add	r2, pc, #4	; (adr r2, 8004908 <UART_SetConfig+0x2d4>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	0800492d 	.word	0x0800492d
 800490c:	0800494d 	.word	0x0800494d
 8004910:	08004955 	.word	0x08004955
 8004914:	0800496b 	.word	0x0800496b
 8004918:	0800495b 	.word	0x0800495b
 800491c:	0800496b 	.word	0x0800496b
 8004920:	0800496b 	.word	0x0800496b
 8004924:	0800496b 	.word	0x0800496b
 8004928:	08004963 	.word	0x08004963
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800492c:	f7ff fa2c 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8004930:	61f8      	str	r0, [r7, #28]
        break;
 8004932:	e020      	b.n	8004976 <UART_SetConfig+0x342>
 8004934:	efff69f3 	.word	0xefff69f3
 8004938:	40008000 	.word	0x40008000
 800493c:	40013800 	.word	0x40013800
 8004940:	40021000 	.word	0x40021000
 8004944:	40004400 	.word	0x40004400
 8004948:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800494c:	f7ff fa32 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8004950:	61f8      	str	r0, [r7, #28]
        break;
 8004952:	e010      	b.n	8004976 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004954:	4b4c      	ldr	r3, [pc, #304]	; (8004a88 <UART_SetConfig+0x454>)
 8004956:	61fb      	str	r3, [r7, #28]
        break;
 8004958:	e00d      	b.n	8004976 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800495a:	f7ff f97d 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 800495e:	61f8      	str	r0, [r7, #28]
        break;
 8004960:	e009      	b.n	8004976 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004966:	61fb      	str	r3, [r7, #28]
        break;
 8004968:	e005      	b.n	8004976 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800496a:	2300      	movs	r3, #0
 800496c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004974:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004976:	69fb      	ldr	r3, [r7, #28]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d077      	beq.n	8004a6c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	005a      	lsls	r2, r3, #1
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	085b      	lsrs	r3, r3, #1
 8004986:	441a      	add	r2, r3
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004990:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004992:	69bb      	ldr	r3, [r7, #24]
 8004994:	2b0f      	cmp	r3, #15
 8004996:	d916      	bls.n	80049c6 <UART_SetConfig+0x392>
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800499e:	d212      	bcs.n	80049c6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049a0:	69bb      	ldr	r3, [r7, #24]
 80049a2:	b29b      	uxth	r3, r3
 80049a4:	f023 030f 	bic.w	r3, r3, #15
 80049a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	085b      	lsrs	r3, r3, #1
 80049ae:	b29b      	uxth	r3, r3
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	b29a      	uxth	r2, r3
 80049b6:	8afb      	ldrh	r3, [r7, #22]
 80049b8:	4313      	orrs	r3, r2
 80049ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	8afa      	ldrh	r2, [r7, #22]
 80049c2:	60da      	str	r2, [r3, #12]
 80049c4:	e052      	b.n	8004a6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80049cc:	e04e      	b.n	8004a6c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d827      	bhi.n	8004a26 <UART_SetConfig+0x3f2>
 80049d6:	a201      	add	r2, pc, #4	; (adr r2, 80049dc <UART_SetConfig+0x3a8>)
 80049d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049dc:	08004a01 	.word	0x08004a01
 80049e0:	08004a09 	.word	0x08004a09
 80049e4:	08004a11 	.word	0x08004a11
 80049e8:	08004a27 	.word	0x08004a27
 80049ec:	08004a17 	.word	0x08004a17
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a27 	.word	0x08004a27
 80049f8:	08004a27 	.word	0x08004a27
 80049fc:	08004a1f 	.word	0x08004a1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a00:	f7ff f9c2 	bl	8003d88 <HAL_RCC_GetPCLK1Freq>
 8004a04:	61f8      	str	r0, [r7, #28]
        break;
 8004a06:	e014      	b.n	8004a32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a08:	f7ff f9d4 	bl	8003db4 <HAL_RCC_GetPCLK2Freq>
 8004a0c:	61f8      	str	r0, [r7, #28]
        break;
 8004a0e:	e010      	b.n	8004a32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a10:	4b1d      	ldr	r3, [pc, #116]	; (8004a88 <UART_SetConfig+0x454>)
 8004a12:	61fb      	str	r3, [r7, #28]
        break;
 8004a14:	e00d      	b.n	8004a32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a16:	f7ff f91f 	bl	8003c58 <HAL_RCC_GetSysClockFreq>
 8004a1a:	61f8      	str	r0, [r7, #28]
        break;
 8004a1c:	e009      	b.n	8004a32 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a22:	61fb      	str	r3, [r7, #28]
        break;
 8004a24:	e005      	b.n	8004a32 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004a30:	bf00      	nop
    }

    if (pclk != 0U)
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d019      	beq.n	8004a6c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	085a      	lsrs	r2, r3, #1
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	441a      	add	r2, r3
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a4a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a4c:	69bb      	ldr	r3, [r7, #24]
 8004a4e:	2b0f      	cmp	r3, #15
 8004a50:	d909      	bls.n	8004a66 <UART_SetConfig+0x432>
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a58:	d205      	bcs.n	8004a66 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	b29a      	uxth	r2, r3
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60da      	str	r2, [r3, #12]
 8004a64:	e002      	b.n	8004a6c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004a66:	2301      	movs	r3, #1
 8004a68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2200      	movs	r2, #0
 8004a76:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004a78:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	3728      	adds	r7, #40	; 0x28
 8004a80:	46bd      	mov	sp, r7
 8004a82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a86:	bf00      	nop
 8004a88:	00f42400 	.word	0x00f42400

08004a8c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00a      	beq.n	8004ab6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	430a      	orrs	r2, r1
 8004ab4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004adc:	f003 0304 	and.w	r3, r3, #4
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d00a      	beq.n	8004afa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	685b      	ldr	r3, [r3, #4]
 8004aea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afe:	f003 0308 	and.w	r3, r3, #8
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d00a      	beq.n	8004b1c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	430a      	orrs	r2, r1
 8004b1a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b20:	f003 0310 	and.w	r3, r3, #16
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d00a      	beq.n	8004b3e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b42:	f003 0320 	and.w	r3, r3, #32
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00a      	beq.n	8004b60 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	689b      	ldr	r3, [r3, #8]
 8004b50:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	430a      	orrs	r2, r1
 8004b5e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d01a      	beq.n	8004ba2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b8a:	d10a      	bne.n	8004ba2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	430a      	orrs	r2, r1
 8004ba0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d00a      	beq.n	8004bc4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	430a      	orrs	r2, r1
 8004bc2:	605a      	str	r2, [r3, #4]
  }
}
 8004bc4:	bf00      	nop
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004be0:	f7fd fa86 	bl	80020f0 <HAL_GetTick>
 8004be4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b08      	cmp	r3, #8
 8004bf2:	d10e      	bne.n	8004c12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004bf4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004bf8:	9300      	str	r3, [sp, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f82d 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e023      	b.n	8004c5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0304 	and.w	r3, r3, #4
 8004c1c:	2b04      	cmp	r3, #4
 8004c1e:	d10e      	bne.n	8004c3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f817 	bl	8004c62 <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e00d      	b.n	8004c5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004c58:	2300      	movs	r3, #0
}
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	3710      	adds	r7, #16
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	bd80      	pop	{r7, pc}

08004c62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c62:	b580      	push	{r7, lr}
 8004c64:	b09c      	sub	sp, #112	; 0x70
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	603b      	str	r3, [r7, #0]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c72:	e0a5      	b.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c7a:	f000 80a1 	beq.w	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c7e:	f7fd fa37 	bl	80020f0 <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d302      	bcc.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x32>
 8004c8e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d13e      	bne.n	8004d12 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ca2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ca4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004ca8:	667b      	str	r3, [r7, #100]	; 0x64
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cb2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cb4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cb8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	663b      	str	r3, [r7, #96]	; 0x60
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ce6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ce8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cec:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e5      	bne.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2220      	movs	r2, #32
 8004d04:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004d0e:	2303      	movs	r3, #3
 8004d10:	e067      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 0304 	and.w	r3, r3, #4
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d04f      	beq.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	69db      	ldr	r3, [r3, #28]
 8004d26:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d2e:	d147      	bne.n	8004dc0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d38:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d42:	e853 3f00 	ldrex	r3, [r3]
 8004d46:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	461a      	mov	r2, r3
 8004d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
 8004d5a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d5c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d60:	e841 2300 	strex	r3, r2, [r1]
 8004d64:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d1e6      	bne.n	8004d3a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3308      	adds	r3, #8
 8004d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d7c:	693b      	ldr	r3, [r7, #16]
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	3308      	adds	r3, #8
 8004d8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d8c:	623a      	str	r2, [r7, #32]
 8004d8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	69f9      	ldr	r1, [r7, #28]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e5      	bne.n	8004d6c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2220      	movs	r2, #32
 8004daa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2220      	movs	r2, #32
 8004db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004dbc:	2303      	movs	r3, #3
 8004dbe:	e010      	b.n	8004de2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	f43f af4a 	beq.w	8004c74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3770      	adds	r7, #112	; 0x70
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}
	...

08004dec <__errno>:
 8004dec:	4b01      	ldr	r3, [pc, #4]	; (8004df4 <__errno+0x8>)
 8004dee:	6818      	ldr	r0, [r3, #0]
 8004df0:	4770      	bx	lr
 8004df2:	bf00      	nop
 8004df4:	2000000c 	.word	0x2000000c

08004df8 <__libc_init_array>:
 8004df8:	b570      	push	{r4, r5, r6, lr}
 8004dfa:	4d0d      	ldr	r5, [pc, #52]	; (8004e30 <__libc_init_array+0x38>)
 8004dfc:	4c0d      	ldr	r4, [pc, #52]	; (8004e34 <__libc_init_array+0x3c>)
 8004dfe:	1b64      	subs	r4, r4, r5
 8004e00:	10a4      	asrs	r4, r4, #2
 8004e02:	2600      	movs	r6, #0
 8004e04:	42a6      	cmp	r6, r4
 8004e06:	d109      	bne.n	8004e1c <__libc_init_array+0x24>
 8004e08:	4d0b      	ldr	r5, [pc, #44]	; (8004e38 <__libc_init_array+0x40>)
 8004e0a:	4c0c      	ldr	r4, [pc, #48]	; (8004e3c <__libc_init_array+0x44>)
 8004e0c:	f002 ff30 	bl	8007c70 <_init>
 8004e10:	1b64      	subs	r4, r4, r5
 8004e12:	10a4      	asrs	r4, r4, #2
 8004e14:	2600      	movs	r6, #0
 8004e16:	42a6      	cmp	r6, r4
 8004e18:	d105      	bne.n	8004e26 <__libc_init_array+0x2e>
 8004e1a:	bd70      	pop	{r4, r5, r6, pc}
 8004e1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e20:	4798      	blx	r3
 8004e22:	3601      	adds	r6, #1
 8004e24:	e7ee      	b.n	8004e04 <__libc_init_array+0xc>
 8004e26:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2a:	4798      	blx	r3
 8004e2c:	3601      	adds	r6, #1
 8004e2e:	e7f2      	b.n	8004e16 <__libc_init_array+0x1e>
 8004e30:	08008454 	.word	0x08008454
 8004e34:	08008454 	.word	0x08008454
 8004e38:	08008454 	.word	0x08008454
 8004e3c:	08008458 	.word	0x08008458

08004e40 <memset>:
 8004e40:	4402      	add	r2, r0
 8004e42:	4603      	mov	r3, r0
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d100      	bne.n	8004e4a <memset+0xa>
 8004e48:	4770      	bx	lr
 8004e4a:	f803 1b01 	strb.w	r1, [r3], #1
 8004e4e:	e7f9      	b.n	8004e44 <memset+0x4>

08004e50 <__cvt>:
 8004e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004e54:	ec55 4b10 	vmov	r4, r5, d0
 8004e58:	2d00      	cmp	r5, #0
 8004e5a:	460e      	mov	r6, r1
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	462b      	mov	r3, r5
 8004e60:	bfbb      	ittet	lt
 8004e62:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004e66:	461d      	movlt	r5, r3
 8004e68:	2300      	movge	r3, #0
 8004e6a:	232d      	movlt	r3, #45	; 0x2d
 8004e6c:	700b      	strb	r3, [r1, #0]
 8004e6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e70:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004e74:	4691      	mov	r9, r2
 8004e76:	f023 0820 	bic.w	r8, r3, #32
 8004e7a:	bfbc      	itt	lt
 8004e7c:	4622      	movlt	r2, r4
 8004e7e:	4614      	movlt	r4, r2
 8004e80:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004e84:	d005      	beq.n	8004e92 <__cvt+0x42>
 8004e86:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004e8a:	d100      	bne.n	8004e8e <__cvt+0x3e>
 8004e8c:	3601      	adds	r6, #1
 8004e8e:	2102      	movs	r1, #2
 8004e90:	e000      	b.n	8004e94 <__cvt+0x44>
 8004e92:	2103      	movs	r1, #3
 8004e94:	ab03      	add	r3, sp, #12
 8004e96:	9301      	str	r3, [sp, #4]
 8004e98:	ab02      	add	r3, sp, #8
 8004e9a:	9300      	str	r3, [sp, #0]
 8004e9c:	ec45 4b10 	vmov	d0, r4, r5
 8004ea0:	4653      	mov	r3, sl
 8004ea2:	4632      	mov	r2, r6
 8004ea4:	f000 fd18 	bl	80058d8 <_dtoa_r>
 8004ea8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004eac:	4607      	mov	r7, r0
 8004eae:	d102      	bne.n	8004eb6 <__cvt+0x66>
 8004eb0:	f019 0f01 	tst.w	r9, #1
 8004eb4:	d022      	beq.n	8004efc <__cvt+0xac>
 8004eb6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004eba:	eb07 0906 	add.w	r9, r7, r6
 8004ebe:	d110      	bne.n	8004ee2 <__cvt+0x92>
 8004ec0:	783b      	ldrb	r3, [r7, #0]
 8004ec2:	2b30      	cmp	r3, #48	; 0x30
 8004ec4:	d10a      	bne.n	8004edc <__cvt+0x8c>
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2300      	movs	r3, #0
 8004eca:	4620      	mov	r0, r4
 8004ecc:	4629      	mov	r1, r5
 8004ece:	f7fb fdfb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004ed2:	b918      	cbnz	r0, 8004edc <__cvt+0x8c>
 8004ed4:	f1c6 0601 	rsb	r6, r6, #1
 8004ed8:	f8ca 6000 	str.w	r6, [sl]
 8004edc:	f8da 3000 	ldr.w	r3, [sl]
 8004ee0:	4499      	add	r9, r3
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	4620      	mov	r0, r4
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fded 	bl	8000ac8 <__aeabi_dcmpeq>
 8004eee:	b108      	cbz	r0, 8004ef4 <__cvt+0xa4>
 8004ef0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004ef4:	2230      	movs	r2, #48	; 0x30
 8004ef6:	9b03      	ldr	r3, [sp, #12]
 8004ef8:	454b      	cmp	r3, r9
 8004efa:	d307      	bcc.n	8004f0c <__cvt+0xbc>
 8004efc:	9b03      	ldr	r3, [sp, #12]
 8004efe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004f00:	1bdb      	subs	r3, r3, r7
 8004f02:	4638      	mov	r0, r7
 8004f04:	6013      	str	r3, [r2, #0]
 8004f06:	b004      	add	sp, #16
 8004f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	9103      	str	r1, [sp, #12]
 8004f10:	701a      	strb	r2, [r3, #0]
 8004f12:	e7f0      	b.n	8004ef6 <__cvt+0xa6>

08004f14 <__exponent>:
 8004f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f16:	4603      	mov	r3, r0
 8004f18:	2900      	cmp	r1, #0
 8004f1a:	bfb8      	it	lt
 8004f1c:	4249      	neglt	r1, r1
 8004f1e:	f803 2b02 	strb.w	r2, [r3], #2
 8004f22:	bfb4      	ite	lt
 8004f24:	222d      	movlt	r2, #45	; 0x2d
 8004f26:	222b      	movge	r2, #43	; 0x2b
 8004f28:	2909      	cmp	r1, #9
 8004f2a:	7042      	strb	r2, [r0, #1]
 8004f2c:	dd2a      	ble.n	8004f84 <__exponent+0x70>
 8004f2e:	f10d 0407 	add.w	r4, sp, #7
 8004f32:	46a4      	mov	ip, r4
 8004f34:	270a      	movs	r7, #10
 8004f36:	46a6      	mov	lr, r4
 8004f38:	460a      	mov	r2, r1
 8004f3a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004f3e:	fb07 1516 	mls	r5, r7, r6, r1
 8004f42:	3530      	adds	r5, #48	; 0x30
 8004f44:	2a63      	cmp	r2, #99	; 0x63
 8004f46:	f104 34ff 	add.w	r4, r4, #4294967295
 8004f4a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004f4e:	4631      	mov	r1, r6
 8004f50:	dcf1      	bgt.n	8004f36 <__exponent+0x22>
 8004f52:	3130      	adds	r1, #48	; 0x30
 8004f54:	f1ae 0502 	sub.w	r5, lr, #2
 8004f58:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004f5c:	1c44      	adds	r4, r0, #1
 8004f5e:	4629      	mov	r1, r5
 8004f60:	4561      	cmp	r1, ip
 8004f62:	d30a      	bcc.n	8004f7a <__exponent+0x66>
 8004f64:	f10d 0209 	add.w	r2, sp, #9
 8004f68:	eba2 020e 	sub.w	r2, r2, lr
 8004f6c:	4565      	cmp	r5, ip
 8004f6e:	bf88      	it	hi
 8004f70:	2200      	movhi	r2, #0
 8004f72:	4413      	add	r3, r2
 8004f74:	1a18      	subs	r0, r3, r0
 8004f76:	b003      	add	sp, #12
 8004f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f7e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004f82:	e7ed      	b.n	8004f60 <__exponent+0x4c>
 8004f84:	2330      	movs	r3, #48	; 0x30
 8004f86:	3130      	adds	r1, #48	; 0x30
 8004f88:	7083      	strb	r3, [r0, #2]
 8004f8a:	70c1      	strb	r1, [r0, #3]
 8004f8c:	1d03      	adds	r3, r0, #4
 8004f8e:	e7f1      	b.n	8004f74 <__exponent+0x60>

08004f90 <_printf_float>:
 8004f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f94:	ed2d 8b02 	vpush	{d8}
 8004f98:	b08d      	sub	sp, #52	; 0x34
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004fa0:	4616      	mov	r6, r2
 8004fa2:	461f      	mov	r7, r3
 8004fa4:	4605      	mov	r5, r0
 8004fa6:	f001 fa85 	bl	80064b4 <_localeconv_r>
 8004faa:	f8d0 a000 	ldr.w	sl, [r0]
 8004fae:	4650      	mov	r0, sl
 8004fb0:	f7fb f90e 	bl	80001d0 <strlen>
 8004fb4:	2300      	movs	r3, #0
 8004fb6:	930a      	str	r3, [sp, #40]	; 0x28
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	9305      	str	r3, [sp, #20]
 8004fbc:	f8d8 3000 	ldr.w	r3, [r8]
 8004fc0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004fc4:	3307      	adds	r3, #7
 8004fc6:	f023 0307 	bic.w	r3, r3, #7
 8004fca:	f103 0208 	add.w	r2, r3, #8
 8004fce:	f8c8 2000 	str.w	r2, [r8]
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004fda:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004fde:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004fe2:	9307      	str	r3, [sp, #28]
 8004fe4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004fe8:	ee08 0a10 	vmov	s16, r0
 8004fec:	4b9f      	ldr	r3, [pc, #636]	; (800526c <_printf_float+0x2dc>)
 8004fee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ff6:	f7fb fd99 	bl	8000b2c <__aeabi_dcmpun>
 8004ffa:	bb88      	cbnz	r0, 8005060 <_printf_float+0xd0>
 8004ffc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005000:	4b9a      	ldr	r3, [pc, #616]	; (800526c <_printf_float+0x2dc>)
 8005002:	f04f 32ff 	mov.w	r2, #4294967295
 8005006:	f7fb fd73 	bl	8000af0 <__aeabi_dcmple>
 800500a:	bb48      	cbnz	r0, 8005060 <_printf_float+0xd0>
 800500c:	2200      	movs	r2, #0
 800500e:	2300      	movs	r3, #0
 8005010:	4640      	mov	r0, r8
 8005012:	4649      	mov	r1, r9
 8005014:	f7fb fd62 	bl	8000adc <__aeabi_dcmplt>
 8005018:	b110      	cbz	r0, 8005020 <_printf_float+0x90>
 800501a:	232d      	movs	r3, #45	; 0x2d
 800501c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005020:	4b93      	ldr	r3, [pc, #588]	; (8005270 <_printf_float+0x2e0>)
 8005022:	4894      	ldr	r0, [pc, #592]	; (8005274 <_printf_float+0x2e4>)
 8005024:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005028:	bf94      	ite	ls
 800502a:	4698      	movls	r8, r3
 800502c:	4680      	movhi	r8, r0
 800502e:	2303      	movs	r3, #3
 8005030:	6123      	str	r3, [r4, #16]
 8005032:	9b05      	ldr	r3, [sp, #20]
 8005034:	f023 0204 	bic.w	r2, r3, #4
 8005038:	6022      	str	r2, [r4, #0]
 800503a:	f04f 0900 	mov.w	r9, #0
 800503e:	9700      	str	r7, [sp, #0]
 8005040:	4633      	mov	r3, r6
 8005042:	aa0b      	add	r2, sp, #44	; 0x2c
 8005044:	4621      	mov	r1, r4
 8005046:	4628      	mov	r0, r5
 8005048:	f000 f9d8 	bl	80053fc <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	f040 8090 	bne.w	8005172 <_printf_float+0x1e2>
 8005052:	f04f 30ff 	mov.w	r0, #4294967295
 8005056:	b00d      	add	sp, #52	; 0x34
 8005058:	ecbd 8b02 	vpop	{d8}
 800505c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	4640      	mov	r0, r8
 8005066:	4649      	mov	r1, r9
 8005068:	f7fb fd60 	bl	8000b2c <__aeabi_dcmpun>
 800506c:	b140      	cbz	r0, 8005080 <_printf_float+0xf0>
 800506e:	464b      	mov	r3, r9
 8005070:	2b00      	cmp	r3, #0
 8005072:	bfbc      	itt	lt
 8005074:	232d      	movlt	r3, #45	; 0x2d
 8005076:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800507a:	487f      	ldr	r0, [pc, #508]	; (8005278 <_printf_float+0x2e8>)
 800507c:	4b7f      	ldr	r3, [pc, #508]	; (800527c <_printf_float+0x2ec>)
 800507e:	e7d1      	b.n	8005024 <_printf_float+0x94>
 8005080:	6863      	ldr	r3, [r4, #4]
 8005082:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8005086:	9206      	str	r2, [sp, #24]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	d13f      	bne.n	800510c <_printf_float+0x17c>
 800508c:	2306      	movs	r3, #6
 800508e:	6063      	str	r3, [r4, #4]
 8005090:	9b05      	ldr	r3, [sp, #20]
 8005092:	6861      	ldr	r1, [r4, #4]
 8005094:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005098:	2300      	movs	r3, #0
 800509a:	9303      	str	r3, [sp, #12]
 800509c:	ab0a      	add	r3, sp, #40	; 0x28
 800509e:	e9cd b301 	strd	fp, r3, [sp, #4]
 80050a2:	ab09      	add	r3, sp, #36	; 0x24
 80050a4:	ec49 8b10 	vmov	d0, r8, r9
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6022      	str	r2, [r4, #0]
 80050ac:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80050b0:	4628      	mov	r0, r5
 80050b2:	f7ff fecd 	bl	8004e50 <__cvt>
 80050b6:	9b06      	ldr	r3, [sp, #24]
 80050b8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80050ba:	2b47      	cmp	r3, #71	; 0x47
 80050bc:	4680      	mov	r8, r0
 80050be:	d108      	bne.n	80050d2 <_printf_float+0x142>
 80050c0:	1cc8      	adds	r0, r1, #3
 80050c2:	db02      	blt.n	80050ca <_printf_float+0x13a>
 80050c4:	6863      	ldr	r3, [r4, #4]
 80050c6:	4299      	cmp	r1, r3
 80050c8:	dd41      	ble.n	800514e <_printf_float+0x1be>
 80050ca:	f1ab 0b02 	sub.w	fp, fp, #2
 80050ce:	fa5f fb8b 	uxtb.w	fp, fp
 80050d2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80050d6:	d820      	bhi.n	800511a <_printf_float+0x18a>
 80050d8:	3901      	subs	r1, #1
 80050da:	465a      	mov	r2, fp
 80050dc:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80050e0:	9109      	str	r1, [sp, #36]	; 0x24
 80050e2:	f7ff ff17 	bl	8004f14 <__exponent>
 80050e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e8:	1813      	adds	r3, r2, r0
 80050ea:	2a01      	cmp	r2, #1
 80050ec:	4681      	mov	r9, r0
 80050ee:	6123      	str	r3, [r4, #16]
 80050f0:	dc02      	bgt.n	80050f8 <_printf_float+0x168>
 80050f2:	6822      	ldr	r2, [r4, #0]
 80050f4:	07d2      	lsls	r2, r2, #31
 80050f6:	d501      	bpl.n	80050fc <_printf_float+0x16c>
 80050f8:	3301      	adds	r3, #1
 80050fa:	6123      	str	r3, [r4, #16]
 80050fc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005100:	2b00      	cmp	r3, #0
 8005102:	d09c      	beq.n	800503e <_printf_float+0xae>
 8005104:	232d      	movs	r3, #45	; 0x2d
 8005106:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800510a:	e798      	b.n	800503e <_printf_float+0xae>
 800510c:	9a06      	ldr	r2, [sp, #24]
 800510e:	2a47      	cmp	r2, #71	; 0x47
 8005110:	d1be      	bne.n	8005090 <_printf_float+0x100>
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1bc      	bne.n	8005090 <_printf_float+0x100>
 8005116:	2301      	movs	r3, #1
 8005118:	e7b9      	b.n	800508e <_printf_float+0xfe>
 800511a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800511e:	d118      	bne.n	8005152 <_printf_float+0x1c2>
 8005120:	2900      	cmp	r1, #0
 8005122:	6863      	ldr	r3, [r4, #4]
 8005124:	dd0b      	ble.n	800513e <_printf_float+0x1ae>
 8005126:	6121      	str	r1, [r4, #16]
 8005128:	b913      	cbnz	r3, 8005130 <_printf_float+0x1a0>
 800512a:	6822      	ldr	r2, [r4, #0]
 800512c:	07d0      	lsls	r0, r2, #31
 800512e:	d502      	bpl.n	8005136 <_printf_float+0x1a6>
 8005130:	3301      	adds	r3, #1
 8005132:	440b      	add	r3, r1
 8005134:	6123      	str	r3, [r4, #16]
 8005136:	65a1      	str	r1, [r4, #88]	; 0x58
 8005138:	f04f 0900 	mov.w	r9, #0
 800513c:	e7de      	b.n	80050fc <_printf_float+0x16c>
 800513e:	b913      	cbnz	r3, 8005146 <_printf_float+0x1b6>
 8005140:	6822      	ldr	r2, [r4, #0]
 8005142:	07d2      	lsls	r2, r2, #31
 8005144:	d501      	bpl.n	800514a <_printf_float+0x1ba>
 8005146:	3302      	adds	r3, #2
 8005148:	e7f4      	b.n	8005134 <_printf_float+0x1a4>
 800514a:	2301      	movs	r3, #1
 800514c:	e7f2      	b.n	8005134 <_printf_float+0x1a4>
 800514e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005152:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005154:	4299      	cmp	r1, r3
 8005156:	db05      	blt.n	8005164 <_printf_float+0x1d4>
 8005158:	6823      	ldr	r3, [r4, #0]
 800515a:	6121      	str	r1, [r4, #16]
 800515c:	07d8      	lsls	r0, r3, #31
 800515e:	d5ea      	bpl.n	8005136 <_printf_float+0x1a6>
 8005160:	1c4b      	adds	r3, r1, #1
 8005162:	e7e7      	b.n	8005134 <_printf_float+0x1a4>
 8005164:	2900      	cmp	r1, #0
 8005166:	bfd4      	ite	le
 8005168:	f1c1 0202 	rsble	r2, r1, #2
 800516c:	2201      	movgt	r2, #1
 800516e:	4413      	add	r3, r2
 8005170:	e7e0      	b.n	8005134 <_printf_float+0x1a4>
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	055a      	lsls	r2, r3, #21
 8005176:	d407      	bmi.n	8005188 <_printf_float+0x1f8>
 8005178:	6923      	ldr	r3, [r4, #16]
 800517a:	4642      	mov	r2, r8
 800517c:	4631      	mov	r1, r6
 800517e:	4628      	mov	r0, r5
 8005180:	47b8      	blx	r7
 8005182:	3001      	adds	r0, #1
 8005184:	d12c      	bne.n	80051e0 <_printf_float+0x250>
 8005186:	e764      	b.n	8005052 <_printf_float+0xc2>
 8005188:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800518c:	f240 80e0 	bls.w	8005350 <_printf_float+0x3c0>
 8005190:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005194:	2200      	movs	r2, #0
 8005196:	2300      	movs	r3, #0
 8005198:	f7fb fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800519c:	2800      	cmp	r0, #0
 800519e:	d034      	beq.n	800520a <_printf_float+0x27a>
 80051a0:	4a37      	ldr	r2, [pc, #220]	; (8005280 <_printf_float+0x2f0>)
 80051a2:	2301      	movs	r3, #1
 80051a4:	4631      	mov	r1, r6
 80051a6:	4628      	mov	r0, r5
 80051a8:	47b8      	blx	r7
 80051aa:	3001      	adds	r0, #1
 80051ac:	f43f af51 	beq.w	8005052 <_printf_float+0xc2>
 80051b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051b4:	429a      	cmp	r2, r3
 80051b6:	db02      	blt.n	80051be <_printf_float+0x22e>
 80051b8:	6823      	ldr	r3, [r4, #0]
 80051ba:	07d8      	lsls	r0, r3, #31
 80051bc:	d510      	bpl.n	80051e0 <_printf_float+0x250>
 80051be:	ee18 3a10 	vmov	r3, s16
 80051c2:	4652      	mov	r2, sl
 80051c4:	4631      	mov	r1, r6
 80051c6:	4628      	mov	r0, r5
 80051c8:	47b8      	blx	r7
 80051ca:	3001      	adds	r0, #1
 80051cc:	f43f af41 	beq.w	8005052 <_printf_float+0xc2>
 80051d0:	f04f 0800 	mov.w	r8, #0
 80051d4:	f104 091a 	add.w	r9, r4, #26
 80051d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051da:	3b01      	subs	r3, #1
 80051dc:	4543      	cmp	r3, r8
 80051de:	dc09      	bgt.n	80051f4 <_printf_float+0x264>
 80051e0:	6823      	ldr	r3, [r4, #0]
 80051e2:	079b      	lsls	r3, r3, #30
 80051e4:	f100 8105 	bmi.w	80053f2 <_printf_float+0x462>
 80051e8:	68e0      	ldr	r0, [r4, #12]
 80051ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051ec:	4298      	cmp	r0, r3
 80051ee:	bfb8      	it	lt
 80051f0:	4618      	movlt	r0, r3
 80051f2:	e730      	b.n	8005056 <_printf_float+0xc6>
 80051f4:	2301      	movs	r3, #1
 80051f6:	464a      	mov	r2, r9
 80051f8:	4631      	mov	r1, r6
 80051fa:	4628      	mov	r0, r5
 80051fc:	47b8      	blx	r7
 80051fe:	3001      	adds	r0, #1
 8005200:	f43f af27 	beq.w	8005052 <_printf_float+0xc2>
 8005204:	f108 0801 	add.w	r8, r8, #1
 8005208:	e7e6      	b.n	80051d8 <_printf_float+0x248>
 800520a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800520c:	2b00      	cmp	r3, #0
 800520e:	dc39      	bgt.n	8005284 <_printf_float+0x2f4>
 8005210:	4a1b      	ldr	r2, [pc, #108]	; (8005280 <_printf_float+0x2f0>)
 8005212:	2301      	movs	r3, #1
 8005214:	4631      	mov	r1, r6
 8005216:	4628      	mov	r0, r5
 8005218:	47b8      	blx	r7
 800521a:	3001      	adds	r0, #1
 800521c:	f43f af19 	beq.w	8005052 <_printf_float+0xc2>
 8005220:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005224:	4313      	orrs	r3, r2
 8005226:	d102      	bne.n	800522e <_printf_float+0x29e>
 8005228:	6823      	ldr	r3, [r4, #0]
 800522a:	07d9      	lsls	r1, r3, #31
 800522c:	d5d8      	bpl.n	80051e0 <_printf_float+0x250>
 800522e:	ee18 3a10 	vmov	r3, s16
 8005232:	4652      	mov	r2, sl
 8005234:	4631      	mov	r1, r6
 8005236:	4628      	mov	r0, r5
 8005238:	47b8      	blx	r7
 800523a:	3001      	adds	r0, #1
 800523c:	f43f af09 	beq.w	8005052 <_printf_float+0xc2>
 8005240:	f04f 0900 	mov.w	r9, #0
 8005244:	f104 0a1a 	add.w	sl, r4, #26
 8005248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800524a:	425b      	negs	r3, r3
 800524c:	454b      	cmp	r3, r9
 800524e:	dc01      	bgt.n	8005254 <_printf_float+0x2c4>
 8005250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005252:	e792      	b.n	800517a <_printf_float+0x1ea>
 8005254:	2301      	movs	r3, #1
 8005256:	4652      	mov	r2, sl
 8005258:	4631      	mov	r1, r6
 800525a:	4628      	mov	r0, r5
 800525c:	47b8      	blx	r7
 800525e:	3001      	adds	r0, #1
 8005260:	f43f aef7 	beq.w	8005052 <_printf_float+0xc2>
 8005264:	f109 0901 	add.w	r9, r9, #1
 8005268:	e7ee      	b.n	8005248 <_printf_float+0x2b8>
 800526a:	bf00      	nop
 800526c:	7fefffff 	.word	0x7fefffff
 8005270:	08008078 	.word	0x08008078
 8005274:	0800807c 	.word	0x0800807c
 8005278:	08008084 	.word	0x08008084
 800527c:	08008080 	.word	0x08008080
 8005280:	08008088 	.word	0x08008088
 8005284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005286:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005288:	429a      	cmp	r2, r3
 800528a:	bfa8      	it	ge
 800528c:	461a      	movge	r2, r3
 800528e:	2a00      	cmp	r2, #0
 8005290:	4691      	mov	r9, r2
 8005292:	dc37      	bgt.n	8005304 <_printf_float+0x374>
 8005294:	f04f 0b00 	mov.w	fp, #0
 8005298:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800529c:	f104 021a 	add.w	r2, r4, #26
 80052a0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80052a2:	9305      	str	r3, [sp, #20]
 80052a4:	eba3 0309 	sub.w	r3, r3, r9
 80052a8:	455b      	cmp	r3, fp
 80052aa:	dc33      	bgt.n	8005314 <_printf_float+0x384>
 80052ac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052b0:	429a      	cmp	r2, r3
 80052b2:	db3b      	blt.n	800532c <_printf_float+0x39c>
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	07da      	lsls	r2, r3, #31
 80052b8:	d438      	bmi.n	800532c <_printf_float+0x39c>
 80052ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052bc:	9a05      	ldr	r2, [sp, #20]
 80052be:	9909      	ldr	r1, [sp, #36]	; 0x24
 80052c0:	1a9a      	subs	r2, r3, r2
 80052c2:	eba3 0901 	sub.w	r9, r3, r1
 80052c6:	4591      	cmp	r9, r2
 80052c8:	bfa8      	it	ge
 80052ca:	4691      	movge	r9, r2
 80052cc:	f1b9 0f00 	cmp.w	r9, #0
 80052d0:	dc35      	bgt.n	800533e <_printf_float+0x3ae>
 80052d2:	f04f 0800 	mov.w	r8, #0
 80052d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80052da:	f104 0a1a 	add.w	sl, r4, #26
 80052de:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80052e2:	1a9b      	subs	r3, r3, r2
 80052e4:	eba3 0309 	sub.w	r3, r3, r9
 80052e8:	4543      	cmp	r3, r8
 80052ea:	f77f af79 	ble.w	80051e0 <_printf_float+0x250>
 80052ee:	2301      	movs	r3, #1
 80052f0:	4652      	mov	r2, sl
 80052f2:	4631      	mov	r1, r6
 80052f4:	4628      	mov	r0, r5
 80052f6:	47b8      	blx	r7
 80052f8:	3001      	adds	r0, #1
 80052fa:	f43f aeaa 	beq.w	8005052 <_printf_float+0xc2>
 80052fe:	f108 0801 	add.w	r8, r8, #1
 8005302:	e7ec      	b.n	80052de <_printf_float+0x34e>
 8005304:	4613      	mov	r3, r2
 8005306:	4631      	mov	r1, r6
 8005308:	4642      	mov	r2, r8
 800530a:	4628      	mov	r0, r5
 800530c:	47b8      	blx	r7
 800530e:	3001      	adds	r0, #1
 8005310:	d1c0      	bne.n	8005294 <_printf_float+0x304>
 8005312:	e69e      	b.n	8005052 <_printf_float+0xc2>
 8005314:	2301      	movs	r3, #1
 8005316:	4631      	mov	r1, r6
 8005318:	4628      	mov	r0, r5
 800531a:	9205      	str	r2, [sp, #20]
 800531c:	47b8      	blx	r7
 800531e:	3001      	adds	r0, #1
 8005320:	f43f ae97 	beq.w	8005052 <_printf_float+0xc2>
 8005324:	9a05      	ldr	r2, [sp, #20]
 8005326:	f10b 0b01 	add.w	fp, fp, #1
 800532a:	e7b9      	b.n	80052a0 <_printf_float+0x310>
 800532c:	ee18 3a10 	vmov	r3, s16
 8005330:	4652      	mov	r2, sl
 8005332:	4631      	mov	r1, r6
 8005334:	4628      	mov	r0, r5
 8005336:	47b8      	blx	r7
 8005338:	3001      	adds	r0, #1
 800533a:	d1be      	bne.n	80052ba <_printf_float+0x32a>
 800533c:	e689      	b.n	8005052 <_printf_float+0xc2>
 800533e:	9a05      	ldr	r2, [sp, #20]
 8005340:	464b      	mov	r3, r9
 8005342:	4442      	add	r2, r8
 8005344:	4631      	mov	r1, r6
 8005346:	4628      	mov	r0, r5
 8005348:	47b8      	blx	r7
 800534a:	3001      	adds	r0, #1
 800534c:	d1c1      	bne.n	80052d2 <_printf_float+0x342>
 800534e:	e680      	b.n	8005052 <_printf_float+0xc2>
 8005350:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005352:	2a01      	cmp	r2, #1
 8005354:	dc01      	bgt.n	800535a <_printf_float+0x3ca>
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d538      	bpl.n	80053cc <_printf_float+0x43c>
 800535a:	2301      	movs	r3, #1
 800535c:	4642      	mov	r2, r8
 800535e:	4631      	mov	r1, r6
 8005360:	4628      	mov	r0, r5
 8005362:	47b8      	blx	r7
 8005364:	3001      	adds	r0, #1
 8005366:	f43f ae74 	beq.w	8005052 <_printf_float+0xc2>
 800536a:	ee18 3a10 	vmov	r3, s16
 800536e:	4652      	mov	r2, sl
 8005370:	4631      	mov	r1, r6
 8005372:	4628      	mov	r0, r5
 8005374:	47b8      	blx	r7
 8005376:	3001      	adds	r0, #1
 8005378:	f43f ae6b 	beq.w	8005052 <_printf_float+0xc2>
 800537c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005380:	2200      	movs	r2, #0
 8005382:	2300      	movs	r3, #0
 8005384:	f7fb fba0 	bl	8000ac8 <__aeabi_dcmpeq>
 8005388:	b9d8      	cbnz	r0, 80053c2 <_printf_float+0x432>
 800538a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800538c:	f108 0201 	add.w	r2, r8, #1
 8005390:	3b01      	subs	r3, #1
 8005392:	4631      	mov	r1, r6
 8005394:	4628      	mov	r0, r5
 8005396:	47b8      	blx	r7
 8005398:	3001      	adds	r0, #1
 800539a:	d10e      	bne.n	80053ba <_printf_float+0x42a>
 800539c:	e659      	b.n	8005052 <_printf_float+0xc2>
 800539e:	2301      	movs	r3, #1
 80053a0:	4652      	mov	r2, sl
 80053a2:	4631      	mov	r1, r6
 80053a4:	4628      	mov	r0, r5
 80053a6:	47b8      	blx	r7
 80053a8:	3001      	adds	r0, #1
 80053aa:	f43f ae52 	beq.w	8005052 <_printf_float+0xc2>
 80053ae:	f108 0801 	add.w	r8, r8, #1
 80053b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4543      	cmp	r3, r8
 80053b8:	dcf1      	bgt.n	800539e <_printf_float+0x40e>
 80053ba:	464b      	mov	r3, r9
 80053bc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80053c0:	e6dc      	b.n	800517c <_printf_float+0x1ec>
 80053c2:	f04f 0800 	mov.w	r8, #0
 80053c6:	f104 0a1a 	add.w	sl, r4, #26
 80053ca:	e7f2      	b.n	80053b2 <_printf_float+0x422>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4642      	mov	r2, r8
 80053d0:	e7df      	b.n	8005392 <_printf_float+0x402>
 80053d2:	2301      	movs	r3, #1
 80053d4:	464a      	mov	r2, r9
 80053d6:	4631      	mov	r1, r6
 80053d8:	4628      	mov	r0, r5
 80053da:	47b8      	blx	r7
 80053dc:	3001      	adds	r0, #1
 80053de:	f43f ae38 	beq.w	8005052 <_printf_float+0xc2>
 80053e2:	f108 0801 	add.w	r8, r8, #1
 80053e6:	68e3      	ldr	r3, [r4, #12]
 80053e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80053ea:	1a5b      	subs	r3, r3, r1
 80053ec:	4543      	cmp	r3, r8
 80053ee:	dcf0      	bgt.n	80053d2 <_printf_float+0x442>
 80053f0:	e6fa      	b.n	80051e8 <_printf_float+0x258>
 80053f2:	f04f 0800 	mov.w	r8, #0
 80053f6:	f104 0919 	add.w	r9, r4, #25
 80053fa:	e7f4      	b.n	80053e6 <_printf_float+0x456>

080053fc <_printf_common>:
 80053fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005400:	4616      	mov	r6, r2
 8005402:	4699      	mov	r9, r3
 8005404:	688a      	ldr	r2, [r1, #8]
 8005406:	690b      	ldr	r3, [r1, #16]
 8005408:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800540c:	4293      	cmp	r3, r2
 800540e:	bfb8      	it	lt
 8005410:	4613      	movlt	r3, r2
 8005412:	6033      	str	r3, [r6, #0]
 8005414:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005418:	4607      	mov	r7, r0
 800541a:	460c      	mov	r4, r1
 800541c:	b10a      	cbz	r2, 8005422 <_printf_common+0x26>
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	6823      	ldr	r3, [r4, #0]
 8005424:	0699      	lsls	r1, r3, #26
 8005426:	bf42      	ittt	mi
 8005428:	6833      	ldrmi	r3, [r6, #0]
 800542a:	3302      	addmi	r3, #2
 800542c:	6033      	strmi	r3, [r6, #0]
 800542e:	6825      	ldr	r5, [r4, #0]
 8005430:	f015 0506 	ands.w	r5, r5, #6
 8005434:	d106      	bne.n	8005444 <_printf_common+0x48>
 8005436:	f104 0a19 	add.w	sl, r4, #25
 800543a:	68e3      	ldr	r3, [r4, #12]
 800543c:	6832      	ldr	r2, [r6, #0]
 800543e:	1a9b      	subs	r3, r3, r2
 8005440:	42ab      	cmp	r3, r5
 8005442:	dc26      	bgt.n	8005492 <_printf_common+0x96>
 8005444:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005448:	1e13      	subs	r3, r2, #0
 800544a:	6822      	ldr	r2, [r4, #0]
 800544c:	bf18      	it	ne
 800544e:	2301      	movne	r3, #1
 8005450:	0692      	lsls	r2, r2, #26
 8005452:	d42b      	bmi.n	80054ac <_printf_common+0xb0>
 8005454:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005458:	4649      	mov	r1, r9
 800545a:	4638      	mov	r0, r7
 800545c:	47c0      	blx	r8
 800545e:	3001      	adds	r0, #1
 8005460:	d01e      	beq.n	80054a0 <_printf_common+0xa4>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	68e5      	ldr	r5, [r4, #12]
 8005466:	6832      	ldr	r2, [r6, #0]
 8005468:	f003 0306 	and.w	r3, r3, #6
 800546c:	2b04      	cmp	r3, #4
 800546e:	bf08      	it	eq
 8005470:	1aad      	subeq	r5, r5, r2
 8005472:	68a3      	ldr	r3, [r4, #8]
 8005474:	6922      	ldr	r2, [r4, #16]
 8005476:	bf0c      	ite	eq
 8005478:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800547c:	2500      	movne	r5, #0
 800547e:	4293      	cmp	r3, r2
 8005480:	bfc4      	itt	gt
 8005482:	1a9b      	subgt	r3, r3, r2
 8005484:	18ed      	addgt	r5, r5, r3
 8005486:	2600      	movs	r6, #0
 8005488:	341a      	adds	r4, #26
 800548a:	42b5      	cmp	r5, r6
 800548c:	d11a      	bne.n	80054c4 <_printf_common+0xc8>
 800548e:	2000      	movs	r0, #0
 8005490:	e008      	b.n	80054a4 <_printf_common+0xa8>
 8005492:	2301      	movs	r3, #1
 8005494:	4652      	mov	r2, sl
 8005496:	4649      	mov	r1, r9
 8005498:	4638      	mov	r0, r7
 800549a:	47c0      	blx	r8
 800549c:	3001      	adds	r0, #1
 800549e:	d103      	bne.n	80054a8 <_printf_common+0xac>
 80054a0:	f04f 30ff 	mov.w	r0, #4294967295
 80054a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054a8:	3501      	adds	r5, #1
 80054aa:	e7c6      	b.n	800543a <_printf_common+0x3e>
 80054ac:	18e1      	adds	r1, r4, r3
 80054ae:	1c5a      	adds	r2, r3, #1
 80054b0:	2030      	movs	r0, #48	; 0x30
 80054b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054b6:	4422      	add	r2, r4
 80054b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054c0:	3302      	adds	r3, #2
 80054c2:	e7c7      	b.n	8005454 <_printf_common+0x58>
 80054c4:	2301      	movs	r3, #1
 80054c6:	4622      	mov	r2, r4
 80054c8:	4649      	mov	r1, r9
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	3001      	adds	r0, #1
 80054d0:	d0e6      	beq.n	80054a0 <_printf_common+0xa4>
 80054d2:	3601      	adds	r6, #1
 80054d4:	e7d9      	b.n	800548a <_printf_common+0x8e>
	...

080054d8 <_printf_i>:
 80054d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054dc:	7e0f      	ldrb	r7, [r1, #24]
 80054de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054e0:	2f78      	cmp	r7, #120	; 0x78
 80054e2:	4691      	mov	r9, r2
 80054e4:	4680      	mov	r8, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	469a      	mov	sl, r3
 80054ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ee:	d807      	bhi.n	8005500 <_printf_i+0x28>
 80054f0:	2f62      	cmp	r7, #98	; 0x62
 80054f2:	d80a      	bhi.n	800550a <_printf_i+0x32>
 80054f4:	2f00      	cmp	r7, #0
 80054f6:	f000 80d8 	beq.w	80056aa <_printf_i+0x1d2>
 80054fa:	2f58      	cmp	r7, #88	; 0x58
 80054fc:	f000 80a3 	beq.w	8005646 <_printf_i+0x16e>
 8005500:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005504:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005508:	e03a      	b.n	8005580 <_printf_i+0xa8>
 800550a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800550e:	2b15      	cmp	r3, #21
 8005510:	d8f6      	bhi.n	8005500 <_printf_i+0x28>
 8005512:	a101      	add	r1, pc, #4	; (adr r1, 8005518 <_printf_i+0x40>)
 8005514:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005518:	08005571 	.word	0x08005571
 800551c:	08005585 	.word	0x08005585
 8005520:	08005501 	.word	0x08005501
 8005524:	08005501 	.word	0x08005501
 8005528:	08005501 	.word	0x08005501
 800552c:	08005501 	.word	0x08005501
 8005530:	08005585 	.word	0x08005585
 8005534:	08005501 	.word	0x08005501
 8005538:	08005501 	.word	0x08005501
 800553c:	08005501 	.word	0x08005501
 8005540:	08005501 	.word	0x08005501
 8005544:	08005691 	.word	0x08005691
 8005548:	080055b5 	.word	0x080055b5
 800554c:	08005673 	.word	0x08005673
 8005550:	08005501 	.word	0x08005501
 8005554:	08005501 	.word	0x08005501
 8005558:	080056b3 	.word	0x080056b3
 800555c:	08005501 	.word	0x08005501
 8005560:	080055b5 	.word	0x080055b5
 8005564:	08005501 	.word	0x08005501
 8005568:	08005501 	.word	0x08005501
 800556c:	0800567b 	.word	0x0800567b
 8005570:	682b      	ldr	r3, [r5, #0]
 8005572:	1d1a      	adds	r2, r3, #4
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800557c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005580:	2301      	movs	r3, #1
 8005582:	e0a3      	b.n	80056cc <_printf_i+0x1f4>
 8005584:	6820      	ldr	r0, [r4, #0]
 8005586:	6829      	ldr	r1, [r5, #0]
 8005588:	0606      	lsls	r6, r0, #24
 800558a:	f101 0304 	add.w	r3, r1, #4
 800558e:	d50a      	bpl.n	80055a6 <_printf_i+0xce>
 8005590:	680e      	ldr	r6, [r1, #0]
 8005592:	602b      	str	r3, [r5, #0]
 8005594:	2e00      	cmp	r6, #0
 8005596:	da03      	bge.n	80055a0 <_printf_i+0xc8>
 8005598:	232d      	movs	r3, #45	; 0x2d
 800559a:	4276      	negs	r6, r6
 800559c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055a0:	485e      	ldr	r0, [pc, #376]	; (800571c <_printf_i+0x244>)
 80055a2:	230a      	movs	r3, #10
 80055a4:	e019      	b.n	80055da <_printf_i+0x102>
 80055a6:	680e      	ldr	r6, [r1, #0]
 80055a8:	602b      	str	r3, [r5, #0]
 80055aa:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055ae:	bf18      	it	ne
 80055b0:	b236      	sxthne	r6, r6
 80055b2:	e7ef      	b.n	8005594 <_printf_i+0xbc>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	6820      	ldr	r0, [r4, #0]
 80055b8:	1d19      	adds	r1, r3, #4
 80055ba:	6029      	str	r1, [r5, #0]
 80055bc:	0601      	lsls	r1, r0, #24
 80055be:	d501      	bpl.n	80055c4 <_printf_i+0xec>
 80055c0:	681e      	ldr	r6, [r3, #0]
 80055c2:	e002      	b.n	80055ca <_printf_i+0xf2>
 80055c4:	0646      	lsls	r6, r0, #25
 80055c6:	d5fb      	bpl.n	80055c0 <_printf_i+0xe8>
 80055c8:	881e      	ldrh	r6, [r3, #0]
 80055ca:	4854      	ldr	r0, [pc, #336]	; (800571c <_printf_i+0x244>)
 80055cc:	2f6f      	cmp	r7, #111	; 0x6f
 80055ce:	bf0c      	ite	eq
 80055d0:	2308      	moveq	r3, #8
 80055d2:	230a      	movne	r3, #10
 80055d4:	2100      	movs	r1, #0
 80055d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055da:	6865      	ldr	r5, [r4, #4]
 80055dc:	60a5      	str	r5, [r4, #8]
 80055de:	2d00      	cmp	r5, #0
 80055e0:	bfa2      	ittt	ge
 80055e2:	6821      	ldrge	r1, [r4, #0]
 80055e4:	f021 0104 	bicge.w	r1, r1, #4
 80055e8:	6021      	strge	r1, [r4, #0]
 80055ea:	b90e      	cbnz	r6, 80055f0 <_printf_i+0x118>
 80055ec:	2d00      	cmp	r5, #0
 80055ee:	d04d      	beq.n	800568c <_printf_i+0x1b4>
 80055f0:	4615      	mov	r5, r2
 80055f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80055f6:	fb03 6711 	mls	r7, r3, r1, r6
 80055fa:	5dc7      	ldrb	r7, [r0, r7]
 80055fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005600:	4637      	mov	r7, r6
 8005602:	42bb      	cmp	r3, r7
 8005604:	460e      	mov	r6, r1
 8005606:	d9f4      	bls.n	80055f2 <_printf_i+0x11a>
 8005608:	2b08      	cmp	r3, #8
 800560a:	d10b      	bne.n	8005624 <_printf_i+0x14c>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07de      	lsls	r6, r3, #31
 8005610:	d508      	bpl.n	8005624 <_printf_i+0x14c>
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	6861      	ldr	r1, [r4, #4]
 8005616:	4299      	cmp	r1, r3
 8005618:	bfde      	ittt	le
 800561a:	2330      	movle	r3, #48	; 0x30
 800561c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005620:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005624:	1b52      	subs	r2, r2, r5
 8005626:	6122      	str	r2, [r4, #16]
 8005628:	f8cd a000 	str.w	sl, [sp]
 800562c:	464b      	mov	r3, r9
 800562e:	aa03      	add	r2, sp, #12
 8005630:	4621      	mov	r1, r4
 8005632:	4640      	mov	r0, r8
 8005634:	f7ff fee2 	bl	80053fc <_printf_common>
 8005638:	3001      	adds	r0, #1
 800563a:	d14c      	bne.n	80056d6 <_printf_i+0x1fe>
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	b004      	add	sp, #16
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	4835      	ldr	r0, [pc, #212]	; (800571c <_printf_i+0x244>)
 8005648:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800564c:	6829      	ldr	r1, [r5, #0]
 800564e:	6823      	ldr	r3, [r4, #0]
 8005650:	f851 6b04 	ldr.w	r6, [r1], #4
 8005654:	6029      	str	r1, [r5, #0]
 8005656:	061d      	lsls	r5, r3, #24
 8005658:	d514      	bpl.n	8005684 <_printf_i+0x1ac>
 800565a:	07df      	lsls	r7, r3, #31
 800565c:	bf44      	itt	mi
 800565e:	f043 0320 	orrmi.w	r3, r3, #32
 8005662:	6023      	strmi	r3, [r4, #0]
 8005664:	b91e      	cbnz	r6, 800566e <_printf_i+0x196>
 8005666:	6823      	ldr	r3, [r4, #0]
 8005668:	f023 0320 	bic.w	r3, r3, #32
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	2310      	movs	r3, #16
 8005670:	e7b0      	b.n	80055d4 <_printf_i+0xfc>
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	f043 0320 	orr.w	r3, r3, #32
 8005678:	6023      	str	r3, [r4, #0]
 800567a:	2378      	movs	r3, #120	; 0x78
 800567c:	4828      	ldr	r0, [pc, #160]	; (8005720 <_printf_i+0x248>)
 800567e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005682:	e7e3      	b.n	800564c <_printf_i+0x174>
 8005684:	0659      	lsls	r1, r3, #25
 8005686:	bf48      	it	mi
 8005688:	b2b6      	uxthmi	r6, r6
 800568a:	e7e6      	b.n	800565a <_printf_i+0x182>
 800568c:	4615      	mov	r5, r2
 800568e:	e7bb      	b.n	8005608 <_printf_i+0x130>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	6826      	ldr	r6, [r4, #0]
 8005694:	6961      	ldr	r1, [r4, #20]
 8005696:	1d18      	adds	r0, r3, #4
 8005698:	6028      	str	r0, [r5, #0]
 800569a:	0635      	lsls	r5, r6, #24
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	d501      	bpl.n	80056a4 <_printf_i+0x1cc>
 80056a0:	6019      	str	r1, [r3, #0]
 80056a2:	e002      	b.n	80056aa <_printf_i+0x1d2>
 80056a4:	0670      	lsls	r0, r6, #25
 80056a6:	d5fb      	bpl.n	80056a0 <_printf_i+0x1c8>
 80056a8:	8019      	strh	r1, [r3, #0]
 80056aa:	2300      	movs	r3, #0
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	4615      	mov	r5, r2
 80056b0:	e7ba      	b.n	8005628 <_printf_i+0x150>
 80056b2:	682b      	ldr	r3, [r5, #0]
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	602a      	str	r2, [r5, #0]
 80056b8:	681d      	ldr	r5, [r3, #0]
 80056ba:	6862      	ldr	r2, [r4, #4]
 80056bc:	2100      	movs	r1, #0
 80056be:	4628      	mov	r0, r5
 80056c0:	f7fa fd8e 	bl	80001e0 <memchr>
 80056c4:	b108      	cbz	r0, 80056ca <_printf_i+0x1f2>
 80056c6:	1b40      	subs	r0, r0, r5
 80056c8:	6060      	str	r0, [r4, #4]
 80056ca:	6863      	ldr	r3, [r4, #4]
 80056cc:	6123      	str	r3, [r4, #16]
 80056ce:	2300      	movs	r3, #0
 80056d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d4:	e7a8      	b.n	8005628 <_printf_i+0x150>
 80056d6:	6923      	ldr	r3, [r4, #16]
 80056d8:	462a      	mov	r2, r5
 80056da:	4649      	mov	r1, r9
 80056dc:	4640      	mov	r0, r8
 80056de:	47d0      	blx	sl
 80056e0:	3001      	adds	r0, #1
 80056e2:	d0ab      	beq.n	800563c <_printf_i+0x164>
 80056e4:	6823      	ldr	r3, [r4, #0]
 80056e6:	079b      	lsls	r3, r3, #30
 80056e8:	d413      	bmi.n	8005712 <_printf_i+0x23a>
 80056ea:	68e0      	ldr	r0, [r4, #12]
 80056ec:	9b03      	ldr	r3, [sp, #12]
 80056ee:	4298      	cmp	r0, r3
 80056f0:	bfb8      	it	lt
 80056f2:	4618      	movlt	r0, r3
 80056f4:	e7a4      	b.n	8005640 <_printf_i+0x168>
 80056f6:	2301      	movs	r3, #1
 80056f8:	4632      	mov	r2, r6
 80056fa:	4649      	mov	r1, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	47d0      	blx	sl
 8005700:	3001      	adds	r0, #1
 8005702:	d09b      	beq.n	800563c <_printf_i+0x164>
 8005704:	3501      	adds	r5, #1
 8005706:	68e3      	ldr	r3, [r4, #12]
 8005708:	9903      	ldr	r1, [sp, #12]
 800570a:	1a5b      	subs	r3, r3, r1
 800570c:	42ab      	cmp	r3, r5
 800570e:	dcf2      	bgt.n	80056f6 <_printf_i+0x21e>
 8005710:	e7eb      	b.n	80056ea <_printf_i+0x212>
 8005712:	2500      	movs	r5, #0
 8005714:	f104 0619 	add.w	r6, r4, #25
 8005718:	e7f5      	b.n	8005706 <_printf_i+0x22e>
 800571a:	bf00      	nop
 800571c:	0800808a 	.word	0x0800808a
 8005720:	0800809b 	.word	0x0800809b

08005724 <strncpy>:
 8005724:	b510      	push	{r4, lr}
 8005726:	3901      	subs	r1, #1
 8005728:	4603      	mov	r3, r0
 800572a:	b132      	cbz	r2, 800573a <strncpy+0x16>
 800572c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005730:	f803 4b01 	strb.w	r4, [r3], #1
 8005734:	3a01      	subs	r2, #1
 8005736:	2c00      	cmp	r4, #0
 8005738:	d1f7      	bne.n	800572a <strncpy+0x6>
 800573a:	441a      	add	r2, r3
 800573c:	2100      	movs	r1, #0
 800573e:	4293      	cmp	r3, r2
 8005740:	d100      	bne.n	8005744 <strncpy+0x20>
 8005742:	bd10      	pop	{r4, pc}
 8005744:	f803 1b01 	strb.w	r1, [r3], #1
 8005748:	e7f9      	b.n	800573e <strncpy+0x1a>

0800574a <_vsniprintf_r>:
 800574a:	b530      	push	{r4, r5, lr}
 800574c:	4614      	mov	r4, r2
 800574e:	2c00      	cmp	r4, #0
 8005750:	b09b      	sub	sp, #108	; 0x6c
 8005752:	4605      	mov	r5, r0
 8005754:	461a      	mov	r2, r3
 8005756:	da05      	bge.n	8005764 <_vsniprintf_r+0x1a>
 8005758:	238b      	movs	r3, #139	; 0x8b
 800575a:	6003      	str	r3, [r0, #0]
 800575c:	f04f 30ff 	mov.w	r0, #4294967295
 8005760:	b01b      	add	sp, #108	; 0x6c
 8005762:	bd30      	pop	{r4, r5, pc}
 8005764:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005768:	f8ad 300c 	strh.w	r3, [sp, #12]
 800576c:	bf14      	ite	ne
 800576e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005772:	4623      	moveq	r3, r4
 8005774:	9302      	str	r3, [sp, #8]
 8005776:	9305      	str	r3, [sp, #20]
 8005778:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800577c:	9100      	str	r1, [sp, #0]
 800577e:	9104      	str	r1, [sp, #16]
 8005780:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005784:	4669      	mov	r1, sp
 8005786:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005788:	f001 fb84 	bl	8006e94 <_svfiprintf_r>
 800578c:	1c43      	adds	r3, r0, #1
 800578e:	bfbc      	itt	lt
 8005790:	238b      	movlt	r3, #139	; 0x8b
 8005792:	602b      	strlt	r3, [r5, #0]
 8005794:	2c00      	cmp	r4, #0
 8005796:	d0e3      	beq.n	8005760 <_vsniprintf_r+0x16>
 8005798:	9b00      	ldr	r3, [sp, #0]
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e7df      	b.n	8005760 <_vsniprintf_r+0x16>

080057a0 <vsniprintf>:
 80057a0:	b507      	push	{r0, r1, r2, lr}
 80057a2:	9300      	str	r3, [sp, #0]
 80057a4:	4613      	mov	r3, r2
 80057a6:	460a      	mov	r2, r1
 80057a8:	4601      	mov	r1, r0
 80057aa:	4803      	ldr	r0, [pc, #12]	; (80057b8 <vsniprintf+0x18>)
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	f7ff ffcc 	bl	800574a <_vsniprintf_r>
 80057b2:	b003      	add	sp, #12
 80057b4:	f85d fb04 	ldr.w	pc, [sp], #4
 80057b8:	2000000c 	.word	0x2000000c

080057bc <quorem>:
 80057bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c0:	6903      	ldr	r3, [r0, #16]
 80057c2:	690c      	ldr	r4, [r1, #16]
 80057c4:	42a3      	cmp	r3, r4
 80057c6:	4607      	mov	r7, r0
 80057c8:	f2c0 8081 	blt.w	80058ce <quorem+0x112>
 80057cc:	3c01      	subs	r4, #1
 80057ce:	f101 0814 	add.w	r8, r1, #20
 80057d2:	f100 0514 	add.w	r5, r0, #20
 80057d6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057da:	9301      	str	r3, [sp, #4]
 80057dc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80057e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057e4:	3301      	adds	r3, #1
 80057e6:	429a      	cmp	r2, r3
 80057e8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80057ec:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80057f0:	fbb2 f6f3 	udiv	r6, r2, r3
 80057f4:	d331      	bcc.n	800585a <quorem+0x9e>
 80057f6:	f04f 0e00 	mov.w	lr, #0
 80057fa:	4640      	mov	r0, r8
 80057fc:	46ac      	mov	ip, r5
 80057fe:	46f2      	mov	sl, lr
 8005800:	f850 2b04 	ldr.w	r2, [r0], #4
 8005804:	b293      	uxth	r3, r2
 8005806:	fb06 e303 	mla	r3, r6, r3, lr
 800580a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800580e:	b29b      	uxth	r3, r3
 8005810:	ebaa 0303 	sub.w	r3, sl, r3
 8005814:	f8dc a000 	ldr.w	sl, [ip]
 8005818:	0c12      	lsrs	r2, r2, #16
 800581a:	fa13 f38a 	uxtah	r3, r3, sl
 800581e:	fb06 e202 	mla	r2, r6, r2, lr
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	9b00      	ldr	r3, [sp, #0]
 8005826:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800582a:	b292      	uxth	r2, r2
 800582c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005830:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005834:	f8bd 3000 	ldrh.w	r3, [sp]
 8005838:	4581      	cmp	r9, r0
 800583a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800583e:	f84c 3b04 	str.w	r3, [ip], #4
 8005842:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005846:	d2db      	bcs.n	8005800 <quorem+0x44>
 8005848:	f855 300b 	ldr.w	r3, [r5, fp]
 800584c:	b92b      	cbnz	r3, 800585a <quorem+0x9e>
 800584e:	9b01      	ldr	r3, [sp, #4]
 8005850:	3b04      	subs	r3, #4
 8005852:	429d      	cmp	r5, r3
 8005854:	461a      	mov	r2, r3
 8005856:	d32e      	bcc.n	80058b6 <quorem+0xfa>
 8005858:	613c      	str	r4, [r7, #16]
 800585a:	4638      	mov	r0, r7
 800585c:	f001 f8c6 	bl	80069ec <__mcmp>
 8005860:	2800      	cmp	r0, #0
 8005862:	db24      	blt.n	80058ae <quorem+0xf2>
 8005864:	3601      	adds	r6, #1
 8005866:	4628      	mov	r0, r5
 8005868:	f04f 0c00 	mov.w	ip, #0
 800586c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005870:	f8d0 e000 	ldr.w	lr, [r0]
 8005874:	b293      	uxth	r3, r2
 8005876:	ebac 0303 	sub.w	r3, ip, r3
 800587a:	0c12      	lsrs	r2, r2, #16
 800587c:	fa13 f38e 	uxtah	r3, r3, lr
 8005880:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005884:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005888:	b29b      	uxth	r3, r3
 800588a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800588e:	45c1      	cmp	r9, r8
 8005890:	f840 3b04 	str.w	r3, [r0], #4
 8005894:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005898:	d2e8      	bcs.n	800586c <quorem+0xb0>
 800589a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800589e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058a2:	b922      	cbnz	r2, 80058ae <quorem+0xf2>
 80058a4:	3b04      	subs	r3, #4
 80058a6:	429d      	cmp	r5, r3
 80058a8:	461a      	mov	r2, r3
 80058aa:	d30a      	bcc.n	80058c2 <quorem+0x106>
 80058ac:	613c      	str	r4, [r7, #16]
 80058ae:	4630      	mov	r0, r6
 80058b0:	b003      	add	sp, #12
 80058b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058b6:	6812      	ldr	r2, [r2, #0]
 80058b8:	3b04      	subs	r3, #4
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	d1cc      	bne.n	8005858 <quorem+0x9c>
 80058be:	3c01      	subs	r4, #1
 80058c0:	e7c7      	b.n	8005852 <quorem+0x96>
 80058c2:	6812      	ldr	r2, [r2, #0]
 80058c4:	3b04      	subs	r3, #4
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d1f0      	bne.n	80058ac <quorem+0xf0>
 80058ca:	3c01      	subs	r4, #1
 80058cc:	e7eb      	b.n	80058a6 <quorem+0xea>
 80058ce:	2000      	movs	r0, #0
 80058d0:	e7ee      	b.n	80058b0 <quorem+0xf4>
 80058d2:	0000      	movs	r0, r0
 80058d4:	0000      	movs	r0, r0
	...

080058d8 <_dtoa_r>:
 80058d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058dc:	ed2d 8b04 	vpush	{d8-d9}
 80058e0:	ec57 6b10 	vmov	r6, r7, d0
 80058e4:	b093      	sub	sp, #76	; 0x4c
 80058e6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80058e8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80058ec:	9106      	str	r1, [sp, #24]
 80058ee:	ee10 aa10 	vmov	sl, s0
 80058f2:	4604      	mov	r4, r0
 80058f4:	9209      	str	r2, [sp, #36]	; 0x24
 80058f6:	930c      	str	r3, [sp, #48]	; 0x30
 80058f8:	46bb      	mov	fp, r7
 80058fa:	b975      	cbnz	r5, 800591a <_dtoa_r+0x42>
 80058fc:	2010      	movs	r0, #16
 80058fe:	f000 fddd 	bl	80064bc <malloc>
 8005902:	4602      	mov	r2, r0
 8005904:	6260      	str	r0, [r4, #36]	; 0x24
 8005906:	b920      	cbnz	r0, 8005912 <_dtoa_r+0x3a>
 8005908:	4ba7      	ldr	r3, [pc, #668]	; (8005ba8 <_dtoa_r+0x2d0>)
 800590a:	21ea      	movs	r1, #234	; 0xea
 800590c:	48a7      	ldr	r0, [pc, #668]	; (8005bac <_dtoa_r+0x2d4>)
 800590e:	f001 fbd1 	bl	80070b4 <__assert_func>
 8005912:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005916:	6005      	str	r5, [r0, #0]
 8005918:	60c5      	str	r5, [r0, #12]
 800591a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800591c:	6819      	ldr	r1, [r3, #0]
 800591e:	b151      	cbz	r1, 8005936 <_dtoa_r+0x5e>
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	604a      	str	r2, [r1, #4]
 8005924:	2301      	movs	r3, #1
 8005926:	4093      	lsls	r3, r2
 8005928:	608b      	str	r3, [r1, #8]
 800592a:	4620      	mov	r0, r4
 800592c:	f000 fe1c 	bl	8006568 <_Bfree>
 8005930:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005932:	2200      	movs	r2, #0
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	1e3b      	subs	r3, r7, #0
 8005938:	bfaa      	itet	ge
 800593a:	2300      	movge	r3, #0
 800593c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005940:	f8c8 3000 	strge.w	r3, [r8]
 8005944:	4b9a      	ldr	r3, [pc, #616]	; (8005bb0 <_dtoa_r+0x2d8>)
 8005946:	bfbc      	itt	lt
 8005948:	2201      	movlt	r2, #1
 800594a:	f8c8 2000 	strlt.w	r2, [r8]
 800594e:	ea33 030b 	bics.w	r3, r3, fp
 8005952:	d11b      	bne.n	800598c <_dtoa_r+0xb4>
 8005954:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005956:	f242 730f 	movw	r3, #9999	; 0x270f
 800595a:	6013      	str	r3, [r2, #0]
 800595c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005960:	4333      	orrs	r3, r6
 8005962:	f000 8592 	beq.w	800648a <_dtoa_r+0xbb2>
 8005966:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005968:	b963      	cbnz	r3, 8005984 <_dtoa_r+0xac>
 800596a:	4b92      	ldr	r3, [pc, #584]	; (8005bb4 <_dtoa_r+0x2dc>)
 800596c:	e022      	b.n	80059b4 <_dtoa_r+0xdc>
 800596e:	4b92      	ldr	r3, [pc, #584]	; (8005bb8 <_dtoa_r+0x2e0>)
 8005970:	9301      	str	r3, [sp, #4]
 8005972:	3308      	adds	r3, #8
 8005974:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005976:	6013      	str	r3, [r2, #0]
 8005978:	9801      	ldr	r0, [sp, #4]
 800597a:	b013      	add	sp, #76	; 0x4c
 800597c:	ecbd 8b04 	vpop	{d8-d9}
 8005980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005984:	4b8b      	ldr	r3, [pc, #556]	; (8005bb4 <_dtoa_r+0x2dc>)
 8005986:	9301      	str	r3, [sp, #4]
 8005988:	3303      	adds	r3, #3
 800598a:	e7f3      	b.n	8005974 <_dtoa_r+0x9c>
 800598c:	2200      	movs	r2, #0
 800598e:	2300      	movs	r3, #0
 8005990:	4650      	mov	r0, sl
 8005992:	4659      	mov	r1, fp
 8005994:	f7fb f898 	bl	8000ac8 <__aeabi_dcmpeq>
 8005998:	ec4b ab19 	vmov	d9, sl, fp
 800599c:	4680      	mov	r8, r0
 800599e:	b158      	cbz	r0, 80059b8 <_dtoa_r+0xe0>
 80059a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80059a2:	2301      	movs	r3, #1
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 856b 	beq.w	8006484 <_dtoa_r+0xbac>
 80059ae:	4883      	ldr	r0, [pc, #524]	; (8005bbc <_dtoa_r+0x2e4>)
 80059b0:	6018      	str	r0, [r3, #0]
 80059b2:	1e43      	subs	r3, r0, #1
 80059b4:	9301      	str	r3, [sp, #4]
 80059b6:	e7df      	b.n	8005978 <_dtoa_r+0xa0>
 80059b8:	ec4b ab10 	vmov	d0, sl, fp
 80059bc:	aa10      	add	r2, sp, #64	; 0x40
 80059be:	a911      	add	r1, sp, #68	; 0x44
 80059c0:	4620      	mov	r0, r4
 80059c2:	f001 f8b9 	bl	8006b38 <__d2b>
 80059c6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80059ca:	ee08 0a10 	vmov	s16, r0
 80059ce:	2d00      	cmp	r5, #0
 80059d0:	f000 8084 	beq.w	8005adc <_dtoa_r+0x204>
 80059d4:	ee19 3a90 	vmov	r3, s19
 80059d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80059dc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80059e0:	4656      	mov	r6, sl
 80059e2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80059e6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80059ea:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80059ee:	4b74      	ldr	r3, [pc, #464]	; (8005bc0 <_dtoa_r+0x2e8>)
 80059f0:	2200      	movs	r2, #0
 80059f2:	4630      	mov	r0, r6
 80059f4:	4639      	mov	r1, r7
 80059f6:	f7fa fc47 	bl	8000288 <__aeabi_dsub>
 80059fa:	a365      	add	r3, pc, #404	; (adr r3, 8005b90 <_dtoa_r+0x2b8>)
 80059fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a00:	f7fa fdfa 	bl	80005f8 <__aeabi_dmul>
 8005a04:	a364      	add	r3, pc, #400	; (adr r3, 8005b98 <_dtoa_r+0x2c0>)
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f7fa fc3f 	bl	800028c <__adddf3>
 8005a0e:	4606      	mov	r6, r0
 8005a10:	4628      	mov	r0, r5
 8005a12:	460f      	mov	r7, r1
 8005a14:	f7fa fd86 	bl	8000524 <__aeabi_i2d>
 8005a18:	a361      	add	r3, pc, #388	; (adr r3, 8005ba0 <_dtoa_r+0x2c8>)
 8005a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1e:	f7fa fdeb 	bl	80005f8 <__aeabi_dmul>
 8005a22:	4602      	mov	r2, r0
 8005a24:	460b      	mov	r3, r1
 8005a26:	4630      	mov	r0, r6
 8005a28:	4639      	mov	r1, r7
 8005a2a:	f7fa fc2f 	bl	800028c <__adddf3>
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460f      	mov	r7, r1
 8005a32:	f7fb f891 	bl	8000b58 <__aeabi_d2iz>
 8005a36:	2200      	movs	r2, #0
 8005a38:	9000      	str	r0, [sp, #0]
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	4630      	mov	r0, r6
 8005a3e:	4639      	mov	r1, r7
 8005a40:	f7fb f84c 	bl	8000adc <__aeabi_dcmplt>
 8005a44:	b150      	cbz	r0, 8005a5c <_dtoa_r+0x184>
 8005a46:	9800      	ldr	r0, [sp, #0]
 8005a48:	f7fa fd6c 	bl	8000524 <__aeabi_i2d>
 8005a4c:	4632      	mov	r2, r6
 8005a4e:	463b      	mov	r3, r7
 8005a50:	f7fb f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a54:	b910      	cbnz	r0, 8005a5c <_dtoa_r+0x184>
 8005a56:	9b00      	ldr	r3, [sp, #0]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	9b00      	ldr	r3, [sp, #0]
 8005a5e:	2b16      	cmp	r3, #22
 8005a60:	d85a      	bhi.n	8005b18 <_dtoa_r+0x240>
 8005a62:	9a00      	ldr	r2, [sp, #0]
 8005a64:	4b57      	ldr	r3, [pc, #348]	; (8005bc4 <_dtoa_r+0x2ec>)
 8005a66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a6e:	ec51 0b19 	vmov	r0, r1, d9
 8005a72:	f7fb f833 	bl	8000adc <__aeabi_dcmplt>
 8005a76:	2800      	cmp	r0, #0
 8005a78:	d050      	beq.n	8005b1c <_dtoa_r+0x244>
 8005a7a:	9b00      	ldr	r3, [sp, #0]
 8005a7c:	3b01      	subs	r3, #1
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	2300      	movs	r3, #0
 8005a82:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005a86:	1b5d      	subs	r5, r3, r5
 8005a88:	1e6b      	subs	r3, r5, #1
 8005a8a:	9305      	str	r3, [sp, #20]
 8005a8c:	bf45      	ittet	mi
 8005a8e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005a92:	9304      	strmi	r3, [sp, #16]
 8005a94:	2300      	movpl	r3, #0
 8005a96:	2300      	movmi	r3, #0
 8005a98:	bf4c      	ite	mi
 8005a9a:	9305      	strmi	r3, [sp, #20]
 8005a9c:	9304      	strpl	r3, [sp, #16]
 8005a9e:	9b00      	ldr	r3, [sp, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	db3d      	blt.n	8005b20 <_dtoa_r+0x248>
 8005aa4:	9b05      	ldr	r3, [sp, #20]
 8005aa6:	9a00      	ldr	r2, [sp, #0]
 8005aa8:	920a      	str	r2, [sp, #40]	; 0x28
 8005aaa:	4413      	add	r3, r2
 8005aac:	9305      	str	r3, [sp, #20]
 8005aae:	2300      	movs	r3, #0
 8005ab0:	9307      	str	r3, [sp, #28]
 8005ab2:	9b06      	ldr	r3, [sp, #24]
 8005ab4:	2b09      	cmp	r3, #9
 8005ab6:	f200 8089 	bhi.w	8005bcc <_dtoa_r+0x2f4>
 8005aba:	2b05      	cmp	r3, #5
 8005abc:	bfc4      	itt	gt
 8005abe:	3b04      	subgt	r3, #4
 8005ac0:	9306      	strgt	r3, [sp, #24]
 8005ac2:	9b06      	ldr	r3, [sp, #24]
 8005ac4:	f1a3 0302 	sub.w	r3, r3, #2
 8005ac8:	bfcc      	ite	gt
 8005aca:	2500      	movgt	r5, #0
 8005acc:	2501      	movle	r5, #1
 8005ace:	2b03      	cmp	r3, #3
 8005ad0:	f200 8087 	bhi.w	8005be2 <_dtoa_r+0x30a>
 8005ad4:	e8df f003 	tbb	[pc, r3]
 8005ad8:	59383a2d 	.word	0x59383a2d
 8005adc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005ae0:	441d      	add	r5, r3
 8005ae2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	bfc1      	itttt	gt
 8005aea:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005aee:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8005af2:	fa0b f303 	lslgt.w	r3, fp, r3
 8005af6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005afa:	bfda      	itte	le
 8005afc:	f1c3 0320 	rsble	r3, r3, #32
 8005b00:	fa06 f003 	lslle.w	r0, r6, r3
 8005b04:	4318      	orrgt	r0, r3
 8005b06:	f7fa fcfd 	bl	8000504 <__aeabi_ui2d>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4606      	mov	r6, r0
 8005b0e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8005b12:	3d01      	subs	r5, #1
 8005b14:	930e      	str	r3, [sp, #56]	; 0x38
 8005b16:	e76a      	b.n	80059ee <_dtoa_r+0x116>
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e7b2      	b.n	8005a82 <_dtoa_r+0x1aa>
 8005b1c:	900b      	str	r0, [sp, #44]	; 0x2c
 8005b1e:	e7b1      	b.n	8005a84 <_dtoa_r+0x1ac>
 8005b20:	9b04      	ldr	r3, [sp, #16]
 8005b22:	9a00      	ldr	r2, [sp, #0]
 8005b24:	1a9b      	subs	r3, r3, r2
 8005b26:	9304      	str	r3, [sp, #16]
 8005b28:	4253      	negs	r3, r2
 8005b2a:	9307      	str	r3, [sp, #28]
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005b30:	e7bf      	b.n	8005ab2 <_dtoa_r+0x1da>
 8005b32:	2300      	movs	r3, #0
 8005b34:	9308      	str	r3, [sp, #32]
 8005b36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	dc55      	bgt.n	8005be8 <_dtoa_r+0x310>
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005b42:	461a      	mov	r2, r3
 8005b44:	9209      	str	r2, [sp, #36]	; 0x24
 8005b46:	e00c      	b.n	8005b62 <_dtoa_r+0x28a>
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e7f3      	b.n	8005b34 <_dtoa_r+0x25c>
 8005b4c:	2300      	movs	r3, #0
 8005b4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b50:	9308      	str	r3, [sp, #32]
 8005b52:	9b00      	ldr	r3, [sp, #0]
 8005b54:	4413      	add	r3, r2
 8005b56:	9302      	str	r3, [sp, #8]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	2b01      	cmp	r3, #1
 8005b5c:	9303      	str	r3, [sp, #12]
 8005b5e:	bfb8      	it	lt
 8005b60:	2301      	movlt	r3, #1
 8005b62:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005b64:	2200      	movs	r2, #0
 8005b66:	6042      	str	r2, [r0, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	f102 0614 	add.w	r6, r2, #20
 8005b6e:	429e      	cmp	r6, r3
 8005b70:	6841      	ldr	r1, [r0, #4]
 8005b72:	d93d      	bls.n	8005bf0 <_dtoa_r+0x318>
 8005b74:	4620      	mov	r0, r4
 8005b76:	f000 fcb7 	bl	80064e8 <_Balloc>
 8005b7a:	9001      	str	r0, [sp, #4]
 8005b7c:	2800      	cmp	r0, #0
 8005b7e:	d13b      	bne.n	8005bf8 <_dtoa_r+0x320>
 8005b80:	4b11      	ldr	r3, [pc, #68]	; (8005bc8 <_dtoa_r+0x2f0>)
 8005b82:	4602      	mov	r2, r0
 8005b84:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005b88:	e6c0      	b.n	800590c <_dtoa_r+0x34>
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	e7df      	b.n	8005b4e <_dtoa_r+0x276>
 8005b8e:	bf00      	nop
 8005b90:	636f4361 	.word	0x636f4361
 8005b94:	3fd287a7 	.word	0x3fd287a7
 8005b98:	8b60c8b3 	.word	0x8b60c8b3
 8005b9c:	3fc68a28 	.word	0x3fc68a28
 8005ba0:	509f79fb 	.word	0x509f79fb
 8005ba4:	3fd34413 	.word	0x3fd34413
 8005ba8:	080080b9 	.word	0x080080b9
 8005bac:	080080d0 	.word	0x080080d0
 8005bb0:	7ff00000 	.word	0x7ff00000
 8005bb4:	080080b5 	.word	0x080080b5
 8005bb8:	080080ac 	.word	0x080080ac
 8005bbc:	08008089 	.word	0x08008089
 8005bc0:	3ff80000 	.word	0x3ff80000
 8005bc4:	080081c0 	.word	0x080081c0
 8005bc8:	0800812b 	.word	0x0800812b
 8005bcc:	2501      	movs	r5, #1
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9306      	str	r3, [sp, #24]
 8005bd2:	9508      	str	r5, [sp, #32]
 8005bd4:	f04f 33ff 	mov.w	r3, #4294967295
 8005bd8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2312      	movs	r3, #18
 8005be0:	e7b0      	b.n	8005b44 <_dtoa_r+0x26c>
 8005be2:	2301      	movs	r3, #1
 8005be4:	9308      	str	r3, [sp, #32]
 8005be6:	e7f5      	b.n	8005bd4 <_dtoa_r+0x2fc>
 8005be8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bea:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005bee:	e7b8      	b.n	8005b62 <_dtoa_r+0x28a>
 8005bf0:	3101      	adds	r1, #1
 8005bf2:	6041      	str	r1, [r0, #4]
 8005bf4:	0052      	lsls	r2, r2, #1
 8005bf6:	e7b8      	b.n	8005b6a <_dtoa_r+0x292>
 8005bf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005bfa:	9a01      	ldr	r2, [sp, #4]
 8005bfc:	601a      	str	r2, [r3, #0]
 8005bfe:	9b03      	ldr	r3, [sp, #12]
 8005c00:	2b0e      	cmp	r3, #14
 8005c02:	f200 809d 	bhi.w	8005d40 <_dtoa_r+0x468>
 8005c06:	2d00      	cmp	r5, #0
 8005c08:	f000 809a 	beq.w	8005d40 <_dtoa_r+0x468>
 8005c0c:	9b00      	ldr	r3, [sp, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	dd32      	ble.n	8005c78 <_dtoa_r+0x3a0>
 8005c12:	4ab7      	ldr	r2, [pc, #732]	; (8005ef0 <_dtoa_r+0x618>)
 8005c14:	f003 030f 	and.w	r3, r3, #15
 8005c18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005c1c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005c20:	9b00      	ldr	r3, [sp, #0]
 8005c22:	05d8      	lsls	r0, r3, #23
 8005c24:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005c28:	d516      	bpl.n	8005c58 <_dtoa_r+0x380>
 8005c2a:	4bb2      	ldr	r3, [pc, #712]	; (8005ef4 <_dtoa_r+0x61c>)
 8005c2c:	ec51 0b19 	vmov	r0, r1, d9
 8005c30:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005c34:	f7fa fe0a 	bl	800084c <__aeabi_ddiv>
 8005c38:	f007 070f 	and.w	r7, r7, #15
 8005c3c:	4682      	mov	sl, r0
 8005c3e:	468b      	mov	fp, r1
 8005c40:	2503      	movs	r5, #3
 8005c42:	4eac      	ldr	r6, [pc, #688]	; (8005ef4 <_dtoa_r+0x61c>)
 8005c44:	b957      	cbnz	r7, 8005c5c <_dtoa_r+0x384>
 8005c46:	4642      	mov	r2, r8
 8005c48:	464b      	mov	r3, r9
 8005c4a:	4650      	mov	r0, sl
 8005c4c:	4659      	mov	r1, fp
 8005c4e:	f7fa fdfd 	bl	800084c <__aeabi_ddiv>
 8005c52:	4682      	mov	sl, r0
 8005c54:	468b      	mov	fp, r1
 8005c56:	e028      	b.n	8005caa <_dtoa_r+0x3d2>
 8005c58:	2502      	movs	r5, #2
 8005c5a:	e7f2      	b.n	8005c42 <_dtoa_r+0x36a>
 8005c5c:	07f9      	lsls	r1, r7, #31
 8005c5e:	d508      	bpl.n	8005c72 <_dtoa_r+0x39a>
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005c68:	f7fa fcc6 	bl	80005f8 <__aeabi_dmul>
 8005c6c:	3501      	adds	r5, #1
 8005c6e:	4680      	mov	r8, r0
 8005c70:	4689      	mov	r9, r1
 8005c72:	107f      	asrs	r7, r7, #1
 8005c74:	3608      	adds	r6, #8
 8005c76:	e7e5      	b.n	8005c44 <_dtoa_r+0x36c>
 8005c78:	f000 809b 	beq.w	8005db2 <_dtoa_r+0x4da>
 8005c7c:	9b00      	ldr	r3, [sp, #0]
 8005c7e:	4f9d      	ldr	r7, [pc, #628]	; (8005ef4 <_dtoa_r+0x61c>)
 8005c80:	425e      	negs	r6, r3
 8005c82:	4b9b      	ldr	r3, [pc, #620]	; (8005ef0 <_dtoa_r+0x618>)
 8005c84:	f006 020f 	and.w	r2, r6, #15
 8005c88:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c90:	ec51 0b19 	vmov	r0, r1, d9
 8005c94:	f7fa fcb0 	bl	80005f8 <__aeabi_dmul>
 8005c98:	1136      	asrs	r6, r6, #4
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	468b      	mov	fp, r1
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	2502      	movs	r5, #2
 8005ca2:	2e00      	cmp	r6, #0
 8005ca4:	d17a      	bne.n	8005d9c <_dtoa_r+0x4c4>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d1d3      	bne.n	8005c52 <_dtoa_r+0x37a>
 8005caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f000 8082 	beq.w	8005db6 <_dtoa_r+0x4de>
 8005cb2:	4b91      	ldr	r3, [pc, #580]	; (8005ef8 <_dtoa_r+0x620>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	4659      	mov	r1, fp
 8005cba:	f7fa ff0f 	bl	8000adc <__aeabi_dcmplt>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d079      	beq.n	8005db6 <_dtoa_r+0x4de>
 8005cc2:	9b03      	ldr	r3, [sp, #12]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d076      	beq.n	8005db6 <_dtoa_r+0x4de>
 8005cc8:	9b02      	ldr	r3, [sp, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	dd36      	ble.n	8005d3c <_dtoa_r+0x464>
 8005cce:	9b00      	ldr	r3, [sp, #0]
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	4659      	mov	r1, fp
 8005cd4:	1e5f      	subs	r7, r3, #1
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4b88      	ldr	r3, [pc, #544]	; (8005efc <_dtoa_r+0x624>)
 8005cda:	f7fa fc8d 	bl	80005f8 <__aeabi_dmul>
 8005cde:	9e02      	ldr	r6, [sp, #8]
 8005ce0:	4682      	mov	sl, r0
 8005ce2:	468b      	mov	fp, r1
 8005ce4:	3501      	adds	r5, #1
 8005ce6:	4628      	mov	r0, r5
 8005ce8:	f7fa fc1c 	bl	8000524 <__aeabi_i2d>
 8005cec:	4652      	mov	r2, sl
 8005cee:	465b      	mov	r3, fp
 8005cf0:	f7fa fc82 	bl	80005f8 <__aeabi_dmul>
 8005cf4:	4b82      	ldr	r3, [pc, #520]	; (8005f00 <_dtoa_r+0x628>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f7fa fac8 	bl	800028c <__adddf3>
 8005cfc:	46d0      	mov	r8, sl
 8005cfe:	46d9      	mov	r9, fp
 8005d00:	4682      	mov	sl, r0
 8005d02:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005d06:	2e00      	cmp	r6, #0
 8005d08:	d158      	bne.n	8005dbc <_dtoa_r+0x4e4>
 8005d0a:	4b7e      	ldr	r3, [pc, #504]	; (8005f04 <_dtoa_r+0x62c>)
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	4640      	mov	r0, r8
 8005d10:	4649      	mov	r1, r9
 8005d12:	f7fa fab9 	bl	8000288 <__aeabi_dsub>
 8005d16:	4652      	mov	r2, sl
 8005d18:	465b      	mov	r3, fp
 8005d1a:	4680      	mov	r8, r0
 8005d1c:	4689      	mov	r9, r1
 8005d1e:	f7fa fefb 	bl	8000b18 <__aeabi_dcmpgt>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	f040 8295 	bne.w	8006252 <_dtoa_r+0x97a>
 8005d28:	4652      	mov	r2, sl
 8005d2a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005d2e:	4640      	mov	r0, r8
 8005d30:	4649      	mov	r1, r9
 8005d32:	f7fa fed3 	bl	8000adc <__aeabi_dcmplt>
 8005d36:	2800      	cmp	r0, #0
 8005d38:	f040 8289 	bne.w	800624e <_dtoa_r+0x976>
 8005d3c:	ec5b ab19 	vmov	sl, fp, d9
 8005d40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	f2c0 8148 	blt.w	8005fd8 <_dtoa_r+0x700>
 8005d48:	9a00      	ldr	r2, [sp, #0]
 8005d4a:	2a0e      	cmp	r2, #14
 8005d4c:	f300 8144 	bgt.w	8005fd8 <_dtoa_r+0x700>
 8005d50:	4b67      	ldr	r3, [pc, #412]	; (8005ef0 <_dtoa_r+0x618>)
 8005d52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005d5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f280 80d5 	bge.w	8005f0c <_dtoa_r+0x634>
 8005d62:	9b03      	ldr	r3, [sp, #12]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	f300 80d1 	bgt.w	8005f0c <_dtoa_r+0x634>
 8005d6a:	f040 826f 	bne.w	800624c <_dtoa_r+0x974>
 8005d6e:	4b65      	ldr	r3, [pc, #404]	; (8005f04 <_dtoa_r+0x62c>)
 8005d70:	2200      	movs	r2, #0
 8005d72:	4640      	mov	r0, r8
 8005d74:	4649      	mov	r1, r9
 8005d76:	f7fa fc3f 	bl	80005f8 <__aeabi_dmul>
 8005d7a:	4652      	mov	r2, sl
 8005d7c:	465b      	mov	r3, fp
 8005d7e:	f7fa fec1 	bl	8000b04 <__aeabi_dcmpge>
 8005d82:	9e03      	ldr	r6, [sp, #12]
 8005d84:	4637      	mov	r7, r6
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f040 8245 	bne.w	8006216 <_dtoa_r+0x93e>
 8005d8c:	9d01      	ldr	r5, [sp, #4]
 8005d8e:	2331      	movs	r3, #49	; 0x31
 8005d90:	f805 3b01 	strb.w	r3, [r5], #1
 8005d94:	9b00      	ldr	r3, [sp, #0]
 8005d96:	3301      	adds	r3, #1
 8005d98:	9300      	str	r3, [sp, #0]
 8005d9a:	e240      	b.n	800621e <_dtoa_r+0x946>
 8005d9c:	07f2      	lsls	r2, r6, #31
 8005d9e:	d505      	bpl.n	8005dac <_dtoa_r+0x4d4>
 8005da0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005da4:	f7fa fc28 	bl	80005f8 <__aeabi_dmul>
 8005da8:	3501      	adds	r5, #1
 8005daa:	2301      	movs	r3, #1
 8005dac:	1076      	asrs	r6, r6, #1
 8005dae:	3708      	adds	r7, #8
 8005db0:	e777      	b.n	8005ca2 <_dtoa_r+0x3ca>
 8005db2:	2502      	movs	r5, #2
 8005db4:	e779      	b.n	8005caa <_dtoa_r+0x3d2>
 8005db6:	9f00      	ldr	r7, [sp, #0]
 8005db8:	9e03      	ldr	r6, [sp, #12]
 8005dba:	e794      	b.n	8005ce6 <_dtoa_r+0x40e>
 8005dbc:	9901      	ldr	r1, [sp, #4]
 8005dbe:	4b4c      	ldr	r3, [pc, #304]	; (8005ef0 <_dtoa_r+0x618>)
 8005dc0:	4431      	add	r1, r6
 8005dc2:	910d      	str	r1, [sp, #52]	; 0x34
 8005dc4:	9908      	ldr	r1, [sp, #32]
 8005dc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005dca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005dce:	2900      	cmp	r1, #0
 8005dd0:	d043      	beq.n	8005e5a <_dtoa_r+0x582>
 8005dd2:	494d      	ldr	r1, [pc, #308]	; (8005f08 <_dtoa_r+0x630>)
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	f7fa fd39 	bl	800084c <__aeabi_ddiv>
 8005dda:	4652      	mov	r2, sl
 8005ddc:	465b      	mov	r3, fp
 8005dde:	f7fa fa53 	bl	8000288 <__aeabi_dsub>
 8005de2:	9d01      	ldr	r5, [sp, #4]
 8005de4:	4682      	mov	sl, r0
 8005de6:	468b      	mov	fp, r1
 8005de8:	4649      	mov	r1, r9
 8005dea:	4640      	mov	r0, r8
 8005dec:	f7fa feb4 	bl	8000b58 <__aeabi_d2iz>
 8005df0:	4606      	mov	r6, r0
 8005df2:	f7fa fb97 	bl	8000524 <__aeabi_i2d>
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	f7fa fa43 	bl	8000288 <__aeabi_dsub>
 8005e02:	3630      	adds	r6, #48	; 0x30
 8005e04:	f805 6b01 	strb.w	r6, [r5], #1
 8005e08:	4652      	mov	r2, sl
 8005e0a:	465b      	mov	r3, fp
 8005e0c:	4680      	mov	r8, r0
 8005e0e:	4689      	mov	r9, r1
 8005e10:	f7fa fe64 	bl	8000adc <__aeabi_dcmplt>
 8005e14:	2800      	cmp	r0, #0
 8005e16:	d163      	bne.n	8005ee0 <_dtoa_r+0x608>
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	4936      	ldr	r1, [pc, #216]	; (8005ef8 <_dtoa_r+0x620>)
 8005e1e:	2000      	movs	r0, #0
 8005e20:	f7fa fa32 	bl	8000288 <__aeabi_dsub>
 8005e24:	4652      	mov	r2, sl
 8005e26:	465b      	mov	r3, fp
 8005e28:	f7fa fe58 	bl	8000adc <__aeabi_dcmplt>
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	f040 80b5 	bne.w	8005f9c <_dtoa_r+0x6c4>
 8005e32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e34:	429d      	cmp	r5, r3
 8005e36:	d081      	beq.n	8005d3c <_dtoa_r+0x464>
 8005e38:	4b30      	ldr	r3, [pc, #192]	; (8005efc <_dtoa_r+0x624>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	4650      	mov	r0, sl
 8005e3e:	4659      	mov	r1, fp
 8005e40:	f7fa fbda 	bl	80005f8 <__aeabi_dmul>
 8005e44:	4b2d      	ldr	r3, [pc, #180]	; (8005efc <_dtoa_r+0x624>)
 8005e46:	4682      	mov	sl, r0
 8005e48:	468b      	mov	fp, r1
 8005e4a:	4640      	mov	r0, r8
 8005e4c:	4649      	mov	r1, r9
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f7fa fbd2 	bl	80005f8 <__aeabi_dmul>
 8005e54:	4680      	mov	r8, r0
 8005e56:	4689      	mov	r9, r1
 8005e58:	e7c6      	b.n	8005de8 <_dtoa_r+0x510>
 8005e5a:	4650      	mov	r0, sl
 8005e5c:	4659      	mov	r1, fp
 8005e5e:	f7fa fbcb 	bl	80005f8 <__aeabi_dmul>
 8005e62:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e64:	9d01      	ldr	r5, [sp, #4]
 8005e66:	930f      	str	r3, [sp, #60]	; 0x3c
 8005e68:	4682      	mov	sl, r0
 8005e6a:	468b      	mov	fp, r1
 8005e6c:	4649      	mov	r1, r9
 8005e6e:	4640      	mov	r0, r8
 8005e70:	f7fa fe72 	bl	8000b58 <__aeabi_d2iz>
 8005e74:	4606      	mov	r6, r0
 8005e76:	f7fa fb55 	bl	8000524 <__aeabi_i2d>
 8005e7a:	3630      	adds	r6, #48	; 0x30
 8005e7c:	4602      	mov	r2, r0
 8005e7e:	460b      	mov	r3, r1
 8005e80:	4640      	mov	r0, r8
 8005e82:	4649      	mov	r1, r9
 8005e84:	f7fa fa00 	bl	8000288 <__aeabi_dsub>
 8005e88:	f805 6b01 	strb.w	r6, [r5], #1
 8005e8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e8e:	429d      	cmp	r5, r3
 8005e90:	4680      	mov	r8, r0
 8005e92:	4689      	mov	r9, r1
 8005e94:	f04f 0200 	mov.w	r2, #0
 8005e98:	d124      	bne.n	8005ee4 <_dtoa_r+0x60c>
 8005e9a:	4b1b      	ldr	r3, [pc, #108]	; (8005f08 <_dtoa_r+0x630>)
 8005e9c:	4650      	mov	r0, sl
 8005e9e:	4659      	mov	r1, fp
 8005ea0:	f7fa f9f4 	bl	800028c <__adddf3>
 8005ea4:	4602      	mov	r2, r0
 8005ea6:	460b      	mov	r3, r1
 8005ea8:	4640      	mov	r0, r8
 8005eaa:	4649      	mov	r1, r9
 8005eac:	f7fa fe34 	bl	8000b18 <__aeabi_dcmpgt>
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d173      	bne.n	8005f9c <_dtoa_r+0x6c4>
 8005eb4:	4652      	mov	r2, sl
 8005eb6:	465b      	mov	r3, fp
 8005eb8:	4913      	ldr	r1, [pc, #76]	; (8005f08 <_dtoa_r+0x630>)
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f7fa f9e4 	bl	8000288 <__aeabi_dsub>
 8005ec0:	4602      	mov	r2, r0
 8005ec2:	460b      	mov	r3, r1
 8005ec4:	4640      	mov	r0, r8
 8005ec6:	4649      	mov	r1, r9
 8005ec8:	f7fa fe08 	bl	8000adc <__aeabi_dcmplt>
 8005ecc:	2800      	cmp	r0, #0
 8005ece:	f43f af35 	beq.w	8005d3c <_dtoa_r+0x464>
 8005ed2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005ed4:	1e6b      	subs	r3, r5, #1
 8005ed6:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ed8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005edc:	2b30      	cmp	r3, #48	; 0x30
 8005ede:	d0f8      	beq.n	8005ed2 <_dtoa_r+0x5fa>
 8005ee0:	9700      	str	r7, [sp, #0]
 8005ee2:	e049      	b.n	8005f78 <_dtoa_r+0x6a0>
 8005ee4:	4b05      	ldr	r3, [pc, #20]	; (8005efc <_dtoa_r+0x624>)
 8005ee6:	f7fa fb87 	bl	80005f8 <__aeabi_dmul>
 8005eea:	4680      	mov	r8, r0
 8005eec:	4689      	mov	r9, r1
 8005eee:	e7bd      	b.n	8005e6c <_dtoa_r+0x594>
 8005ef0:	080081c0 	.word	0x080081c0
 8005ef4:	08008198 	.word	0x08008198
 8005ef8:	3ff00000 	.word	0x3ff00000
 8005efc:	40240000 	.word	0x40240000
 8005f00:	401c0000 	.word	0x401c0000
 8005f04:	40140000 	.word	0x40140000
 8005f08:	3fe00000 	.word	0x3fe00000
 8005f0c:	9d01      	ldr	r5, [sp, #4]
 8005f0e:	4656      	mov	r6, sl
 8005f10:	465f      	mov	r7, fp
 8005f12:	4642      	mov	r2, r8
 8005f14:	464b      	mov	r3, r9
 8005f16:	4630      	mov	r0, r6
 8005f18:	4639      	mov	r1, r7
 8005f1a:	f7fa fc97 	bl	800084c <__aeabi_ddiv>
 8005f1e:	f7fa fe1b 	bl	8000b58 <__aeabi_d2iz>
 8005f22:	4682      	mov	sl, r0
 8005f24:	f7fa fafe 	bl	8000524 <__aeabi_i2d>
 8005f28:	4642      	mov	r2, r8
 8005f2a:	464b      	mov	r3, r9
 8005f2c:	f7fa fb64 	bl	80005f8 <__aeabi_dmul>
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4630      	mov	r0, r6
 8005f36:	4639      	mov	r1, r7
 8005f38:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005f3c:	f7fa f9a4 	bl	8000288 <__aeabi_dsub>
 8005f40:	f805 6b01 	strb.w	r6, [r5], #1
 8005f44:	9e01      	ldr	r6, [sp, #4]
 8005f46:	9f03      	ldr	r7, [sp, #12]
 8005f48:	1bae      	subs	r6, r5, r6
 8005f4a:	42b7      	cmp	r7, r6
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	d135      	bne.n	8005fbe <_dtoa_r+0x6e6>
 8005f52:	f7fa f99b 	bl	800028c <__adddf3>
 8005f56:	4642      	mov	r2, r8
 8005f58:	464b      	mov	r3, r9
 8005f5a:	4606      	mov	r6, r0
 8005f5c:	460f      	mov	r7, r1
 8005f5e:	f7fa fddb 	bl	8000b18 <__aeabi_dcmpgt>
 8005f62:	b9d0      	cbnz	r0, 8005f9a <_dtoa_r+0x6c2>
 8005f64:	4642      	mov	r2, r8
 8005f66:	464b      	mov	r3, r9
 8005f68:	4630      	mov	r0, r6
 8005f6a:	4639      	mov	r1, r7
 8005f6c:	f7fa fdac 	bl	8000ac8 <__aeabi_dcmpeq>
 8005f70:	b110      	cbz	r0, 8005f78 <_dtoa_r+0x6a0>
 8005f72:	f01a 0f01 	tst.w	sl, #1
 8005f76:	d110      	bne.n	8005f9a <_dtoa_r+0x6c2>
 8005f78:	4620      	mov	r0, r4
 8005f7a:	ee18 1a10 	vmov	r1, s16
 8005f7e:	f000 faf3 	bl	8006568 <_Bfree>
 8005f82:	2300      	movs	r3, #0
 8005f84:	9800      	ldr	r0, [sp, #0]
 8005f86:	702b      	strb	r3, [r5, #0]
 8005f88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005f8a:	3001      	adds	r0, #1
 8005f8c:	6018      	str	r0, [r3, #0]
 8005f8e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f43f acf1 	beq.w	8005978 <_dtoa_r+0xa0>
 8005f96:	601d      	str	r5, [r3, #0]
 8005f98:	e4ee      	b.n	8005978 <_dtoa_r+0xa0>
 8005f9a:	9f00      	ldr	r7, [sp, #0]
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	461d      	mov	r5, r3
 8005fa0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005fa4:	2a39      	cmp	r2, #57	; 0x39
 8005fa6:	d106      	bne.n	8005fb6 <_dtoa_r+0x6de>
 8005fa8:	9a01      	ldr	r2, [sp, #4]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d1f7      	bne.n	8005f9e <_dtoa_r+0x6c6>
 8005fae:	9901      	ldr	r1, [sp, #4]
 8005fb0:	2230      	movs	r2, #48	; 0x30
 8005fb2:	3701      	adds	r7, #1
 8005fb4:	700a      	strb	r2, [r1, #0]
 8005fb6:	781a      	ldrb	r2, [r3, #0]
 8005fb8:	3201      	adds	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	e790      	b.n	8005ee0 <_dtoa_r+0x608>
 8005fbe:	4ba6      	ldr	r3, [pc, #664]	; (8006258 <_dtoa_r+0x980>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f7fa fb19 	bl	80005f8 <__aeabi_dmul>
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	2300      	movs	r3, #0
 8005fca:	4606      	mov	r6, r0
 8005fcc:	460f      	mov	r7, r1
 8005fce:	f7fa fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d09d      	beq.n	8005f12 <_dtoa_r+0x63a>
 8005fd6:	e7cf      	b.n	8005f78 <_dtoa_r+0x6a0>
 8005fd8:	9a08      	ldr	r2, [sp, #32]
 8005fda:	2a00      	cmp	r2, #0
 8005fdc:	f000 80d7 	beq.w	800618e <_dtoa_r+0x8b6>
 8005fe0:	9a06      	ldr	r2, [sp, #24]
 8005fe2:	2a01      	cmp	r2, #1
 8005fe4:	f300 80ba 	bgt.w	800615c <_dtoa_r+0x884>
 8005fe8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005fea:	2a00      	cmp	r2, #0
 8005fec:	f000 80b2 	beq.w	8006154 <_dtoa_r+0x87c>
 8005ff0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ff4:	9e07      	ldr	r6, [sp, #28]
 8005ff6:	9d04      	ldr	r5, [sp, #16]
 8005ff8:	9a04      	ldr	r2, [sp, #16]
 8005ffa:	441a      	add	r2, r3
 8005ffc:	9204      	str	r2, [sp, #16]
 8005ffe:	9a05      	ldr	r2, [sp, #20]
 8006000:	2101      	movs	r1, #1
 8006002:	441a      	add	r2, r3
 8006004:	4620      	mov	r0, r4
 8006006:	9205      	str	r2, [sp, #20]
 8006008:	f000 fb66 	bl	80066d8 <__i2b>
 800600c:	4607      	mov	r7, r0
 800600e:	2d00      	cmp	r5, #0
 8006010:	dd0c      	ble.n	800602c <_dtoa_r+0x754>
 8006012:	9b05      	ldr	r3, [sp, #20]
 8006014:	2b00      	cmp	r3, #0
 8006016:	dd09      	ble.n	800602c <_dtoa_r+0x754>
 8006018:	42ab      	cmp	r3, r5
 800601a:	9a04      	ldr	r2, [sp, #16]
 800601c:	bfa8      	it	ge
 800601e:	462b      	movge	r3, r5
 8006020:	1ad2      	subs	r2, r2, r3
 8006022:	9204      	str	r2, [sp, #16]
 8006024:	9a05      	ldr	r2, [sp, #20]
 8006026:	1aed      	subs	r5, r5, r3
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	9305      	str	r3, [sp, #20]
 800602c:	9b07      	ldr	r3, [sp, #28]
 800602e:	b31b      	cbz	r3, 8006078 <_dtoa_r+0x7a0>
 8006030:	9b08      	ldr	r3, [sp, #32]
 8006032:	2b00      	cmp	r3, #0
 8006034:	f000 80af 	beq.w	8006196 <_dtoa_r+0x8be>
 8006038:	2e00      	cmp	r6, #0
 800603a:	dd13      	ble.n	8006064 <_dtoa_r+0x78c>
 800603c:	4639      	mov	r1, r7
 800603e:	4632      	mov	r2, r6
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fc09 	bl	8006858 <__pow5mult>
 8006046:	ee18 2a10 	vmov	r2, s16
 800604a:	4601      	mov	r1, r0
 800604c:	4607      	mov	r7, r0
 800604e:	4620      	mov	r0, r4
 8006050:	f000 fb58 	bl	8006704 <__multiply>
 8006054:	ee18 1a10 	vmov	r1, s16
 8006058:	4680      	mov	r8, r0
 800605a:	4620      	mov	r0, r4
 800605c:	f000 fa84 	bl	8006568 <_Bfree>
 8006060:	ee08 8a10 	vmov	s16, r8
 8006064:	9b07      	ldr	r3, [sp, #28]
 8006066:	1b9a      	subs	r2, r3, r6
 8006068:	d006      	beq.n	8006078 <_dtoa_r+0x7a0>
 800606a:	ee18 1a10 	vmov	r1, s16
 800606e:	4620      	mov	r0, r4
 8006070:	f000 fbf2 	bl	8006858 <__pow5mult>
 8006074:	ee08 0a10 	vmov	s16, r0
 8006078:	2101      	movs	r1, #1
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fb2c 	bl	80066d8 <__i2b>
 8006080:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006082:	2b00      	cmp	r3, #0
 8006084:	4606      	mov	r6, r0
 8006086:	f340 8088 	ble.w	800619a <_dtoa_r+0x8c2>
 800608a:	461a      	mov	r2, r3
 800608c:	4601      	mov	r1, r0
 800608e:	4620      	mov	r0, r4
 8006090:	f000 fbe2 	bl	8006858 <__pow5mult>
 8006094:	9b06      	ldr	r3, [sp, #24]
 8006096:	2b01      	cmp	r3, #1
 8006098:	4606      	mov	r6, r0
 800609a:	f340 8081 	ble.w	80061a0 <_dtoa_r+0x8c8>
 800609e:	f04f 0800 	mov.w	r8, #0
 80060a2:	6933      	ldr	r3, [r6, #16]
 80060a4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80060a8:	6918      	ldr	r0, [r3, #16]
 80060aa:	f000 fac5 	bl	8006638 <__hi0bits>
 80060ae:	f1c0 0020 	rsb	r0, r0, #32
 80060b2:	9b05      	ldr	r3, [sp, #20]
 80060b4:	4418      	add	r0, r3
 80060b6:	f010 001f 	ands.w	r0, r0, #31
 80060ba:	f000 8092 	beq.w	80061e2 <_dtoa_r+0x90a>
 80060be:	f1c0 0320 	rsb	r3, r0, #32
 80060c2:	2b04      	cmp	r3, #4
 80060c4:	f340 808a 	ble.w	80061dc <_dtoa_r+0x904>
 80060c8:	f1c0 001c 	rsb	r0, r0, #28
 80060cc:	9b04      	ldr	r3, [sp, #16]
 80060ce:	4403      	add	r3, r0
 80060d0:	9304      	str	r3, [sp, #16]
 80060d2:	9b05      	ldr	r3, [sp, #20]
 80060d4:	4403      	add	r3, r0
 80060d6:	4405      	add	r5, r0
 80060d8:	9305      	str	r3, [sp, #20]
 80060da:	9b04      	ldr	r3, [sp, #16]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	dd07      	ble.n	80060f0 <_dtoa_r+0x818>
 80060e0:	ee18 1a10 	vmov	r1, s16
 80060e4:	461a      	mov	r2, r3
 80060e6:	4620      	mov	r0, r4
 80060e8:	f000 fc10 	bl	800690c <__lshift>
 80060ec:	ee08 0a10 	vmov	s16, r0
 80060f0:	9b05      	ldr	r3, [sp, #20]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dd05      	ble.n	8006102 <_dtoa_r+0x82a>
 80060f6:	4631      	mov	r1, r6
 80060f8:	461a      	mov	r2, r3
 80060fa:	4620      	mov	r0, r4
 80060fc:	f000 fc06 	bl	800690c <__lshift>
 8006100:	4606      	mov	r6, r0
 8006102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006104:	2b00      	cmp	r3, #0
 8006106:	d06e      	beq.n	80061e6 <_dtoa_r+0x90e>
 8006108:	ee18 0a10 	vmov	r0, s16
 800610c:	4631      	mov	r1, r6
 800610e:	f000 fc6d 	bl	80069ec <__mcmp>
 8006112:	2800      	cmp	r0, #0
 8006114:	da67      	bge.n	80061e6 <_dtoa_r+0x90e>
 8006116:	9b00      	ldr	r3, [sp, #0]
 8006118:	3b01      	subs	r3, #1
 800611a:	ee18 1a10 	vmov	r1, s16
 800611e:	9300      	str	r3, [sp, #0]
 8006120:	220a      	movs	r2, #10
 8006122:	2300      	movs	r3, #0
 8006124:	4620      	mov	r0, r4
 8006126:	f000 fa41 	bl	80065ac <__multadd>
 800612a:	9b08      	ldr	r3, [sp, #32]
 800612c:	ee08 0a10 	vmov	s16, r0
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 81b1 	beq.w	8006498 <_dtoa_r+0xbc0>
 8006136:	2300      	movs	r3, #0
 8006138:	4639      	mov	r1, r7
 800613a:	220a      	movs	r2, #10
 800613c:	4620      	mov	r0, r4
 800613e:	f000 fa35 	bl	80065ac <__multadd>
 8006142:	9b02      	ldr	r3, [sp, #8]
 8006144:	2b00      	cmp	r3, #0
 8006146:	4607      	mov	r7, r0
 8006148:	f300 808e 	bgt.w	8006268 <_dtoa_r+0x990>
 800614c:	9b06      	ldr	r3, [sp, #24]
 800614e:	2b02      	cmp	r3, #2
 8006150:	dc51      	bgt.n	80061f6 <_dtoa_r+0x91e>
 8006152:	e089      	b.n	8006268 <_dtoa_r+0x990>
 8006154:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006156:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800615a:	e74b      	b.n	8005ff4 <_dtoa_r+0x71c>
 800615c:	9b03      	ldr	r3, [sp, #12]
 800615e:	1e5e      	subs	r6, r3, #1
 8006160:	9b07      	ldr	r3, [sp, #28]
 8006162:	42b3      	cmp	r3, r6
 8006164:	bfbf      	itttt	lt
 8006166:	9b07      	ldrlt	r3, [sp, #28]
 8006168:	9607      	strlt	r6, [sp, #28]
 800616a:	1af2      	sublt	r2, r6, r3
 800616c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800616e:	bfb6      	itet	lt
 8006170:	189b      	addlt	r3, r3, r2
 8006172:	1b9e      	subge	r6, r3, r6
 8006174:	930a      	strlt	r3, [sp, #40]	; 0x28
 8006176:	9b03      	ldr	r3, [sp, #12]
 8006178:	bfb8      	it	lt
 800617a:	2600      	movlt	r6, #0
 800617c:	2b00      	cmp	r3, #0
 800617e:	bfb7      	itett	lt
 8006180:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8006184:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8006188:	1a9d      	sublt	r5, r3, r2
 800618a:	2300      	movlt	r3, #0
 800618c:	e734      	b.n	8005ff8 <_dtoa_r+0x720>
 800618e:	9e07      	ldr	r6, [sp, #28]
 8006190:	9d04      	ldr	r5, [sp, #16]
 8006192:	9f08      	ldr	r7, [sp, #32]
 8006194:	e73b      	b.n	800600e <_dtoa_r+0x736>
 8006196:	9a07      	ldr	r2, [sp, #28]
 8006198:	e767      	b.n	800606a <_dtoa_r+0x792>
 800619a:	9b06      	ldr	r3, [sp, #24]
 800619c:	2b01      	cmp	r3, #1
 800619e:	dc18      	bgt.n	80061d2 <_dtoa_r+0x8fa>
 80061a0:	f1ba 0f00 	cmp.w	sl, #0
 80061a4:	d115      	bne.n	80061d2 <_dtoa_r+0x8fa>
 80061a6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061aa:	b993      	cbnz	r3, 80061d2 <_dtoa_r+0x8fa>
 80061ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80061b0:	0d1b      	lsrs	r3, r3, #20
 80061b2:	051b      	lsls	r3, r3, #20
 80061b4:	b183      	cbz	r3, 80061d8 <_dtoa_r+0x900>
 80061b6:	9b04      	ldr	r3, [sp, #16]
 80061b8:	3301      	adds	r3, #1
 80061ba:	9304      	str	r3, [sp, #16]
 80061bc:	9b05      	ldr	r3, [sp, #20]
 80061be:	3301      	adds	r3, #1
 80061c0:	9305      	str	r3, [sp, #20]
 80061c2:	f04f 0801 	mov.w	r8, #1
 80061c6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	f47f af6a 	bne.w	80060a2 <_dtoa_r+0x7ca>
 80061ce:	2001      	movs	r0, #1
 80061d0:	e76f      	b.n	80060b2 <_dtoa_r+0x7da>
 80061d2:	f04f 0800 	mov.w	r8, #0
 80061d6:	e7f6      	b.n	80061c6 <_dtoa_r+0x8ee>
 80061d8:	4698      	mov	r8, r3
 80061da:	e7f4      	b.n	80061c6 <_dtoa_r+0x8ee>
 80061dc:	f43f af7d 	beq.w	80060da <_dtoa_r+0x802>
 80061e0:	4618      	mov	r0, r3
 80061e2:	301c      	adds	r0, #28
 80061e4:	e772      	b.n	80060cc <_dtoa_r+0x7f4>
 80061e6:	9b03      	ldr	r3, [sp, #12]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	dc37      	bgt.n	800625c <_dtoa_r+0x984>
 80061ec:	9b06      	ldr	r3, [sp, #24]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	dd34      	ble.n	800625c <_dtoa_r+0x984>
 80061f2:	9b03      	ldr	r3, [sp, #12]
 80061f4:	9302      	str	r3, [sp, #8]
 80061f6:	9b02      	ldr	r3, [sp, #8]
 80061f8:	b96b      	cbnz	r3, 8006216 <_dtoa_r+0x93e>
 80061fa:	4631      	mov	r1, r6
 80061fc:	2205      	movs	r2, #5
 80061fe:	4620      	mov	r0, r4
 8006200:	f000 f9d4 	bl	80065ac <__multadd>
 8006204:	4601      	mov	r1, r0
 8006206:	4606      	mov	r6, r0
 8006208:	ee18 0a10 	vmov	r0, s16
 800620c:	f000 fbee 	bl	80069ec <__mcmp>
 8006210:	2800      	cmp	r0, #0
 8006212:	f73f adbb 	bgt.w	8005d8c <_dtoa_r+0x4b4>
 8006216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006218:	9d01      	ldr	r5, [sp, #4]
 800621a:	43db      	mvns	r3, r3
 800621c:	9300      	str	r3, [sp, #0]
 800621e:	f04f 0800 	mov.w	r8, #0
 8006222:	4631      	mov	r1, r6
 8006224:	4620      	mov	r0, r4
 8006226:	f000 f99f 	bl	8006568 <_Bfree>
 800622a:	2f00      	cmp	r7, #0
 800622c:	f43f aea4 	beq.w	8005f78 <_dtoa_r+0x6a0>
 8006230:	f1b8 0f00 	cmp.w	r8, #0
 8006234:	d005      	beq.n	8006242 <_dtoa_r+0x96a>
 8006236:	45b8      	cmp	r8, r7
 8006238:	d003      	beq.n	8006242 <_dtoa_r+0x96a>
 800623a:	4641      	mov	r1, r8
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f993 	bl	8006568 <_Bfree>
 8006242:	4639      	mov	r1, r7
 8006244:	4620      	mov	r0, r4
 8006246:	f000 f98f 	bl	8006568 <_Bfree>
 800624a:	e695      	b.n	8005f78 <_dtoa_r+0x6a0>
 800624c:	2600      	movs	r6, #0
 800624e:	4637      	mov	r7, r6
 8006250:	e7e1      	b.n	8006216 <_dtoa_r+0x93e>
 8006252:	9700      	str	r7, [sp, #0]
 8006254:	4637      	mov	r7, r6
 8006256:	e599      	b.n	8005d8c <_dtoa_r+0x4b4>
 8006258:	40240000 	.word	0x40240000
 800625c:	9b08      	ldr	r3, [sp, #32]
 800625e:	2b00      	cmp	r3, #0
 8006260:	f000 80ca 	beq.w	80063f8 <_dtoa_r+0xb20>
 8006264:	9b03      	ldr	r3, [sp, #12]
 8006266:	9302      	str	r3, [sp, #8]
 8006268:	2d00      	cmp	r5, #0
 800626a:	dd05      	ble.n	8006278 <_dtoa_r+0x9a0>
 800626c:	4639      	mov	r1, r7
 800626e:	462a      	mov	r2, r5
 8006270:	4620      	mov	r0, r4
 8006272:	f000 fb4b 	bl	800690c <__lshift>
 8006276:	4607      	mov	r7, r0
 8006278:	f1b8 0f00 	cmp.w	r8, #0
 800627c:	d05b      	beq.n	8006336 <_dtoa_r+0xa5e>
 800627e:	6879      	ldr	r1, [r7, #4]
 8006280:	4620      	mov	r0, r4
 8006282:	f000 f931 	bl	80064e8 <_Balloc>
 8006286:	4605      	mov	r5, r0
 8006288:	b928      	cbnz	r0, 8006296 <_dtoa_r+0x9be>
 800628a:	4b87      	ldr	r3, [pc, #540]	; (80064a8 <_dtoa_r+0xbd0>)
 800628c:	4602      	mov	r2, r0
 800628e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8006292:	f7ff bb3b 	b.w	800590c <_dtoa_r+0x34>
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	3202      	adds	r2, #2
 800629a:	0092      	lsls	r2, r2, #2
 800629c:	f107 010c 	add.w	r1, r7, #12
 80062a0:	300c      	adds	r0, #12
 80062a2:	f000 f913 	bl	80064cc <memcpy>
 80062a6:	2201      	movs	r2, #1
 80062a8:	4629      	mov	r1, r5
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 fb2e 	bl	800690c <__lshift>
 80062b0:	9b01      	ldr	r3, [sp, #4]
 80062b2:	f103 0901 	add.w	r9, r3, #1
 80062b6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80062ba:	4413      	add	r3, r2
 80062bc:	9305      	str	r3, [sp, #20]
 80062be:	f00a 0301 	and.w	r3, sl, #1
 80062c2:	46b8      	mov	r8, r7
 80062c4:	9304      	str	r3, [sp, #16]
 80062c6:	4607      	mov	r7, r0
 80062c8:	4631      	mov	r1, r6
 80062ca:	ee18 0a10 	vmov	r0, s16
 80062ce:	f7ff fa75 	bl	80057bc <quorem>
 80062d2:	4641      	mov	r1, r8
 80062d4:	9002      	str	r0, [sp, #8]
 80062d6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80062da:	ee18 0a10 	vmov	r0, s16
 80062de:	f000 fb85 	bl	80069ec <__mcmp>
 80062e2:	463a      	mov	r2, r7
 80062e4:	9003      	str	r0, [sp, #12]
 80062e6:	4631      	mov	r1, r6
 80062e8:	4620      	mov	r0, r4
 80062ea:	f000 fb9b 	bl	8006a24 <__mdiff>
 80062ee:	68c2      	ldr	r2, [r0, #12]
 80062f0:	f109 3bff 	add.w	fp, r9, #4294967295
 80062f4:	4605      	mov	r5, r0
 80062f6:	bb02      	cbnz	r2, 800633a <_dtoa_r+0xa62>
 80062f8:	4601      	mov	r1, r0
 80062fa:	ee18 0a10 	vmov	r0, s16
 80062fe:	f000 fb75 	bl	80069ec <__mcmp>
 8006302:	4602      	mov	r2, r0
 8006304:	4629      	mov	r1, r5
 8006306:	4620      	mov	r0, r4
 8006308:	9207      	str	r2, [sp, #28]
 800630a:	f000 f92d 	bl	8006568 <_Bfree>
 800630e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8006312:	ea43 0102 	orr.w	r1, r3, r2
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	430b      	orrs	r3, r1
 800631a:	464d      	mov	r5, r9
 800631c:	d10f      	bne.n	800633e <_dtoa_r+0xa66>
 800631e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006322:	d02a      	beq.n	800637a <_dtoa_r+0xaa2>
 8006324:	9b03      	ldr	r3, [sp, #12]
 8006326:	2b00      	cmp	r3, #0
 8006328:	dd02      	ble.n	8006330 <_dtoa_r+0xa58>
 800632a:	9b02      	ldr	r3, [sp, #8]
 800632c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8006330:	f88b a000 	strb.w	sl, [fp]
 8006334:	e775      	b.n	8006222 <_dtoa_r+0x94a>
 8006336:	4638      	mov	r0, r7
 8006338:	e7ba      	b.n	80062b0 <_dtoa_r+0x9d8>
 800633a:	2201      	movs	r2, #1
 800633c:	e7e2      	b.n	8006304 <_dtoa_r+0xa2c>
 800633e:	9b03      	ldr	r3, [sp, #12]
 8006340:	2b00      	cmp	r3, #0
 8006342:	db04      	blt.n	800634e <_dtoa_r+0xa76>
 8006344:	9906      	ldr	r1, [sp, #24]
 8006346:	430b      	orrs	r3, r1
 8006348:	9904      	ldr	r1, [sp, #16]
 800634a:	430b      	orrs	r3, r1
 800634c:	d122      	bne.n	8006394 <_dtoa_r+0xabc>
 800634e:	2a00      	cmp	r2, #0
 8006350:	ddee      	ble.n	8006330 <_dtoa_r+0xa58>
 8006352:	ee18 1a10 	vmov	r1, s16
 8006356:	2201      	movs	r2, #1
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fad7 	bl	800690c <__lshift>
 800635e:	4631      	mov	r1, r6
 8006360:	ee08 0a10 	vmov	s16, r0
 8006364:	f000 fb42 	bl	80069ec <__mcmp>
 8006368:	2800      	cmp	r0, #0
 800636a:	dc03      	bgt.n	8006374 <_dtoa_r+0xa9c>
 800636c:	d1e0      	bne.n	8006330 <_dtoa_r+0xa58>
 800636e:	f01a 0f01 	tst.w	sl, #1
 8006372:	d0dd      	beq.n	8006330 <_dtoa_r+0xa58>
 8006374:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006378:	d1d7      	bne.n	800632a <_dtoa_r+0xa52>
 800637a:	2339      	movs	r3, #57	; 0x39
 800637c:	f88b 3000 	strb.w	r3, [fp]
 8006380:	462b      	mov	r3, r5
 8006382:	461d      	mov	r5, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800638a:	2a39      	cmp	r2, #57	; 0x39
 800638c:	d071      	beq.n	8006472 <_dtoa_r+0xb9a>
 800638e:	3201      	adds	r2, #1
 8006390:	701a      	strb	r2, [r3, #0]
 8006392:	e746      	b.n	8006222 <_dtoa_r+0x94a>
 8006394:	2a00      	cmp	r2, #0
 8006396:	dd07      	ble.n	80063a8 <_dtoa_r+0xad0>
 8006398:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800639c:	d0ed      	beq.n	800637a <_dtoa_r+0xaa2>
 800639e:	f10a 0301 	add.w	r3, sl, #1
 80063a2:	f88b 3000 	strb.w	r3, [fp]
 80063a6:	e73c      	b.n	8006222 <_dtoa_r+0x94a>
 80063a8:	9b05      	ldr	r3, [sp, #20]
 80063aa:	f809 ac01 	strb.w	sl, [r9, #-1]
 80063ae:	4599      	cmp	r9, r3
 80063b0:	d047      	beq.n	8006442 <_dtoa_r+0xb6a>
 80063b2:	ee18 1a10 	vmov	r1, s16
 80063b6:	2300      	movs	r3, #0
 80063b8:	220a      	movs	r2, #10
 80063ba:	4620      	mov	r0, r4
 80063bc:	f000 f8f6 	bl	80065ac <__multadd>
 80063c0:	45b8      	cmp	r8, r7
 80063c2:	ee08 0a10 	vmov	s16, r0
 80063c6:	f04f 0300 	mov.w	r3, #0
 80063ca:	f04f 020a 	mov.w	r2, #10
 80063ce:	4641      	mov	r1, r8
 80063d0:	4620      	mov	r0, r4
 80063d2:	d106      	bne.n	80063e2 <_dtoa_r+0xb0a>
 80063d4:	f000 f8ea 	bl	80065ac <__multadd>
 80063d8:	4680      	mov	r8, r0
 80063da:	4607      	mov	r7, r0
 80063dc:	f109 0901 	add.w	r9, r9, #1
 80063e0:	e772      	b.n	80062c8 <_dtoa_r+0x9f0>
 80063e2:	f000 f8e3 	bl	80065ac <__multadd>
 80063e6:	4639      	mov	r1, r7
 80063e8:	4680      	mov	r8, r0
 80063ea:	2300      	movs	r3, #0
 80063ec:	220a      	movs	r2, #10
 80063ee:	4620      	mov	r0, r4
 80063f0:	f000 f8dc 	bl	80065ac <__multadd>
 80063f4:	4607      	mov	r7, r0
 80063f6:	e7f1      	b.n	80063dc <_dtoa_r+0xb04>
 80063f8:	9b03      	ldr	r3, [sp, #12]
 80063fa:	9302      	str	r3, [sp, #8]
 80063fc:	9d01      	ldr	r5, [sp, #4]
 80063fe:	ee18 0a10 	vmov	r0, s16
 8006402:	4631      	mov	r1, r6
 8006404:	f7ff f9da 	bl	80057bc <quorem>
 8006408:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800640c:	9b01      	ldr	r3, [sp, #4]
 800640e:	f805 ab01 	strb.w	sl, [r5], #1
 8006412:	1aea      	subs	r2, r5, r3
 8006414:	9b02      	ldr	r3, [sp, #8]
 8006416:	4293      	cmp	r3, r2
 8006418:	dd09      	ble.n	800642e <_dtoa_r+0xb56>
 800641a:	ee18 1a10 	vmov	r1, s16
 800641e:	2300      	movs	r3, #0
 8006420:	220a      	movs	r2, #10
 8006422:	4620      	mov	r0, r4
 8006424:	f000 f8c2 	bl	80065ac <__multadd>
 8006428:	ee08 0a10 	vmov	s16, r0
 800642c:	e7e7      	b.n	80063fe <_dtoa_r+0xb26>
 800642e:	9b02      	ldr	r3, [sp, #8]
 8006430:	2b00      	cmp	r3, #0
 8006432:	bfc8      	it	gt
 8006434:	461d      	movgt	r5, r3
 8006436:	9b01      	ldr	r3, [sp, #4]
 8006438:	bfd8      	it	le
 800643a:	2501      	movle	r5, #1
 800643c:	441d      	add	r5, r3
 800643e:	f04f 0800 	mov.w	r8, #0
 8006442:	ee18 1a10 	vmov	r1, s16
 8006446:	2201      	movs	r2, #1
 8006448:	4620      	mov	r0, r4
 800644a:	f000 fa5f 	bl	800690c <__lshift>
 800644e:	4631      	mov	r1, r6
 8006450:	ee08 0a10 	vmov	s16, r0
 8006454:	f000 faca 	bl	80069ec <__mcmp>
 8006458:	2800      	cmp	r0, #0
 800645a:	dc91      	bgt.n	8006380 <_dtoa_r+0xaa8>
 800645c:	d102      	bne.n	8006464 <_dtoa_r+0xb8c>
 800645e:	f01a 0f01 	tst.w	sl, #1
 8006462:	d18d      	bne.n	8006380 <_dtoa_r+0xaa8>
 8006464:	462b      	mov	r3, r5
 8006466:	461d      	mov	r5, r3
 8006468:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800646c:	2a30      	cmp	r2, #48	; 0x30
 800646e:	d0fa      	beq.n	8006466 <_dtoa_r+0xb8e>
 8006470:	e6d7      	b.n	8006222 <_dtoa_r+0x94a>
 8006472:	9a01      	ldr	r2, [sp, #4]
 8006474:	429a      	cmp	r2, r3
 8006476:	d184      	bne.n	8006382 <_dtoa_r+0xaaa>
 8006478:	9b00      	ldr	r3, [sp, #0]
 800647a:	3301      	adds	r3, #1
 800647c:	9300      	str	r3, [sp, #0]
 800647e:	2331      	movs	r3, #49	; 0x31
 8006480:	7013      	strb	r3, [r2, #0]
 8006482:	e6ce      	b.n	8006222 <_dtoa_r+0x94a>
 8006484:	4b09      	ldr	r3, [pc, #36]	; (80064ac <_dtoa_r+0xbd4>)
 8006486:	f7ff ba95 	b.w	80059b4 <_dtoa_r+0xdc>
 800648a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800648c:	2b00      	cmp	r3, #0
 800648e:	f47f aa6e 	bne.w	800596e <_dtoa_r+0x96>
 8006492:	4b07      	ldr	r3, [pc, #28]	; (80064b0 <_dtoa_r+0xbd8>)
 8006494:	f7ff ba8e 	b.w	80059b4 <_dtoa_r+0xdc>
 8006498:	9b02      	ldr	r3, [sp, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	dcae      	bgt.n	80063fc <_dtoa_r+0xb24>
 800649e:	9b06      	ldr	r3, [sp, #24]
 80064a0:	2b02      	cmp	r3, #2
 80064a2:	f73f aea8 	bgt.w	80061f6 <_dtoa_r+0x91e>
 80064a6:	e7a9      	b.n	80063fc <_dtoa_r+0xb24>
 80064a8:	0800812b 	.word	0x0800812b
 80064ac:	08008088 	.word	0x08008088
 80064b0:	080080ac 	.word	0x080080ac

080064b4 <_localeconv_r>:
 80064b4:	4800      	ldr	r0, [pc, #0]	; (80064b8 <_localeconv_r+0x4>)
 80064b6:	4770      	bx	lr
 80064b8:	20000160 	.word	0x20000160

080064bc <malloc>:
 80064bc:	4b02      	ldr	r3, [pc, #8]	; (80064c8 <malloc+0xc>)
 80064be:	4601      	mov	r1, r0
 80064c0:	6818      	ldr	r0, [r3, #0]
 80064c2:	f000 bc17 	b.w	8006cf4 <_malloc_r>
 80064c6:	bf00      	nop
 80064c8:	2000000c 	.word	0x2000000c

080064cc <memcpy>:
 80064cc:	440a      	add	r2, r1
 80064ce:	4291      	cmp	r1, r2
 80064d0:	f100 33ff 	add.w	r3, r0, #4294967295
 80064d4:	d100      	bne.n	80064d8 <memcpy+0xc>
 80064d6:	4770      	bx	lr
 80064d8:	b510      	push	{r4, lr}
 80064da:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064e2:	4291      	cmp	r1, r2
 80064e4:	d1f9      	bne.n	80064da <memcpy+0xe>
 80064e6:	bd10      	pop	{r4, pc}

080064e8 <_Balloc>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80064ec:	4604      	mov	r4, r0
 80064ee:	460d      	mov	r5, r1
 80064f0:	b976      	cbnz	r6, 8006510 <_Balloc+0x28>
 80064f2:	2010      	movs	r0, #16
 80064f4:	f7ff ffe2 	bl	80064bc <malloc>
 80064f8:	4602      	mov	r2, r0
 80064fa:	6260      	str	r0, [r4, #36]	; 0x24
 80064fc:	b920      	cbnz	r0, 8006508 <_Balloc+0x20>
 80064fe:	4b18      	ldr	r3, [pc, #96]	; (8006560 <_Balloc+0x78>)
 8006500:	4818      	ldr	r0, [pc, #96]	; (8006564 <_Balloc+0x7c>)
 8006502:	2166      	movs	r1, #102	; 0x66
 8006504:	f000 fdd6 	bl	80070b4 <__assert_func>
 8006508:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800650c:	6006      	str	r6, [r0, #0]
 800650e:	60c6      	str	r6, [r0, #12]
 8006510:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006512:	68f3      	ldr	r3, [r6, #12]
 8006514:	b183      	cbz	r3, 8006538 <_Balloc+0x50>
 8006516:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800651e:	b9b8      	cbnz	r0, 8006550 <_Balloc+0x68>
 8006520:	2101      	movs	r1, #1
 8006522:	fa01 f605 	lsl.w	r6, r1, r5
 8006526:	1d72      	adds	r2, r6, #5
 8006528:	0092      	lsls	r2, r2, #2
 800652a:	4620      	mov	r0, r4
 800652c:	f000 fb60 	bl	8006bf0 <_calloc_r>
 8006530:	b160      	cbz	r0, 800654c <_Balloc+0x64>
 8006532:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006536:	e00e      	b.n	8006556 <_Balloc+0x6e>
 8006538:	2221      	movs	r2, #33	; 0x21
 800653a:	2104      	movs	r1, #4
 800653c:	4620      	mov	r0, r4
 800653e:	f000 fb57 	bl	8006bf0 <_calloc_r>
 8006542:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006544:	60f0      	str	r0, [r6, #12]
 8006546:	68db      	ldr	r3, [r3, #12]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1e4      	bne.n	8006516 <_Balloc+0x2e>
 800654c:	2000      	movs	r0, #0
 800654e:	bd70      	pop	{r4, r5, r6, pc}
 8006550:	6802      	ldr	r2, [r0, #0]
 8006552:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006556:	2300      	movs	r3, #0
 8006558:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800655c:	e7f7      	b.n	800654e <_Balloc+0x66>
 800655e:	bf00      	nop
 8006560:	080080b9 	.word	0x080080b9
 8006564:	0800813c 	.word	0x0800813c

08006568 <_Bfree>:
 8006568:	b570      	push	{r4, r5, r6, lr}
 800656a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800656c:	4605      	mov	r5, r0
 800656e:	460c      	mov	r4, r1
 8006570:	b976      	cbnz	r6, 8006590 <_Bfree+0x28>
 8006572:	2010      	movs	r0, #16
 8006574:	f7ff ffa2 	bl	80064bc <malloc>
 8006578:	4602      	mov	r2, r0
 800657a:	6268      	str	r0, [r5, #36]	; 0x24
 800657c:	b920      	cbnz	r0, 8006588 <_Bfree+0x20>
 800657e:	4b09      	ldr	r3, [pc, #36]	; (80065a4 <_Bfree+0x3c>)
 8006580:	4809      	ldr	r0, [pc, #36]	; (80065a8 <_Bfree+0x40>)
 8006582:	218a      	movs	r1, #138	; 0x8a
 8006584:	f000 fd96 	bl	80070b4 <__assert_func>
 8006588:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800658c:	6006      	str	r6, [r0, #0]
 800658e:	60c6      	str	r6, [r0, #12]
 8006590:	b13c      	cbz	r4, 80065a2 <_Bfree+0x3a>
 8006592:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006594:	6862      	ldr	r2, [r4, #4]
 8006596:	68db      	ldr	r3, [r3, #12]
 8006598:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800659c:	6021      	str	r1, [r4, #0]
 800659e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80065a2:	bd70      	pop	{r4, r5, r6, pc}
 80065a4:	080080b9 	.word	0x080080b9
 80065a8:	0800813c 	.word	0x0800813c

080065ac <__multadd>:
 80065ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065b0:	690d      	ldr	r5, [r1, #16]
 80065b2:	4607      	mov	r7, r0
 80065b4:	460c      	mov	r4, r1
 80065b6:	461e      	mov	r6, r3
 80065b8:	f101 0c14 	add.w	ip, r1, #20
 80065bc:	2000      	movs	r0, #0
 80065be:	f8dc 3000 	ldr.w	r3, [ip]
 80065c2:	b299      	uxth	r1, r3
 80065c4:	fb02 6101 	mla	r1, r2, r1, r6
 80065c8:	0c1e      	lsrs	r6, r3, #16
 80065ca:	0c0b      	lsrs	r3, r1, #16
 80065cc:	fb02 3306 	mla	r3, r2, r6, r3
 80065d0:	b289      	uxth	r1, r1
 80065d2:	3001      	adds	r0, #1
 80065d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80065d8:	4285      	cmp	r5, r0
 80065da:	f84c 1b04 	str.w	r1, [ip], #4
 80065de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80065e2:	dcec      	bgt.n	80065be <__multadd+0x12>
 80065e4:	b30e      	cbz	r6, 800662a <__multadd+0x7e>
 80065e6:	68a3      	ldr	r3, [r4, #8]
 80065e8:	42ab      	cmp	r3, r5
 80065ea:	dc19      	bgt.n	8006620 <__multadd+0x74>
 80065ec:	6861      	ldr	r1, [r4, #4]
 80065ee:	4638      	mov	r0, r7
 80065f0:	3101      	adds	r1, #1
 80065f2:	f7ff ff79 	bl	80064e8 <_Balloc>
 80065f6:	4680      	mov	r8, r0
 80065f8:	b928      	cbnz	r0, 8006606 <__multadd+0x5a>
 80065fa:	4602      	mov	r2, r0
 80065fc:	4b0c      	ldr	r3, [pc, #48]	; (8006630 <__multadd+0x84>)
 80065fe:	480d      	ldr	r0, [pc, #52]	; (8006634 <__multadd+0x88>)
 8006600:	21b5      	movs	r1, #181	; 0xb5
 8006602:	f000 fd57 	bl	80070b4 <__assert_func>
 8006606:	6922      	ldr	r2, [r4, #16]
 8006608:	3202      	adds	r2, #2
 800660a:	f104 010c 	add.w	r1, r4, #12
 800660e:	0092      	lsls	r2, r2, #2
 8006610:	300c      	adds	r0, #12
 8006612:	f7ff ff5b 	bl	80064cc <memcpy>
 8006616:	4621      	mov	r1, r4
 8006618:	4638      	mov	r0, r7
 800661a:	f7ff ffa5 	bl	8006568 <_Bfree>
 800661e:	4644      	mov	r4, r8
 8006620:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006624:	3501      	adds	r5, #1
 8006626:	615e      	str	r6, [r3, #20]
 8006628:	6125      	str	r5, [r4, #16]
 800662a:	4620      	mov	r0, r4
 800662c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006630:	0800812b 	.word	0x0800812b
 8006634:	0800813c 	.word	0x0800813c

08006638 <__hi0bits>:
 8006638:	0c03      	lsrs	r3, r0, #16
 800663a:	041b      	lsls	r3, r3, #16
 800663c:	b9d3      	cbnz	r3, 8006674 <__hi0bits+0x3c>
 800663e:	0400      	lsls	r0, r0, #16
 8006640:	2310      	movs	r3, #16
 8006642:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8006646:	bf04      	itt	eq
 8006648:	0200      	lsleq	r0, r0, #8
 800664a:	3308      	addeq	r3, #8
 800664c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006650:	bf04      	itt	eq
 8006652:	0100      	lsleq	r0, r0, #4
 8006654:	3304      	addeq	r3, #4
 8006656:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800665a:	bf04      	itt	eq
 800665c:	0080      	lsleq	r0, r0, #2
 800665e:	3302      	addeq	r3, #2
 8006660:	2800      	cmp	r0, #0
 8006662:	db05      	blt.n	8006670 <__hi0bits+0x38>
 8006664:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006668:	f103 0301 	add.w	r3, r3, #1
 800666c:	bf08      	it	eq
 800666e:	2320      	moveq	r3, #32
 8006670:	4618      	mov	r0, r3
 8006672:	4770      	bx	lr
 8006674:	2300      	movs	r3, #0
 8006676:	e7e4      	b.n	8006642 <__hi0bits+0xa>

08006678 <__lo0bits>:
 8006678:	6803      	ldr	r3, [r0, #0]
 800667a:	f013 0207 	ands.w	r2, r3, #7
 800667e:	4601      	mov	r1, r0
 8006680:	d00b      	beq.n	800669a <__lo0bits+0x22>
 8006682:	07da      	lsls	r2, r3, #31
 8006684:	d423      	bmi.n	80066ce <__lo0bits+0x56>
 8006686:	0798      	lsls	r0, r3, #30
 8006688:	bf49      	itett	mi
 800668a:	085b      	lsrmi	r3, r3, #1
 800668c:	089b      	lsrpl	r3, r3, #2
 800668e:	2001      	movmi	r0, #1
 8006690:	600b      	strmi	r3, [r1, #0]
 8006692:	bf5c      	itt	pl
 8006694:	600b      	strpl	r3, [r1, #0]
 8006696:	2002      	movpl	r0, #2
 8006698:	4770      	bx	lr
 800669a:	b298      	uxth	r0, r3
 800669c:	b9a8      	cbnz	r0, 80066ca <__lo0bits+0x52>
 800669e:	0c1b      	lsrs	r3, r3, #16
 80066a0:	2010      	movs	r0, #16
 80066a2:	b2da      	uxtb	r2, r3
 80066a4:	b90a      	cbnz	r2, 80066aa <__lo0bits+0x32>
 80066a6:	3008      	adds	r0, #8
 80066a8:	0a1b      	lsrs	r3, r3, #8
 80066aa:	071a      	lsls	r2, r3, #28
 80066ac:	bf04      	itt	eq
 80066ae:	091b      	lsreq	r3, r3, #4
 80066b0:	3004      	addeq	r0, #4
 80066b2:	079a      	lsls	r2, r3, #30
 80066b4:	bf04      	itt	eq
 80066b6:	089b      	lsreq	r3, r3, #2
 80066b8:	3002      	addeq	r0, #2
 80066ba:	07da      	lsls	r2, r3, #31
 80066bc:	d403      	bmi.n	80066c6 <__lo0bits+0x4e>
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	f100 0001 	add.w	r0, r0, #1
 80066c4:	d005      	beq.n	80066d2 <__lo0bits+0x5a>
 80066c6:	600b      	str	r3, [r1, #0]
 80066c8:	4770      	bx	lr
 80066ca:	4610      	mov	r0, r2
 80066cc:	e7e9      	b.n	80066a2 <__lo0bits+0x2a>
 80066ce:	2000      	movs	r0, #0
 80066d0:	4770      	bx	lr
 80066d2:	2020      	movs	r0, #32
 80066d4:	4770      	bx	lr
	...

080066d8 <__i2b>:
 80066d8:	b510      	push	{r4, lr}
 80066da:	460c      	mov	r4, r1
 80066dc:	2101      	movs	r1, #1
 80066de:	f7ff ff03 	bl	80064e8 <_Balloc>
 80066e2:	4602      	mov	r2, r0
 80066e4:	b928      	cbnz	r0, 80066f2 <__i2b+0x1a>
 80066e6:	4b05      	ldr	r3, [pc, #20]	; (80066fc <__i2b+0x24>)
 80066e8:	4805      	ldr	r0, [pc, #20]	; (8006700 <__i2b+0x28>)
 80066ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80066ee:	f000 fce1 	bl	80070b4 <__assert_func>
 80066f2:	2301      	movs	r3, #1
 80066f4:	6144      	str	r4, [r0, #20]
 80066f6:	6103      	str	r3, [r0, #16]
 80066f8:	bd10      	pop	{r4, pc}
 80066fa:	bf00      	nop
 80066fc:	0800812b 	.word	0x0800812b
 8006700:	0800813c 	.word	0x0800813c

08006704 <__multiply>:
 8006704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006708:	4691      	mov	r9, r2
 800670a:	690a      	ldr	r2, [r1, #16]
 800670c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006710:	429a      	cmp	r2, r3
 8006712:	bfb8      	it	lt
 8006714:	460b      	movlt	r3, r1
 8006716:	460c      	mov	r4, r1
 8006718:	bfbc      	itt	lt
 800671a:	464c      	movlt	r4, r9
 800671c:	4699      	movlt	r9, r3
 800671e:	6927      	ldr	r7, [r4, #16]
 8006720:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006724:	68a3      	ldr	r3, [r4, #8]
 8006726:	6861      	ldr	r1, [r4, #4]
 8006728:	eb07 060a 	add.w	r6, r7, sl
 800672c:	42b3      	cmp	r3, r6
 800672e:	b085      	sub	sp, #20
 8006730:	bfb8      	it	lt
 8006732:	3101      	addlt	r1, #1
 8006734:	f7ff fed8 	bl	80064e8 <_Balloc>
 8006738:	b930      	cbnz	r0, 8006748 <__multiply+0x44>
 800673a:	4602      	mov	r2, r0
 800673c:	4b44      	ldr	r3, [pc, #272]	; (8006850 <__multiply+0x14c>)
 800673e:	4845      	ldr	r0, [pc, #276]	; (8006854 <__multiply+0x150>)
 8006740:	f240 115d 	movw	r1, #349	; 0x15d
 8006744:	f000 fcb6 	bl	80070b4 <__assert_func>
 8006748:	f100 0514 	add.w	r5, r0, #20
 800674c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006750:	462b      	mov	r3, r5
 8006752:	2200      	movs	r2, #0
 8006754:	4543      	cmp	r3, r8
 8006756:	d321      	bcc.n	800679c <__multiply+0x98>
 8006758:	f104 0314 	add.w	r3, r4, #20
 800675c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006760:	f109 0314 	add.w	r3, r9, #20
 8006764:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006768:	9202      	str	r2, [sp, #8]
 800676a:	1b3a      	subs	r2, r7, r4
 800676c:	3a15      	subs	r2, #21
 800676e:	f022 0203 	bic.w	r2, r2, #3
 8006772:	3204      	adds	r2, #4
 8006774:	f104 0115 	add.w	r1, r4, #21
 8006778:	428f      	cmp	r7, r1
 800677a:	bf38      	it	cc
 800677c:	2204      	movcc	r2, #4
 800677e:	9201      	str	r2, [sp, #4]
 8006780:	9a02      	ldr	r2, [sp, #8]
 8006782:	9303      	str	r3, [sp, #12]
 8006784:	429a      	cmp	r2, r3
 8006786:	d80c      	bhi.n	80067a2 <__multiply+0x9e>
 8006788:	2e00      	cmp	r6, #0
 800678a:	dd03      	ble.n	8006794 <__multiply+0x90>
 800678c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05a      	beq.n	800684a <__multiply+0x146>
 8006794:	6106      	str	r6, [r0, #16]
 8006796:	b005      	add	sp, #20
 8006798:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800679c:	f843 2b04 	str.w	r2, [r3], #4
 80067a0:	e7d8      	b.n	8006754 <__multiply+0x50>
 80067a2:	f8b3 a000 	ldrh.w	sl, [r3]
 80067a6:	f1ba 0f00 	cmp.w	sl, #0
 80067aa:	d024      	beq.n	80067f6 <__multiply+0xf2>
 80067ac:	f104 0e14 	add.w	lr, r4, #20
 80067b0:	46a9      	mov	r9, r5
 80067b2:	f04f 0c00 	mov.w	ip, #0
 80067b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 80067ba:	f8d9 1000 	ldr.w	r1, [r9]
 80067be:	fa1f fb82 	uxth.w	fp, r2
 80067c2:	b289      	uxth	r1, r1
 80067c4:	fb0a 110b 	mla	r1, sl, fp, r1
 80067c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80067cc:	f8d9 2000 	ldr.w	r2, [r9]
 80067d0:	4461      	add	r1, ip
 80067d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067d6:	fb0a c20b 	mla	r2, sl, fp, ip
 80067da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80067de:	b289      	uxth	r1, r1
 80067e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067e4:	4577      	cmp	r7, lr
 80067e6:	f849 1b04 	str.w	r1, [r9], #4
 80067ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80067ee:	d8e2      	bhi.n	80067b6 <__multiply+0xb2>
 80067f0:	9a01      	ldr	r2, [sp, #4]
 80067f2:	f845 c002 	str.w	ip, [r5, r2]
 80067f6:	9a03      	ldr	r2, [sp, #12]
 80067f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80067fc:	3304      	adds	r3, #4
 80067fe:	f1b9 0f00 	cmp.w	r9, #0
 8006802:	d020      	beq.n	8006846 <__multiply+0x142>
 8006804:	6829      	ldr	r1, [r5, #0]
 8006806:	f104 0c14 	add.w	ip, r4, #20
 800680a:	46ae      	mov	lr, r5
 800680c:	f04f 0a00 	mov.w	sl, #0
 8006810:	f8bc b000 	ldrh.w	fp, [ip]
 8006814:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006818:	fb09 220b 	mla	r2, r9, fp, r2
 800681c:	4492      	add	sl, r2
 800681e:	b289      	uxth	r1, r1
 8006820:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006824:	f84e 1b04 	str.w	r1, [lr], #4
 8006828:	f85c 2b04 	ldr.w	r2, [ip], #4
 800682c:	f8be 1000 	ldrh.w	r1, [lr]
 8006830:	0c12      	lsrs	r2, r2, #16
 8006832:	fb09 1102 	mla	r1, r9, r2, r1
 8006836:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800683a:	4567      	cmp	r7, ip
 800683c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006840:	d8e6      	bhi.n	8006810 <__multiply+0x10c>
 8006842:	9a01      	ldr	r2, [sp, #4]
 8006844:	50a9      	str	r1, [r5, r2]
 8006846:	3504      	adds	r5, #4
 8006848:	e79a      	b.n	8006780 <__multiply+0x7c>
 800684a:	3e01      	subs	r6, #1
 800684c:	e79c      	b.n	8006788 <__multiply+0x84>
 800684e:	bf00      	nop
 8006850:	0800812b 	.word	0x0800812b
 8006854:	0800813c 	.word	0x0800813c

08006858 <__pow5mult>:
 8006858:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800685c:	4615      	mov	r5, r2
 800685e:	f012 0203 	ands.w	r2, r2, #3
 8006862:	4606      	mov	r6, r0
 8006864:	460f      	mov	r7, r1
 8006866:	d007      	beq.n	8006878 <__pow5mult+0x20>
 8006868:	4c25      	ldr	r4, [pc, #148]	; (8006900 <__pow5mult+0xa8>)
 800686a:	3a01      	subs	r2, #1
 800686c:	2300      	movs	r3, #0
 800686e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006872:	f7ff fe9b 	bl	80065ac <__multadd>
 8006876:	4607      	mov	r7, r0
 8006878:	10ad      	asrs	r5, r5, #2
 800687a:	d03d      	beq.n	80068f8 <__pow5mult+0xa0>
 800687c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800687e:	b97c      	cbnz	r4, 80068a0 <__pow5mult+0x48>
 8006880:	2010      	movs	r0, #16
 8006882:	f7ff fe1b 	bl	80064bc <malloc>
 8006886:	4602      	mov	r2, r0
 8006888:	6270      	str	r0, [r6, #36]	; 0x24
 800688a:	b928      	cbnz	r0, 8006898 <__pow5mult+0x40>
 800688c:	4b1d      	ldr	r3, [pc, #116]	; (8006904 <__pow5mult+0xac>)
 800688e:	481e      	ldr	r0, [pc, #120]	; (8006908 <__pow5mult+0xb0>)
 8006890:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006894:	f000 fc0e 	bl	80070b4 <__assert_func>
 8006898:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800689c:	6004      	str	r4, [r0, #0]
 800689e:	60c4      	str	r4, [r0, #12]
 80068a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80068a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80068a8:	b94c      	cbnz	r4, 80068be <__pow5mult+0x66>
 80068aa:	f240 2171 	movw	r1, #625	; 0x271
 80068ae:	4630      	mov	r0, r6
 80068b0:	f7ff ff12 	bl	80066d8 <__i2b>
 80068b4:	2300      	movs	r3, #0
 80068b6:	f8c8 0008 	str.w	r0, [r8, #8]
 80068ba:	4604      	mov	r4, r0
 80068bc:	6003      	str	r3, [r0, #0]
 80068be:	f04f 0900 	mov.w	r9, #0
 80068c2:	07eb      	lsls	r3, r5, #31
 80068c4:	d50a      	bpl.n	80068dc <__pow5mult+0x84>
 80068c6:	4639      	mov	r1, r7
 80068c8:	4622      	mov	r2, r4
 80068ca:	4630      	mov	r0, r6
 80068cc:	f7ff ff1a 	bl	8006704 <__multiply>
 80068d0:	4639      	mov	r1, r7
 80068d2:	4680      	mov	r8, r0
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff fe47 	bl	8006568 <_Bfree>
 80068da:	4647      	mov	r7, r8
 80068dc:	106d      	asrs	r5, r5, #1
 80068de:	d00b      	beq.n	80068f8 <__pow5mult+0xa0>
 80068e0:	6820      	ldr	r0, [r4, #0]
 80068e2:	b938      	cbnz	r0, 80068f4 <__pow5mult+0x9c>
 80068e4:	4622      	mov	r2, r4
 80068e6:	4621      	mov	r1, r4
 80068e8:	4630      	mov	r0, r6
 80068ea:	f7ff ff0b 	bl	8006704 <__multiply>
 80068ee:	6020      	str	r0, [r4, #0]
 80068f0:	f8c0 9000 	str.w	r9, [r0]
 80068f4:	4604      	mov	r4, r0
 80068f6:	e7e4      	b.n	80068c2 <__pow5mult+0x6a>
 80068f8:	4638      	mov	r0, r7
 80068fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068fe:	bf00      	nop
 8006900:	08008288 	.word	0x08008288
 8006904:	080080b9 	.word	0x080080b9
 8006908:	0800813c 	.word	0x0800813c

0800690c <__lshift>:
 800690c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006910:	460c      	mov	r4, r1
 8006912:	6849      	ldr	r1, [r1, #4]
 8006914:	6923      	ldr	r3, [r4, #16]
 8006916:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800691a:	68a3      	ldr	r3, [r4, #8]
 800691c:	4607      	mov	r7, r0
 800691e:	4691      	mov	r9, r2
 8006920:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006924:	f108 0601 	add.w	r6, r8, #1
 8006928:	42b3      	cmp	r3, r6
 800692a:	db0b      	blt.n	8006944 <__lshift+0x38>
 800692c:	4638      	mov	r0, r7
 800692e:	f7ff fddb 	bl	80064e8 <_Balloc>
 8006932:	4605      	mov	r5, r0
 8006934:	b948      	cbnz	r0, 800694a <__lshift+0x3e>
 8006936:	4602      	mov	r2, r0
 8006938:	4b2a      	ldr	r3, [pc, #168]	; (80069e4 <__lshift+0xd8>)
 800693a:	482b      	ldr	r0, [pc, #172]	; (80069e8 <__lshift+0xdc>)
 800693c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006940:	f000 fbb8 	bl	80070b4 <__assert_func>
 8006944:	3101      	adds	r1, #1
 8006946:	005b      	lsls	r3, r3, #1
 8006948:	e7ee      	b.n	8006928 <__lshift+0x1c>
 800694a:	2300      	movs	r3, #0
 800694c:	f100 0114 	add.w	r1, r0, #20
 8006950:	f100 0210 	add.w	r2, r0, #16
 8006954:	4618      	mov	r0, r3
 8006956:	4553      	cmp	r3, sl
 8006958:	db37      	blt.n	80069ca <__lshift+0xbe>
 800695a:	6920      	ldr	r0, [r4, #16]
 800695c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006960:	f104 0314 	add.w	r3, r4, #20
 8006964:	f019 091f 	ands.w	r9, r9, #31
 8006968:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800696c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006970:	d02f      	beq.n	80069d2 <__lshift+0xc6>
 8006972:	f1c9 0e20 	rsb	lr, r9, #32
 8006976:	468a      	mov	sl, r1
 8006978:	f04f 0c00 	mov.w	ip, #0
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	fa02 f209 	lsl.w	r2, r2, r9
 8006982:	ea42 020c 	orr.w	r2, r2, ip
 8006986:	f84a 2b04 	str.w	r2, [sl], #4
 800698a:	f853 2b04 	ldr.w	r2, [r3], #4
 800698e:	4298      	cmp	r0, r3
 8006990:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006994:	d8f2      	bhi.n	800697c <__lshift+0x70>
 8006996:	1b03      	subs	r3, r0, r4
 8006998:	3b15      	subs	r3, #21
 800699a:	f023 0303 	bic.w	r3, r3, #3
 800699e:	3304      	adds	r3, #4
 80069a0:	f104 0215 	add.w	r2, r4, #21
 80069a4:	4290      	cmp	r0, r2
 80069a6:	bf38      	it	cc
 80069a8:	2304      	movcc	r3, #4
 80069aa:	f841 c003 	str.w	ip, [r1, r3]
 80069ae:	f1bc 0f00 	cmp.w	ip, #0
 80069b2:	d001      	beq.n	80069b8 <__lshift+0xac>
 80069b4:	f108 0602 	add.w	r6, r8, #2
 80069b8:	3e01      	subs	r6, #1
 80069ba:	4638      	mov	r0, r7
 80069bc:	612e      	str	r6, [r5, #16]
 80069be:	4621      	mov	r1, r4
 80069c0:	f7ff fdd2 	bl	8006568 <_Bfree>
 80069c4:	4628      	mov	r0, r5
 80069c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80069ca:	f842 0f04 	str.w	r0, [r2, #4]!
 80069ce:	3301      	adds	r3, #1
 80069d0:	e7c1      	b.n	8006956 <__lshift+0x4a>
 80069d2:	3904      	subs	r1, #4
 80069d4:	f853 2b04 	ldr.w	r2, [r3], #4
 80069d8:	f841 2f04 	str.w	r2, [r1, #4]!
 80069dc:	4298      	cmp	r0, r3
 80069de:	d8f9      	bhi.n	80069d4 <__lshift+0xc8>
 80069e0:	e7ea      	b.n	80069b8 <__lshift+0xac>
 80069e2:	bf00      	nop
 80069e4:	0800812b 	.word	0x0800812b
 80069e8:	0800813c 	.word	0x0800813c

080069ec <__mcmp>:
 80069ec:	b530      	push	{r4, r5, lr}
 80069ee:	6902      	ldr	r2, [r0, #16]
 80069f0:	690c      	ldr	r4, [r1, #16]
 80069f2:	1b12      	subs	r2, r2, r4
 80069f4:	d10e      	bne.n	8006a14 <__mcmp+0x28>
 80069f6:	f100 0314 	add.w	r3, r0, #20
 80069fa:	3114      	adds	r1, #20
 80069fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006a00:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006a04:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006a08:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006a0c:	42a5      	cmp	r5, r4
 8006a0e:	d003      	beq.n	8006a18 <__mcmp+0x2c>
 8006a10:	d305      	bcc.n	8006a1e <__mcmp+0x32>
 8006a12:	2201      	movs	r2, #1
 8006a14:	4610      	mov	r0, r2
 8006a16:	bd30      	pop	{r4, r5, pc}
 8006a18:	4283      	cmp	r3, r0
 8006a1a:	d3f3      	bcc.n	8006a04 <__mcmp+0x18>
 8006a1c:	e7fa      	b.n	8006a14 <__mcmp+0x28>
 8006a1e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a22:	e7f7      	b.n	8006a14 <__mcmp+0x28>

08006a24 <__mdiff>:
 8006a24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a28:	460c      	mov	r4, r1
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	4611      	mov	r1, r2
 8006a2e:	4620      	mov	r0, r4
 8006a30:	4690      	mov	r8, r2
 8006a32:	f7ff ffdb 	bl	80069ec <__mcmp>
 8006a36:	1e05      	subs	r5, r0, #0
 8006a38:	d110      	bne.n	8006a5c <__mdiff+0x38>
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff fd53 	bl	80064e8 <_Balloc>
 8006a42:	b930      	cbnz	r0, 8006a52 <__mdiff+0x2e>
 8006a44:	4b3a      	ldr	r3, [pc, #232]	; (8006b30 <__mdiff+0x10c>)
 8006a46:	4602      	mov	r2, r0
 8006a48:	f240 2132 	movw	r1, #562	; 0x232
 8006a4c:	4839      	ldr	r0, [pc, #228]	; (8006b34 <__mdiff+0x110>)
 8006a4e:	f000 fb31 	bl	80070b4 <__assert_func>
 8006a52:	2301      	movs	r3, #1
 8006a54:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006a58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5c:	bfa4      	itt	ge
 8006a5e:	4643      	movge	r3, r8
 8006a60:	46a0      	movge	r8, r4
 8006a62:	4630      	mov	r0, r6
 8006a64:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006a68:	bfa6      	itte	ge
 8006a6a:	461c      	movge	r4, r3
 8006a6c:	2500      	movge	r5, #0
 8006a6e:	2501      	movlt	r5, #1
 8006a70:	f7ff fd3a 	bl	80064e8 <_Balloc>
 8006a74:	b920      	cbnz	r0, 8006a80 <__mdiff+0x5c>
 8006a76:	4b2e      	ldr	r3, [pc, #184]	; (8006b30 <__mdiff+0x10c>)
 8006a78:	4602      	mov	r2, r0
 8006a7a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a7e:	e7e5      	b.n	8006a4c <__mdiff+0x28>
 8006a80:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a84:	6926      	ldr	r6, [r4, #16]
 8006a86:	60c5      	str	r5, [r0, #12]
 8006a88:	f104 0914 	add.w	r9, r4, #20
 8006a8c:	f108 0514 	add.w	r5, r8, #20
 8006a90:	f100 0e14 	add.w	lr, r0, #20
 8006a94:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a98:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a9c:	f108 0210 	add.w	r2, r8, #16
 8006aa0:	46f2      	mov	sl, lr
 8006aa2:	2100      	movs	r1, #0
 8006aa4:	f859 3b04 	ldr.w	r3, [r9], #4
 8006aa8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006aac:	fa1f f883 	uxth.w	r8, r3
 8006ab0:	fa11 f18b 	uxtah	r1, r1, fp
 8006ab4:	0c1b      	lsrs	r3, r3, #16
 8006ab6:	eba1 0808 	sub.w	r8, r1, r8
 8006aba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006abe:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006ac2:	fa1f f888 	uxth.w	r8, r8
 8006ac6:	1419      	asrs	r1, r3, #16
 8006ac8:	454e      	cmp	r6, r9
 8006aca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006ace:	f84a 3b04 	str.w	r3, [sl], #4
 8006ad2:	d8e7      	bhi.n	8006aa4 <__mdiff+0x80>
 8006ad4:	1b33      	subs	r3, r6, r4
 8006ad6:	3b15      	subs	r3, #21
 8006ad8:	f023 0303 	bic.w	r3, r3, #3
 8006adc:	3304      	adds	r3, #4
 8006ade:	3415      	adds	r4, #21
 8006ae0:	42a6      	cmp	r6, r4
 8006ae2:	bf38      	it	cc
 8006ae4:	2304      	movcc	r3, #4
 8006ae6:	441d      	add	r5, r3
 8006ae8:	4473      	add	r3, lr
 8006aea:	469e      	mov	lr, r3
 8006aec:	462e      	mov	r6, r5
 8006aee:	4566      	cmp	r6, ip
 8006af0:	d30e      	bcc.n	8006b10 <__mdiff+0xec>
 8006af2:	f10c 0203 	add.w	r2, ip, #3
 8006af6:	1b52      	subs	r2, r2, r5
 8006af8:	f022 0203 	bic.w	r2, r2, #3
 8006afc:	3d03      	subs	r5, #3
 8006afe:	45ac      	cmp	ip, r5
 8006b00:	bf38      	it	cc
 8006b02:	2200      	movcc	r2, #0
 8006b04:	441a      	add	r2, r3
 8006b06:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006b0a:	b17b      	cbz	r3, 8006b2c <__mdiff+0x108>
 8006b0c:	6107      	str	r7, [r0, #16]
 8006b0e:	e7a3      	b.n	8006a58 <__mdiff+0x34>
 8006b10:	f856 8b04 	ldr.w	r8, [r6], #4
 8006b14:	fa11 f288 	uxtah	r2, r1, r8
 8006b18:	1414      	asrs	r4, r2, #16
 8006b1a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006b1e:	b292      	uxth	r2, r2
 8006b20:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006b24:	f84e 2b04 	str.w	r2, [lr], #4
 8006b28:	1421      	asrs	r1, r4, #16
 8006b2a:	e7e0      	b.n	8006aee <__mdiff+0xca>
 8006b2c:	3f01      	subs	r7, #1
 8006b2e:	e7ea      	b.n	8006b06 <__mdiff+0xe2>
 8006b30:	0800812b 	.word	0x0800812b
 8006b34:	0800813c 	.word	0x0800813c

08006b38 <__d2b>:
 8006b38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b3c:	4689      	mov	r9, r1
 8006b3e:	2101      	movs	r1, #1
 8006b40:	ec57 6b10 	vmov	r6, r7, d0
 8006b44:	4690      	mov	r8, r2
 8006b46:	f7ff fccf 	bl	80064e8 <_Balloc>
 8006b4a:	4604      	mov	r4, r0
 8006b4c:	b930      	cbnz	r0, 8006b5c <__d2b+0x24>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	4b25      	ldr	r3, [pc, #148]	; (8006be8 <__d2b+0xb0>)
 8006b52:	4826      	ldr	r0, [pc, #152]	; (8006bec <__d2b+0xb4>)
 8006b54:	f240 310a 	movw	r1, #778	; 0x30a
 8006b58:	f000 faac 	bl	80070b4 <__assert_func>
 8006b5c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006b60:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006b64:	bb35      	cbnz	r5, 8006bb4 <__d2b+0x7c>
 8006b66:	2e00      	cmp	r6, #0
 8006b68:	9301      	str	r3, [sp, #4]
 8006b6a:	d028      	beq.n	8006bbe <__d2b+0x86>
 8006b6c:	4668      	mov	r0, sp
 8006b6e:	9600      	str	r6, [sp, #0]
 8006b70:	f7ff fd82 	bl	8006678 <__lo0bits>
 8006b74:	9900      	ldr	r1, [sp, #0]
 8006b76:	b300      	cbz	r0, 8006bba <__d2b+0x82>
 8006b78:	9a01      	ldr	r2, [sp, #4]
 8006b7a:	f1c0 0320 	rsb	r3, r0, #32
 8006b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8006b82:	430b      	orrs	r3, r1
 8006b84:	40c2      	lsrs	r2, r0
 8006b86:	6163      	str	r3, [r4, #20]
 8006b88:	9201      	str	r2, [sp, #4]
 8006b8a:	9b01      	ldr	r3, [sp, #4]
 8006b8c:	61a3      	str	r3, [r4, #24]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2202      	movne	r2, #2
 8006b94:	2201      	moveq	r2, #1
 8006b96:	6122      	str	r2, [r4, #16]
 8006b98:	b1d5      	cbz	r5, 8006bd0 <__d2b+0x98>
 8006b9a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b9e:	4405      	add	r5, r0
 8006ba0:	f8c9 5000 	str.w	r5, [r9]
 8006ba4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ba8:	f8c8 0000 	str.w	r0, [r8]
 8006bac:	4620      	mov	r0, r4
 8006bae:	b003      	add	sp, #12
 8006bb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006bb8:	e7d5      	b.n	8006b66 <__d2b+0x2e>
 8006bba:	6161      	str	r1, [r4, #20]
 8006bbc:	e7e5      	b.n	8006b8a <__d2b+0x52>
 8006bbe:	a801      	add	r0, sp, #4
 8006bc0:	f7ff fd5a 	bl	8006678 <__lo0bits>
 8006bc4:	9b01      	ldr	r3, [sp, #4]
 8006bc6:	6163      	str	r3, [r4, #20]
 8006bc8:	2201      	movs	r2, #1
 8006bca:	6122      	str	r2, [r4, #16]
 8006bcc:	3020      	adds	r0, #32
 8006bce:	e7e3      	b.n	8006b98 <__d2b+0x60>
 8006bd0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006bd4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006bd8:	f8c9 0000 	str.w	r0, [r9]
 8006bdc:	6918      	ldr	r0, [r3, #16]
 8006bde:	f7ff fd2b 	bl	8006638 <__hi0bits>
 8006be2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006be6:	e7df      	b.n	8006ba8 <__d2b+0x70>
 8006be8:	0800812b 	.word	0x0800812b
 8006bec:	0800813c 	.word	0x0800813c

08006bf0 <_calloc_r>:
 8006bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006bf2:	fba1 2402 	umull	r2, r4, r1, r2
 8006bf6:	b94c      	cbnz	r4, 8006c0c <_calloc_r+0x1c>
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	9201      	str	r2, [sp, #4]
 8006bfc:	f000 f87a 	bl	8006cf4 <_malloc_r>
 8006c00:	9a01      	ldr	r2, [sp, #4]
 8006c02:	4605      	mov	r5, r0
 8006c04:	b930      	cbnz	r0, 8006c14 <_calloc_r+0x24>
 8006c06:	4628      	mov	r0, r5
 8006c08:	b003      	add	sp, #12
 8006c0a:	bd30      	pop	{r4, r5, pc}
 8006c0c:	220c      	movs	r2, #12
 8006c0e:	6002      	str	r2, [r0, #0]
 8006c10:	2500      	movs	r5, #0
 8006c12:	e7f8      	b.n	8006c06 <_calloc_r+0x16>
 8006c14:	4621      	mov	r1, r4
 8006c16:	f7fe f913 	bl	8004e40 <memset>
 8006c1a:	e7f4      	b.n	8006c06 <_calloc_r+0x16>

08006c1c <_free_r>:
 8006c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006c1e:	2900      	cmp	r1, #0
 8006c20:	d044      	beq.n	8006cac <_free_r+0x90>
 8006c22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c26:	9001      	str	r0, [sp, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f1a1 0404 	sub.w	r4, r1, #4
 8006c2e:	bfb8      	it	lt
 8006c30:	18e4      	addlt	r4, r4, r3
 8006c32:	f000 fa9b 	bl	800716c <__malloc_lock>
 8006c36:	4a1e      	ldr	r2, [pc, #120]	; (8006cb0 <_free_r+0x94>)
 8006c38:	9801      	ldr	r0, [sp, #4]
 8006c3a:	6813      	ldr	r3, [r2, #0]
 8006c3c:	b933      	cbnz	r3, 8006c4c <_free_r+0x30>
 8006c3e:	6063      	str	r3, [r4, #4]
 8006c40:	6014      	str	r4, [r2, #0]
 8006c42:	b003      	add	sp, #12
 8006c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c48:	f000 ba96 	b.w	8007178 <__malloc_unlock>
 8006c4c:	42a3      	cmp	r3, r4
 8006c4e:	d908      	bls.n	8006c62 <_free_r+0x46>
 8006c50:	6825      	ldr	r5, [r4, #0]
 8006c52:	1961      	adds	r1, r4, r5
 8006c54:	428b      	cmp	r3, r1
 8006c56:	bf01      	itttt	eq
 8006c58:	6819      	ldreq	r1, [r3, #0]
 8006c5a:	685b      	ldreq	r3, [r3, #4]
 8006c5c:	1949      	addeq	r1, r1, r5
 8006c5e:	6021      	streq	r1, [r4, #0]
 8006c60:	e7ed      	b.n	8006c3e <_free_r+0x22>
 8006c62:	461a      	mov	r2, r3
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	b10b      	cbz	r3, 8006c6c <_free_r+0x50>
 8006c68:	42a3      	cmp	r3, r4
 8006c6a:	d9fa      	bls.n	8006c62 <_free_r+0x46>
 8006c6c:	6811      	ldr	r1, [r2, #0]
 8006c6e:	1855      	adds	r5, r2, r1
 8006c70:	42a5      	cmp	r5, r4
 8006c72:	d10b      	bne.n	8006c8c <_free_r+0x70>
 8006c74:	6824      	ldr	r4, [r4, #0]
 8006c76:	4421      	add	r1, r4
 8006c78:	1854      	adds	r4, r2, r1
 8006c7a:	42a3      	cmp	r3, r4
 8006c7c:	6011      	str	r1, [r2, #0]
 8006c7e:	d1e0      	bne.n	8006c42 <_free_r+0x26>
 8006c80:	681c      	ldr	r4, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	6053      	str	r3, [r2, #4]
 8006c86:	4421      	add	r1, r4
 8006c88:	6011      	str	r1, [r2, #0]
 8006c8a:	e7da      	b.n	8006c42 <_free_r+0x26>
 8006c8c:	d902      	bls.n	8006c94 <_free_r+0x78>
 8006c8e:	230c      	movs	r3, #12
 8006c90:	6003      	str	r3, [r0, #0]
 8006c92:	e7d6      	b.n	8006c42 <_free_r+0x26>
 8006c94:	6825      	ldr	r5, [r4, #0]
 8006c96:	1961      	adds	r1, r4, r5
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf04      	itt	eq
 8006c9c:	6819      	ldreq	r1, [r3, #0]
 8006c9e:	685b      	ldreq	r3, [r3, #4]
 8006ca0:	6063      	str	r3, [r4, #4]
 8006ca2:	bf04      	itt	eq
 8006ca4:	1949      	addeq	r1, r1, r5
 8006ca6:	6021      	streq	r1, [r4, #0]
 8006ca8:	6054      	str	r4, [r2, #4]
 8006caa:	e7ca      	b.n	8006c42 <_free_r+0x26>
 8006cac:	b003      	add	sp, #12
 8006cae:	bd30      	pop	{r4, r5, pc}
 8006cb0:	20000354 	.word	0x20000354

08006cb4 <sbrk_aligned>:
 8006cb4:	b570      	push	{r4, r5, r6, lr}
 8006cb6:	4e0e      	ldr	r6, [pc, #56]	; (8006cf0 <sbrk_aligned+0x3c>)
 8006cb8:	460c      	mov	r4, r1
 8006cba:	6831      	ldr	r1, [r6, #0]
 8006cbc:	4605      	mov	r5, r0
 8006cbe:	b911      	cbnz	r1, 8006cc6 <sbrk_aligned+0x12>
 8006cc0:	f000 f9e8 	bl	8007094 <_sbrk_r>
 8006cc4:	6030      	str	r0, [r6, #0]
 8006cc6:	4621      	mov	r1, r4
 8006cc8:	4628      	mov	r0, r5
 8006cca:	f000 f9e3 	bl	8007094 <_sbrk_r>
 8006cce:	1c43      	adds	r3, r0, #1
 8006cd0:	d00a      	beq.n	8006ce8 <sbrk_aligned+0x34>
 8006cd2:	1cc4      	adds	r4, r0, #3
 8006cd4:	f024 0403 	bic.w	r4, r4, #3
 8006cd8:	42a0      	cmp	r0, r4
 8006cda:	d007      	beq.n	8006cec <sbrk_aligned+0x38>
 8006cdc:	1a21      	subs	r1, r4, r0
 8006cde:	4628      	mov	r0, r5
 8006ce0:	f000 f9d8 	bl	8007094 <_sbrk_r>
 8006ce4:	3001      	adds	r0, #1
 8006ce6:	d101      	bne.n	8006cec <sbrk_aligned+0x38>
 8006ce8:	f04f 34ff 	mov.w	r4, #4294967295
 8006cec:	4620      	mov	r0, r4
 8006cee:	bd70      	pop	{r4, r5, r6, pc}
 8006cf0:	20000358 	.word	0x20000358

08006cf4 <_malloc_r>:
 8006cf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006cf8:	1ccd      	adds	r5, r1, #3
 8006cfa:	f025 0503 	bic.w	r5, r5, #3
 8006cfe:	3508      	adds	r5, #8
 8006d00:	2d0c      	cmp	r5, #12
 8006d02:	bf38      	it	cc
 8006d04:	250c      	movcc	r5, #12
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	4607      	mov	r7, r0
 8006d0a:	db01      	blt.n	8006d10 <_malloc_r+0x1c>
 8006d0c:	42a9      	cmp	r1, r5
 8006d0e:	d905      	bls.n	8006d1c <_malloc_r+0x28>
 8006d10:	230c      	movs	r3, #12
 8006d12:	603b      	str	r3, [r7, #0]
 8006d14:	2600      	movs	r6, #0
 8006d16:	4630      	mov	r0, r6
 8006d18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006d1c:	4e2e      	ldr	r6, [pc, #184]	; (8006dd8 <_malloc_r+0xe4>)
 8006d1e:	f000 fa25 	bl	800716c <__malloc_lock>
 8006d22:	6833      	ldr	r3, [r6, #0]
 8006d24:	461c      	mov	r4, r3
 8006d26:	bb34      	cbnz	r4, 8006d76 <_malloc_r+0x82>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4638      	mov	r0, r7
 8006d2c:	f7ff ffc2 	bl	8006cb4 <sbrk_aligned>
 8006d30:	1c43      	adds	r3, r0, #1
 8006d32:	4604      	mov	r4, r0
 8006d34:	d14d      	bne.n	8006dd2 <_malloc_r+0xde>
 8006d36:	6834      	ldr	r4, [r6, #0]
 8006d38:	4626      	mov	r6, r4
 8006d3a:	2e00      	cmp	r6, #0
 8006d3c:	d140      	bne.n	8006dc0 <_malloc_r+0xcc>
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	4631      	mov	r1, r6
 8006d42:	4638      	mov	r0, r7
 8006d44:	eb04 0803 	add.w	r8, r4, r3
 8006d48:	f000 f9a4 	bl	8007094 <_sbrk_r>
 8006d4c:	4580      	cmp	r8, r0
 8006d4e:	d13a      	bne.n	8006dc6 <_malloc_r+0xd2>
 8006d50:	6821      	ldr	r1, [r4, #0]
 8006d52:	3503      	adds	r5, #3
 8006d54:	1a6d      	subs	r5, r5, r1
 8006d56:	f025 0503 	bic.w	r5, r5, #3
 8006d5a:	3508      	adds	r5, #8
 8006d5c:	2d0c      	cmp	r5, #12
 8006d5e:	bf38      	it	cc
 8006d60:	250c      	movcc	r5, #12
 8006d62:	4629      	mov	r1, r5
 8006d64:	4638      	mov	r0, r7
 8006d66:	f7ff ffa5 	bl	8006cb4 <sbrk_aligned>
 8006d6a:	3001      	adds	r0, #1
 8006d6c:	d02b      	beq.n	8006dc6 <_malloc_r+0xd2>
 8006d6e:	6823      	ldr	r3, [r4, #0]
 8006d70:	442b      	add	r3, r5
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	e00e      	b.n	8006d94 <_malloc_r+0xa0>
 8006d76:	6822      	ldr	r2, [r4, #0]
 8006d78:	1b52      	subs	r2, r2, r5
 8006d7a:	d41e      	bmi.n	8006dba <_malloc_r+0xc6>
 8006d7c:	2a0b      	cmp	r2, #11
 8006d7e:	d916      	bls.n	8006dae <_malloc_r+0xba>
 8006d80:	1961      	adds	r1, r4, r5
 8006d82:	42a3      	cmp	r3, r4
 8006d84:	6025      	str	r5, [r4, #0]
 8006d86:	bf18      	it	ne
 8006d88:	6059      	strne	r1, [r3, #4]
 8006d8a:	6863      	ldr	r3, [r4, #4]
 8006d8c:	bf08      	it	eq
 8006d8e:	6031      	streq	r1, [r6, #0]
 8006d90:	5162      	str	r2, [r4, r5]
 8006d92:	604b      	str	r3, [r1, #4]
 8006d94:	4638      	mov	r0, r7
 8006d96:	f104 060b 	add.w	r6, r4, #11
 8006d9a:	f000 f9ed 	bl	8007178 <__malloc_unlock>
 8006d9e:	f026 0607 	bic.w	r6, r6, #7
 8006da2:	1d23      	adds	r3, r4, #4
 8006da4:	1af2      	subs	r2, r6, r3
 8006da6:	d0b6      	beq.n	8006d16 <_malloc_r+0x22>
 8006da8:	1b9b      	subs	r3, r3, r6
 8006daa:	50a3      	str	r3, [r4, r2]
 8006dac:	e7b3      	b.n	8006d16 <_malloc_r+0x22>
 8006dae:	6862      	ldr	r2, [r4, #4]
 8006db0:	42a3      	cmp	r3, r4
 8006db2:	bf0c      	ite	eq
 8006db4:	6032      	streq	r2, [r6, #0]
 8006db6:	605a      	strne	r2, [r3, #4]
 8006db8:	e7ec      	b.n	8006d94 <_malloc_r+0xa0>
 8006dba:	4623      	mov	r3, r4
 8006dbc:	6864      	ldr	r4, [r4, #4]
 8006dbe:	e7b2      	b.n	8006d26 <_malloc_r+0x32>
 8006dc0:	4634      	mov	r4, r6
 8006dc2:	6876      	ldr	r6, [r6, #4]
 8006dc4:	e7b9      	b.n	8006d3a <_malloc_r+0x46>
 8006dc6:	230c      	movs	r3, #12
 8006dc8:	603b      	str	r3, [r7, #0]
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f000 f9d4 	bl	8007178 <__malloc_unlock>
 8006dd0:	e7a1      	b.n	8006d16 <_malloc_r+0x22>
 8006dd2:	6025      	str	r5, [r4, #0]
 8006dd4:	e7de      	b.n	8006d94 <_malloc_r+0xa0>
 8006dd6:	bf00      	nop
 8006dd8:	20000354 	.word	0x20000354

08006ddc <__ssputs_r>:
 8006ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006de0:	688e      	ldr	r6, [r1, #8]
 8006de2:	429e      	cmp	r6, r3
 8006de4:	4682      	mov	sl, r0
 8006de6:	460c      	mov	r4, r1
 8006de8:	4690      	mov	r8, r2
 8006dea:	461f      	mov	r7, r3
 8006dec:	d838      	bhi.n	8006e60 <__ssputs_r+0x84>
 8006dee:	898a      	ldrh	r2, [r1, #12]
 8006df0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006df4:	d032      	beq.n	8006e5c <__ssputs_r+0x80>
 8006df6:	6825      	ldr	r5, [r4, #0]
 8006df8:	6909      	ldr	r1, [r1, #16]
 8006dfa:	eba5 0901 	sub.w	r9, r5, r1
 8006dfe:	6965      	ldr	r5, [r4, #20]
 8006e00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006e04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006e08:	3301      	adds	r3, #1
 8006e0a:	444b      	add	r3, r9
 8006e0c:	106d      	asrs	r5, r5, #1
 8006e0e:	429d      	cmp	r5, r3
 8006e10:	bf38      	it	cc
 8006e12:	461d      	movcc	r5, r3
 8006e14:	0553      	lsls	r3, r2, #21
 8006e16:	d531      	bpl.n	8006e7c <__ssputs_r+0xa0>
 8006e18:	4629      	mov	r1, r5
 8006e1a:	f7ff ff6b 	bl	8006cf4 <_malloc_r>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	b950      	cbnz	r0, 8006e38 <__ssputs_r+0x5c>
 8006e22:	230c      	movs	r3, #12
 8006e24:	f8ca 3000 	str.w	r3, [sl]
 8006e28:	89a3      	ldrh	r3, [r4, #12]
 8006e2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e2e:	81a3      	strh	r3, [r4, #12]
 8006e30:	f04f 30ff 	mov.w	r0, #4294967295
 8006e34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e38:	6921      	ldr	r1, [r4, #16]
 8006e3a:	464a      	mov	r2, r9
 8006e3c:	f7ff fb46 	bl	80064cc <memcpy>
 8006e40:	89a3      	ldrh	r3, [r4, #12]
 8006e42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e4a:	81a3      	strh	r3, [r4, #12]
 8006e4c:	6126      	str	r6, [r4, #16]
 8006e4e:	6165      	str	r5, [r4, #20]
 8006e50:	444e      	add	r6, r9
 8006e52:	eba5 0509 	sub.w	r5, r5, r9
 8006e56:	6026      	str	r6, [r4, #0]
 8006e58:	60a5      	str	r5, [r4, #8]
 8006e5a:	463e      	mov	r6, r7
 8006e5c:	42be      	cmp	r6, r7
 8006e5e:	d900      	bls.n	8006e62 <__ssputs_r+0x86>
 8006e60:	463e      	mov	r6, r7
 8006e62:	6820      	ldr	r0, [r4, #0]
 8006e64:	4632      	mov	r2, r6
 8006e66:	4641      	mov	r1, r8
 8006e68:	f000 f966 	bl	8007138 <memmove>
 8006e6c:	68a3      	ldr	r3, [r4, #8]
 8006e6e:	1b9b      	subs	r3, r3, r6
 8006e70:	60a3      	str	r3, [r4, #8]
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	4433      	add	r3, r6
 8006e76:	6023      	str	r3, [r4, #0]
 8006e78:	2000      	movs	r0, #0
 8006e7a:	e7db      	b.n	8006e34 <__ssputs_r+0x58>
 8006e7c:	462a      	mov	r2, r5
 8006e7e:	f000 f981 	bl	8007184 <_realloc_r>
 8006e82:	4606      	mov	r6, r0
 8006e84:	2800      	cmp	r0, #0
 8006e86:	d1e1      	bne.n	8006e4c <__ssputs_r+0x70>
 8006e88:	6921      	ldr	r1, [r4, #16]
 8006e8a:	4650      	mov	r0, sl
 8006e8c:	f7ff fec6 	bl	8006c1c <_free_r>
 8006e90:	e7c7      	b.n	8006e22 <__ssputs_r+0x46>
	...

08006e94 <_svfiprintf_r>:
 8006e94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e98:	4698      	mov	r8, r3
 8006e9a:	898b      	ldrh	r3, [r1, #12]
 8006e9c:	061b      	lsls	r3, r3, #24
 8006e9e:	b09d      	sub	sp, #116	; 0x74
 8006ea0:	4607      	mov	r7, r0
 8006ea2:	460d      	mov	r5, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	d50e      	bpl.n	8006ec6 <_svfiprintf_r+0x32>
 8006ea8:	690b      	ldr	r3, [r1, #16]
 8006eaa:	b963      	cbnz	r3, 8006ec6 <_svfiprintf_r+0x32>
 8006eac:	2140      	movs	r1, #64	; 0x40
 8006eae:	f7ff ff21 	bl	8006cf4 <_malloc_r>
 8006eb2:	6028      	str	r0, [r5, #0]
 8006eb4:	6128      	str	r0, [r5, #16]
 8006eb6:	b920      	cbnz	r0, 8006ec2 <_svfiprintf_r+0x2e>
 8006eb8:	230c      	movs	r3, #12
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	e0d1      	b.n	8007066 <_svfiprintf_r+0x1d2>
 8006ec2:	2340      	movs	r3, #64	; 0x40
 8006ec4:	616b      	str	r3, [r5, #20]
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	9309      	str	r3, [sp, #36]	; 0x24
 8006eca:	2320      	movs	r3, #32
 8006ecc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ed0:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ed4:	2330      	movs	r3, #48	; 0x30
 8006ed6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007080 <_svfiprintf_r+0x1ec>
 8006eda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ede:	f04f 0901 	mov.w	r9, #1
 8006ee2:	4623      	mov	r3, r4
 8006ee4:	469a      	mov	sl, r3
 8006ee6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eea:	b10a      	cbz	r2, 8006ef0 <_svfiprintf_r+0x5c>
 8006eec:	2a25      	cmp	r2, #37	; 0x25
 8006eee:	d1f9      	bne.n	8006ee4 <_svfiprintf_r+0x50>
 8006ef0:	ebba 0b04 	subs.w	fp, sl, r4
 8006ef4:	d00b      	beq.n	8006f0e <_svfiprintf_r+0x7a>
 8006ef6:	465b      	mov	r3, fp
 8006ef8:	4622      	mov	r2, r4
 8006efa:	4629      	mov	r1, r5
 8006efc:	4638      	mov	r0, r7
 8006efe:	f7ff ff6d 	bl	8006ddc <__ssputs_r>
 8006f02:	3001      	adds	r0, #1
 8006f04:	f000 80aa 	beq.w	800705c <_svfiprintf_r+0x1c8>
 8006f08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006f0a:	445a      	add	r2, fp
 8006f0c:	9209      	str	r2, [sp, #36]	; 0x24
 8006f0e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	f000 80a2 	beq.w	800705c <_svfiprintf_r+0x1c8>
 8006f18:	2300      	movs	r3, #0
 8006f1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006f1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006f22:	f10a 0a01 	add.w	sl, sl, #1
 8006f26:	9304      	str	r3, [sp, #16]
 8006f28:	9307      	str	r3, [sp, #28]
 8006f2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006f2e:	931a      	str	r3, [sp, #104]	; 0x68
 8006f30:	4654      	mov	r4, sl
 8006f32:	2205      	movs	r2, #5
 8006f34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f38:	4851      	ldr	r0, [pc, #324]	; (8007080 <_svfiprintf_r+0x1ec>)
 8006f3a:	f7f9 f951 	bl	80001e0 <memchr>
 8006f3e:	9a04      	ldr	r2, [sp, #16]
 8006f40:	b9d8      	cbnz	r0, 8006f7a <_svfiprintf_r+0xe6>
 8006f42:	06d0      	lsls	r0, r2, #27
 8006f44:	bf44      	itt	mi
 8006f46:	2320      	movmi	r3, #32
 8006f48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f4c:	0711      	lsls	r1, r2, #28
 8006f4e:	bf44      	itt	mi
 8006f50:	232b      	movmi	r3, #43	; 0x2b
 8006f52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f56:	f89a 3000 	ldrb.w	r3, [sl]
 8006f5a:	2b2a      	cmp	r3, #42	; 0x2a
 8006f5c:	d015      	beq.n	8006f8a <_svfiprintf_r+0xf6>
 8006f5e:	9a07      	ldr	r2, [sp, #28]
 8006f60:	4654      	mov	r4, sl
 8006f62:	2000      	movs	r0, #0
 8006f64:	f04f 0c0a 	mov.w	ip, #10
 8006f68:	4621      	mov	r1, r4
 8006f6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f6e:	3b30      	subs	r3, #48	; 0x30
 8006f70:	2b09      	cmp	r3, #9
 8006f72:	d94e      	bls.n	8007012 <_svfiprintf_r+0x17e>
 8006f74:	b1b0      	cbz	r0, 8006fa4 <_svfiprintf_r+0x110>
 8006f76:	9207      	str	r2, [sp, #28]
 8006f78:	e014      	b.n	8006fa4 <_svfiprintf_r+0x110>
 8006f7a:	eba0 0308 	sub.w	r3, r0, r8
 8006f7e:	fa09 f303 	lsl.w	r3, r9, r3
 8006f82:	4313      	orrs	r3, r2
 8006f84:	9304      	str	r3, [sp, #16]
 8006f86:	46a2      	mov	sl, r4
 8006f88:	e7d2      	b.n	8006f30 <_svfiprintf_r+0x9c>
 8006f8a:	9b03      	ldr	r3, [sp, #12]
 8006f8c:	1d19      	adds	r1, r3, #4
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	9103      	str	r1, [sp, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	bfbb      	ittet	lt
 8006f96:	425b      	neglt	r3, r3
 8006f98:	f042 0202 	orrlt.w	r2, r2, #2
 8006f9c:	9307      	strge	r3, [sp, #28]
 8006f9e:	9307      	strlt	r3, [sp, #28]
 8006fa0:	bfb8      	it	lt
 8006fa2:	9204      	strlt	r2, [sp, #16]
 8006fa4:	7823      	ldrb	r3, [r4, #0]
 8006fa6:	2b2e      	cmp	r3, #46	; 0x2e
 8006fa8:	d10c      	bne.n	8006fc4 <_svfiprintf_r+0x130>
 8006faa:	7863      	ldrb	r3, [r4, #1]
 8006fac:	2b2a      	cmp	r3, #42	; 0x2a
 8006fae:	d135      	bne.n	800701c <_svfiprintf_r+0x188>
 8006fb0:	9b03      	ldr	r3, [sp, #12]
 8006fb2:	1d1a      	adds	r2, r3, #4
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	9203      	str	r2, [sp, #12]
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	bfb8      	it	lt
 8006fbc:	f04f 33ff 	movlt.w	r3, #4294967295
 8006fc0:	3402      	adds	r4, #2
 8006fc2:	9305      	str	r3, [sp, #20]
 8006fc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007090 <_svfiprintf_r+0x1fc>
 8006fc8:	7821      	ldrb	r1, [r4, #0]
 8006fca:	2203      	movs	r2, #3
 8006fcc:	4650      	mov	r0, sl
 8006fce:	f7f9 f907 	bl	80001e0 <memchr>
 8006fd2:	b140      	cbz	r0, 8006fe6 <_svfiprintf_r+0x152>
 8006fd4:	2340      	movs	r3, #64	; 0x40
 8006fd6:	eba0 000a 	sub.w	r0, r0, sl
 8006fda:	fa03 f000 	lsl.w	r0, r3, r0
 8006fde:	9b04      	ldr	r3, [sp, #16]
 8006fe0:	4303      	orrs	r3, r0
 8006fe2:	3401      	adds	r4, #1
 8006fe4:	9304      	str	r3, [sp, #16]
 8006fe6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fea:	4826      	ldr	r0, [pc, #152]	; (8007084 <_svfiprintf_r+0x1f0>)
 8006fec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ff0:	2206      	movs	r2, #6
 8006ff2:	f7f9 f8f5 	bl	80001e0 <memchr>
 8006ff6:	2800      	cmp	r0, #0
 8006ff8:	d038      	beq.n	800706c <_svfiprintf_r+0x1d8>
 8006ffa:	4b23      	ldr	r3, [pc, #140]	; (8007088 <_svfiprintf_r+0x1f4>)
 8006ffc:	bb1b      	cbnz	r3, 8007046 <_svfiprintf_r+0x1b2>
 8006ffe:	9b03      	ldr	r3, [sp, #12]
 8007000:	3307      	adds	r3, #7
 8007002:	f023 0307 	bic.w	r3, r3, #7
 8007006:	3308      	adds	r3, #8
 8007008:	9303      	str	r3, [sp, #12]
 800700a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800700c:	4433      	add	r3, r6
 800700e:	9309      	str	r3, [sp, #36]	; 0x24
 8007010:	e767      	b.n	8006ee2 <_svfiprintf_r+0x4e>
 8007012:	fb0c 3202 	mla	r2, ip, r2, r3
 8007016:	460c      	mov	r4, r1
 8007018:	2001      	movs	r0, #1
 800701a:	e7a5      	b.n	8006f68 <_svfiprintf_r+0xd4>
 800701c:	2300      	movs	r3, #0
 800701e:	3401      	adds	r4, #1
 8007020:	9305      	str	r3, [sp, #20]
 8007022:	4619      	mov	r1, r3
 8007024:	f04f 0c0a 	mov.w	ip, #10
 8007028:	4620      	mov	r0, r4
 800702a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800702e:	3a30      	subs	r2, #48	; 0x30
 8007030:	2a09      	cmp	r2, #9
 8007032:	d903      	bls.n	800703c <_svfiprintf_r+0x1a8>
 8007034:	2b00      	cmp	r3, #0
 8007036:	d0c5      	beq.n	8006fc4 <_svfiprintf_r+0x130>
 8007038:	9105      	str	r1, [sp, #20]
 800703a:	e7c3      	b.n	8006fc4 <_svfiprintf_r+0x130>
 800703c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007040:	4604      	mov	r4, r0
 8007042:	2301      	movs	r3, #1
 8007044:	e7f0      	b.n	8007028 <_svfiprintf_r+0x194>
 8007046:	ab03      	add	r3, sp, #12
 8007048:	9300      	str	r3, [sp, #0]
 800704a:	462a      	mov	r2, r5
 800704c:	4b0f      	ldr	r3, [pc, #60]	; (800708c <_svfiprintf_r+0x1f8>)
 800704e:	a904      	add	r1, sp, #16
 8007050:	4638      	mov	r0, r7
 8007052:	f7fd ff9d 	bl	8004f90 <_printf_float>
 8007056:	1c42      	adds	r2, r0, #1
 8007058:	4606      	mov	r6, r0
 800705a:	d1d6      	bne.n	800700a <_svfiprintf_r+0x176>
 800705c:	89ab      	ldrh	r3, [r5, #12]
 800705e:	065b      	lsls	r3, r3, #25
 8007060:	f53f af2c 	bmi.w	8006ebc <_svfiprintf_r+0x28>
 8007064:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007066:	b01d      	add	sp, #116	; 0x74
 8007068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706c:	ab03      	add	r3, sp, #12
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	462a      	mov	r2, r5
 8007072:	4b06      	ldr	r3, [pc, #24]	; (800708c <_svfiprintf_r+0x1f8>)
 8007074:	a904      	add	r1, sp, #16
 8007076:	4638      	mov	r0, r7
 8007078:	f7fe fa2e 	bl	80054d8 <_printf_i>
 800707c:	e7eb      	b.n	8007056 <_svfiprintf_r+0x1c2>
 800707e:	bf00      	nop
 8007080:	08008294 	.word	0x08008294
 8007084:	0800829e 	.word	0x0800829e
 8007088:	08004f91 	.word	0x08004f91
 800708c:	08006ddd 	.word	0x08006ddd
 8007090:	0800829a 	.word	0x0800829a

08007094 <_sbrk_r>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4d06      	ldr	r5, [pc, #24]	; (80070b0 <_sbrk_r+0x1c>)
 8007098:	2300      	movs	r3, #0
 800709a:	4604      	mov	r4, r0
 800709c:	4608      	mov	r0, r1
 800709e:	602b      	str	r3, [r5, #0]
 80070a0:	f7fa fb48 	bl	8001734 <_sbrk>
 80070a4:	1c43      	adds	r3, r0, #1
 80070a6:	d102      	bne.n	80070ae <_sbrk_r+0x1a>
 80070a8:	682b      	ldr	r3, [r5, #0]
 80070aa:	b103      	cbz	r3, 80070ae <_sbrk_r+0x1a>
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	bd38      	pop	{r3, r4, r5, pc}
 80070b0:	2000035c 	.word	0x2000035c

080070b4 <__assert_func>:
 80070b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070b6:	4614      	mov	r4, r2
 80070b8:	461a      	mov	r2, r3
 80070ba:	4b09      	ldr	r3, [pc, #36]	; (80070e0 <__assert_func+0x2c>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	4605      	mov	r5, r0
 80070c0:	68d8      	ldr	r0, [r3, #12]
 80070c2:	b14c      	cbz	r4, 80070d8 <__assert_func+0x24>
 80070c4:	4b07      	ldr	r3, [pc, #28]	; (80070e4 <__assert_func+0x30>)
 80070c6:	9100      	str	r1, [sp, #0]
 80070c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80070cc:	4906      	ldr	r1, [pc, #24]	; (80070e8 <__assert_func+0x34>)
 80070ce:	462b      	mov	r3, r5
 80070d0:	f000 f80e 	bl	80070f0 <fiprintf>
 80070d4:	f000 faac 	bl	8007630 <abort>
 80070d8:	4b04      	ldr	r3, [pc, #16]	; (80070ec <__assert_func+0x38>)
 80070da:	461c      	mov	r4, r3
 80070dc:	e7f3      	b.n	80070c6 <__assert_func+0x12>
 80070de:	bf00      	nop
 80070e0:	2000000c 	.word	0x2000000c
 80070e4:	080082a5 	.word	0x080082a5
 80070e8:	080082b2 	.word	0x080082b2
 80070ec:	080082e0 	.word	0x080082e0

080070f0 <fiprintf>:
 80070f0:	b40e      	push	{r1, r2, r3}
 80070f2:	b503      	push	{r0, r1, lr}
 80070f4:	4601      	mov	r1, r0
 80070f6:	ab03      	add	r3, sp, #12
 80070f8:	4805      	ldr	r0, [pc, #20]	; (8007110 <fiprintf+0x20>)
 80070fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fe:	6800      	ldr	r0, [r0, #0]
 8007100:	9301      	str	r3, [sp, #4]
 8007102:	f000 f897 	bl	8007234 <_vfiprintf_r>
 8007106:	b002      	add	sp, #8
 8007108:	f85d eb04 	ldr.w	lr, [sp], #4
 800710c:	b003      	add	sp, #12
 800710e:	4770      	bx	lr
 8007110:	2000000c 	.word	0x2000000c

08007114 <__ascii_mbtowc>:
 8007114:	b082      	sub	sp, #8
 8007116:	b901      	cbnz	r1, 800711a <__ascii_mbtowc+0x6>
 8007118:	a901      	add	r1, sp, #4
 800711a:	b142      	cbz	r2, 800712e <__ascii_mbtowc+0x1a>
 800711c:	b14b      	cbz	r3, 8007132 <__ascii_mbtowc+0x1e>
 800711e:	7813      	ldrb	r3, [r2, #0]
 8007120:	600b      	str	r3, [r1, #0]
 8007122:	7812      	ldrb	r2, [r2, #0]
 8007124:	1e10      	subs	r0, r2, #0
 8007126:	bf18      	it	ne
 8007128:	2001      	movne	r0, #1
 800712a:	b002      	add	sp, #8
 800712c:	4770      	bx	lr
 800712e:	4610      	mov	r0, r2
 8007130:	e7fb      	b.n	800712a <__ascii_mbtowc+0x16>
 8007132:	f06f 0001 	mvn.w	r0, #1
 8007136:	e7f8      	b.n	800712a <__ascii_mbtowc+0x16>

08007138 <memmove>:
 8007138:	4288      	cmp	r0, r1
 800713a:	b510      	push	{r4, lr}
 800713c:	eb01 0402 	add.w	r4, r1, r2
 8007140:	d902      	bls.n	8007148 <memmove+0x10>
 8007142:	4284      	cmp	r4, r0
 8007144:	4623      	mov	r3, r4
 8007146:	d807      	bhi.n	8007158 <memmove+0x20>
 8007148:	1e43      	subs	r3, r0, #1
 800714a:	42a1      	cmp	r1, r4
 800714c:	d008      	beq.n	8007160 <memmove+0x28>
 800714e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007152:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007156:	e7f8      	b.n	800714a <memmove+0x12>
 8007158:	4402      	add	r2, r0
 800715a:	4601      	mov	r1, r0
 800715c:	428a      	cmp	r2, r1
 800715e:	d100      	bne.n	8007162 <memmove+0x2a>
 8007160:	bd10      	pop	{r4, pc}
 8007162:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007166:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800716a:	e7f7      	b.n	800715c <memmove+0x24>

0800716c <__malloc_lock>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__malloc_lock+0x8>)
 800716e:	f000 bc1f 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20000360 	.word	0x20000360

08007178 <__malloc_unlock>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__malloc_unlock+0x8>)
 800717a:	f000 bc1a 	b.w	80079b2 <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20000360 	.word	0x20000360

08007184 <_realloc_r>:
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	4680      	mov	r8, r0
 800718a:	4614      	mov	r4, r2
 800718c:	460e      	mov	r6, r1
 800718e:	b921      	cbnz	r1, 800719a <_realloc_r+0x16>
 8007190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007194:	4611      	mov	r1, r2
 8007196:	f7ff bdad 	b.w	8006cf4 <_malloc_r>
 800719a:	b92a      	cbnz	r2, 80071a8 <_realloc_r+0x24>
 800719c:	f7ff fd3e 	bl	8006c1c <_free_r>
 80071a0:	4625      	mov	r5, r4
 80071a2:	4628      	mov	r0, r5
 80071a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a8:	f000 fc6a 	bl	8007a80 <_malloc_usable_size_r>
 80071ac:	4284      	cmp	r4, r0
 80071ae:	4607      	mov	r7, r0
 80071b0:	d802      	bhi.n	80071b8 <_realloc_r+0x34>
 80071b2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80071b6:	d812      	bhi.n	80071de <_realloc_r+0x5a>
 80071b8:	4621      	mov	r1, r4
 80071ba:	4640      	mov	r0, r8
 80071bc:	f7ff fd9a 	bl	8006cf4 <_malloc_r>
 80071c0:	4605      	mov	r5, r0
 80071c2:	2800      	cmp	r0, #0
 80071c4:	d0ed      	beq.n	80071a2 <_realloc_r+0x1e>
 80071c6:	42bc      	cmp	r4, r7
 80071c8:	4622      	mov	r2, r4
 80071ca:	4631      	mov	r1, r6
 80071cc:	bf28      	it	cs
 80071ce:	463a      	movcs	r2, r7
 80071d0:	f7ff f97c 	bl	80064cc <memcpy>
 80071d4:	4631      	mov	r1, r6
 80071d6:	4640      	mov	r0, r8
 80071d8:	f7ff fd20 	bl	8006c1c <_free_r>
 80071dc:	e7e1      	b.n	80071a2 <_realloc_r+0x1e>
 80071de:	4635      	mov	r5, r6
 80071e0:	e7df      	b.n	80071a2 <_realloc_r+0x1e>

080071e2 <__sfputc_r>:
 80071e2:	6893      	ldr	r3, [r2, #8]
 80071e4:	3b01      	subs	r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	b410      	push	{r4}
 80071ea:	6093      	str	r3, [r2, #8]
 80071ec:	da08      	bge.n	8007200 <__sfputc_r+0x1e>
 80071ee:	6994      	ldr	r4, [r2, #24]
 80071f0:	42a3      	cmp	r3, r4
 80071f2:	db01      	blt.n	80071f8 <__sfputc_r+0x16>
 80071f4:	290a      	cmp	r1, #10
 80071f6:	d103      	bne.n	8007200 <__sfputc_r+0x1e>
 80071f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80071fc:	f000 b94a 	b.w	8007494 <__swbuf_r>
 8007200:	6813      	ldr	r3, [r2, #0]
 8007202:	1c58      	adds	r0, r3, #1
 8007204:	6010      	str	r0, [r2, #0]
 8007206:	7019      	strb	r1, [r3, #0]
 8007208:	4608      	mov	r0, r1
 800720a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800720e:	4770      	bx	lr

08007210 <__sfputs_r>:
 8007210:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007212:	4606      	mov	r6, r0
 8007214:	460f      	mov	r7, r1
 8007216:	4614      	mov	r4, r2
 8007218:	18d5      	adds	r5, r2, r3
 800721a:	42ac      	cmp	r4, r5
 800721c:	d101      	bne.n	8007222 <__sfputs_r+0x12>
 800721e:	2000      	movs	r0, #0
 8007220:	e007      	b.n	8007232 <__sfputs_r+0x22>
 8007222:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007226:	463a      	mov	r2, r7
 8007228:	4630      	mov	r0, r6
 800722a:	f7ff ffda 	bl	80071e2 <__sfputc_r>
 800722e:	1c43      	adds	r3, r0, #1
 8007230:	d1f3      	bne.n	800721a <__sfputs_r+0xa>
 8007232:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007234 <_vfiprintf_r>:
 8007234:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007238:	460d      	mov	r5, r1
 800723a:	b09d      	sub	sp, #116	; 0x74
 800723c:	4614      	mov	r4, r2
 800723e:	4698      	mov	r8, r3
 8007240:	4606      	mov	r6, r0
 8007242:	b118      	cbz	r0, 800724c <_vfiprintf_r+0x18>
 8007244:	6983      	ldr	r3, [r0, #24]
 8007246:	b90b      	cbnz	r3, 800724c <_vfiprintf_r+0x18>
 8007248:	f000 fb14 	bl	8007874 <__sinit>
 800724c:	4b89      	ldr	r3, [pc, #548]	; (8007474 <_vfiprintf_r+0x240>)
 800724e:	429d      	cmp	r5, r3
 8007250:	d11b      	bne.n	800728a <_vfiprintf_r+0x56>
 8007252:	6875      	ldr	r5, [r6, #4]
 8007254:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007256:	07d9      	lsls	r1, r3, #31
 8007258:	d405      	bmi.n	8007266 <_vfiprintf_r+0x32>
 800725a:	89ab      	ldrh	r3, [r5, #12]
 800725c:	059a      	lsls	r2, r3, #22
 800725e:	d402      	bmi.n	8007266 <_vfiprintf_r+0x32>
 8007260:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007262:	f000 fba5 	bl	80079b0 <__retarget_lock_acquire_recursive>
 8007266:	89ab      	ldrh	r3, [r5, #12]
 8007268:	071b      	lsls	r3, r3, #28
 800726a:	d501      	bpl.n	8007270 <_vfiprintf_r+0x3c>
 800726c:	692b      	ldr	r3, [r5, #16]
 800726e:	b9eb      	cbnz	r3, 80072ac <_vfiprintf_r+0x78>
 8007270:	4629      	mov	r1, r5
 8007272:	4630      	mov	r0, r6
 8007274:	f000 f96e 	bl	8007554 <__swsetup_r>
 8007278:	b1c0      	cbz	r0, 80072ac <_vfiprintf_r+0x78>
 800727a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800727c:	07dc      	lsls	r4, r3, #31
 800727e:	d50e      	bpl.n	800729e <_vfiprintf_r+0x6a>
 8007280:	f04f 30ff 	mov.w	r0, #4294967295
 8007284:	b01d      	add	sp, #116	; 0x74
 8007286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728a:	4b7b      	ldr	r3, [pc, #492]	; (8007478 <_vfiprintf_r+0x244>)
 800728c:	429d      	cmp	r5, r3
 800728e:	d101      	bne.n	8007294 <_vfiprintf_r+0x60>
 8007290:	68b5      	ldr	r5, [r6, #8]
 8007292:	e7df      	b.n	8007254 <_vfiprintf_r+0x20>
 8007294:	4b79      	ldr	r3, [pc, #484]	; (800747c <_vfiprintf_r+0x248>)
 8007296:	429d      	cmp	r5, r3
 8007298:	bf08      	it	eq
 800729a:	68f5      	ldreq	r5, [r6, #12]
 800729c:	e7da      	b.n	8007254 <_vfiprintf_r+0x20>
 800729e:	89ab      	ldrh	r3, [r5, #12]
 80072a0:	0598      	lsls	r0, r3, #22
 80072a2:	d4ed      	bmi.n	8007280 <_vfiprintf_r+0x4c>
 80072a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a6:	f000 fb84 	bl	80079b2 <__retarget_lock_release_recursive>
 80072aa:	e7e9      	b.n	8007280 <_vfiprintf_r+0x4c>
 80072ac:	2300      	movs	r3, #0
 80072ae:	9309      	str	r3, [sp, #36]	; 0x24
 80072b0:	2320      	movs	r3, #32
 80072b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ba:	2330      	movs	r3, #48	; 0x30
 80072bc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007480 <_vfiprintf_r+0x24c>
 80072c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072c4:	f04f 0901 	mov.w	r9, #1
 80072c8:	4623      	mov	r3, r4
 80072ca:	469a      	mov	sl, r3
 80072cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072d0:	b10a      	cbz	r2, 80072d6 <_vfiprintf_r+0xa2>
 80072d2:	2a25      	cmp	r2, #37	; 0x25
 80072d4:	d1f9      	bne.n	80072ca <_vfiprintf_r+0x96>
 80072d6:	ebba 0b04 	subs.w	fp, sl, r4
 80072da:	d00b      	beq.n	80072f4 <_vfiprintf_r+0xc0>
 80072dc:	465b      	mov	r3, fp
 80072de:	4622      	mov	r2, r4
 80072e0:	4629      	mov	r1, r5
 80072e2:	4630      	mov	r0, r6
 80072e4:	f7ff ff94 	bl	8007210 <__sfputs_r>
 80072e8:	3001      	adds	r0, #1
 80072ea:	f000 80aa 	beq.w	8007442 <_vfiprintf_r+0x20e>
 80072ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072f0:	445a      	add	r2, fp
 80072f2:	9209      	str	r2, [sp, #36]	; 0x24
 80072f4:	f89a 3000 	ldrb.w	r3, [sl]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	f000 80a2 	beq.w	8007442 <_vfiprintf_r+0x20e>
 80072fe:	2300      	movs	r3, #0
 8007300:	f04f 32ff 	mov.w	r2, #4294967295
 8007304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007308:	f10a 0a01 	add.w	sl, sl, #1
 800730c:	9304      	str	r3, [sp, #16]
 800730e:	9307      	str	r3, [sp, #28]
 8007310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007314:	931a      	str	r3, [sp, #104]	; 0x68
 8007316:	4654      	mov	r4, sl
 8007318:	2205      	movs	r2, #5
 800731a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800731e:	4858      	ldr	r0, [pc, #352]	; (8007480 <_vfiprintf_r+0x24c>)
 8007320:	f7f8 ff5e 	bl	80001e0 <memchr>
 8007324:	9a04      	ldr	r2, [sp, #16]
 8007326:	b9d8      	cbnz	r0, 8007360 <_vfiprintf_r+0x12c>
 8007328:	06d1      	lsls	r1, r2, #27
 800732a:	bf44      	itt	mi
 800732c:	2320      	movmi	r3, #32
 800732e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007332:	0713      	lsls	r3, r2, #28
 8007334:	bf44      	itt	mi
 8007336:	232b      	movmi	r3, #43	; 0x2b
 8007338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800733c:	f89a 3000 	ldrb.w	r3, [sl]
 8007340:	2b2a      	cmp	r3, #42	; 0x2a
 8007342:	d015      	beq.n	8007370 <_vfiprintf_r+0x13c>
 8007344:	9a07      	ldr	r2, [sp, #28]
 8007346:	4654      	mov	r4, sl
 8007348:	2000      	movs	r0, #0
 800734a:	f04f 0c0a 	mov.w	ip, #10
 800734e:	4621      	mov	r1, r4
 8007350:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007354:	3b30      	subs	r3, #48	; 0x30
 8007356:	2b09      	cmp	r3, #9
 8007358:	d94e      	bls.n	80073f8 <_vfiprintf_r+0x1c4>
 800735a:	b1b0      	cbz	r0, 800738a <_vfiprintf_r+0x156>
 800735c:	9207      	str	r2, [sp, #28]
 800735e:	e014      	b.n	800738a <_vfiprintf_r+0x156>
 8007360:	eba0 0308 	sub.w	r3, r0, r8
 8007364:	fa09 f303 	lsl.w	r3, r9, r3
 8007368:	4313      	orrs	r3, r2
 800736a:	9304      	str	r3, [sp, #16]
 800736c:	46a2      	mov	sl, r4
 800736e:	e7d2      	b.n	8007316 <_vfiprintf_r+0xe2>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	1d19      	adds	r1, r3, #4
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	9103      	str	r1, [sp, #12]
 8007378:	2b00      	cmp	r3, #0
 800737a:	bfbb      	ittet	lt
 800737c:	425b      	neglt	r3, r3
 800737e:	f042 0202 	orrlt.w	r2, r2, #2
 8007382:	9307      	strge	r3, [sp, #28]
 8007384:	9307      	strlt	r3, [sp, #28]
 8007386:	bfb8      	it	lt
 8007388:	9204      	strlt	r2, [sp, #16]
 800738a:	7823      	ldrb	r3, [r4, #0]
 800738c:	2b2e      	cmp	r3, #46	; 0x2e
 800738e:	d10c      	bne.n	80073aa <_vfiprintf_r+0x176>
 8007390:	7863      	ldrb	r3, [r4, #1]
 8007392:	2b2a      	cmp	r3, #42	; 0x2a
 8007394:	d135      	bne.n	8007402 <_vfiprintf_r+0x1ce>
 8007396:	9b03      	ldr	r3, [sp, #12]
 8007398:	1d1a      	adds	r2, r3, #4
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	9203      	str	r2, [sp, #12]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	bfb8      	it	lt
 80073a2:	f04f 33ff 	movlt.w	r3, #4294967295
 80073a6:	3402      	adds	r4, #2
 80073a8:	9305      	str	r3, [sp, #20]
 80073aa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007490 <_vfiprintf_r+0x25c>
 80073ae:	7821      	ldrb	r1, [r4, #0]
 80073b0:	2203      	movs	r2, #3
 80073b2:	4650      	mov	r0, sl
 80073b4:	f7f8 ff14 	bl	80001e0 <memchr>
 80073b8:	b140      	cbz	r0, 80073cc <_vfiprintf_r+0x198>
 80073ba:	2340      	movs	r3, #64	; 0x40
 80073bc:	eba0 000a 	sub.w	r0, r0, sl
 80073c0:	fa03 f000 	lsl.w	r0, r3, r0
 80073c4:	9b04      	ldr	r3, [sp, #16]
 80073c6:	4303      	orrs	r3, r0
 80073c8:	3401      	adds	r4, #1
 80073ca:	9304      	str	r3, [sp, #16]
 80073cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073d0:	482c      	ldr	r0, [pc, #176]	; (8007484 <_vfiprintf_r+0x250>)
 80073d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073d6:	2206      	movs	r2, #6
 80073d8:	f7f8 ff02 	bl	80001e0 <memchr>
 80073dc:	2800      	cmp	r0, #0
 80073de:	d03f      	beq.n	8007460 <_vfiprintf_r+0x22c>
 80073e0:	4b29      	ldr	r3, [pc, #164]	; (8007488 <_vfiprintf_r+0x254>)
 80073e2:	bb1b      	cbnz	r3, 800742c <_vfiprintf_r+0x1f8>
 80073e4:	9b03      	ldr	r3, [sp, #12]
 80073e6:	3307      	adds	r3, #7
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	3308      	adds	r3, #8
 80073ee:	9303      	str	r3, [sp, #12]
 80073f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073f2:	443b      	add	r3, r7
 80073f4:	9309      	str	r3, [sp, #36]	; 0x24
 80073f6:	e767      	b.n	80072c8 <_vfiprintf_r+0x94>
 80073f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80073fc:	460c      	mov	r4, r1
 80073fe:	2001      	movs	r0, #1
 8007400:	e7a5      	b.n	800734e <_vfiprintf_r+0x11a>
 8007402:	2300      	movs	r3, #0
 8007404:	3401      	adds	r4, #1
 8007406:	9305      	str	r3, [sp, #20]
 8007408:	4619      	mov	r1, r3
 800740a:	f04f 0c0a 	mov.w	ip, #10
 800740e:	4620      	mov	r0, r4
 8007410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007414:	3a30      	subs	r2, #48	; 0x30
 8007416:	2a09      	cmp	r2, #9
 8007418:	d903      	bls.n	8007422 <_vfiprintf_r+0x1ee>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0c5      	beq.n	80073aa <_vfiprintf_r+0x176>
 800741e:	9105      	str	r1, [sp, #20]
 8007420:	e7c3      	b.n	80073aa <_vfiprintf_r+0x176>
 8007422:	fb0c 2101 	mla	r1, ip, r1, r2
 8007426:	4604      	mov	r4, r0
 8007428:	2301      	movs	r3, #1
 800742a:	e7f0      	b.n	800740e <_vfiprintf_r+0x1da>
 800742c:	ab03      	add	r3, sp, #12
 800742e:	9300      	str	r3, [sp, #0]
 8007430:	462a      	mov	r2, r5
 8007432:	4b16      	ldr	r3, [pc, #88]	; (800748c <_vfiprintf_r+0x258>)
 8007434:	a904      	add	r1, sp, #16
 8007436:	4630      	mov	r0, r6
 8007438:	f7fd fdaa 	bl	8004f90 <_printf_float>
 800743c:	4607      	mov	r7, r0
 800743e:	1c78      	adds	r0, r7, #1
 8007440:	d1d6      	bne.n	80073f0 <_vfiprintf_r+0x1bc>
 8007442:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007444:	07d9      	lsls	r1, r3, #31
 8007446:	d405      	bmi.n	8007454 <_vfiprintf_r+0x220>
 8007448:	89ab      	ldrh	r3, [r5, #12]
 800744a:	059a      	lsls	r2, r3, #22
 800744c:	d402      	bmi.n	8007454 <_vfiprintf_r+0x220>
 800744e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007450:	f000 faaf 	bl	80079b2 <__retarget_lock_release_recursive>
 8007454:	89ab      	ldrh	r3, [r5, #12]
 8007456:	065b      	lsls	r3, r3, #25
 8007458:	f53f af12 	bmi.w	8007280 <_vfiprintf_r+0x4c>
 800745c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745e:	e711      	b.n	8007284 <_vfiprintf_r+0x50>
 8007460:	ab03      	add	r3, sp, #12
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	462a      	mov	r2, r5
 8007466:	4b09      	ldr	r3, [pc, #36]	; (800748c <_vfiprintf_r+0x258>)
 8007468:	a904      	add	r1, sp, #16
 800746a:	4630      	mov	r0, r6
 800746c:	f7fe f834 	bl	80054d8 <_printf_i>
 8007470:	e7e4      	b.n	800743c <_vfiprintf_r+0x208>
 8007472:	bf00      	nop
 8007474:	0800840c 	.word	0x0800840c
 8007478:	0800842c 	.word	0x0800842c
 800747c:	080083ec 	.word	0x080083ec
 8007480:	08008294 	.word	0x08008294
 8007484:	0800829e 	.word	0x0800829e
 8007488:	08004f91 	.word	0x08004f91
 800748c:	08007211 	.word	0x08007211
 8007490:	0800829a 	.word	0x0800829a

08007494 <__swbuf_r>:
 8007494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007496:	460e      	mov	r6, r1
 8007498:	4614      	mov	r4, r2
 800749a:	4605      	mov	r5, r0
 800749c:	b118      	cbz	r0, 80074a6 <__swbuf_r+0x12>
 800749e:	6983      	ldr	r3, [r0, #24]
 80074a0:	b90b      	cbnz	r3, 80074a6 <__swbuf_r+0x12>
 80074a2:	f000 f9e7 	bl	8007874 <__sinit>
 80074a6:	4b21      	ldr	r3, [pc, #132]	; (800752c <__swbuf_r+0x98>)
 80074a8:	429c      	cmp	r4, r3
 80074aa:	d12b      	bne.n	8007504 <__swbuf_r+0x70>
 80074ac:	686c      	ldr	r4, [r5, #4]
 80074ae:	69a3      	ldr	r3, [r4, #24]
 80074b0:	60a3      	str	r3, [r4, #8]
 80074b2:	89a3      	ldrh	r3, [r4, #12]
 80074b4:	071a      	lsls	r2, r3, #28
 80074b6:	d52f      	bpl.n	8007518 <__swbuf_r+0x84>
 80074b8:	6923      	ldr	r3, [r4, #16]
 80074ba:	b36b      	cbz	r3, 8007518 <__swbuf_r+0x84>
 80074bc:	6923      	ldr	r3, [r4, #16]
 80074be:	6820      	ldr	r0, [r4, #0]
 80074c0:	1ac0      	subs	r0, r0, r3
 80074c2:	6963      	ldr	r3, [r4, #20]
 80074c4:	b2f6      	uxtb	r6, r6
 80074c6:	4283      	cmp	r3, r0
 80074c8:	4637      	mov	r7, r6
 80074ca:	dc04      	bgt.n	80074d6 <__swbuf_r+0x42>
 80074cc:	4621      	mov	r1, r4
 80074ce:	4628      	mov	r0, r5
 80074d0:	f000 f93c 	bl	800774c <_fflush_r>
 80074d4:	bb30      	cbnz	r0, 8007524 <__swbuf_r+0x90>
 80074d6:	68a3      	ldr	r3, [r4, #8]
 80074d8:	3b01      	subs	r3, #1
 80074da:	60a3      	str	r3, [r4, #8]
 80074dc:	6823      	ldr	r3, [r4, #0]
 80074de:	1c5a      	adds	r2, r3, #1
 80074e0:	6022      	str	r2, [r4, #0]
 80074e2:	701e      	strb	r6, [r3, #0]
 80074e4:	6963      	ldr	r3, [r4, #20]
 80074e6:	3001      	adds	r0, #1
 80074e8:	4283      	cmp	r3, r0
 80074ea:	d004      	beq.n	80074f6 <__swbuf_r+0x62>
 80074ec:	89a3      	ldrh	r3, [r4, #12]
 80074ee:	07db      	lsls	r3, r3, #31
 80074f0:	d506      	bpl.n	8007500 <__swbuf_r+0x6c>
 80074f2:	2e0a      	cmp	r6, #10
 80074f4:	d104      	bne.n	8007500 <__swbuf_r+0x6c>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4628      	mov	r0, r5
 80074fa:	f000 f927 	bl	800774c <_fflush_r>
 80074fe:	b988      	cbnz	r0, 8007524 <__swbuf_r+0x90>
 8007500:	4638      	mov	r0, r7
 8007502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007504:	4b0a      	ldr	r3, [pc, #40]	; (8007530 <__swbuf_r+0x9c>)
 8007506:	429c      	cmp	r4, r3
 8007508:	d101      	bne.n	800750e <__swbuf_r+0x7a>
 800750a:	68ac      	ldr	r4, [r5, #8]
 800750c:	e7cf      	b.n	80074ae <__swbuf_r+0x1a>
 800750e:	4b09      	ldr	r3, [pc, #36]	; (8007534 <__swbuf_r+0xa0>)
 8007510:	429c      	cmp	r4, r3
 8007512:	bf08      	it	eq
 8007514:	68ec      	ldreq	r4, [r5, #12]
 8007516:	e7ca      	b.n	80074ae <__swbuf_r+0x1a>
 8007518:	4621      	mov	r1, r4
 800751a:	4628      	mov	r0, r5
 800751c:	f000 f81a 	bl	8007554 <__swsetup_r>
 8007520:	2800      	cmp	r0, #0
 8007522:	d0cb      	beq.n	80074bc <__swbuf_r+0x28>
 8007524:	f04f 37ff 	mov.w	r7, #4294967295
 8007528:	e7ea      	b.n	8007500 <__swbuf_r+0x6c>
 800752a:	bf00      	nop
 800752c:	0800840c 	.word	0x0800840c
 8007530:	0800842c 	.word	0x0800842c
 8007534:	080083ec 	.word	0x080083ec

08007538 <__ascii_wctomb>:
 8007538:	b149      	cbz	r1, 800754e <__ascii_wctomb+0x16>
 800753a:	2aff      	cmp	r2, #255	; 0xff
 800753c:	bf85      	ittet	hi
 800753e:	238a      	movhi	r3, #138	; 0x8a
 8007540:	6003      	strhi	r3, [r0, #0]
 8007542:	700a      	strbls	r2, [r1, #0]
 8007544:	f04f 30ff 	movhi.w	r0, #4294967295
 8007548:	bf98      	it	ls
 800754a:	2001      	movls	r0, #1
 800754c:	4770      	bx	lr
 800754e:	4608      	mov	r0, r1
 8007550:	4770      	bx	lr
	...

08007554 <__swsetup_r>:
 8007554:	4b32      	ldr	r3, [pc, #200]	; (8007620 <__swsetup_r+0xcc>)
 8007556:	b570      	push	{r4, r5, r6, lr}
 8007558:	681d      	ldr	r5, [r3, #0]
 800755a:	4606      	mov	r6, r0
 800755c:	460c      	mov	r4, r1
 800755e:	b125      	cbz	r5, 800756a <__swsetup_r+0x16>
 8007560:	69ab      	ldr	r3, [r5, #24]
 8007562:	b913      	cbnz	r3, 800756a <__swsetup_r+0x16>
 8007564:	4628      	mov	r0, r5
 8007566:	f000 f985 	bl	8007874 <__sinit>
 800756a:	4b2e      	ldr	r3, [pc, #184]	; (8007624 <__swsetup_r+0xd0>)
 800756c:	429c      	cmp	r4, r3
 800756e:	d10f      	bne.n	8007590 <__swsetup_r+0x3c>
 8007570:	686c      	ldr	r4, [r5, #4]
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007578:	0719      	lsls	r1, r3, #28
 800757a:	d42c      	bmi.n	80075d6 <__swsetup_r+0x82>
 800757c:	06dd      	lsls	r5, r3, #27
 800757e:	d411      	bmi.n	80075a4 <__swsetup_r+0x50>
 8007580:	2309      	movs	r3, #9
 8007582:	6033      	str	r3, [r6, #0]
 8007584:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007588:	81a3      	strh	r3, [r4, #12]
 800758a:	f04f 30ff 	mov.w	r0, #4294967295
 800758e:	e03e      	b.n	800760e <__swsetup_r+0xba>
 8007590:	4b25      	ldr	r3, [pc, #148]	; (8007628 <__swsetup_r+0xd4>)
 8007592:	429c      	cmp	r4, r3
 8007594:	d101      	bne.n	800759a <__swsetup_r+0x46>
 8007596:	68ac      	ldr	r4, [r5, #8]
 8007598:	e7eb      	b.n	8007572 <__swsetup_r+0x1e>
 800759a:	4b24      	ldr	r3, [pc, #144]	; (800762c <__swsetup_r+0xd8>)
 800759c:	429c      	cmp	r4, r3
 800759e:	bf08      	it	eq
 80075a0:	68ec      	ldreq	r4, [r5, #12]
 80075a2:	e7e6      	b.n	8007572 <__swsetup_r+0x1e>
 80075a4:	0758      	lsls	r0, r3, #29
 80075a6:	d512      	bpl.n	80075ce <__swsetup_r+0x7a>
 80075a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80075aa:	b141      	cbz	r1, 80075be <__swsetup_r+0x6a>
 80075ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80075b0:	4299      	cmp	r1, r3
 80075b2:	d002      	beq.n	80075ba <__swsetup_r+0x66>
 80075b4:	4630      	mov	r0, r6
 80075b6:	f7ff fb31 	bl	8006c1c <_free_r>
 80075ba:	2300      	movs	r3, #0
 80075bc:	6363      	str	r3, [r4, #52]	; 0x34
 80075be:	89a3      	ldrh	r3, [r4, #12]
 80075c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80075c4:	81a3      	strh	r3, [r4, #12]
 80075c6:	2300      	movs	r3, #0
 80075c8:	6063      	str	r3, [r4, #4]
 80075ca:	6923      	ldr	r3, [r4, #16]
 80075cc:	6023      	str	r3, [r4, #0]
 80075ce:	89a3      	ldrh	r3, [r4, #12]
 80075d0:	f043 0308 	orr.w	r3, r3, #8
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	6923      	ldr	r3, [r4, #16]
 80075d8:	b94b      	cbnz	r3, 80075ee <__swsetup_r+0x9a>
 80075da:	89a3      	ldrh	r3, [r4, #12]
 80075dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80075e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075e4:	d003      	beq.n	80075ee <__swsetup_r+0x9a>
 80075e6:	4621      	mov	r1, r4
 80075e8:	4630      	mov	r0, r6
 80075ea:	f000 fa09 	bl	8007a00 <__smakebuf_r>
 80075ee:	89a0      	ldrh	r0, [r4, #12]
 80075f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80075f4:	f010 0301 	ands.w	r3, r0, #1
 80075f8:	d00a      	beq.n	8007610 <__swsetup_r+0xbc>
 80075fa:	2300      	movs	r3, #0
 80075fc:	60a3      	str	r3, [r4, #8]
 80075fe:	6963      	ldr	r3, [r4, #20]
 8007600:	425b      	negs	r3, r3
 8007602:	61a3      	str	r3, [r4, #24]
 8007604:	6923      	ldr	r3, [r4, #16]
 8007606:	b943      	cbnz	r3, 800761a <__swsetup_r+0xc6>
 8007608:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800760c:	d1ba      	bne.n	8007584 <__swsetup_r+0x30>
 800760e:	bd70      	pop	{r4, r5, r6, pc}
 8007610:	0781      	lsls	r1, r0, #30
 8007612:	bf58      	it	pl
 8007614:	6963      	ldrpl	r3, [r4, #20]
 8007616:	60a3      	str	r3, [r4, #8]
 8007618:	e7f4      	b.n	8007604 <__swsetup_r+0xb0>
 800761a:	2000      	movs	r0, #0
 800761c:	e7f7      	b.n	800760e <__swsetup_r+0xba>
 800761e:	bf00      	nop
 8007620:	2000000c 	.word	0x2000000c
 8007624:	0800840c 	.word	0x0800840c
 8007628:	0800842c 	.word	0x0800842c
 800762c:	080083ec 	.word	0x080083ec

08007630 <abort>:
 8007630:	b508      	push	{r3, lr}
 8007632:	2006      	movs	r0, #6
 8007634:	f000 fa54 	bl	8007ae0 <raise>
 8007638:	2001      	movs	r0, #1
 800763a:	f7fa f803 	bl	8001644 <_exit>
	...

08007640 <__sflush_r>:
 8007640:	898a      	ldrh	r2, [r1, #12]
 8007642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007646:	4605      	mov	r5, r0
 8007648:	0710      	lsls	r0, r2, #28
 800764a:	460c      	mov	r4, r1
 800764c:	d458      	bmi.n	8007700 <__sflush_r+0xc0>
 800764e:	684b      	ldr	r3, [r1, #4]
 8007650:	2b00      	cmp	r3, #0
 8007652:	dc05      	bgt.n	8007660 <__sflush_r+0x20>
 8007654:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007656:	2b00      	cmp	r3, #0
 8007658:	dc02      	bgt.n	8007660 <__sflush_r+0x20>
 800765a:	2000      	movs	r0, #0
 800765c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007660:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007662:	2e00      	cmp	r6, #0
 8007664:	d0f9      	beq.n	800765a <__sflush_r+0x1a>
 8007666:	2300      	movs	r3, #0
 8007668:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800766c:	682f      	ldr	r7, [r5, #0]
 800766e:	602b      	str	r3, [r5, #0]
 8007670:	d032      	beq.n	80076d8 <__sflush_r+0x98>
 8007672:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007674:	89a3      	ldrh	r3, [r4, #12]
 8007676:	075a      	lsls	r2, r3, #29
 8007678:	d505      	bpl.n	8007686 <__sflush_r+0x46>
 800767a:	6863      	ldr	r3, [r4, #4]
 800767c:	1ac0      	subs	r0, r0, r3
 800767e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007680:	b10b      	cbz	r3, 8007686 <__sflush_r+0x46>
 8007682:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007684:	1ac0      	subs	r0, r0, r3
 8007686:	2300      	movs	r3, #0
 8007688:	4602      	mov	r2, r0
 800768a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800768c:	6a21      	ldr	r1, [r4, #32]
 800768e:	4628      	mov	r0, r5
 8007690:	47b0      	blx	r6
 8007692:	1c43      	adds	r3, r0, #1
 8007694:	89a3      	ldrh	r3, [r4, #12]
 8007696:	d106      	bne.n	80076a6 <__sflush_r+0x66>
 8007698:	6829      	ldr	r1, [r5, #0]
 800769a:	291d      	cmp	r1, #29
 800769c:	d82c      	bhi.n	80076f8 <__sflush_r+0xb8>
 800769e:	4a2a      	ldr	r2, [pc, #168]	; (8007748 <__sflush_r+0x108>)
 80076a0:	40ca      	lsrs	r2, r1
 80076a2:	07d6      	lsls	r6, r2, #31
 80076a4:	d528      	bpl.n	80076f8 <__sflush_r+0xb8>
 80076a6:	2200      	movs	r2, #0
 80076a8:	6062      	str	r2, [r4, #4]
 80076aa:	04d9      	lsls	r1, r3, #19
 80076ac:	6922      	ldr	r2, [r4, #16]
 80076ae:	6022      	str	r2, [r4, #0]
 80076b0:	d504      	bpl.n	80076bc <__sflush_r+0x7c>
 80076b2:	1c42      	adds	r2, r0, #1
 80076b4:	d101      	bne.n	80076ba <__sflush_r+0x7a>
 80076b6:	682b      	ldr	r3, [r5, #0]
 80076b8:	b903      	cbnz	r3, 80076bc <__sflush_r+0x7c>
 80076ba:	6560      	str	r0, [r4, #84]	; 0x54
 80076bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076be:	602f      	str	r7, [r5, #0]
 80076c0:	2900      	cmp	r1, #0
 80076c2:	d0ca      	beq.n	800765a <__sflush_r+0x1a>
 80076c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076c8:	4299      	cmp	r1, r3
 80076ca:	d002      	beq.n	80076d2 <__sflush_r+0x92>
 80076cc:	4628      	mov	r0, r5
 80076ce:	f7ff faa5 	bl	8006c1c <_free_r>
 80076d2:	2000      	movs	r0, #0
 80076d4:	6360      	str	r0, [r4, #52]	; 0x34
 80076d6:	e7c1      	b.n	800765c <__sflush_r+0x1c>
 80076d8:	6a21      	ldr	r1, [r4, #32]
 80076da:	2301      	movs	r3, #1
 80076dc:	4628      	mov	r0, r5
 80076de:	47b0      	blx	r6
 80076e0:	1c41      	adds	r1, r0, #1
 80076e2:	d1c7      	bne.n	8007674 <__sflush_r+0x34>
 80076e4:	682b      	ldr	r3, [r5, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d0c4      	beq.n	8007674 <__sflush_r+0x34>
 80076ea:	2b1d      	cmp	r3, #29
 80076ec:	d001      	beq.n	80076f2 <__sflush_r+0xb2>
 80076ee:	2b16      	cmp	r3, #22
 80076f0:	d101      	bne.n	80076f6 <__sflush_r+0xb6>
 80076f2:	602f      	str	r7, [r5, #0]
 80076f4:	e7b1      	b.n	800765a <__sflush_r+0x1a>
 80076f6:	89a3      	ldrh	r3, [r4, #12]
 80076f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076fc:	81a3      	strh	r3, [r4, #12]
 80076fe:	e7ad      	b.n	800765c <__sflush_r+0x1c>
 8007700:	690f      	ldr	r7, [r1, #16]
 8007702:	2f00      	cmp	r7, #0
 8007704:	d0a9      	beq.n	800765a <__sflush_r+0x1a>
 8007706:	0793      	lsls	r3, r2, #30
 8007708:	680e      	ldr	r6, [r1, #0]
 800770a:	bf08      	it	eq
 800770c:	694b      	ldreq	r3, [r1, #20]
 800770e:	600f      	str	r7, [r1, #0]
 8007710:	bf18      	it	ne
 8007712:	2300      	movne	r3, #0
 8007714:	eba6 0807 	sub.w	r8, r6, r7
 8007718:	608b      	str	r3, [r1, #8]
 800771a:	f1b8 0f00 	cmp.w	r8, #0
 800771e:	dd9c      	ble.n	800765a <__sflush_r+0x1a>
 8007720:	6a21      	ldr	r1, [r4, #32]
 8007722:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007724:	4643      	mov	r3, r8
 8007726:	463a      	mov	r2, r7
 8007728:	4628      	mov	r0, r5
 800772a:	47b0      	blx	r6
 800772c:	2800      	cmp	r0, #0
 800772e:	dc06      	bgt.n	800773e <__sflush_r+0xfe>
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007736:	81a3      	strh	r3, [r4, #12]
 8007738:	f04f 30ff 	mov.w	r0, #4294967295
 800773c:	e78e      	b.n	800765c <__sflush_r+0x1c>
 800773e:	4407      	add	r7, r0
 8007740:	eba8 0800 	sub.w	r8, r8, r0
 8007744:	e7e9      	b.n	800771a <__sflush_r+0xda>
 8007746:	bf00      	nop
 8007748:	20400001 	.word	0x20400001

0800774c <_fflush_r>:
 800774c:	b538      	push	{r3, r4, r5, lr}
 800774e:	690b      	ldr	r3, [r1, #16]
 8007750:	4605      	mov	r5, r0
 8007752:	460c      	mov	r4, r1
 8007754:	b913      	cbnz	r3, 800775c <_fflush_r+0x10>
 8007756:	2500      	movs	r5, #0
 8007758:	4628      	mov	r0, r5
 800775a:	bd38      	pop	{r3, r4, r5, pc}
 800775c:	b118      	cbz	r0, 8007766 <_fflush_r+0x1a>
 800775e:	6983      	ldr	r3, [r0, #24]
 8007760:	b90b      	cbnz	r3, 8007766 <_fflush_r+0x1a>
 8007762:	f000 f887 	bl	8007874 <__sinit>
 8007766:	4b14      	ldr	r3, [pc, #80]	; (80077b8 <_fflush_r+0x6c>)
 8007768:	429c      	cmp	r4, r3
 800776a:	d11b      	bne.n	80077a4 <_fflush_r+0x58>
 800776c:	686c      	ldr	r4, [r5, #4]
 800776e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d0ef      	beq.n	8007756 <_fflush_r+0xa>
 8007776:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007778:	07d0      	lsls	r0, r2, #31
 800777a:	d404      	bmi.n	8007786 <_fflush_r+0x3a>
 800777c:	0599      	lsls	r1, r3, #22
 800777e:	d402      	bmi.n	8007786 <_fflush_r+0x3a>
 8007780:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007782:	f000 f915 	bl	80079b0 <__retarget_lock_acquire_recursive>
 8007786:	4628      	mov	r0, r5
 8007788:	4621      	mov	r1, r4
 800778a:	f7ff ff59 	bl	8007640 <__sflush_r>
 800778e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007790:	07da      	lsls	r2, r3, #31
 8007792:	4605      	mov	r5, r0
 8007794:	d4e0      	bmi.n	8007758 <_fflush_r+0xc>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	059b      	lsls	r3, r3, #22
 800779a:	d4dd      	bmi.n	8007758 <_fflush_r+0xc>
 800779c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800779e:	f000 f908 	bl	80079b2 <__retarget_lock_release_recursive>
 80077a2:	e7d9      	b.n	8007758 <_fflush_r+0xc>
 80077a4:	4b05      	ldr	r3, [pc, #20]	; (80077bc <_fflush_r+0x70>)
 80077a6:	429c      	cmp	r4, r3
 80077a8:	d101      	bne.n	80077ae <_fflush_r+0x62>
 80077aa:	68ac      	ldr	r4, [r5, #8]
 80077ac:	e7df      	b.n	800776e <_fflush_r+0x22>
 80077ae:	4b04      	ldr	r3, [pc, #16]	; (80077c0 <_fflush_r+0x74>)
 80077b0:	429c      	cmp	r4, r3
 80077b2:	bf08      	it	eq
 80077b4:	68ec      	ldreq	r4, [r5, #12]
 80077b6:	e7da      	b.n	800776e <_fflush_r+0x22>
 80077b8:	0800840c 	.word	0x0800840c
 80077bc:	0800842c 	.word	0x0800842c
 80077c0:	080083ec 	.word	0x080083ec

080077c4 <std>:
 80077c4:	2300      	movs	r3, #0
 80077c6:	b510      	push	{r4, lr}
 80077c8:	4604      	mov	r4, r0
 80077ca:	e9c0 3300 	strd	r3, r3, [r0]
 80077ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077d2:	6083      	str	r3, [r0, #8]
 80077d4:	8181      	strh	r1, [r0, #12]
 80077d6:	6643      	str	r3, [r0, #100]	; 0x64
 80077d8:	81c2      	strh	r2, [r0, #14]
 80077da:	6183      	str	r3, [r0, #24]
 80077dc:	4619      	mov	r1, r3
 80077de:	2208      	movs	r2, #8
 80077e0:	305c      	adds	r0, #92	; 0x5c
 80077e2:	f7fd fb2d 	bl	8004e40 <memset>
 80077e6:	4b05      	ldr	r3, [pc, #20]	; (80077fc <std+0x38>)
 80077e8:	6263      	str	r3, [r4, #36]	; 0x24
 80077ea:	4b05      	ldr	r3, [pc, #20]	; (8007800 <std+0x3c>)
 80077ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80077ee:	4b05      	ldr	r3, [pc, #20]	; (8007804 <std+0x40>)
 80077f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077f2:	4b05      	ldr	r3, [pc, #20]	; (8007808 <std+0x44>)
 80077f4:	6224      	str	r4, [r4, #32]
 80077f6:	6323      	str	r3, [r4, #48]	; 0x30
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	bf00      	nop
 80077fc:	08007b19 	.word	0x08007b19
 8007800:	08007b3b 	.word	0x08007b3b
 8007804:	08007b73 	.word	0x08007b73
 8007808:	08007b97 	.word	0x08007b97

0800780c <_cleanup_r>:
 800780c:	4901      	ldr	r1, [pc, #4]	; (8007814 <_cleanup_r+0x8>)
 800780e:	f000 b8af 	b.w	8007970 <_fwalk_reent>
 8007812:	bf00      	nop
 8007814:	0800774d 	.word	0x0800774d

08007818 <__sfmoreglue>:
 8007818:	b570      	push	{r4, r5, r6, lr}
 800781a:	2268      	movs	r2, #104	; 0x68
 800781c:	1e4d      	subs	r5, r1, #1
 800781e:	4355      	muls	r5, r2
 8007820:	460e      	mov	r6, r1
 8007822:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007826:	f7ff fa65 	bl	8006cf4 <_malloc_r>
 800782a:	4604      	mov	r4, r0
 800782c:	b140      	cbz	r0, 8007840 <__sfmoreglue+0x28>
 800782e:	2100      	movs	r1, #0
 8007830:	e9c0 1600 	strd	r1, r6, [r0]
 8007834:	300c      	adds	r0, #12
 8007836:	60a0      	str	r0, [r4, #8]
 8007838:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800783c:	f7fd fb00 	bl	8004e40 <memset>
 8007840:	4620      	mov	r0, r4
 8007842:	bd70      	pop	{r4, r5, r6, pc}

08007844 <__sfp_lock_acquire>:
 8007844:	4801      	ldr	r0, [pc, #4]	; (800784c <__sfp_lock_acquire+0x8>)
 8007846:	f000 b8b3 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 800784a:	bf00      	nop
 800784c:	20000361 	.word	0x20000361

08007850 <__sfp_lock_release>:
 8007850:	4801      	ldr	r0, [pc, #4]	; (8007858 <__sfp_lock_release+0x8>)
 8007852:	f000 b8ae 	b.w	80079b2 <__retarget_lock_release_recursive>
 8007856:	bf00      	nop
 8007858:	20000361 	.word	0x20000361

0800785c <__sinit_lock_acquire>:
 800785c:	4801      	ldr	r0, [pc, #4]	; (8007864 <__sinit_lock_acquire+0x8>)
 800785e:	f000 b8a7 	b.w	80079b0 <__retarget_lock_acquire_recursive>
 8007862:	bf00      	nop
 8007864:	20000362 	.word	0x20000362

08007868 <__sinit_lock_release>:
 8007868:	4801      	ldr	r0, [pc, #4]	; (8007870 <__sinit_lock_release+0x8>)
 800786a:	f000 b8a2 	b.w	80079b2 <__retarget_lock_release_recursive>
 800786e:	bf00      	nop
 8007870:	20000362 	.word	0x20000362

08007874 <__sinit>:
 8007874:	b510      	push	{r4, lr}
 8007876:	4604      	mov	r4, r0
 8007878:	f7ff fff0 	bl	800785c <__sinit_lock_acquire>
 800787c:	69a3      	ldr	r3, [r4, #24]
 800787e:	b11b      	cbz	r3, 8007888 <__sinit+0x14>
 8007880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007884:	f7ff bff0 	b.w	8007868 <__sinit_lock_release>
 8007888:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800788c:	6523      	str	r3, [r4, #80]	; 0x50
 800788e:	4b13      	ldr	r3, [pc, #76]	; (80078dc <__sinit+0x68>)
 8007890:	4a13      	ldr	r2, [pc, #76]	; (80078e0 <__sinit+0x6c>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	62a2      	str	r2, [r4, #40]	; 0x28
 8007896:	42a3      	cmp	r3, r4
 8007898:	bf04      	itt	eq
 800789a:	2301      	moveq	r3, #1
 800789c:	61a3      	streq	r3, [r4, #24]
 800789e:	4620      	mov	r0, r4
 80078a0:	f000 f820 	bl	80078e4 <__sfp>
 80078a4:	6060      	str	r0, [r4, #4]
 80078a6:	4620      	mov	r0, r4
 80078a8:	f000 f81c 	bl	80078e4 <__sfp>
 80078ac:	60a0      	str	r0, [r4, #8]
 80078ae:	4620      	mov	r0, r4
 80078b0:	f000 f818 	bl	80078e4 <__sfp>
 80078b4:	2200      	movs	r2, #0
 80078b6:	60e0      	str	r0, [r4, #12]
 80078b8:	2104      	movs	r1, #4
 80078ba:	6860      	ldr	r0, [r4, #4]
 80078bc:	f7ff ff82 	bl	80077c4 <std>
 80078c0:	68a0      	ldr	r0, [r4, #8]
 80078c2:	2201      	movs	r2, #1
 80078c4:	2109      	movs	r1, #9
 80078c6:	f7ff ff7d 	bl	80077c4 <std>
 80078ca:	68e0      	ldr	r0, [r4, #12]
 80078cc:	2202      	movs	r2, #2
 80078ce:	2112      	movs	r1, #18
 80078d0:	f7ff ff78 	bl	80077c4 <std>
 80078d4:	2301      	movs	r3, #1
 80078d6:	61a3      	str	r3, [r4, #24]
 80078d8:	e7d2      	b.n	8007880 <__sinit+0xc>
 80078da:	bf00      	nop
 80078dc:	08008074 	.word	0x08008074
 80078e0:	0800780d 	.word	0x0800780d

080078e4 <__sfp>:
 80078e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078e6:	4607      	mov	r7, r0
 80078e8:	f7ff ffac 	bl	8007844 <__sfp_lock_acquire>
 80078ec:	4b1e      	ldr	r3, [pc, #120]	; (8007968 <__sfp+0x84>)
 80078ee:	681e      	ldr	r6, [r3, #0]
 80078f0:	69b3      	ldr	r3, [r6, #24]
 80078f2:	b913      	cbnz	r3, 80078fa <__sfp+0x16>
 80078f4:	4630      	mov	r0, r6
 80078f6:	f7ff ffbd 	bl	8007874 <__sinit>
 80078fa:	3648      	adds	r6, #72	; 0x48
 80078fc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007900:	3b01      	subs	r3, #1
 8007902:	d503      	bpl.n	800790c <__sfp+0x28>
 8007904:	6833      	ldr	r3, [r6, #0]
 8007906:	b30b      	cbz	r3, 800794c <__sfp+0x68>
 8007908:	6836      	ldr	r6, [r6, #0]
 800790a:	e7f7      	b.n	80078fc <__sfp+0x18>
 800790c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007910:	b9d5      	cbnz	r5, 8007948 <__sfp+0x64>
 8007912:	4b16      	ldr	r3, [pc, #88]	; (800796c <__sfp+0x88>)
 8007914:	60e3      	str	r3, [r4, #12]
 8007916:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800791a:	6665      	str	r5, [r4, #100]	; 0x64
 800791c:	f000 f847 	bl	80079ae <__retarget_lock_init_recursive>
 8007920:	f7ff ff96 	bl	8007850 <__sfp_lock_release>
 8007924:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007928:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800792c:	6025      	str	r5, [r4, #0]
 800792e:	61a5      	str	r5, [r4, #24]
 8007930:	2208      	movs	r2, #8
 8007932:	4629      	mov	r1, r5
 8007934:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007938:	f7fd fa82 	bl	8004e40 <memset>
 800793c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007940:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007944:	4620      	mov	r0, r4
 8007946:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007948:	3468      	adds	r4, #104	; 0x68
 800794a:	e7d9      	b.n	8007900 <__sfp+0x1c>
 800794c:	2104      	movs	r1, #4
 800794e:	4638      	mov	r0, r7
 8007950:	f7ff ff62 	bl	8007818 <__sfmoreglue>
 8007954:	4604      	mov	r4, r0
 8007956:	6030      	str	r0, [r6, #0]
 8007958:	2800      	cmp	r0, #0
 800795a:	d1d5      	bne.n	8007908 <__sfp+0x24>
 800795c:	f7ff ff78 	bl	8007850 <__sfp_lock_release>
 8007960:	230c      	movs	r3, #12
 8007962:	603b      	str	r3, [r7, #0]
 8007964:	e7ee      	b.n	8007944 <__sfp+0x60>
 8007966:	bf00      	nop
 8007968:	08008074 	.word	0x08008074
 800796c:	ffff0001 	.word	0xffff0001

08007970 <_fwalk_reent>:
 8007970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007974:	4606      	mov	r6, r0
 8007976:	4688      	mov	r8, r1
 8007978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800797c:	2700      	movs	r7, #0
 800797e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007982:	f1b9 0901 	subs.w	r9, r9, #1
 8007986:	d505      	bpl.n	8007994 <_fwalk_reent+0x24>
 8007988:	6824      	ldr	r4, [r4, #0]
 800798a:	2c00      	cmp	r4, #0
 800798c:	d1f7      	bne.n	800797e <_fwalk_reent+0xe>
 800798e:	4638      	mov	r0, r7
 8007990:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007994:	89ab      	ldrh	r3, [r5, #12]
 8007996:	2b01      	cmp	r3, #1
 8007998:	d907      	bls.n	80079aa <_fwalk_reent+0x3a>
 800799a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800799e:	3301      	adds	r3, #1
 80079a0:	d003      	beq.n	80079aa <_fwalk_reent+0x3a>
 80079a2:	4629      	mov	r1, r5
 80079a4:	4630      	mov	r0, r6
 80079a6:	47c0      	blx	r8
 80079a8:	4307      	orrs	r7, r0
 80079aa:	3568      	adds	r5, #104	; 0x68
 80079ac:	e7e9      	b.n	8007982 <_fwalk_reent+0x12>

080079ae <__retarget_lock_init_recursive>:
 80079ae:	4770      	bx	lr

080079b0 <__retarget_lock_acquire_recursive>:
 80079b0:	4770      	bx	lr

080079b2 <__retarget_lock_release_recursive>:
 80079b2:	4770      	bx	lr

080079b4 <__swhatbuf_r>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	460e      	mov	r6, r1
 80079b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079bc:	2900      	cmp	r1, #0
 80079be:	b096      	sub	sp, #88	; 0x58
 80079c0:	4614      	mov	r4, r2
 80079c2:	461d      	mov	r5, r3
 80079c4:	da08      	bge.n	80079d8 <__swhatbuf_r+0x24>
 80079c6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80079ca:	2200      	movs	r2, #0
 80079cc:	602a      	str	r2, [r5, #0]
 80079ce:	061a      	lsls	r2, r3, #24
 80079d0:	d410      	bmi.n	80079f4 <__swhatbuf_r+0x40>
 80079d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079d6:	e00e      	b.n	80079f6 <__swhatbuf_r+0x42>
 80079d8:	466a      	mov	r2, sp
 80079da:	f000 f903 	bl	8007be4 <_fstat_r>
 80079de:	2800      	cmp	r0, #0
 80079e0:	dbf1      	blt.n	80079c6 <__swhatbuf_r+0x12>
 80079e2:	9a01      	ldr	r2, [sp, #4]
 80079e4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80079e8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80079ec:	425a      	negs	r2, r3
 80079ee:	415a      	adcs	r2, r3
 80079f0:	602a      	str	r2, [r5, #0]
 80079f2:	e7ee      	b.n	80079d2 <__swhatbuf_r+0x1e>
 80079f4:	2340      	movs	r3, #64	; 0x40
 80079f6:	2000      	movs	r0, #0
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	b016      	add	sp, #88	; 0x58
 80079fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a00 <__smakebuf_r>:
 8007a00:	898b      	ldrh	r3, [r1, #12]
 8007a02:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007a04:	079d      	lsls	r5, r3, #30
 8007a06:	4606      	mov	r6, r0
 8007a08:	460c      	mov	r4, r1
 8007a0a:	d507      	bpl.n	8007a1c <__smakebuf_r+0x1c>
 8007a0c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	6123      	str	r3, [r4, #16]
 8007a14:	2301      	movs	r3, #1
 8007a16:	6163      	str	r3, [r4, #20]
 8007a18:	b002      	add	sp, #8
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	ab01      	add	r3, sp, #4
 8007a1e:	466a      	mov	r2, sp
 8007a20:	f7ff ffc8 	bl	80079b4 <__swhatbuf_r>
 8007a24:	9900      	ldr	r1, [sp, #0]
 8007a26:	4605      	mov	r5, r0
 8007a28:	4630      	mov	r0, r6
 8007a2a:	f7ff f963 	bl	8006cf4 <_malloc_r>
 8007a2e:	b948      	cbnz	r0, 8007a44 <__smakebuf_r+0x44>
 8007a30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a34:	059a      	lsls	r2, r3, #22
 8007a36:	d4ef      	bmi.n	8007a18 <__smakebuf_r+0x18>
 8007a38:	f023 0303 	bic.w	r3, r3, #3
 8007a3c:	f043 0302 	orr.w	r3, r3, #2
 8007a40:	81a3      	strh	r3, [r4, #12]
 8007a42:	e7e3      	b.n	8007a0c <__smakebuf_r+0xc>
 8007a44:	4b0d      	ldr	r3, [pc, #52]	; (8007a7c <__smakebuf_r+0x7c>)
 8007a46:	62b3      	str	r3, [r6, #40]	; 0x28
 8007a48:	89a3      	ldrh	r3, [r4, #12]
 8007a4a:	6020      	str	r0, [r4, #0]
 8007a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a50:	81a3      	strh	r3, [r4, #12]
 8007a52:	9b00      	ldr	r3, [sp, #0]
 8007a54:	6163      	str	r3, [r4, #20]
 8007a56:	9b01      	ldr	r3, [sp, #4]
 8007a58:	6120      	str	r0, [r4, #16]
 8007a5a:	b15b      	cbz	r3, 8007a74 <__smakebuf_r+0x74>
 8007a5c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a60:	4630      	mov	r0, r6
 8007a62:	f000 f8d1 	bl	8007c08 <_isatty_r>
 8007a66:	b128      	cbz	r0, 8007a74 <__smakebuf_r+0x74>
 8007a68:	89a3      	ldrh	r3, [r4, #12]
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	f043 0301 	orr.w	r3, r3, #1
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	89a0      	ldrh	r0, [r4, #12]
 8007a76:	4305      	orrs	r5, r0
 8007a78:	81a5      	strh	r5, [r4, #12]
 8007a7a:	e7cd      	b.n	8007a18 <__smakebuf_r+0x18>
 8007a7c:	0800780d 	.word	0x0800780d

08007a80 <_malloc_usable_size_r>:
 8007a80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a84:	1f18      	subs	r0, r3, #4
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	bfbc      	itt	lt
 8007a8a:	580b      	ldrlt	r3, [r1, r0]
 8007a8c:	18c0      	addlt	r0, r0, r3
 8007a8e:	4770      	bx	lr

08007a90 <_raise_r>:
 8007a90:	291f      	cmp	r1, #31
 8007a92:	b538      	push	{r3, r4, r5, lr}
 8007a94:	4604      	mov	r4, r0
 8007a96:	460d      	mov	r5, r1
 8007a98:	d904      	bls.n	8007aa4 <_raise_r+0x14>
 8007a9a:	2316      	movs	r3, #22
 8007a9c:	6003      	str	r3, [r0, #0]
 8007a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007aa2:	bd38      	pop	{r3, r4, r5, pc}
 8007aa4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007aa6:	b112      	cbz	r2, 8007aae <_raise_r+0x1e>
 8007aa8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007aac:	b94b      	cbnz	r3, 8007ac2 <_raise_r+0x32>
 8007aae:	4620      	mov	r0, r4
 8007ab0:	f000 f830 	bl	8007b14 <_getpid_r>
 8007ab4:	462a      	mov	r2, r5
 8007ab6:	4601      	mov	r1, r0
 8007ab8:	4620      	mov	r0, r4
 8007aba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007abe:	f000 b817 	b.w	8007af0 <_kill_r>
 8007ac2:	2b01      	cmp	r3, #1
 8007ac4:	d00a      	beq.n	8007adc <_raise_r+0x4c>
 8007ac6:	1c59      	adds	r1, r3, #1
 8007ac8:	d103      	bne.n	8007ad2 <_raise_r+0x42>
 8007aca:	2316      	movs	r3, #22
 8007acc:	6003      	str	r3, [r0, #0]
 8007ace:	2001      	movs	r0, #1
 8007ad0:	e7e7      	b.n	8007aa2 <_raise_r+0x12>
 8007ad2:	2400      	movs	r4, #0
 8007ad4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ad8:	4628      	mov	r0, r5
 8007ada:	4798      	blx	r3
 8007adc:	2000      	movs	r0, #0
 8007ade:	e7e0      	b.n	8007aa2 <_raise_r+0x12>

08007ae0 <raise>:
 8007ae0:	4b02      	ldr	r3, [pc, #8]	; (8007aec <raise+0xc>)
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	6818      	ldr	r0, [r3, #0]
 8007ae6:	f7ff bfd3 	b.w	8007a90 <_raise_r>
 8007aea:	bf00      	nop
 8007aec:	2000000c 	.word	0x2000000c

08007af0 <_kill_r>:
 8007af0:	b538      	push	{r3, r4, r5, lr}
 8007af2:	4d07      	ldr	r5, [pc, #28]	; (8007b10 <_kill_r+0x20>)
 8007af4:	2300      	movs	r3, #0
 8007af6:	4604      	mov	r4, r0
 8007af8:	4608      	mov	r0, r1
 8007afa:	4611      	mov	r1, r2
 8007afc:	602b      	str	r3, [r5, #0]
 8007afe:	f7f9 fd91 	bl	8001624 <_kill>
 8007b02:	1c43      	adds	r3, r0, #1
 8007b04:	d102      	bne.n	8007b0c <_kill_r+0x1c>
 8007b06:	682b      	ldr	r3, [r5, #0]
 8007b08:	b103      	cbz	r3, 8007b0c <_kill_r+0x1c>
 8007b0a:	6023      	str	r3, [r4, #0]
 8007b0c:	bd38      	pop	{r3, r4, r5, pc}
 8007b0e:	bf00      	nop
 8007b10:	2000035c 	.word	0x2000035c

08007b14 <_getpid_r>:
 8007b14:	f7f9 bd7e 	b.w	8001614 <_getpid>

08007b18 <__sread>:
 8007b18:	b510      	push	{r4, lr}
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b20:	f000 f894 	bl	8007c4c <_read_r>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	bfab      	itete	ge
 8007b28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007b2a:	89a3      	ldrhlt	r3, [r4, #12]
 8007b2c:	181b      	addge	r3, r3, r0
 8007b2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007b32:	bfac      	ite	ge
 8007b34:	6563      	strge	r3, [r4, #84]	; 0x54
 8007b36:	81a3      	strhlt	r3, [r4, #12]
 8007b38:	bd10      	pop	{r4, pc}

08007b3a <__swrite>:
 8007b3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b3e:	461f      	mov	r7, r3
 8007b40:	898b      	ldrh	r3, [r1, #12]
 8007b42:	05db      	lsls	r3, r3, #23
 8007b44:	4605      	mov	r5, r0
 8007b46:	460c      	mov	r4, r1
 8007b48:	4616      	mov	r6, r2
 8007b4a:	d505      	bpl.n	8007b58 <__swrite+0x1e>
 8007b4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b50:	2302      	movs	r3, #2
 8007b52:	2200      	movs	r2, #0
 8007b54:	f000 f868 	bl	8007c28 <_lseek_r>
 8007b58:	89a3      	ldrh	r3, [r4, #12]
 8007b5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b62:	81a3      	strh	r3, [r4, #12]
 8007b64:	4632      	mov	r2, r6
 8007b66:	463b      	mov	r3, r7
 8007b68:	4628      	mov	r0, r5
 8007b6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6e:	f000 b817 	b.w	8007ba0 <_write_r>

08007b72 <__sseek>:
 8007b72:	b510      	push	{r4, lr}
 8007b74:	460c      	mov	r4, r1
 8007b76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b7a:	f000 f855 	bl	8007c28 <_lseek_r>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	bf15      	itete	ne
 8007b84:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b8e:	81a3      	strheq	r3, [r4, #12]
 8007b90:	bf18      	it	ne
 8007b92:	81a3      	strhne	r3, [r4, #12]
 8007b94:	bd10      	pop	{r4, pc}

08007b96 <__sclose>:
 8007b96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b9a:	f000 b813 	b.w	8007bc4 <_close_r>
	...

08007ba0 <_write_r>:
 8007ba0:	b538      	push	{r3, r4, r5, lr}
 8007ba2:	4d07      	ldr	r5, [pc, #28]	; (8007bc0 <_write_r+0x20>)
 8007ba4:	4604      	mov	r4, r0
 8007ba6:	4608      	mov	r0, r1
 8007ba8:	4611      	mov	r1, r2
 8007baa:	2200      	movs	r2, #0
 8007bac:	602a      	str	r2, [r5, #0]
 8007bae:	461a      	mov	r2, r3
 8007bb0:	f7f9 fd6f 	bl	8001692 <_write>
 8007bb4:	1c43      	adds	r3, r0, #1
 8007bb6:	d102      	bne.n	8007bbe <_write_r+0x1e>
 8007bb8:	682b      	ldr	r3, [r5, #0]
 8007bba:	b103      	cbz	r3, 8007bbe <_write_r+0x1e>
 8007bbc:	6023      	str	r3, [r4, #0]
 8007bbe:	bd38      	pop	{r3, r4, r5, pc}
 8007bc0:	2000035c 	.word	0x2000035c

08007bc4 <_close_r>:
 8007bc4:	b538      	push	{r3, r4, r5, lr}
 8007bc6:	4d06      	ldr	r5, [pc, #24]	; (8007be0 <_close_r+0x1c>)
 8007bc8:	2300      	movs	r3, #0
 8007bca:	4604      	mov	r4, r0
 8007bcc:	4608      	mov	r0, r1
 8007bce:	602b      	str	r3, [r5, #0]
 8007bd0:	f7f9 fd7b 	bl	80016ca <_close>
 8007bd4:	1c43      	adds	r3, r0, #1
 8007bd6:	d102      	bne.n	8007bde <_close_r+0x1a>
 8007bd8:	682b      	ldr	r3, [r5, #0]
 8007bda:	b103      	cbz	r3, 8007bde <_close_r+0x1a>
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	bd38      	pop	{r3, r4, r5, pc}
 8007be0:	2000035c 	.word	0x2000035c

08007be4 <_fstat_r>:
 8007be4:	b538      	push	{r3, r4, r5, lr}
 8007be6:	4d07      	ldr	r5, [pc, #28]	; (8007c04 <_fstat_r+0x20>)
 8007be8:	2300      	movs	r3, #0
 8007bea:	4604      	mov	r4, r0
 8007bec:	4608      	mov	r0, r1
 8007bee:	4611      	mov	r1, r2
 8007bf0:	602b      	str	r3, [r5, #0]
 8007bf2:	f7f9 fd76 	bl	80016e2 <_fstat>
 8007bf6:	1c43      	adds	r3, r0, #1
 8007bf8:	d102      	bne.n	8007c00 <_fstat_r+0x1c>
 8007bfa:	682b      	ldr	r3, [r5, #0]
 8007bfc:	b103      	cbz	r3, 8007c00 <_fstat_r+0x1c>
 8007bfe:	6023      	str	r3, [r4, #0]
 8007c00:	bd38      	pop	{r3, r4, r5, pc}
 8007c02:	bf00      	nop
 8007c04:	2000035c 	.word	0x2000035c

08007c08 <_isatty_r>:
 8007c08:	b538      	push	{r3, r4, r5, lr}
 8007c0a:	4d06      	ldr	r5, [pc, #24]	; (8007c24 <_isatty_r+0x1c>)
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	4604      	mov	r4, r0
 8007c10:	4608      	mov	r0, r1
 8007c12:	602b      	str	r3, [r5, #0]
 8007c14:	f7f9 fd75 	bl	8001702 <_isatty>
 8007c18:	1c43      	adds	r3, r0, #1
 8007c1a:	d102      	bne.n	8007c22 <_isatty_r+0x1a>
 8007c1c:	682b      	ldr	r3, [r5, #0]
 8007c1e:	b103      	cbz	r3, 8007c22 <_isatty_r+0x1a>
 8007c20:	6023      	str	r3, [r4, #0]
 8007c22:	bd38      	pop	{r3, r4, r5, pc}
 8007c24:	2000035c 	.word	0x2000035c

08007c28 <_lseek_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d07      	ldr	r5, [pc, #28]	; (8007c48 <_lseek_r+0x20>)
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	4608      	mov	r0, r1
 8007c30:	4611      	mov	r1, r2
 8007c32:	2200      	movs	r2, #0
 8007c34:	602a      	str	r2, [r5, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f7f9 fd6e 	bl	8001718 <_lseek>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_lseek_r+0x1e>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_lseek_r+0x1e>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	2000035c 	.word	0x2000035c

08007c4c <_read_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d07      	ldr	r5, [pc, #28]	; (8007c6c <_read_r+0x20>)
 8007c50:	4604      	mov	r4, r0
 8007c52:	4608      	mov	r0, r1
 8007c54:	4611      	mov	r1, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	602a      	str	r2, [r5, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f7f9 fcfc 	bl	8001658 <_read>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_read_r+0x1e>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_read_r+0x1e>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	2000035c 	.word	0x2000035c

08007c70 <_init>:
 8007c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c72:	bf00      	nop
 8007c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c76:	bc08      	pop	{r3}
 8007c78:	469e      	mov	lr, r3
 8007c7a:	4770      	bx	lr

08007c7c <_fini>:
 8007c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c7e:	bf00      	nop
 8007c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007c82:	bc08      	pop	{r3}
 8007c84:	469e      	mov	lr, r3
 8007c86:	4770      	bx	lr
