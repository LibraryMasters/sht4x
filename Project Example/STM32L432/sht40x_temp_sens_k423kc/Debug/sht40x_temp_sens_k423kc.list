
sht40x_temp_sens_k423kc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006078  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000684  08006208  08006208  00016208  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800688c  0800688c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800688c  0800688c  0001688c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006894  08006894  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006894  08006894  00016894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006898  08006898  00016898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800689c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000188  200001dc  08006a78  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000364  08006a78  00020364  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001427f  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c7c  00000000  00000000  0003448b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000c4aa  00000000  00000000  00037107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be8  00000000  00000000  000435b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ed0  00000000  00000000  000441a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002185c  00000000  00000000  00045070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000151e9  00000000  00000000  000668cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c41d6  00000000  00000000  0007bab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013fc8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000032f8  00000000  00000000  0013fcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080061f0 	.word	0x080061f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	080061f0 	.word	0x080061f0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b500      	push	{lr}
 8000f4e:	b097      	sub	sp, #92	; 0x5c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f50:	2244      	movs	r2, #68	; 0x44
 8000f52:	2100      	movs	r1, #0
 8000f54:	a805      	add	r0, sp, #20
 8000f56:	f002 fa33 	bl	80033c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5a:	2214      	movs	r2, #20
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4668      	mov	r0, sp
 8000f60:	f002 fa2e 	bl	80033c0 <memset>

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f64:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f68:	f001 f9a0 	bl	80022ac <HAL_PWREx_ControlVoltageScaling>
 8000f6c:	b108      	cbz	r0, 8000f72 <SystemClock_Config+0x26>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f6e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f70:	e7fe      	b.n	8000f70 <SystemClock_Config+0x24>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f72:	2302      	movs	r3, #2
 8000f74:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	f44f 7c80 	mov.w	ip, #256	; 0x100
 8000f7a:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000f7c:	900f      	str	r0, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f7e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f80:	e9cd c308 	strd	ip, r3, [sp, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f84:	f001 fa58 	bl	8002438 <HAL_RCC_OscConfig>
 8000f88:	4601      	mov	r1, r0
 8000f8a:	b108      	cbz	r0, 8000f90 <SystemClock_Config+0x44>
 8000f8c:	b672      	cpsid	i
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <SystemClock_Config+0x42>
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f90:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f94:	220f      	movs	r2, #15
 8000f96:	2301      	movs	r3, #1
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f98:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000f9a:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000f9c:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000fa0:	f001 fcee 	bl	8002980 <HAL_RCC_ClockConfig>
 8000fa4:	b108      	cbz	r0, 8000faa <SystemClock_Config+0x5e>
 8000fa6:	b672      	cpsid	i
  while (1)
 8000fa8:	e7fe      	b.n	8000fa8 <SystemClock_Config+0x5c>
}
 8000faa:	b017      	add	sp, #92	; 0x5c
 8000fac:	f85d fb04 	ldr.w	pc, [sp], #4

08000fb0 <main>:
{
 8000fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fb4:	ed2d 8b02 	vpush	{d8}
 8000fb8:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8000fba:	f000 fce3 	bl	8001984 <HAL_Init>
  SystemClock_Config();
 8000fbe:	f7ff ffc5 	bl	8000f4c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	2214      	movs	r2, #20
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	a807      	add	r0, sp, #28
 8000fc8:	f002 f9fa 	bl	80033c0 <memset>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b83      	ldr	r3, [pc, #524]	; (80011dc <main+0x22c>)
  hi2c1.Instance = I2C1;
 8000fce:	4c84      	ldr	r4, [pc, #528]	; (80011e0 <main+0x230>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fd2:	f042 0201 	orr.w	r2, r2, #1
 8000fd6:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fd8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fda:	f002 0201 	and.w	r2, r2, #1
 8000fde:	9205      	str	r2, [sp, #20]
 8000fe0:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000fe4:	f042 0202 	orr.w	r2, r2, #2
 8000fe8:	64da      	str	r2, [r3, #76]	; 0x4c
 8000fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fec:	f003 0302 	and.w	r3, r3, #2
 8000ff0:	9306      	str	r3, [sp, #24]
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(RED_LED_GPIO_Port, RED_LED_Pin, GPIO_PIN_RESET);
 8000ffc:	f000 fe08 	bl	8001c10 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin, GPIO_PIN_RESET);
 8001000:	2200      	movs	r2, #0
 8001002:	4878      	ldr	r0, [pc, #480]	; (80011e4 <main+0x234>)
 8001004:	2120      	movs	r1, #32
 8001006:	f000 fe03 	bl	8001c10 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	2500      	movs	r5, #0
  GPIO_InitStruct.Pin = RED_LED_Pin;
 800100c:	2601      	movs	r6, #1
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800100e:	a907      	add	r1, sp, #28
 8001010:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001014:	e9cd 6607 	strd	r6, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001018:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(RED_LED_GPIO_Port, &GPIO_InitStruct);
 800101c:	f000 fd40 	bl	8001aa0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_LED_Pin;
 8001020:	2320      	movs	r3, #32
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 8001022:	a907      	add	r1, sp, #28
 8001024:	486f      	ldr	r0, [pc, #444]	; (80011e4 <main+0x234>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001026:	e9cd 3607 	strd	r3, r6, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	e9cd 5509 	strd	r5, r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(BLUE_LED_GPIO_Port, &GPIO_InitStruct);
 800102e:	f000 fd37 	bl	8001aa0 <HAL_GPIO_Init>
  hi2c1.Init.Timing = 0x00303D5B;
 8001032:	486d      	ldr	r0, [pc, #436]	; (80011e8 <main+0x238>)
 8001034:	4b6d      	ldr	r3, [pc, #436]	; (80011ec <main+0x23c>)
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001036:	6225      	str	r5, [r4, #32]
  hi2c1.Init.Timing = 0x00303D5B;
 8001038:	e9c4 0300 	strd	r0, r3, [r4]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800103c:	4620      	mov	r0, r4
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800103e:	e9c4 5602 	strd	r5, r6, [r4, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8001042:	e9c4 5504 	strd	r5, r5, [r4, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001046:	e9c4 5506 	strd	r5, r5, [r4, #24]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800104a:	f000 ff5c 	bl	8001f06 <HAL_I2C_Init>
 800104e:	4601      	mov	r1, r0
 8001050:	b108      	cbz	r0, 8001056 <main+0xa6>
 8001052:	b672      	cpsid	i
  while (1)
 8001054:	e7fe      	b.n	8001054 <main+0xa4>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001056:	4620      	mov	r0, r4
 8001058:	f001 f8d4 	bl	8002204 <HAL_I2CEx_ConfigAnalogFilter>
 800105c:	4601      	mov	r1, r0
 800105e:	b108      	cbz	r0, 8001064 <main+0xb4>
 8001060:	b672      	cpsid	i
  while (1)
 8001062:	e7fe      	b.n	8001062 <main+0xb2>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001064:	4620      	mov	r0, r4
 8001066:	f001 f8f3 	bl	8002250 <HAL_I2CEx_ConfigDigitalFilter>
 800106a:	4603      	mov	r3, r0
 800106c:	b108      	cbz	r0, 8001072 <main+0xc2>
 800106e:	b672      	cpsid	i
  while (1)
 8001070:	e7fe      	b.n	8001070 <main+0xc0>
  huart2.Instance = USART2;
 8001072:	485f      	ldr	r0, [pc, #380]	; (80011f0 <main+0x240>)
  huart2.Init.BaudRate = 115200;
 8001074:	495f      	ldr	r1, [pc, #380]	; (80011f4 <main+0x244>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8001076:	6103      	str	r3, [r0, #16]
  huart2.Init.BaudRate = 115200;
 8001078:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800107c:	e9c0 1200 	strd	r1, r2, [r0]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001080:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001082:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001086:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108a:	e9c0 3307 	strd	r3, r3, [r0, #28]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800108e:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001090:	f002 f93d 	bl	800330e <HAL_UART_Init>
 8001094:	4604      	mov	r4, r0
 8001096:	b108      	cbz	r0, 800109c <main+0xec>
 8001098:	b672      	cpsid	i
  while (1)
 800109a:	e7fe      	b.n	800109a <main+0xea>
  HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a0:	f000 fc92 	bl	80019c8 <HAL_Delay>
	sht40x_basic_initialize(SHT40_AD1B_VARIANT);        /**< initialize device variant */
 80010a4:	4620      	mov	r0, r4
	sht40x_info(&sht40xInfo);
 80010a6:	4c54      	ldr	r4, [pc, #336]	; (80011f8 <main+0x248>)
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80010a8:	4f4e      	ldr	r7, [pc, #312]	; (80011e4 <main+0x234>)
		err =  sht40x_basic_get_temp_rh(SHT40X_PRECISION_HIGH, &dataRead);                               /**< Take temperature and humidity measurement */
 80010aa:	4e54      	ldr	r6, [pc, #336]	; (80011fc <main+0x24c>)
	sht40x_basic_initialize(SHT40_AD1B_VARIANT);        /**< initialize device variant */
 80010ac:	f000 fbbe 	bl	800182c <sht40x_basic_initialize>
	sht40x_info(&sht40xInfo);
 80010b0:	4620      	mov	r0, r4
 80010b2:	f000 fb7d 	bl	80017b0 <sht40x_info>
	sht40x_interface_debug_print("Chip Name: \t%s\r\n", sht40xInfo.chip_name);
 80010b6:	4852      	ldr	r0, [pc, #328]	; (8001200 <main+0x250>)
 80010b8:	4621      	mov	r1, r4
 80010ba:	f000 fc01 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Manufacturer: \t%s\r\n",sht40xInfo.manufacturer_name);
 80010be:	4851      	ldr	r0, [pc, #324]	; (8001204 <main+0x254>)
 80010c0:	f104 010a 	add.w	r1, r4, #10
 80010c4:	f000 fbfc 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Interface Protocol: \t%s\r\n", sht40xInfo.interface);
 80010c8:	484f      	ldr	r0, [pc, #316]	; (8001208 <main+0x258>)
 80010ca:	f104 0123 	add.w	r1, r4, #35	; 0x23
 80010ce:	f000 fbf7 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Supply Volt Max: \t%.1f V\r\n",sht40xInfo.supply_voltage_max_v);
 80010d2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80010d4:	f7ff fa38 	bl	8000548 <__aeabi_f2d>
 80010d8:	4602      	mov	r2, r0
 80010da:	460b      	mov	r3, r1
 80010dc:	484b      	ldr	r0, [pc, #300]	; (800120c <main+0x25c>)
 80010de:	f000 fbef 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Supply Volt Min: \t%.1f V\r\n",sht40xInfo.supply_voltage_min_v);
 80010e2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80010e4:	f7ff fa30 	bl	8000548 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	4848      	ldr	r0, [pc, #288]	; (8001210 <main+0x260>)
 80010ee:	f000 fbe7 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Maximum Current: \t%.1f uA\r\n",sht40xInfo.max_current_ma);
 80010f2:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80010f4:	f7ff fa28 	bl	8000548 <__aeabi_f2d>
 80010f8:	4602      	mov	r2, r0
 80010fa:	460b      	mov	r3, r1
 80010fc:	4845      	ldr	r0, [pc, #276]	; (8001214 <main+0x264>)
 80010fe:	f000 fbdf 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Max Temperature: \t%.1f C\r\n",sht40xInfo.temperature_max);
 8001102:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001104:	f7ff fa20 	bl	8000548 <__aeabi_f2d>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4842      	ldr	r0, [pc, #264]	; (8001218 <main+0x268>)
 800110e:	f000 fbd7 	bl	80018c0 <sht40x_interface_debug_print>
	sht40x_interface_debug_print("Diver Version: \t\tV%.1f.%.2d\r\n",(sht40xInfo.driver_version /1000), (uint8_t)(sht40xInfo.driver_version - (uint8_t)(sht40xInfo.driver_version / 100)*100));
 8001112:	ed94 8a10 	vldr	s16, [r4, #64]	; 0x40
 8001116:	eddf 7a41 	vldr	s15, [pc, #260]	; 800121c <main+0x26c>
 800111a:	eec8 7a27 	vdiv.f32	s15, s16, s15
 800111e:	ee17 0a90 	vmov	r0, s15
 8001122:	f7ff fa11 	bl	8000548 <__aeabi_f2d>
 8001126:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001220 <main+0x270>
 800112a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800112e:	2264      	movs	r2, #100	; 0x64
 8001130:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001134:	edcd 7a03 	vstr	s15, [sp, #12]
 8001138:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800113c:	fb13 f302 	smulbb	r3, r3, r2
 8001140:	ee07 3a90 	vmov	s15, r3
 8001144:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001148:	4602      	mov	r2, r0
 800114a:	ee78 7a67 	vsub.f32	s15, s16, s15
 800114e:	4835      	ldr	r0, [pc, #212]	; (8001224 <main+0x274>)
 8001150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001154:	edcd 7a03 	vstr	s15, [sp, #12]
 8001158:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	460b      	mov	r3, r1
 8001160:	f000 fbae 	bl	80018c0 <sht40x_interface_debug_print>
		err =  sht40x_basic_get_temp_rh(SHT40X_PRECISION_HIGH, &dataRead);                               /**< Take temperature and humidity measurement */
 8001164:	4c30      	ldr	r4, [pc, #192]	; (8001228 <main+0x278>)
			sht40x_interface_debug_print("raw data: 0x%.2x\n", dataRead.rawData[index]);
 8001166:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 8001240 <main+0x290>
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 800116a:	2120      	movs	r1, #32
 800116c:	4638      	mov	r0, r7
 800116e:	f000 fd54 	bl	8001c1a <HAL_GPIO_TogglePin>
		sht40x_interface_delay_ms(3000);
 8001172:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001176:	f000 fba1 	bl	80018bc <sht40x_interface_delay_ms>
		err =  sht40x_basic_get_temp_rh(SHT40X_PRECISION_HIGH, &dataRead);                               /**< Take temperature and humidity measurement */
 800117a:	4621      	mov	r1, r4
 800117c:	2000      	movs	r0, #0
 800117e:	f000 fb8b 	bl	8001898 <sht40x_basic_get_temp_rh>
 8001182:	6030      	str	r0, [r6, #0]
		sht40x_interface_debug_print("\nTemp C: %.2f\n", dataRead.temperature_C);
 8001184:	6820      	ldr	r0, [r4, #0]
 8001186:	f7ff f9df 	bl	8000548 <__aeabi_f2d>
 800118a:	4602      	mov	r2, r0
 800118c:	460b      	mov	r3, r1
 800118e:	4827      	ldr	r0, [pc, #156]	; (800122c <main+0x27c>)
 8001190:	f000 fb96 	bl	80018c0 <sht40x_interface_debug_print>
		sht40x_interface_debug_print("Temp F: %.2f\n", dataRead.temperature_F);
 8001194:	6860      	ldr	r0, [r4, #4]
 8001196:	f7ff f9d7 	bl	8000548 <__aeabi_f2d>
 800119a:	4602      	mov	r2, r0
 800119c:	460b      	mov	r3, r1
 800119e:	4824      	ldr	r0, [pc, #144]	; (8001230 <main+0x280>)
 80011a0:	f000 fb8e 	bl	80018c0 <sht40x_interface_debug_print>
		sht40x_interface_debug_print("Humidity: %.2f\n", dataRead.humidity);
 80011a4:	68a0      	ldr	r0, [r4, #8]
 80011a6:	f7ff f9cf 	bl	8000548 <__aeabi_f2d>
 80011aa:	4602      	mov	r2, r0
 80011ac:	460b      	mov	r3, r1
 80011ae:	4821      	ldr	r0, [pc, #132]	; (8001234 <main+0x284>)
 80011b0:	f000 fb86 	bl	80018c0 <sht40x_interface_debug_print>
		for(int index = 0; index < RESPONSE_LENGTH; index++){
 80011b4:	340c      	adds	r4, #12
 80011b6:	2500      	movs	r5, #0
			sht40x_interface_debug_print("raw data: 0x%.2x\n", dataRead.rawData[index]);
 80011b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80011bc:	4640      	mov	r0, r8
		for(int index = 0; index < RESPONSE_LENGTH; index++){
 80011be:	3501      	adds	r5, #1
			sht40x_interface_debug_print("raw data: 0x%.2x\n", dataRead.rawData[index]);
 80011c0:	f000 fb7e 	bl	80018c0 <sht40x_interface_debug_print>
		for(int index = 0; index < RESPONSE_LENGTH; index++){
 80011c4:	2d06      	cmp	r5, #6
 80011c6:	d1f7      	bne.n	80011b8 <main+0x208>
		err = sht40x_basic_get_serial_number( (uint32_t*)&UID );                                         /**< Read sensor unique ID (Serial number) */
 80011c8:	4c1b      	ldr	r4, [pc, #108]	; (8001238 <main+0x288>)
 80011ca:	4620      	mov	r0, r4
 80011cc:	f000 fb6c 	bl	80018a8 <sht40x_basic_get_serial_number>
		sht40x_interface_debug_print("\nserial number : %lu\n", UID);
 80011d0:	6821      	ldr	r1, [r4, #0]
		err = sht40x_basic_get_serial_number( (uint32_t*)&UID );                                         /**< Read sensor unique ID (Serial number) */
 80011d2:	6030      	str	r0, [r6, #0]
		sht40x_interface_debug_print("\nserial number : %lu\n", UID);
 80011d4:	4819      	ldr	r0, [pc, #100]	; (800123c <main+0x28c>)
 80011d6:	f000 fb73 	bl	80018c0 <sht40x_interface_debug_print>
		HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin);
 80011da:	e7c3      	b.n	8001164 <main+0x1b4>
 80011dc:	40021000 	.word	0x40021000
 80011e0:	20000214 	.word	0x20000214
 80011e4:	48000400 	.word	0x48000400
 80011e8:	40005400 	.word	0x40005400
 80011ec:	00303d5b 	.word	0x00303d5b
 80011f0:	20000268 	.word	0x20000268
 80011f4:	40004400 	.word	0x40004400
 80011f8:	200002ec 	.word	0x200002ec
 80011fc:	20000210 	.word	0x20000210
 8001200:	08006208 	.word	0x08006208
 8001204:	08006219 	.word	0x08006219
 8001208:	0800622d 	.word	0x0800622d
 800120c:	08006247 	.word	0x08006247
 8001210:	08006262 	.word	0x08006262
 8001214:	0800627d 	.word	0x0800627d
 8001218:	08006299 	.word	0x08006299
 800121c:	447a0000 	.word	0x447a0000
 8001220:	42c80000 	.word	0x42c80000
 8001224:	080062b4 	.word	0x080062b4
 8001228:	200001fc 	.word	0x200001fc
 800122c:	080062d2 	.word	0x080062d2
 8001230:	080062e1 	.word	0x080062e1
 8001234:	080062ef 	.word	0x080062ef
 8001238:	200001f8 	.word	0x200001f8
 800123c:	08006311 	.word	0x08006311
 8001240:	080062ff 	.word	0x080062ff

08001244 <serial_print>:
{
 8001244:	460a      	mov	r2, r1
	HAL_UART_Transmit(&huart2, (const uint8_t *) pString, u8Length, HAL_MAX_DELAY);
 8001246:	f04f 33ff 	mov.w	r3, #4294967295
 800124a:	4601      	mov	r1, r0
 800124c:	4801      	ldr	r0, [pc, #4]	; (8001254 <serial_print+0x10>)
 800124e:	f001 bfd1 	b.w	80031f4 <HAL_UART_Transmit>
 8001252:	bf00      	nop
 8001254:	20000268 	.word	0x20000268

08001258 <i2c_write>:
{
 8001258:	b507      	push	{r0, r1, r2, lr}
 800125a:	4613      	mov	r3, r2
	return HAL_I2C_Master_Transmit(&hi2c1, (addr << 1), (uint8_t *)buf, len, 1000);
 800125c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001260:	9200      	str	r2, [sp, #0]
 8001262:	460a      	mov	r2, r1
 8001264:	0041      	lsls	r1, r0, #1
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <i2c_write+0x1c>)
 8001268:	f000 fe9e 	bl	8001fa8 <HAL_I2C_Master_Transmit>
}
 800126c:	b003      	add	sp, #12
 800126e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001272:	bf00      	nop
 8001274:	20000214 	.word	0x20000214

08001278 <i2c_read>:
{
 8001278:	b507      	push	{r0, r1, r2, lr}
 800127a:	4613      	mov	r3, r2
    return HAL_I2C_Master_Receive(&hi2c1, (addr << 1), (uint8_t *)buf, len, 1000);
 800127c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001280:	9200      	str	r2, [sp, #0]
 8001282:	460a      	mov	r2, r1
 8001284:	0041      	lsls	r1, r0, #1
 8001286:	4803      	ldr	r0, [pc, #12]	; (8001294 <i2c_read+0x1c>)
 8001288:	f000 ff24 	bl	80020d4 <HAL_I2C_Master_Receive>
}
 800128c:	b003      	add	sp, #12
 800128e:	f85d fb04 	ldr.w	pc, [sp], #4
 8001292:	bf00      	nop
 8001294:	20000214 	.word	0x20000214

08001298 <Error_Handler>:
 8001298:	b672      	cpsid	i
  while (1)
 800129a:	e7fe      	b.n	800129a <Error_Handler+0x2>

0800129c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_MspInit+0x2c>)
 800129e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012a0:	f042 0201 	orr.w	r2, r2, #1
 80012a4:	661a      	str	r2, [r3, #96]	; 0x60
 80012a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 80012a8:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012aa:	f002 0201 	and.w	r2, r2, #1
 80012ae:	9200      	str	r2, [sp, #0]
 80012b0:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012b2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012b4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80012b8:	659a      	str	r2, [r3, #88]	; 0x58
 80012ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012c4:	b002      	add	sp, #8
 80012c6:	4770      	bx	lr
 80012c8:	40021000 	.word	0x40021000

080012cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80012cc:	b510      	push	{r4, lr}
 80012ce:	b09c      	sub	sp, #112	; 0x70
 80012d0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	2214      	movs	r2, #20
 80012d4:	2100      	movs	r1, #0
 80012d6:	a802      	add	r0, sp, #8
 80012d8:	f002 f872 	bl	80033c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80012dc:	2254      	movs	r2, #84	; 0x54
 80012de:	2100      	movs	r1, #0
 80012e0:	a807      	add	r0, sp, #28
 80012e2:	f002 f86d 	bl	80033c0 <memset>
  if(hi2c->Instance==I2C1)
 80012e6:	6822      	ldr	r2, [r4, #0]
 80012e8:	4b16      	ldr	r3, [pc, #88]	; (8001344 <HAL_I2C_MspInit+0x78>)
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d128      	bne.n	8001340 <HAL_I2C_MspInit+0x74>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012ee:	2340      	movs	r3, #64	; 0x40
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f0:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80012f2:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80012f4:	f001 fc9c 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 80012f8:	b108      	cbz	r0, 80012fe <HAL_I2C_MspInit+0x32>
    {
      Error_Handler();
 80012fa:	f7ff ffcd 	bl	8001298 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fe:	4c12      	ldr	r4, [pc, #72]	; (8001348 <HAL_I2C_MspInit+0x7c>)
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001300:	4812      	ldr	r0, [pc, #72]	; (800134c <HAL_I2C_MspInit+0x80>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001304:	f043 0302 	orr.w	r3, r3, #2
 8001308:	64e3      	str	r3, [r4, #76]	; 0x4c
 800130a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800130c:	f003 0302 	and.w	r3, r3, #2
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001314:	22c0      	movs	r2, #192	; 0xc0
 8001316:	2312      	movs	r3, #18
 8001318:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2100      	movs	r1, #0
 800131e:	2303      	movs	r3, #3
 8001320:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001324:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001326:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001328:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800132a:	f000 fbb9 	bl	8001aa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800132e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001330:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001334:	65a3      	str	r3, [r4, #88]	; 0x58
 8001336:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001338:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800133c:	9301      	str	r3, [sp, #4]
 800133e:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001340:	b01c      	add	sp, #112	; 0x70
 8001342:	bd10      	pop	{r4, pc}
 8001344:	40005400 	.word	0x40005400
 8001348:	40021000 	.word	0x40021000
 800134c:	48000400 	.word	0x48000400

08001350 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001350:	b510      	push	{r4, lr}
 8001352:	b09c      	sub	sp, #112	; 0x70
 8001354:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001356:	2214      	movs	r2, #20
 8001358:	2100      	movs	r1, #0
 800135a:	a802      	add	r0, sp, #8
 800135c:	f002 f830 	bl	80033c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001360:	2254      	movs	r2, #84	; 0x54
 8001362:	2100      	movs	r1, #0
 8001364:	a807      	add	r0, sp, #28
 8001366:	f002 f82b 	bl	80033c0 <memset>
  if(huart->Instance==USART2)
 800136a:	6822      	ldr	r2, [r4, #0]
 800136c:	4b17      	ldr	r3, [pc, #92]	; (80013cc <HAL_UART_MspInit+0x7c>)
 800136e:	429a      	cmp	r2, r3
 8001370:	d129      	bne.n	80013c6 <HAL_UART_MspInit+0x76>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001372:	2302      	movs	r3, #2
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001374:	a807      	add	r0, sp, #28
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001376:	9307      	str	r3, [sp, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001378:	f001 fc5a 	bl	8002c30 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	b108      	cbz	r0, 8001382 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800137e:	f7ff ff8b 	bl	8001298 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001382:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <HAL_UART_MspInit+0x80>)
 8001384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001386:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800138a:	659a      	str	r2, [r3, #88]	; 0x58
 800138c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800138e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001392:	9200      	str	r2, [sp, #0]
 8001394:	9a00      	ldr	r2, [sp, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001398:	f042 0201 	orr.w	r2, r2, #1
 800139c:	64da      	str	r2, [r3, #76]	; 0x4c
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	9301      	str	r3, [sp, #4]
 80013a6:	9b01      	ldr	r3, [sp, #4]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	220c      	movs	r2, #12
 80013aa:	2302      	movs	r3, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ac:	2100      	movs	r1, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ae:	e9cd 2302 	strd	r2, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e9cd 1304 	strd	r1, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013bc:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013be:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013c0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c2:	f000 fb6d 	bl	8001aa0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80013c6:	b01c      	add	sp, #112	; 0x70
 80013c8:	bd10      	pop	{r4, pc}
 80013ca:	bf00      	nop
 80013cc:	40004400 	.word	0x40004400
 80013d0:	40021000 	.word	0x40021000

080013d4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <NMI_Handler>

080013d6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013d6:	e7fe      	b.n	80013d6 <HardFault_Handler>

080013d8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d8:	e7fe      	b.n	80013d8 <MemManage_Handler>

080013da <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler>

080013dc <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013dc:	e7fe      	b.n	80013dc <UsageFault_Handler>

080013de <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013de:	4770      	bx	lr

080013e0 <DebugMon_Handler>:
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:
 80013e2:	4770      	bx	lr

080013e4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e4:	f000 bade 	b.w	80019a4 <HAL_IncTick>

080013e8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80013e8:	2001      	movs	r0, #1
 80013ea:	4770      	bx	lr

080013ec <_kill>:

int _kill(int pid, int sig)
{
 80013ec:	b508      	push	{r3, lr}
	errno = EINVAL;
 80013ee:	f001 ffbd 	bl	800336c <__errno>
 80013f2:	2316      	movs	r3, #22
 80013f4:	6003      	str	r3, [r0, #0]
	return -1;
}
 80013f6:	f04f 30ff 	mov.w	r0, #4294967295
 80013fa:	bd08      	pop	{r3, pc}

080013fc <_exit>:

void _exit (int status)
{
 80013fc:	b508      	push	{r3, lr}
	errno = EINVAL;
 80013fe:	f001 ffb5 	bl	800336c <__errno>
 8001402:	2316      	movs	r3, #22
 8001404:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001406:	e7fe      	b.n	8001406 <_exit+0xa>

08001408 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001408:	b570      	push	{r4, r5, r6, lr}
 800140a:	460d      	mov	r5, r1
 800140c:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140e:	460e      	mov	r6, r1
 8001410:	1b73      	subs	r3, r6, r5
 8001412:	429c      	cmp	r4, r3
 8001414:	dc01      	bgt.n	800141a <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001416:	4620      	mov	r0, r4
 8001418:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 800141a:	f3af 8000 	nop.w
 800141e:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001422:	e7f5      	b.n	8001410 <_read+0x8>

08001424 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001424:	b570      	push	{r4, r5, r6, lr}
 8001426:	460d      	mov	r5, r1
 8001428:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800142a:	460e      	mov	r6, r1
 800142c:	1b73      	subs	r3, r6, r5
 800142e:	429c      	cmp	r4, r3
 8001430:	dc01      	bgt.n	8001436 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001432:	4620      	mov	r0, r4
 8001434:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001436:	f816 0b01 	ldrb.w	r0, [r6], #1
 800143a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800143e:	e7f5      	b.n	800142c <_write+0x8>

08001440 <_close>:

int _close(int file)
{
	return -1;
}
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	4770      	bx	lr

08001446 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001446:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800144a:	604b      	str	r3, [r1, #4]
	return 0;
}
 800144c:	2000      	movs	r0, #0
 800144e:	4770      	bx	lr

08001450 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001450:	2001      	movs	r0, #1
 8001452:	4770      	bx	lr

08001454 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001454:	2000      	movs	r0, #0
 8001456:	4770      	bx	lr

08001458 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4a0b      	ldr	r2, [pc, #44]	; (8001488 <_sbrk+0x30>)
 800145a:	6811      	ldr	r1, [r2, #0]
{
 800145c:	b510      	push	{r4, lr}
 800145e:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001460:	b909      	cbnz	r1, 8001466 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001462:	490a      	ldr	r1, [pc, #40]	; (800148c <_sbrk+0x34>)
 8001464:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	6810      	ldr	r0, [r2, #0]
 8001468:	4909      	ldr	r1, [pc, #36]	; (8001490 <_sbrk+0x38>)
 800146a:	4c0a      	ldr	r4, [pc, #40]	; (8001494 <_sbrk+0x3c>)
 800146c:	4403      	add	r3, r0
 800146e:	1b09      	subs	r1, r1, r4
 8001470:	428b      	cmp	r3, r1
 8001472:	d906      	bls.n	8001482 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001474:	f001 ff7a 	bl	800336c <__errno>
 8001478:	230c      	movs	r3, #12
 800147a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800147c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001480:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001482:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001484:	e7fc      	b.n	8001480 <_sbrk+0x28>
 8001486:	bf00      	nop
 8001488:	20000330 	.word	0x20000330
 800148c:	20000368 	.word	0x20000368
 8001490:	20010000 	.word	0x20010000
 8001494:	00000400 	.word	0x00000400

08001498 <SystemInit>:
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001498:	4a03      	ldr	r2, [pc, #12]	; (80014a8 <SystemInit+0x10>)
 800149a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800149e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a6:	4770      	bx	lr
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b0:	f7ff fff2 	bl	8001498 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f001 ff4d 	bl	8003378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014de:	f7ff fd67 	bl	8000fb0 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 80014f0:	0800689c 	.word	0x0800689c
  ldr r2, =_sbss
 80014f4:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 80014f8:	20000364 	.word	0x20000364

080014fc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_IRQHandler>

080014fe <a_sht40x_i2c_write>:
            - 0 success
            - 1 failed to write
* @note none
*/
uint8_t a_sht40x_i2c_write(sht40x_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length)
{
 80014fe:	b507      	push	{r0, r1, r2, lr}
	if(pHandle->i2c_write(pHandle->i2c_address, (uint8_t*)&u8Reg, 1) != 0)
 8001500:	68c3      	ldr	r3, [r0, #12]
{
 8001502:	f88d 1007 	strb.w	r1, [sp, #7]
	if(pHandle->i2c_write(pHandle->i2c_address, (uint8_t*)&u8Reg, 1) != 0)
 8001506:	2201      	movs	r2, #1
 8001508:	f10d 0107 	add.w	r1, sp, #7
 800150c:	7e00      	ldrb	r0, [r0, #24]
 800150e:	4798      	blx	r3
	{
		return 1;                                       /**< return an error if failed to execute */
	}
	return 0;                                           /**< return success */
}
 8001510:	3800      	subs	r0, #0
 8001512:	bf18      	it	ne
 8001514:	2001      	movne	r0, #1
 8001516:	b003      	add	sp, #12
 8001518:	f85d fb04 	ldr.w	pc, [sp], #4

0800151c <a_sht40x_i2c_read>:
*          - 1 failed to read
* @note none
*/

uint8_t a_sht40x_i2c_read(sht40x_handle_t  *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length)
{
 800151c:	b510      	push	{r4, lr}
 800151e:	4611      	mov	r1, r2
	if(pHandle->i2c_read(pHandle->i2c_address, (uint8_t*)pBuf, u8Length) != 0)
 8001520:	6884      	ldr	r4, [r0, #8]
 8001522:	7e00      	ldrb	r0, [r0, #24]
 8001524:	461a      	mov	r2, r3
 8001526:	47a0      	blx	r4
	{
		return 1;                                       /**< return an error if failed to execute */
	}
    return 0;                                           /**< return success */
}
 8001528:	3800      	subs	r0, #0
 800152a:	bf18      	it	ne
 800152c:	2001      	movne	r0, #1
 800152e:	bd10      	pop	{r4, pc}

08001530 <a_sht40x_print_error_msg>:
* @note   none
*/
void a_sht40x_print_error_msg(sht40x_handle_t *const pHandle, char *const pBuffer)
{
#ifdef SHT40X_DEBUG_MODE
    pHandle->debug_print("sht40x: failed to %s.\r\n", pBuffer);
 8001530:	6943      	ldr	r3, [r0, #20]
 8001532:	4801      	ldr	r0, [pc, #4]	; (8001538 <a_sht40x_print_error_msg+0x8>)
 8001534:	4718      	bx	r3
 8001536:	bf00      	nop
 8001538:	08006370 	.word	0x08006370

0800153c <sht40x_init>:
 *            - 2 pHandle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t sht40x_init(sht40x_handle_t *pHandle)
{
 800153c:	b538      	push	{r3, r4, r5, lr}

    if(pHandle == NULL)
 800153e:	4604      	mov	r4, r0
 8001540:	b310      	cbz	r0, 8001588 <sht40x_init+0x4c>
        return 2;     /**< return failed error */
    if(pHandle->debug_print == NULL)
 8001542:	6943      	ldr	r3, [r0, #20]
 8001544:	b11b      	cbz	r3, 800154e <sht40x_init+0x12>
        return 3;      /**< return failed error */

    if(pHandle->delay_ms == NULL)
 8001546:	6902      	ldr	r2, [r0, #16]
 8001548:	b91a      	cbnz	r2, 8001552 <sht40x_init+0x16>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: delay_ms is null\r\n");
 800154a:	4810      	ldr	r0, [pc, #64]	; (800158c <sht40x_init+0x50>)
    }

    if(pHandle->i2c_init == NULL )
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_init is null\r\n");
 800154c:	4798      	blx	r3
        return 3;      /**< return failed error */
 800154e:	2003      	movs	r0, #3
 8001550:	e017      	b.n	8001582 <sht40x_init+0x46>
    if(pHandle->i2c_init == NULL )
 8001552:	6802      	ldr	r2, [r0, #0]
 8001554:	b90a      	cbnz	r2, 800155a <sht40x_init+0x1e>
        pHandle->debug_print("sht40x: i2c_init is null\r\n");
 8001556:	480e      	ldr	r0, [pc, #56]	; (8001590 <sht40x_init+0x54>)
 8001558:	e7f8      	b.n	800154c <sht40x_init+0x10>
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_deinit == NULL )
 800155a:	6841      	ldr	r1, [r0, #4]
 800155c:	b909      	cbnz	r1, 8001562 <sht40x_init+0x26>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_deinit is null\r\n");
 800155e:	480d      	ldr	r0, [pc, #52]	; (8001594 <sht40x_init+0x58>)
 8001560:	e7f4      	b.n	800154c <sht40x_init+0x10>
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_read == NULL )
 8001562:	6881      	ldr	r1, [r0, #8]
 8001564:	b909      	cbnz	r1, 800156a <sht40x_init+0x2e>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_read is null\r\n");
 8001566:	480c      	ldr	r0, [pc, #48]	; (8001598 <sht40x_init+0x5c>)
 8001568:	e7f0      	b.n	800154c <sht40x_init+0x10>
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_write == NULL )
 800156a:	68c1      	ldr	r1, [r0, #12]
 800156c:	b909      	cbnz	r1, 8001572 <sht40x_init+0x36>
    {
#ifdef SHT40X_DEBUG_MODE
        pHandle->debug_print("sht40x: i2c_write is null\r\n");
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <sht40x_init+0x60>)
 8001570:	e7ec      	b.n	800154c <sht40x_init+0x10>
#endif // SHT40X_DEBUG_MODE
        return 3;
    }

    if(pHandle->i2c_init())
 8001572:	4790      	blx	r2
 8001574:	2501      	movs	r5, #1
 8001576:	b128      	cbz	r0, 8001584 <sht40x_init+0x48>
    {
        a_sht40x_print_error_msg(pHandle, "initialize i2c");
 8001578:	4620      	mov	r0, r4
 800157a:	4909      	ldr	r1, [pc, #36]	; (80015a0 <sht40x_init+0x64>)
 800157c:	f7ff ffd8 	bl	8001530 <a_sht40x_print_error_msg>
        return 1 ;
 8001580:	4628      	mov	r0, r5
    }
    pHandle->inited = 1;
    return 0;                   /**< return success */
}
 8001582:	bd38      	pop	{r3, r4, r5, pc}
    pHandle->inited = 1;
 8001584:	76a5      	strb	r5, [r4, #26]
    return 0;                   /**< return success */
 8001586:	e7fc      	b.n	8001582 <sht40x_init+0x46>
        return 2;     /**< return failed error */
 8001588:	2002      	movs	r0, #2
 800158a:	e7fa      	b.n	8001582 <sht40x_init+0x46>
 800158c:	08006388 	.word	0x08006388
 8001590:	080063a3 	.word	0x080063a3
 8001594:	080063be 	.word	0x080063be
 8001598:	080063db 	.word	0x080063db
 800159c:	080063f6 	.word	0x080063f6
 80015a0:	08006412 	.word	0x08006412

080015a4 <sht40x_set_addr>:
 * @note      none
 */
uint8_t sht40x_set_addr(sht40x_handle_t *const pHandle)
{

    if(pHandle == NULL)
 80015a4:	b130      	cbz	r0, 80015b4 <sht40x_set_addr+0x10>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80015a6:	7e83      	ldrb	r3, [r0, #26]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d105      	bne.n	80015b8 <sht40x_set_addr+0x14>
        return 3;      /**< return failed error */

    pHandle->i2c_address = pHandle->addres;
 80015ac:	7ec3      	ldrb	r3, [r0, #27]
 80015ae:	7603      	strb	r3, [r0, #24]
    {
        a_sht40x_print_error_msg(pHandle, "set i2c address");
        return 1;           /*< failed */
    }

    return 0;     /*< success */
 80015b0:	2000      	movs	r0, #0
 80015b2:	4770      	bx	lr
        return 2;     /**< return failed error */
 80015b4:	2002      	movs	r0, #2
 80015b6:	4770      	bx	lr
        return 3;      /**< return failed error */
 80015b8:	2003      	movs	r0, #3
}
 80015ba:	4770      	bx	lr

080015bc <sht40x_set_variant>:
 * @note      none
 */
uint8_t sht40x_set_variant(sht40x_handle_t *const pHandle, sht40x_variant_t variant)
{

    if(pHandle == NULL)
 80015bc:	b178      	cbz	r0, 80015de <sht40x_set_variant+0x22>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80015be:	7e83      	ldrb	r3, [r0, #26]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d10e      	bne.n	80015e2 <sht40x_set_variant+0x26>
    {
        a_sht40x_print_error_msg(pHandle, "set device variant");
        return 1;   /**< failed*/
    }

    switch(variant)
 80015c4:	2901      	cmp	r1, #1
    pHandle->variant = variant;
 80015c6:	7641      	strb	r1, [r0, #25]
    switch(variant)
 80015c8:	d007      	beq.n	80015da <sht40x_set_variant+0x1e>
 80015ca:	d902      	bls.n	80015d2 <sht40x_set_variant+0x16>
 80015cc:	3902      	subs	r1, #2
 80015ce:	2901      	cmp	r1, #1
 80015d0:	d801      	bhi.n	80015d6 <sht40x_set_variant+0x1a>
    {

        case SHT40_AD1B_VARIANT:
        {
            pHandle->addres = (sht40x_i2c_address_t)SHT40_AD1B_IIC_ADDRESS;
 80015d2:	2344      	movs	r3, #68	; 0x44
        }


        case SHT40_BD1B_VARIANT:
        {
            pHandle->addres = (sht40x_i2c_address_t)SHT40_BD1B_IIC_ADDRESS;
 80015d4:	76c3      	strb	r3, [r0, #27]
    switch(variant)
 80015d6:	2000      	movs	r0, #0
        }

    }

    return 0;   /**< success */
}
 80015d8:	4770      	bx	lr
            pHandle->addres = (sht40x_i2c_address_t)SHT40_BD1B_IIC_ADDRESS;
 80015da:	2345      	movs	r3, #69	; 0x45
 80015dc:	e7fa      	b.n	80015d4 <sht40x_set_variant+0x18>
        return 2;     /**< return failed error */
 80015de:	2002      	movs	r0, #2
 80015e0:	4770      	bx	lr
        return 3;      /**< return failed error */
 80015e2:	2003      	movs	r0, #3
 80015e4:	4770      	bx	lr
	...

080015e8 <sht40x_get_temp_rh>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_get_temp_rh(sht40x_handle_t *const pHandle,  sht40x_precision_t precision, sht40x_data_t *pData)
{
 80015e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80015ea:	4616      	mov	r6, r2
    uint8_t err;
    uint8_t pStatus[RESPONSE_LENGTH];

    if(pHandle == NULL)
 80015ec:	4605      	mov	r5, r0
 80015ee:	2800      	cmp	r0, #0
 80015f0:	f000 8084 	beq.w	80016fc <sht40x_get_temp_rh+0x114>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 80015f4:	7e83      	ldrb	r3, [r0, #26]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	f040 8082 	bne.w	8001700 <sht40x_get_temp_rh+0x118>
        return 3;      /**< return failed error */

    err = a_sht40x_i2c_write(pHandle, READ_PRECISION[precision], DUMMY_DATA, 0);
 80015fc:	4c46      	ldr	r4, [pc, #280]	; (8001718 <sht40x_get_temp_rh+0x130>)
 80015fe:	2300      	movs	r3, #0
 8001600:	5c61      	ldrb	r1, [r4, r1]
 8001602:	461a      	mov	r2, r3
 8001604:	f7ff ff7b 	bl	80014fe <a_sht40x_i2c_write>
    if(err != SHT40X_DRV_OK)
 8001608:	4604      	mov	r4, r0
 800160a:	b130      	cbz	r0, 800161a <sht40x_get_temp_rh+0x32>
    {
        a_sht40x_print_error_msg(pHandle, "write temp and humidity cmd");
 800160c:	4943      	ldr	r1, [pc, #268]	; (800171c <sht40x_get_temp_rh+0x134>)
    pHandle->delay_ms(10);      /**< wait 10 ms for conversion to complete */

    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)pStatus, RESPONSE_LENGTH);  /**< read result */
    if(err != SHT40X_DRV_OK)
    {
        a_sht40x_print_error_msg(pHandle, "read temp and humidity");
 800160e:	4628      	mov	r0, r5
 8001610:	f7ff ff8e 	bl	8001530 <a_sht40x_print_error_msg>
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */

    memcpy(pData->rawData, pStatus, RESPONSE_LENGTH);

    return 0;
}
 8001614:	4620      	mov	r0, r4
 8001616:	b002      	add	sp, #8
 8001618:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->delay_ms(10);      /**< wait 10 ms for conversion to complete */
 800161a:	692b      	ldr	r3, [r5, #16]
 800161c:	200a      	movs	r0, #10
 800161e:	4798      	blx	r3
    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)pStatus, RESPONSE_LENGTH);  /**< read result */
 8001620:	4621      	mov	r1, r4
 8001622:	2306      	movs	r3, #6
 8001624:	466a      	mov	r2, sp
 8001626:	4628      	mov	r0, r5
 8001628:	f7ff ff78 	bl	800151c <a_sht40x_i2c_read>
    if(err != SHT40X_DRV_OK)
 800162c:	4604      	mov	r4, r0
 800162e:	b108      	cbz	r0, 8001634 <sht40x_get_temp_rh+0x4c>
        a_sht40x_print_error_msg(pHandle, "read temp and humidity");
 8001630:	493b      	ldr	r1, [pc, #236]	; (8001720 <sht40x_get_temp_rh+0x138>)
 8001632:	e7ec      	b.n	800160e <sht40x_get_temp_rh+0x26>
    pData->temperature_C = (pStatus[0] << 8) |  pStatus[1];
 8001634:	f8bd 0000 	ldrh.w	r0, [sp]
 8001638:	ba40      	rev16	r0, r0
 800163a:	b280      	uxth	r0, r0
    pData->temperature_C = ((pData->temperature_C/65535.0) * 175) - 45;
 800163c:	ee07 0a90 	vmov	s15, r0
 8001640:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001644:	ee17 0a90 	vmov	r0, s15
 8001648:	f7fe ff7e 	bl	8000548 <__aeabi_f2d>
 800164c:	a32e      	add	r3, pc, #184	; (adr r3, 8001708 <sht40x_get_temp_rh+0x120>)
 800164e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001652:	f7ff f8fb 	bl	800084c <__aeabi_ddiv>
 8001656:	a32e      	add	r3, pc, #184	; (adr r3, 8001710 <sht40x_get_temp_rh+0x128>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7fe ffcc 	bl	80005f8 <__aeabi_dmul>
 8001660:	4b30      	ldr	r3, [pc, #192]	; (8001724 <sht40x_get_temp_rh+0x13c>)
 8001662:	2200      	movs	r2, #0
 8001664:	f7fe fe10 	bl	8000288 <__aeabi_dsub>
 8001668:	f7ff fa9e 	bl	8000ba8 <__aeabi_d2f>
 800166c:	ee07 0a90 	vmov	s15, r0
    pData->temperature_F = (pData->temperature_C * 9/5) + 32;
 8001670:	eeb2 7a02 	vmov.f32	s14, #34	; 0x41100000  9.0
 8001674:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001678:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 800167c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    pData->temperature_C = ((pData->temperature_C/65535.0) * 175) - 45;
 8001680:	6030      	str	r0, [r6, #0]
    pData->humidity = (pStatus[3] << 8) | pStatus[4];
 8001682:	f8bd 0003 	ldrh.w	r0, [sp, #3]
 8001686:	ba40      	rev16	r0, r0
 8001688:	b280      	uxth	r0, r0
    pData->temperature_F = (pData->temperature_C * 9/5) + 32;
 800168a:	eddf 7a27 	vldr	s15, [pc, #156]	; 8001728 <sht40x_get_temp_rh+0x140>
 800168e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001692:	edc6 7a01 	vstr	s15, [r6, #4]
    pData->humidity = ((pData->humidity/65535.0) * 125) - 6;
 8001696:	ee07 0a90 	vmov	s15, r0
 800169a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800169e:	ee17 0a90 	vmov	r0, s15
 80016a2:	f7fe ff51 	bl	8000548 <__aeabi_f2d>
 80016a6:	a318      	add	r3, pc, #96	; (adr r3, 8001708 <sht40x_get_temp_rh+0x120>)
 80016a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ac:	f7ff f8ce 	bl	800084c <__aeabi_ddiv>
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <sht40x_get_temp_rh+0x144>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	f7fe ffa0 	bl	80005f8 <__aeabi_dmul>
 80016b8:	4b1d      	ldr	r3, [pc, #116]	; (8001730 <sht40x_get_temp_rh+0x148>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	f7fe fde4 	bl	8000288 <__aeabi_dsub>
 80016c0:	f7ff fa72 	bl	8000ba8 <__aeabi_d2f>
    pData->humidity =  pData->humidity > HUMIDITY_MAX ? HUMIDITY_MAX: pData->humidity;                     /**< if humidity is high than max allowed, set to 100 */
 80016c4:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001734 <sht40x_get_temp_rh+0x14c>
    pData->humidity = ((pData->humidity/65535.0) * 125) - 6;
 80016c8:	ee07 0a90 	vmov	s15, r0
    pData->humidity =  pData->humidity > HUMIDITY_MAX ? HUMIDITY_MAX: pData->humidity;                     /**< if humidity is high than max allowed, set to 100 */
 80016cc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016d4:	dc0c      	bgt.n	80016f0 <sht40x_get_temp_rh+0x108>
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */
 80016d6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016de:	d40a      	bmi.n	80016f6 <sht40x_get_temp_rh+0x10e>
    memcpy(pData->rawData, pStatus, RESPONSE_LENGTH);
 80016e0:	9800      	ldr	r0, [sp, #0]
 80016e2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */
 80016e6:	edc6 7a02 	vstr	s15, [r6, #8]
    memcpy(pData->rawData, pStatus, RESPONSE_LENGTH);
 80016ea:	60f0      	str	r0, [r6, #12]
 80016ec:	8233      	strh	r3, [r6, #16]
    return 0;
 80016ee:	e791      	b.n	8001614 <sht40x_get_temp_rh+0x2c>
    pData->humidity =  pData->humidity > HUMIDITY_MAX ? HUMIDITY_MAX: pData->humidity;                     /**< if humidity is high than max allowed, set to 100 */
 80016f0:	eef0 7a47 	vmov.f32	s15, s14
 80016f4:	e7f4      	b.n	80016e0 <sht40x_get_temp_rh+0xf8>
    pData->humidity =  pData->humidity < HUMIDITY_MIN ? HUMIDITY_MIN:  pData->humidity;                    /**< if humidity is less than min allowed, set to 0 */
 80016f6:	eddf 7a10 	vldr	s15, [pc, #64]	; 8001738 <sht40x_get_temp_rh+0x150>
 80016fa:	e7f1      	b.n	80016e0 <sht40x_get_temp_rh+0xf8>
        return 2;     /**< return failed error */
 80016fc:	2402      	movs	r4, #2
 80016fe:	e789      	b.n	8001614 <sht40x_get_temp_rh+0x2c>
        return 3;      /**< return failed error */
 8001700:	2403      	movs	r4, #3
 8001702:	e787      	b.n	8001614 <sht40x_get_temp_rh+0x2c>
 8001704:	f3af 8000 	nop.w
 8001708:	00000000 	.word	0x00000000
 800170c:	40efffe0 	.word	0x40efffe0
 8001710:	00000000 	.word	0x00000000
 8001714:	4065e000 	.word	0x4065e000
 8001718:	0800647e 	.word	0x0800647e
 800171c:	08006421 	.word	0x08006421
 8001720:	0800643d 	.word	0x0800643d
 8001724:	40468000 	.word	0x40468000
 8001728:	42000000 	.word	0x42000000
 800172c:	405f4000 	.word	0x405f4000
 8001730:	40180000 	.word	0x40180000
 8001734:	42c80000 	.word	0x42c80000
 8001738:	00000000 	.word	0x00000000

0800173c <sht40x_get_serial_number>:
 *            - 2 pHandle is NULL
 *            - 3 pHandle is not initialized
 * @note      none
 */
uint8_t sht40x_get_serial_number(sht40x_handle_t *const pHandle, uint32_t *pSerial_Number)
{
 800173c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800173e:	460e      	mov	r6, r1
    uint8_t temp_data[4];         /**< temporary data to hold serial number */
    uint8_t count = 3;
    uint8_t dataOut[4];
    int index;

    if(pHandle == NULL)
 8001740:	4605      	mov	r5, r0
 8001742:	b368      	cbz	r0, 80017a0 <sht40x_get_serial_number+0x64>
        return 2;     /**< return failed error */
    if(pHandle->inited != 1)
 8001744:	7e83      	ldrb	r3, [r0, #26]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d12c      	bne.n	80017a4 <sht40x_get_serial_number+0x68>
        return 3;      /**< return failed error */

    memset(temp_data, 0, 4);
 800174a:	2300      	movs	r3, #0

     err = a_sht40x_i2c_write(pHandle, SHT40X_READ_SERIAL_NUMBER_CMD, DUMMY_DATA, 0);
 800174c:	461a      	mov	r2, r3
 800174e:	2189      	movs	r1, #137	; 0x89
    memset(temp_data, 0, 4);
 8001750:	9300      	str	r3, [sp, #0]
     err = a_sht40x_i2c_write(pHandle, SHT40X_READ_SERIAL_NUMBER_CMD, DUMMY_DATA, 0);
 8001752:	f7ff fed4 	bl	80014fe <a_sht40x_i2c_write>
    if(err != SHT40X_DRV_OK)
 8001756:	4604      	mov	r4, r0
 8001758:	b130      	cbz	r0, 8001768 <sht40x_get_serial_number+0x2c>
    {
        a_sht40x_print_error_msg(pHandle, "write UID cmd");
 800175a:	4913      	ldr	r1, [pc, #76]	; (80017a8 <sht40x_get_serial_number+0x6c>)
    pHandle->delay_ms(10);

    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)temp_data, RESPONSE_LENGTH);
    if(err != SHT40X_DRV_OK)
    {
        a_sht40x_print_error_msg(pHandle, "get UID");
 800175c:	4628      	mov	r0, r5
 800175e:	f7ff fee7 	bl	8001530 <a_sht40x_print_error_msg>
    }
   memcpy(serial.pBuffer, dataOut, 4);
  *pSerial_Number = serial.raw;

    return 0;           /**< success */
}
 8001762:	4620      	mov	r0, r4
 8001764:	b002      	add	sp, #8
 8001766:	bd70      	pop	{r4, r5, r6, pc}
    pHandle->delay_ms(10);
 8001768:	692b      	ldr	r3, [r5, #16]
 800176a:	200a      	movs	r0, #10
 800176c:	4798      	blx	r3
    err = a_sht40x_i2c_read(pHandle, DUMMY_DATA, (uint8_t *)temp_data, RESPONSE_LENGTH);
 800176e:	4621      	mov	r1, r4
 8001770:	2306      	movs	r3, #6
 8001772:	466a      	mov	r2, sp
 8001774:	4628      	mov	r0, r5
 8001776:	f7ff fed1 	bl	800151c <a_sht40x_i2c_read>
    if(err != SHT40X_DRV_OK)
 800177a:	4604      	mov	r4, r0
 800177c:	b108      	cbz	r0, 8001782 <sht40x_get_serial_number+0x46>
        a_sht40x_print_error_msg(pHandle, "get UID");
 800177e:	490b      	ldr	r1, [pc, #44]	; (80017ac <sht40x_get_serial_number+0x70>)
 8001780:	e7ec      	b.n	800175c <sht40x_get_serial_number+0x20>
        dataOut[count] = temp_data[index];     /**< move data into a temporarily buffer in reverse order*/
 8001782:	f89d 2000 	ldrb.w	r2, [sp]
	temp_data[2] = temp_data[3];
 8001786:	f89d 3003 	ldrb.w	r3, [sp, #3]
        dataOut[count] = temp_data[index];     /**< move data into a temporarily buffer in reverse order*/
 800178a:	f88d 2007 	strb.w	r2, [sp, #7]
 800178e:	f89d 2001 	ldrb.w	r2, [sp, #1]
 8001792:	f88d 2006 	strb.w	r2, [sp, #6]
 8001796:	f88d 3005 	strb.w	r3, [sp, #5]
  *pSerial_Number = serial.raw;
 800179a:	9b01      	ldr	r3, [sp, #4]
 800179c:	6033      	str	r3, [r6, #0]
    return 0;           /**< success */
 800179e:	e7e0      	b.n	8001762 <sht40x_get_serial_number+0x26>
        return 2;     /**< return failed error */
 80017a0:	2402      	movs	r4, #2
 80017a2:	e7de      	b.n	8001762 <sht40x_get_serial_number+0x26>
        return 3;      /**< return failed error */
 80017a4:	2403      	movs	r4, #3
 80017a6:	e7dc      	b.n	8001762 <sht40x_get_serial_number+0x26>
 80017a8:	08006454 	.word	0x08006454
 80017ac:	08006462 	.word	0x08006462

080017b0 <sht40x_info>:
 *             - 0 success
 *             - 2 pHandle is NULL
 * @note       none
 */
uint8_t sht40x_info(sht40x_info_t *const pInfo)
{
 80017b0:	b538      	push	{r3, r4, r5, lr}
    if (pInfo == NULL)     /**< check if handle is null */
 80017b2:	4604      	mov	r4, r0
 80017b4:	b328      	cbz	r0, 8001802 <sht40x_info+0x52>
    {
        return 2;              /**<failed, return error */
    }
    memset(pInfo, 0, sizeof (sht40x_info_t));                        /**< initialize sht40x info structure */
 80017b6:	2500      	movs	r5, #0
    strncpy(pInfo->chip_name, CHIP_NAME, 10);                        /**< copy chip name */
 80017b8:	4913      	ldr	r1, [pc, #76]	; (8001808 <sht40x_info+0x58>)
    memset(pInfo, 0, sizeof (sht40x_info_t));                        /**< initialize sht40x info structure */
 80017ba:	f8c0 503e 	str.w	r5, [r0, #62]	; 0x3e
    strncpy(pInfo->chip_name, CHIP_NAME, 10);                        /**< copy chip name */
 80017be:	220a      	movs	r2, #10
    memset(pInfo, 0, sizeof (sht40x_info_t));                        /**< initialize sht40x info structure */
 80017c0:	f8a0 5042 	strh.w	r5, [r0, #66]	; 0x42
    strncpy(pInfo->chip_name, CHIP_NAME, 10);                        /**< copy chip name */
 80017c4:	f002 fa6e 	bl	8003ca4 <strncpy>
    strncpy(pInfo->interface, INTERFACE, 8);                         /**< copy interface name */
 80017c8:	4910      	ldr	r1, [pc, #64]	; (800180c <sht40x_info+0x5c>)
 80017ca:	2205      	movs	r2, #5
 80017cc:	f104 0023 	add.w	r0, r4, #35	; 0x23
 80017d0:	f002 fa68 	bl	8003ca4 <strncpy>
    strncpy(pInfo->manufacturer_name, MANUFACTURER_NAME, 25);        /**< copy manufacturer name */
 80017d4:	490e      	ldr	r1, [pc, #56]	; (8001810 <sht40x_info+0x60>)
 80017d6:	2219      	movs	r2, #25
 80017d8:	f104 000a 	add.w	r0, r4, #10
 80017dc:	f002 fa62 	bl	8003ca4 <strncpy>
    pInfo->supply_voltage_max_v = SUPPLY_VOLTAGE_MAX;                /**< set minimal supply voltage */
    pInfo->supply_voltage_min_v = SUPPLY_VOLTAGE_MIN;                /**< set maximum supply voltage */
 80017e0:	4b0c      	ldr	r3, [pc, #48]	; (8001814 <sht40x_info+0x64>)
 80017e2:	62a3      	str	r3, [r4, #40]	; 0x28
    pInfo->supply_voltage_max_v = SUPPLY_VOLTAGE_MAX;                /**< set minimal supply voltage */
 80017e4:	4b0c      	ldr	r3, [pc, #48]	; (8001818 <sht40x_info+0x68>)
 80017e6:	62e3      	str	r3, [r4, #44]	; 0x2c
    pInfo->max_current_ma = MAX_CURRENT;                             /**< set maximum current */
 80017e8:	4b0c      	ldr	r3, [pc, #48]	; (800181c <sht40x_info+0x6c>)
 80017ea:	6323      	str	r3, [r4, #48]	; 0x30
    pInfo->temperature_max = TEMPERATURE_MAX;                        /**< set minimal temperature */
    pInfo->temperature_min = TEMPERATURE_MIN;                        /**< set maximum temperature */
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <sht40x_info+0x70>)
 80017ee:	6363      	str	r3, [r4, #52]	; 0x34
    pInfo->temperature_max = TEMPERATURE_MAX;                        /**< set minimal temperature */
 80017f0:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <sht40x_info+0x74>)
 80017f2:	63a3      	str	r3, [r4, #56]	; 0x38
    pInfo->flash_size_min = MCU_FLASH_MIN;                           /**< set the Micro-controller minimum recommended flash size */
 80017f4:	f44f 6388 	mov.w	r3, #1088	; 0x440
 80017f8:	87a3      	strh	r3, [r4, #60]	; 0x3c
    pInfo->ram_size_min = MCU_RAM_MIN;                               /**< set the Micro-controller minimum recommended ram size */
    pInfo->driver_version = DRIVER_VERSION;                          /**< set driver version */
 80017fa:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <sht40x_info+0x78>)
 80017fc:	6423      	str	r3, [r4, #64]	; 0x40

    return 0;                                                        /**< return success */
 80017fe:	4628      	mov	r0, r5
}
 8001800:	bd38      	pop	{r3, r4, r5, pc}
        return 2;              /**<failed, return error */
 8001802:	2002      	movs	r0, #2
 8001804:	e7fc      	b.n	8001800 <sht40x_info+0x50>
 8001806:	bf00      	nop
 8001808:	0800646a 	.word	0x0800646a
 800180c:	08006470 	.word	0x08006470
 8001810:	08006474 	.word	0x08006474
 8001814:	3fe66666 	.word	0x3fe66666
 8001818:	40666666 	.word	0x40666666
 800181c:	43fa0000 	.word	0x43fa0000
 8001820:	c2200000 	.word	0xc2200000
 8001824:	42fa0000 	.word	0x42fa0000
 8001828:	44964000 	.word	0x44964000

0800182c <sht40x_basic_initialize>:
 *          - 1 initialize failed
 * @note    none
 */

uint8_t sht40x_basic_initialize(sht40x_variant_t variant)
{
 800182c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    int err;

    /*link function*/
    DRIVER_SHT40X_LINK_INIT(&sht40x_handler, sht40x_handle_t);                               /**< Link the  */
 800182e:	4d13      	ldr	r5, [pc, #76]	; (800187c <sht40x_basic_initialize+0x50>)
{
 8001830:	9001      	str	r0, [sp, #4]
    DRIVER_SHT40X_LINK_INIT(&sht40x_handler, sht40x_handle_t);                               /**< Link the  */
 8001832:	2300      	movs	r3, #0
 8001834:	61ab      	str	r3, [r5, #24]
    DRIVER_SHT40X_LINK_I2C_INIT(&sht40x_handler, sht40x_interface_i2c_init);                 /**< Link the i2c initialize function */
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <sht40x_basic_initialize+0x54>)
 8001838:	602b      	str	r3, [r5, #0]
    DRIVER_SHT40X_LINK_I2C_DEINIT(&sht40x_handler, sht40x_interface_i2c_deinit);             /**< Link the the i2c de-initialize function */
 800183a:	4b12      	ldr	r3, [pc, #72]	; (8001884 <sht40x_basic_initialize+0x58>)
 800183c:	606b      	str	r3, [r5, #4]
    DRIVER_SHT40X_LINK_I2C_WRITE(&sht40x_handler, sht40x_interface_i2c_write);               /**< Link the i2c  write function */
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <sht40x_basic_initialize+0x5c>)
 8001840:	60eb      	str	r3, [r5, #12]
    DRIVER_SHT40X_LINK_I2C_READ(&sht40x_handler, sht40x_interface_i2c_read);                 /**< Link the i2c read function */
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <sht40x_basic_initialize+0x60>)
 8001844:	60ab      	str	r3, [r5, #8]
    DRIVER_SHT40X_LINK_DELAY_MS(&sht40x_handler,sht40x_interface_delay_ms);                  /**< Link delay function */
 8001846:	4b12      	ldr	r3, [pc, #72]	; (8001890 <sht40x_basic_initialize+0x64>)
 8001848:	612b      	str	r3, [r5, #16]
    DRIVER_SHT40X_LINK_DEBUG_PRINT(&sht40x_handler, sht40x_interface_debug_print);           /**< Link the the debug print function */

    /* sht40x initialize */
    err = sht40x_init(&sht40x_handler);
 800184a:	4628      	mov	r0, r5
    DRIVER_SHT40X_LINK_DEBUG_PRINT(&sht40x_handler, sht40x_interface_debug_print);           /**< Link the the debug print function */
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <sht40x_basic_initialize+0x68>)
 800184e:	616b      	str	r3, [r5, #20]
    err = sht40x_init(&sht40x_handler);
 8001850:	f7ff fe74 	bl	800153c <sht40x_init>
    if(err)
 8001854:	4604      	mov	r4, r0
 8001856:	b968      	cbnz	r0, 8001874 <sht40x_basic_initialize+0x48>
    {
        return err;   /**< return error status*/
    }

    /* set device variant */
    err = sht40x_set_variant(&sht40x_handler, variant);
 8001858:	9901      	ldr	r1, [sp, #4]
 800185a:	4628      	mov	r0, r5
 800185c:	f7ff feae 	bl	80015bc <sht40x_set_variant>
    if(err)
 8001860:	4604      	mov	r4, r0
 8001862:	b938      	cbnz	r0, 8001874 <sht40x_basic_initialize+0x48>
    {
       return err;   /**< return error status*/
    }

    /** set device address */
    err= sht40x_set_addr(&sht40x_handler);
 8001864:	4628      	mov	r0, r5
 8001866:	f7ff fe9d 	bl	80015a4 <sht40x_set_addr>
    if(err)
 800186a:	4604      	mov	r4, r0
 800186c:	b910      	cbnz	r0, 8001874 <sht40x_basic_initialize+0x48>
    {
        return err;   /**< return error status*/
    }

    sht40x_interface_delay_ms(10);         /**< wait 10 ms after initialize complete */
 800186e:	200a      	movs	r0, #10
 8001870:	f000 f824 	bl	80018bc <sht40x_interface_delay_ms>

    return 0;   /**< success */
}
 8001874:	4620      	mov	r0, r4
 8001876:	b003      	add	sp, #12
 8001878:	bd30      	pop	{r4, r5, pc}
 800187a:	bf00      	nop
 800187c:	20000334 	.word	0x20000334
 8001880:	080018b5 	.word	0x080018b5
 8001884:	080018b9 	.word	0x080018b9
 8001888:	08001921 	.word	0x08001921
 800188c:	08001909 	.word	0x08001909
 8001890:	080018bd 	.word	0x080018bd
 8001894:	080018c1 	.word	0x080018c1

08001898 <sht40x_basic_get_temp_rh>:
 *            - 0 success
 *            - 1 failed to get temp/humidity
 * @note      none
 */
uint8_t sht40x_basic_get_temp_rh(sht40x_precision_t precision, sht40x_data_t *pData)
{
 8001898:	460a      	mov	r2, r1
    int err;
   err = sht40x_get_temp_rh(&sht40x_handler, precision, pData);
 800189a:	4601      	mov	r1, r0
 800189c:	4801      	ldr	r0, [pc, #4]	; (80018a4 <sht40x_basic_get_temp_rh+0xc>)
 800189e:	f7ff bea3 	b.w	80015e8 <sht40x_get_temp_rh>
 80018a2:	bf00      	nop
 80018a4:	20000334 	.word	0x20000334

080018a8 <sht40x_basic_get_serial_number>:
 *            - 0 success
 *            - 1 failed to get S/N
 * @note      none
 */
uint8_t sht40x_basic_get_serial_number(uint32_t *pSerial_Number)
{
 80018a8:	4601      	mov	r1, r0
  int err;
  err = sht40x_get_serial_number(&sht40x_handler, (uint32_t *)pSerial_Number);
 80018aa:	4801      	ldr	r0, [pc, #4]	; (80018b0 <sht40x_basic_get_serial_number+0x8>)
 80018ac:	f7ff bf46 	b.w	800173c <sht40x_get_serial_number>
 80018b0:	20000334 	.word	0x20000334

080018b4 <sht40x_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
 80018b4:	2000      	movs	r0, #0
 80018b6:	4770      	bx	lr

080018b8 <sht40x_interface_i2c_deinit>:
 80018b8:	2000      	movs	r0, #0
 80018ba:	4770      	bx	lr

080018bc <sht40x_interface_delay_ms>:
 */
void sht40x_interface_delay_ms(uint32_t u32Ms)
{
    /*call your delay function here*/
    /*user code begin */
	  HAL_Delay(u32Ms);
 80018bc:	f000 b884 	b.w	80019c8 <HAL_Delay>

080018c0 <sht40x_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void sht40x_interface_debug_print(const char *const fmt, ...)
{
 80018c0:	b40f      	push	{r0, r1, r2, r3}
 80018c2:	b570      	push	{r4, r5, r6, lr}
 80018c4:	b0c2      	sub	sp, #264	; 0x108
 80018c6:	ac46      	add	r4, sp, #280	; 0x118
//#ifdef SHT40X_DEBUG_MODE
	volatile char str[256];
	    volatile uint8_t len;
	    va_list args;

	    memset((char *) str, 0, sizeof (char)*256);
 80018c8:	f44f 7580 	mov.w	r5, #256	; 0x100
{
 80018cc:	f854 6b04 	ldr.w	r6, [r4], #4
	    memset((char *) str, 0, sizeof (char)*256);
 80018d0:	462a      	mov	r2, r5
 80018d2:	2100      	movs	r1, #0
 80018d4:	a802      	add	r0, sp, #8
 80018d6:	f001 fd73 	bl	80033c0 <memset>
	    va_start(args, fmt);
	    vsnprintf((char *) str, 256, (char const *) fmt, args);
 80018da:	4623      	mov	r3, r4
 80018dc:	4632      	mov	r2, r6
 80018de:	4629      	mov	r1, r5
 80018e0:	a802      	add	r0, sp, #8
	    va_start(args, fmt);
 80018e2:	9401      	str	r4, [sp, #4]
	    vsnprintf((char *) str, 256, (char const *) fmt, args);
 80018e4:	f002 fa1c 	bl	8003d20 <vsniprintf>
	    va_end(args);

	    len = strlen((char *) str);
 80018e8:	a802      	add	r0, sp, #8
 80018ea:	f7fe fc71 	bl	80001d0 <strlen>
 80018ee:	b2c0      	uxtb	r0, r0
 80018f0:	f88d 0003 	strb.w	r0, [sp, #3]
	    (void)serial_print((const char *)str, len);                  /**< example of printf function, comment out if used */
 80018f4:	f89d 1003 	ldrb.w	r1, [sp, #3]
 80018f8:	a802      	add	r0, sp, #8
 80018fa:	f7ff fca3 	bl	8001244 <serial_print>

    /*user code end*/
//#endif
}
 80018fe:	b042      	add	sp, #264	; 0x108
 8001900:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8001904:	b004      	add	sp, #16
 8001906:	4770      	bx	lr

08001908 <sht40x_interface_i2c_read>:
{
 8001908:	b508      	push	{r3, lr}
	   if( i2c_read(addr, buf, len) != 0)
 800190a:	f7ff fcb5 	bl	8001278 <i2c_read>
 800190e:	b118      	cbz	r0, 8001918 <sht40x_interface_i2c_read+0x10>
		   sht40x_interface_debug_print("i2c read failed\n");
 8001910:	4802      	ldr	r0, [pc, #8]	; (800191c <sht40x_interface_i2c_read+0x14>)
 8001912:	f7ff ffd5 	bl	80018c0 <sht40x_interface_debug_print>
		   return 1;
 8001916:	2001      	movs	r0, #1
}
 8001918:	bd08      	pop	{r3, pc}
 800191a:	bf00      	nop
 800191c:	08006481 	.word	0x08006481

08001920 <sht40x_interface_i2c_write>:
{
 8001920:	b508      	push	{r3, lr}
    if(i2c_write(addr, buf, len) !=  0)
 8001922:	f7ff fc99 	bl	8001258 <i2c_write>
 8001926:	b118      	cbz	r0, 8001930 <sht40x_interface_i2c_write+0x10>
    	sht40x_interface_debug_print("i2c write failed\n");
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <sht40x_interface_i2c_write+0x14>)
 800192a:	f7ff ffc9 	bl	80018c0 <sht40x_interface_debug_print>
    	return 1;
 800192e:	2001      	movs	r0, #1
}
 8001930:	bd08      	pop	{r3, pc}
 8001932:	bf00      	nop
 8001934:	08006492 	.word	0x08006492

08001938 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001938:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800193a:	4b0f      	ldr	r3, [pc, #60]	; (8001978 <HAL_InitTick+0x40>)
{
 800193c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800193e:	7818      	ldrb	r0, [r3, #0]
 8001940:	b908      	cbnz	r0, 8001946 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001942:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001944:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001946:	4a0d      	ldr	r2, [pc, #52]	; (800197c <HAL_InitTick+0x44>)
 8001948:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800194c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001950:	6810      	ldr	r0, [r2, #0]
 8001952:	fbb0 f0f3 	udiv	r0, r0, r3
 8001956:	f000 f88f 	bl	8001a78 <HAL_SYSTICK_Config>
 800195a:	4604      	mov	r4, r0
 800195c:	2800      	cmp	r0, #0
 800195e:	d1f0      	bne.n	8001942 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001960:	2d0f      	cmp	r5, #15
 8001962:	d8ee      	bhi.n	8001942 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001964:	4602      	mov	r2, r0
 8001966:	4629      	mov	r1, r5
 8001968:	f04f 30ff 	mov.w	r0, #4294967295
 800196c:	f000 f852 	bl	8001a14 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001970:	4b03      	ldr	r3, [pc, #12]	; (8001980 <HAL_InitTick+0x48>)
 8001972:	4620      	mov	r0, r4
 8001974:	601d      	str	r5, [r3, #0]
  return status;
 8001976:	e7e5      	b.n	8001944 <HAL_InitTick+0xc>
 8001978:	20000004 	.word	0x20000004
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008

08001984 <HAL_Init>:
{
 8001984:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001986:	2003      	movs	r0, #3
 8001988:	f000 f832 	bl	80019f0 <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800198c:	200f      	movs	r0, #15
 800198e:	f7ff ffd3 	bl	8001938 <HAL_InitTick>
 8001992:	4604      	mov	r4, r0
 8001994:	b918      	cbnz	r0, 800199e <HAL_Init+0x1a>
    HAL_MspInit();
 8001996:	f7ff fc81 	bl	800129c <HAL_MspInit>
}
 800199a:	4620      	mov	r0, r4
 800199c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800199e:	2401      	movs	r4, #1
 80019a0:	e7fb      	b.n	800199a <HAL_Init+0x16>
	...

080019a4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80019a4:	4a03      	ldr	r2, [pc, #12]	; (80019b4 <HAL_IncTick+0x10>)
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_IncTick+0x14>)
 80019a8:	6811      	ldr	r1, [r2, #0]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	440b      	add	r3, r1
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	20000350 	.word	0x20000350
 80019b8:	20000004 	.word	0x20000004

080019bc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80019bc:	4b01      	ldr	r3, [pc, #4]	; (80019c4 <HAL_GetTick+0x8>)
 80019be:	6818      	ldr	r0, [r3, #0]
}
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	20000350 	.word	0x20000350

080019c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c8:	b538      	push	{r3, r4, r5, lr}
 80019ca:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff fff6 	bl	80019bc <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d0:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 80019d2:	bf1c      	itt	ne
 80019d4:	4b05      	ldrne	r3, [pc, #20]	; (80019ec <HAL_Delay+0x24>)
 80019d6:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80019d8:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80019da:	bf18      	it	ne
 80019dc:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019de:	f7ff ffed 	bl	80019bc <HAL_GetTick>
 80019e2:	1b43      	subs	r3, r0, r5
 80019e4:	42a3      	cmp	r3, r4
 80019e6:	d3fa      	bcc.n	80019de <HAL_Delay+0x16>
  {
  }
}
 80019e8:	bd38      	pop	{r3, r4, r5, pc}
 80019ea:	bf00      	nop
 80019ec:	20000004 	.word	0x20000004

080019f0 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f0:	4907      	ldr	r1, [pc, #28]	; (8001a10 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80019f2:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019f4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019f8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a00:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001a0c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a14:	4b16      	ldr	r3, [pc, #88]	; (8001a70 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a16:	b530      	push	{r4, r5, lr}
 8001a18:	68dc      	ldr	r4, [r3, #12]
 8001a1a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1e:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a22:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a24:	2d04      	cmp	r5, #4
 8001a26:	bf28      	it	cs
 8001a28:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a2c:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a30:	bf8c      	ite	hi
 8001a32:	3c03      	subhi	r4, #3
 8001a34:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a36:	fa03 f505 	lsl.w	r5, r3, r5
 8001a3a:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a3e:	40a3      	lsls	r3, r4
 8001a40:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001a46:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a4c:	bfac      	ite	ge
 8001a4e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a52:	4a08      	ldrlt	r2, [pc, #32]	; (8001a74 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a58:	bfb8      	it	lt
 8001a5a:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	bfaa      	itet	ge
 8001a62:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a68:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001a6c:	bd30      	pop	{r4, r5, pc}
 8001a6e:	bf00      	nop
 8001a70:	e000ed00 	.word	0xe000ed00
 8001a74:	e000ed14 	.word	0xe000ed14

08001a78 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a78:	3801      	subs	r0, #1
 8001a7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001a7e:	d20b      	bcs.n	8001a98 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a80:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a84:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a86:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a88:	21f0      	movs	r1, #240	; 0xf0
 8001a8a:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a8e:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a90:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a92:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a94:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a96:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001a98:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001a9a:	4770      	bx	lr
 8001a9c:	e000ed00 	.word	0xe000ed00

08001aa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa4:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8001c0c <HAL_GPIO_Init+0x16c>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aa8:	4c56      	ldr	r4, [pc, #344]	; (8001c04 <HAL_GPIO_Init+0x164>)
  uint32_t position = 0x00u;
 8001aaa:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aac:	680a      	ldr	r2, [r1, #0]
 8001aae:	fa32 f503 	lsrs.w	r5, r2, r3
 8001ab2:	d102      	bne.n	8001aba <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001ab4:	b003      	add	sp, #12
 8001ab6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001aba:	2501      	movs	r5, #1
 8001abc:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00u)
 8001ac0:	ea18 0202 	ands.w	r2, r8, r2
 8001ac4:	f000 8098 	beq.w	8001bf8 <HAL_GPIO_Init+0x158>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ac8:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aca:	2703      	movs	r7, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001acc:	f006 0503 	and.w	r5, r6, #3
 8001ad0:	ea4f 0e43 	mov.w	lr, r3, lsl #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ad4:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ad8:	1e6f      	subs	r7, r5, #1
 8001ada:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001adc:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ae0:	d834      	bhi.n	8001b4c <HAL_GPIO_Init+0xac>
        temp = GPIOx->OSPEEDR;
 8001ae2:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001ae4:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001ae8:	68cf      	ldr	r7, [r1, #12]
 8001aea:	fa07 f70e 	lsl.w	r7, r7, lr
 8001aee:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001af2:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001af4:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001af6:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001afa:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001afe:	409f      	lsls	r7, r3
 8001b00:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8001b04:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001b06:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001b08:	ea07 080c 	and.w	r8, r7, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0c:	688f      	ldr	r7, [r1, #8]
 8001b0e:	fa07 f70e 	lsl.w	r7, r7, lr
 8001b12:	ea47 0708 	orr.w	r7, r7, r8
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b16:	2d02      	cmp	r5, #2
        GPIOx->PUPDR = temp;
 8001b18:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b1a:	d119      	bne.n	8001b50 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->AFR[position >> 3u];
 8001b1c:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 8001b20:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b24:	f003 0a07 	and.w	sl, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001b28:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b2c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8001b30:	f04f 0b0f 	mov.w	fp, #15
 8001b34:	fa0b fb0a 	lsl.w	fp, fp, sl
 8001b38:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b3c:	690f      	ldr	r7, [r1, #16]
 8001b3e:	fa07 f70a 	lsl.w	r7, r7, sl
 8001b42:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3u] = temp;
 8001b46:	f8c8 7020 	str.w	r7, [r8, #32]
 8001b4a:	e001      	b.n	8001b50 <HAL_GPIO_Init+0xb0>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b4c:	2d03      	cmp	r5, #3
 8001b4e:	d1da      	bne.n	8001b06 <HAL_GPIO_Init+0x66>
      temp = GPIOx->MODER;
 8001b50:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b52:	fa05 f50e 	lsl.w	r5, r5, lr
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b56:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b5a:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b5c:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001b60:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b62:	d049      	beq.n	8001bf8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b64:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001b68:	f045 0501 	orr.w	r5, r5, #1
 8001b6c:	f8c9 5060 	str.w	r5, [r9, #96]	; 0x60
 8001b70:	f8d9 5060 	ldr.w	r5, [r9, #96]	; 0x60
 8001b74:	f023 0703 	bic.w	r7, r3, #3
 8001b78:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001b7c:	f005 0501 	and.w	r5, r5, #1
 8001b80:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001b84:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b86:	f003 0c03 	and.w	ip, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b8a:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001b8c:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b8e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8001b92:	f04f 0e0f 	mov.w	lr, #15
 8001b96:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b9a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b9e:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ba2:	d02b      	beq.n	8001bfc <HAL_GPIO_Init+0x15c>
 8001ba4:	4d18      	ldr	r5, [pc, #96]	; (8001c08 <HAL_GPIO_Init+0x168>)
 8001ba6:	42a8      	cmp	r0, r5
 8001ba8:	d02a      	beq.n	8001c00 <HAL_GPIO_Init+0x160>
 8001baa:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001bae:	42a8      	cmp	r0, r5
 8001bb0:	bf0c      	ite	eq
 8001bb2:	2502      	moveq	r5, #2
 8001bb4:	2507      	movne	r5, #7
 8001bb6:	fa05 f50c 	lsl.w	r5, r5, ip
 8001bba:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bbe:	60bd      	str	r5, [r7, #8]
        temp = EXTI->RTSR1;
 8001bc0:	68a5      	ldr	r5, [r4, #8]
        temp &= ~(iocurrent);
 8001bc2:	43d7      	mvns	r7, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001bc4:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001bc8:	bf0c      	ite	eq
 8001bca:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001bcc:	4315      	orrne	r5, r2
        EXTI->RTSR1 = temp;
 8001bce:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR1;
 8001bd0:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001bd2:	f416 1f00 	tst.w	r6, #2097152	; 0x200000
        temp &= ~(iocurrent);
 8001bd6:	bf0c      	ite	eq
 8001bd8:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001bda:	4315      	orrne	r5, r2
        EXTI->FTSR1 = temp;
 8001bdc:	60e5      	str	r5, [r4, #12]
        temp = EXTI->EMR1;
 8001bde:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001be0:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001be4:	bf0c      	ite	eq
 8001be6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8001be8:	4315      	orrne	r5, r2
        EXTI->EMR1 = temp;
 8001bea:	6065      	str	r5, [r4, #4]
        temp = EXTI->IMR1;
 8001bec:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bee:	03f6      	lsls	r6, r6, #15
        temp &= ~(iocurrent);
 8001bf0:	bf54      	ite	pl
 8001bf2:	403d      	andpl	r5, r7
          temp |= iocurrent;
 8001bf4:	4315      	orrmi	r5, r2
        EXTI->IMR1 = temp;
 8001bf6:	6025      	str	r5, [r4, #0]
    position++;
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	e757      	b.n	8001aac <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001bfc:	2500      	movs	r5, #0
 8001bfe:	e7da      	b.n	8001bb6 <HAL_GPIO_Init+0x116>
 8001c00:	2501      	movs	r5, #1
 8001c02:	e7d8      	b.n	8001bb6 <HAL_GPIO_Init+0x116>
 8001c04:	40010400 	.word	0x40010400
 8001c08:	48000400 	.word	0x48000400
 8001c0c:	40021000 	.word	0x40021000

08001c10 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c10:	b10a      	cbz	r2, 8001c16 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c12:	6181      	str	r1, [r0, #24]
 8001c14:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c16:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001c18:	4770      	bx	lr

08001c1a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c1a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c1c:	ea01 0203 	and.w	r2, r1, r3
 8001c20:	ea21 0103 	bic.w	r1, r1, r3
 8001c24:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8001c28:	6181      	str	r1, [r0, #24]
}
 8001c2a:	4770      	bx	lr

08001c2c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001c2c:	6803      	ldr	r3, [r0, #0]
 8001c2e:	699a      	ldr	r2, [r3, #24]
 8001c30:	0791      	lsls	r1, r2, #30
  {
    hi2c->Instance->TXDR = 0x00U;
 8001c32:	bf44      	itt	mi
 8001c34:	2200      	movmi	r2, #0
 8001c36:	629a      	strmi	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c38:	699a      	ldr	r2, [r3, #24]
 8001c3a:	07d2      	lsls	r2, r2, #31
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001c3c:	bf5e      	ittt	pl
 8001c3e:	699a      	ldrpl	r2, [r3, #24]
 8001c40:	f042 0201 	orrpl.w	r2, r2, #1
 8001c44:	619a      	strpl	r2, [r3, #24]
  }
}
 8001c46:	4770      	bx	lr

08001c48 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001c48:	b530      	push	{r4, r5, lr}
 8001c4a:	9d03      	ldr	r5, [sp, #12]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c4c:	6804      	ldr	r4, [r0, #0]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c4e:	432b      	orrs	r3, r5
 8001c50:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c54:	4a06      	ldr	r2, [pc, #24]	; (8001c70 <I2C_TransferConfig+0x28>)
 8001c56:	6860      	ldr	r0, [r4, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c58:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8001c5c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c5e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8001c62:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8001c66:	ea20 0002 	bic.w	r0, r0, r2
 8001c6a:	4303      	orrs	r3, r0
 8001c6c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8001c6e:	bd30      	pop	{r4, r5, pc}
 8001c70:	03ff63ff 	.word	0x03ff63ff

08001c74 <I2C_IsErrorOccurred>:
{
 8001c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8001c78:	6803      	ldr	r3, [r0, #0]
 8001c7a:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c7c:	f014 0410 	ands.w	r4, r4, #16
{
 8001c80:	4605      	mov	r5, r0
 8001c82:	4688      	mov	r8, r1
 8001c84:	4617      	mov	r7, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8001c86:	d079      	beq.n	8001d7c <I2C_IsErrorOccurred+0x108>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001c88:	2210      	movs	r2, #16
 8001c8a:	61da      	str	r2, [r3, #28]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2600      	movs	r6, #0
              hi2c->State = HAL_I2C_STATE_READY;
 8001c8e:	f04f 0920 	mov.w	r9, #32
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	699a      	ldr	r2, [r3, #24]
 8001c96:	0694      	lsls	r4, r2, #26
 8001c98:	d436      	bmi.n	8001d08 <I2C_IsErrorOccurred+0x94>
 8001c9a:	b10e      	cbz	r6, 8001ca0 <I2C_IsErrorOccurred+0x2c>
    error_code |= HAL_I2C_ERROR_AF;
 8001c9c:	2404      	movs	r4, #4
 8001c9e:	e039      	b.n	8001d14 <I2C_IsErrorOccurred+0xa0>
      if (Timeout != HAL_MAX_DELAY)
 8001ca0:	f1b8 3fff 	cmp.w	r8, #4294967295
 8001ca4:	d0f6      	beq.n	8001c94 <I2C_IsErrorOccurred+0x20>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001ca6:	f7ff fe89 	bl	80019bc <HAL_GetTick>
 8001caa:	1bc0      	subs	r0, r0, r7
 8001cac:	4540      	cmp	r0, r8
 8001cae:	d802      	bhi.n	8001cb6 <I2C_IsErrorOccurred+0x42>
 8001cb0:	f1b8 0f00 	cmp.w	r8, #0
 8001cb4:	d1ed      	bne.n	8001c92 <I2C_IsErrorOccurred+0x1e>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8001cb6:	682b      	ldr	r3, [r5, #0]
 8001cb8:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8001cba:	f895 2042 	ldrb.w	r2, [r5, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cbe:	6998      	ldr	r0, [r3, #24]
 8001cc0:	0400      	lsls	r0, r0, #16
          tmp2 = hi2c->Mode;
 8001cc2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8001cc4:	d50a      	bpl.n	8001cdc <I2C_IsErrorOccurred+0x68>
 8001cc6:	0449      	lsls	r1, r1, #17
 8001cc8:	d408      	bmi.n	8001cdc <I2C_IsErrorOccurred+0x68>
              (tmp1 != I2C_CR2_STOP) && \
 8001cca:	2a20      	cmp	r2, #32
 8001ccc:	d006      	beq.n	8001cdc <I2C_IsErrorOccurred+0x68>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001cce:	685a      	ldr	r2, [r3, #4]
 8001cd0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001cd4:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8001cd6:	f7ff fe71 	bl	80019bc <HAL_GetTick>
 8001cda:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001cdc:	682b      	ldr	r3, [r5, #0]
 8001cde:	699c      	ldr	r4, [r3, #24]
 8001ce0:	f014 0420 	ands.w	r4, r4, #32
 8001ce4:	d1d5      	bne.n	8001c92 <I2C_IsErrorOccurred+0x1e>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8001ce6:	f7ff fe69 	bl	80019bc <HAL_GetTick>
 8001cea:	1bc0      	subs	r0, r0, r7
 8001cec:	2819      	cmp	r0, #25
 8001cee:	d9f5      	bls.n	8001cdc <I2C_IsErrorOccurred+0x68>
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf0:	6c6b      	ldr	r3, [r5, #68]	; 0x44
              __HAL_UNLOCK(hi2c);
 8001cf2:	f885 4040 	strb.w	r4, [r5, #64]	; 0x40
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cf6:	f043 0320 	orr.w	r3, r3, #32
 8001cfa:	646b      	str	r3, [r5, #68]	; 0x44
              status = HAL_ERROR;
 8001cfc:	2601      	movs	r6, #1
              hi2c->State = HAL_I2C_STATE_READY;
 8001cfe:	f885 9041 	strb.w	r9, [r5, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d02:	f885 4042 	strb.w	r4, [r5, #66]	; 0x42
              status = HAL_ERROR;
 8001d06:	e7e9      	b.n	8001cdc <I2C_IsErrorOccurred+0x68>
    if (status == HAL_OK)
 8001d08:	2e00      	cmp	r6, #0
 8001d0a:	d1c7      	bne.n	8001c9c <I2C_IsErrorOccurred+0x28>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d0c:	2220      	movs	r2, #32
 8001d0e:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8001d10:	2404      	movs	r4, #4
    status = HAL_ERROR;
 8001d12:	2601      	movs	r6, #1
  itflag = hi2c->Instance->ISR;
 8001d14:	682b      	ldr	r3, [r5, #0]
 8001d16:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8001d18:	05d0      	lsls	r0, r2, #23
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001d1a:	bf41      	itttt	mi
 8001d1c:	f44f 7180 	movmi.w	r1, #256	; 0x100
 8001d20:	61d9      	strmi	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8001d22:	f044 0401 	orrmi.w	r4, r4, #1
    status = HAL_ERROR;
 8001d26:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8001d28:	0551      	lsls	r1, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d2a:	bf41      	itttt	mi
 8001d2c:	f44f 6180 	movmi.w	r1, #1024	; 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8001d30:	f044 0408 	orrmi.w	r4, r4, #8
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001d34:	61d9      	strmi	r1, [r3, #28]
    status = HAL_ERROR;
 8001d36:	2601      	movmi	r6, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8001d38:	0592      	lsls	r2, r2, #22
 8001d3a:	d521      	bpl.n	8001d80 <I2C_IsErrorOccurred+0x10c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d3c:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8001d40:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001d44:	61da      	str	r2, [r3, #28]
    I2C_Flush_TXDR(hi2c);
 8001d46:	4628      	mov	r0, r5
 8001d48:	f7ff ff70 	bl	8001c2c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8001d4c:	682a      	ldr	r2, [r5, #0]
 8001d4e:	6853      	ldr	r3, [r2, #4]
 8001d50:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8001d54:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8001d58:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8001d5c:	f023 0301 	bic.w	r3, r3, #1
 8001d60:	6053      	str	r3, [r2, #4]
    hi2c->ErrorCode |= error_code;
 8001d62:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8001d64:	431c      	orrs	r4, r3
    hi2c->State = HAL_I2C_STATE_READY;
 8001d66:	2320      	movs	r3, #32
    hi2c->ErrorCode |= error_code;
 8001d68:	646c      	str	r4, [r5, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001d6a:	f885 3041 	strb.w	r3, [r5, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	f885 3042 	strb.w	r3, [r5, #66]	; 0x42
    __HAL_UNLOCK(hi2c);
 8001d74:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
 8001d78:	2601      	movs	r6, #1
 8001d7a:	e003      	b.n	8001d84 <I2C_IsErrorOccurred+0x110>
  HAL_StatusTypeDef status = HAL_OK;
 8001d7c:	4626      	mov	r6, r4
 8001d7e:	e7c9      	b.n	8001d14 <I2C_IsErrorOccurred+0xa0>
  if (status != HAL_OK)
 8001d80:	2e00      	cmp	r6, #0
 8001d82:	d1e0      	bne.n	8001d46 <I2C_IsErrorOccurred+0xd2>
}
 8001d84:	4630      	mov	r0, r6
 8001d86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001d8a <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8001d8a:	b570      	push	{r4, r5, r6, lr}
 8001d8c:	4604      	mov	r4, r0
 8001d8e:	460d      	mov	r5, r1
 8001d90:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d92:	6823      	ldr	r3, [r4, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	079b      	lsls	r3, r3, #30
 8001d98:	d501      	bpl.n	8001d9e <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8001d9a:	2000      	movs	r0, #0
}
 8001d9c:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d9e:	4632      	mov	r2, r6
 8001da0:	4629      	mov	r1, r5
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7ff ff66 	bl	8001c74 <I2C_IsErrorOccurred>
 8001da8:	b9a0      	cbnz	r0, 8001dd4 <I2C_WaitOnTXISFlagUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8001daa:	1c6a      	adds	r2, r5, #1
 8001dac:	d0f1      	beq.n	8001d92 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001dae:	f7ff fe05 	bl	80019bc <HAL_GetTick>
 8001db2:	1b80      	subs	r0, r0, r6
 8001db4:	42a8      	cmp	r0, r5
 8001db6:	d801      	bhi.n	8001dbc <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8001db8:	2d00      	cmp	r5, #0
 8001dba:	d1ea      	bne.n	8001d92 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dbc:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001dd0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	e7e1      	b.n	8001d9c <I2C_WaitOnTXISFlagUntilTimeout+0x12>

08001dd8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001dd8:	b570      	push	{r4, r5, r6, lr}
 8001dda:	4604      	mov	r4, r0
 8001ddc:	460d      	mov	r5, r1
 8001dde:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001de0:	6823      	ldr	r3, [r4, #0]
 8001de2:	699b      	ldr	r3, [r3, #24]
 8001de4:	075b      	lsls	r3, r3, #29
 8001de6:	d40e      	bmi.n	8001e06 <I2C_WaitOnRXNEFlagUntilTimeout+0x2e>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001de8:	4632      	mov	r2, r6
 8001dea:	4629      	mov	r1, r5
 8001dec:	4620      	mov	r0, r4
 8001dee:	f7ff ff41 	bl	8001c74 <I2C_IsErrorOccurred>
 8001df2:	bb38      	cbnz	r0, 8001e44 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001df4:	6823      	ldr	r3, [r4, #0]
 8001df6:	699a      	ldr	r2, [r3, #24]
 8001df8:	0691      	lsls	r1, r2, #26
 8001dfa:	d525      	bpl.n	8001e48 <I2C_WaitOnRXNEFlagUntilTimeout+0x70>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001dfc:	699a      	ldr	r2, [r3, #24]
 8001dfe:	0752      	lsls	r2, r2, #29
 8001e00:	d503      	bpl.n	8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
 8001e02:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8001e04:	b10a      	cbz	r2, 8001e0a <I2C_WaitOnRXNEFlagUntilTimeout+0x32>
        return HAL_OK;
 8001e06:	2000      	movs	r0, #0
}
 8001e08:	bd70      	pop	{r4, r5, r6, pc}
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e0a:	699a      	ldr	r2, [r3, #24]
 8001e0c:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e10:	bf1c      	itt	ne
 8001e12:	2210      	movne	r2, #16
 8001e14:	61da      	strne	r2, [r3, #28]
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e16:	f04f 0120 	mov.w	r1, #32
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001e1a:	bf18      	it	ne
 8001e1c:	2204      	movne	r2, #4
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e1e:	6462      	str	r2, [r4, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e20:	61d9      	str	r1, [r3, #28]
        I2C_RESET_CR2(hi2c);
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8001e28:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8001e2c:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 8001e30:	f022 0201 	bic.w	r2, r2, #1
 8001e34:	605a      	str	r2, [r3, #4]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e36:	2300      	movs	r3, #0
        hi2c->State = HAL_I2C_STATE_READY;
 8001e38:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8001e40:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001e44:	2001      	movs	r0, #1
 8001e46:	e7df      	b.n	8001e08 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e48:	f7ff fdb8 	bl	80019bc <HAL_GetTick>
 8001e4c:	1b80      	subs	r0, r0, r6
 8001e4e:	42a8      	cmp	r0, r5
 8001e50:	d801      	bhi.n	8001e56 <I2C_WaitOnRXNEFlagUntilTimeout+0x7e>
 8001e52:	2d00      	cmp	r5, #0
 8001e54:	d1c4      	bne.n	8001de0 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e56:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e58:	f043 0320 	orr.w	r3, r3, #32
 8001e5c:	6463      	str	r3, [r4, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      __HAL_UNLOCK(hi2c);
 8001e64:	2300      	movs	r3, #0
 8001e66:	e7eb      	b.n	8001e40 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>

08001e68 <I2C_WaitOnFlagUntilTimeout>:
{
 8001e68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e6c:	9f06      	ldr	r7, [sp, #24]
 8001e6e:	4604      	mov	r4, r0
 8001e70:	4688      	mov	r8, r1
 8001e72:	4616      	mov	r6, r2
 8001e74:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e76:	6822      	ldr	r2, [r4, #0]
 8001e78:	6993      	ldr	r3, [r2, #24]
 8001e7a:	ea38 0303 	bics.w	r3, r8, r3
 8001e7e:	bf0c      	ite	eq
 8001e80:	2301      	moveq	r3, #1
 8001e82:	2300      	movne	r3, #0
 8001e84:	42b3      	cmp	r3, r6
 8001e86:	d001      	beq.n	8001e8c <I2C_WaitOnFlagUntilTimeout+0x24>
  return HAL_OK;
 8001e88:	2000      	movs	r0, #0
 8001e8a:	e015      	b.n	8001eb8 <I2C_WaitOnFlagUntilTimeout+0x50>
    if (Timeout != HAL_MAX_DELAY)
 8001e8c:	1c6b      	adds	r3, r5, #1
 8001e8e:	d0f3      	beq.n	8001e78 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e90:	f7ff fd94 	bl	80019bc <HAL_GetTick>
 8001e94:	1bc0      	subs	r0, r0, r7
 8001e96:	42a8      	cmp	r0, r5
 8001e98:	d801      	bhi.n	8001e9e <I2C_WaitOnFlagUntilTimeout+0x36>
 8001e9a:	2d00      	cmp	r5, #0
 8001e9c:	d1eb      	bne.n	8001e76 <I2C_WaitOnFlagUntilTimeout+0xe>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e9e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001ea0:	f043 0320 	orr.w	r3, r3, #32
 8001ea4:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ea6:	2320      	movs	r3, #32
 8001ea8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001eb2:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8001eb6:	2001      	movs	r0, #1
}
 8001eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001ebc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8001ebc:	b570      	push	{r4, r5, r6, lr}
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	460d      	mov	r5, r1
 8001ec2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001ec4:	6823      	ldr	r3, [r4, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	069b      	lsls	r3, r3, #26
 8001eca:	d501      	bpl.n	8001ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8001ecc:	2000      	movs	r0, #0
}
 8001ece:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ed0:	4632      	mov	r2, r6
 8001ed2:	4629      	mov	r1, r5
 8001ed4:	4620      	mov	r0, r4
 8001ed6:	f7ff fecd 	bl	8001c74 <I2C_IsErrorOccurred>
 8001eda:	b990      	cbnz	r0, 8001f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x46>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001edc:	f7ff fd6e 	bl	80019bc <HAL_GetTick>
 8001ee0:	1b80      	subs	r0, r0, r6
 8001ee2:	42a8      	cmp	r0, r5
 8001ee4:	d801      	bhi.n	8001eea <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8001ee6:	2d00      	cmp	r5, #0
 8001ee8:	d1ec      	bne.n	8001ec4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001eea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001eec:	f043 0320 	orr.w	r3, r3, #32
 8001ef0:	6463      	str	r3, [r4, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ef2:	2320      	movs	r3, #32
 8001ef4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
        __HAL_UNLOCK(hi2c);
 8001efe:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001f02:	2001      	movs	r0, #1
 8001f04:	e7e3      	b.n	8001ece <I2C_WaitOnSTOPFlagUntilTimeout+0x12>

08001f06 <HAL_I2C_Init>:
{
 8001f06:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8001f08:	4604      	mov	r4, r0
 8001f0a:	2800      	cmp	r0, #0
 8001f0c:	d04a      	beq.n	8001fa4 <HAL_I2C_Init+0x9e>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f0e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8001f12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001f16:	b91b      	cbnz	r3, 8001f20 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8001f18:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8001f1c:	f7ff f9d6 	bl	80012cc <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f20:	2324      	movs	r3, #36	; 0x24
 8001f22:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	681a      	ldr	r2, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f30:	6862      	ldr	r2, [r4, #4]
 8001f32:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f36:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f38:	689a      	ldr	r2, [r3, #8]
 8001f3a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f3e:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f40:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f44:	2901      	cmp	r1, #1
 8001f46:	d124      	bne.n	8001f92 <HAL_I2C_Init+0x8c>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f48:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f4c:	609a      	str	r2, [r3, #8]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f4e:	685a      	ldr	r2, [r3, #4]
 8001f50:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8001f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f58:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f5a:	68da      	ldr	r2, [r3, #12]
 8001f5c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f60:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f62:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8001f66:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001f68:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001f6a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001f6e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f70:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	f042 0201 	orr.w	r2, r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f80:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8001f82:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f84:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f8a:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
}
 8001f90:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f92:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f96:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f98:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f9a:	bf04      	itt	eq
 8001f9c:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 8001fa0:	605a      	streq	r2, [r3, #4]
 8001fa2:	e7d4      	b.n	8001f4e <HAL_I2C_Init+0x48>
    return HAL_ERROR;
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	e7f3      	b.n	8001f90 <HAL_I2C_Init+0x8a>

08001fa8 <HAL_I2C_Master_Transmit>:
{
 8001fa8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8001fac:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fae:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8001fb2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fb4:	2b20      	cmp	r3, #32
{
 8001fb6:	4604      	mov	r4, r0
 8001fb8:	460e      	mov	r6, r1
 8001fba:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fbc:	f040 8086 	bne.w	80020cc <HAL_I2C_Master_Transmit+0x124>
    __HAL_LOCK(hi2c);
 8001fc0:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	f000 8081 	beq.w	80020cc <HAL_I2C_Master_Transmit+0x124>
 8001fca:	f04f 0a01 	mov.w	sl, #1
 8001fce:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8001fd2:	f7ff fcf3 	bl	80019bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fd6:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8001fd8:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001fda:	9000      	str	r0, [sp, #0]
 8001fdc:	4652      	mov	r2, sl
 8001fde:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fe2:	4620      	mov	r0, r4
 8001fe4:	f7ff ff40 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8001fe8:	b118      	cbz	r0, 8001ff2 <HAL_I2C_Master_Transmit+0x4a>
      return HAL_ERROR;
 8001fea:	2001      	movs	r0, #1
}
 8001fec:	b002      	add	sp, #8
 8001fee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001ff2:	2321      	movs	r3, #33	; 0x21
 8001ff4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001ff8:	2310      	movs	r3, #16
 8001ffa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ffe:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8002000:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002004:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002006:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800200a:	b29b      	uxth	r3, r3
 800200c:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800200e:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002010:	4b2f      	ldr	r3, [pc, #188]	; (80020d0 <HAL_I2C_Master_Transmit+0x128>)
 8002012:	d926      	bls.n	8002062 <HAL_I2C_Master_Transmit+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002014:	22ff      	movs	r2, #255	; 0xff
 8002016:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002018:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800201a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201e:	4631      	mov	r1, r6
 8002020:	4620      	mov	r0, r4
 8002022:	f7ff fe11 	bl	8001c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002026:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002028:	b29b      	uxth	r3, r3
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202a:	462a      	mov	r2, r5
 800202c:	4639      	mov	r1, r7
 800202e:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 8002030:	b9fb      	cbnz	r3, 8002072 <HAL_I2C_Master_Transmit+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002032:	f7ff ff43 	bl	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002036:	2800      	cmp	r0, #0
 8002038:	d1d7      	bne.n	8001fea <HAL_I2C_Master_Transmit+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800203a:	6823      	ldr	r3, [r4, #0]
 800203c:	2120      	movs	r1, #32
 800203e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002046:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 800204a:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800204e:	f022 0201 	bic.w	r2, r2, #1
 8002052:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002054:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002058:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800205c:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8002060:	e7c4      	b.n	8001fec <HAL_I2C_Master_Transmit+0x44>
      hi2c->XferSize = hi2c->XferCount;
 8002062:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002064:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002066:	b292      	uxth	r2, r2
 8002068:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800206a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800206e:	b2d2      	uxtb	r2, r2
 8002070:	e7d5      	b.n	800201e <HAL_I2C_Master_Transmit+0x76>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002072:	f7ff fe8a 	bl	8001d8a <I2C_WaitOnTXISFlagUntilTimeout>
 8002076:	2800      	cmp	r0, #0
 8002078:	d1b7      	bne.n	8001fea <HAL_I2C_Master_Transmit+0x42>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800207a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800207c:	6822      	ldr	r2, [r4, #0]
 800207e:	f813 1b01 	ldrb.w	r1, [r3], #1
 8002082:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8002084:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002086:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002088:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->XferCount--;
 800208a:	3b01      	subs	r3, #1
 800208c:	b29b      	uxth	r3, r3
 800208e:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002090:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002092:	3a01      	subs	r2, #1
 8002094:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002096:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8002098:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0c3      	beq.n	8002026 <HAL_I2C_Master_Transmit+0x7e>
 800209e:	2a00      	cmp	r2, #0
 80020a0:	d1c1      	bne.n	8002026 <HAL_I2C_Master_Transmit+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80020a2:	9500      	str	r5, [sp, #0]
 80020a4:	463b      	mov	r3, r7
 80020a6:	2180      	movs	r1, #128	; 0x80
 80020a8:	4620      	mov	r0, r4
 80020aa:	f7ff fedd 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 80020ae:	2800      	cmp	r0, #0
 80020b0:	d19b      	bne.n	8001fea <HAL_I2C_Master_Transmit+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020b2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80020b4:	b29b      	uxth	r3, r3
 80020b6:	2bff      	cmp	r3, #255	; 0xff
 80020b8:	d903      	bls.n	80020c2 <HAL_I2C_Master_Transmit+0x11a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80020ba:	22ff      	movs	r2, #255	; 0xff
 80020bc:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020be:	9000      	str	r0, [sp, #0]
 80020c0:	e7ab      	b.n	800201a <HAL_I2C_Master_Transmit+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80020c2:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020c4:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80020c6:	b292      	uxth	r2, r2
 80020c8:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020ca:	e7ce      	b.n	800206a <HAL_I2C_Master_Transmit+0xc2>
    return HAL_BUSY;
 80020cc:	2002      	movs	r0, #2
 80020ce:	e78d      	b.n	8001fec <HAL_I2C_Master_Transmit+0x44>
 80020d0:	80002000 	.word	0x80002000

080020d4 <HAL_I2C_Master_Receive>:
{
 80020d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80020d8:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020da:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 80020de:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e0:	2b20      	cmp	r3, #32
{
 80020e2:	4604      	mov	r4, r0
 80020e4:	460e      	mov	r6, r1
 80020e6:	4691      	mov	r9, r2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e8:	f040 8087 	bne.w	80021fa <HAL_I2C_Master_Receive+0x126>
    __HAL_LOCK(hi2c);
 80020ec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	f000 8082 	beq.w	80021fa <HAL_I2C_Master_Receive+0x126>
 80020f6:	f04f 0a01 	mov.w	sl, #1
 80020fa:	f880 a040 	strb.w	sl, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 80020fe:	f7ff fc5d 	bl	80019bc <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002102:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8002104:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002106:	9000      	str	r0, [sp, #0]
 8002108:	4652      	mov	r2, sl
 800210a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800210e:	4620      	mov	r0, r4
 8002110:	f7ff feaa 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 8002114:	b118      	cbz	r0, 800211e <HAL_I2C_Master_Receive+0x4a>
      return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
}
 8002118:	b002      	add	sp, #8
 800211a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800211e:	2322      	movs	r3, #34	; 0x22
 8002120:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002124:	2310      	movs	r3, #16
 8002126:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212a:	6460      	str	r0, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 800212c:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002130:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8002132:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002136:	b29b      	uxth	r3, r3
 8002138:	2bff      	cmp	r3, #255	; 0xff
    hi2c->XferISR   = NULL;
 800213a:	6360      	str	r0, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_I2C_Master_Receive+0x12c>)
 800213e:	d926      	bls.n	800218e <HAL_I2C_Master_Receive+0xba>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002140:	22ff      	movs	r2, #255	; 0xff
 8002142:	8522      	strh	r2, [r4, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002144:	9300      	str	r3, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002146:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800214a:	4631      	mov	r1, r6
 800214c:	4620      	mov	r0, r4
 800214e:	f7ff fd7b 	bl	8001c48 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002152:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002154:	b29b      	uxth	r3, r3
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002156:	462a      	mov	r2, r5
 8002158:	4639      	mov	r1, r7
 800215a:	4620      	mov	r0, r4
    while (hi2c->XferCount > 0U)
 800215c:	b9fb      	cbnz	r3, 800219e <HAL_I2C_Master_Receive+0xca>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800215e:	f7ff fead 	bl	8001ebc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002162:	2800      	cmp	r0, #0
 8002164:	d1d7      	bne.n	8002116 <HAL_I2C_Master_Receive+0x42>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002166:	6823      	ldr	r3, [r4, #0]
 8002168:	2120      	movs	r1, #32
 800216a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800216c:	685a      	ldr	r2, [r3, #4]
 800216e:	f022 72ff 	bic.w	r2, r2, #33423360	; 0x1fe0000
 8002172:	f422 328b 	bic.w	r2, r2, #71168	; 0x11600
 8002176:	f422 72ff 	bic.w	r2, r2, #510	; 0x1fe
 800217a:	f022 0201 	bic.w	r2, r2, #1
 800217e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002180:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002184:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002188:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 800218c:	e7c4      	b.n	8002118 <HAL_I2C_Master_Receive+0x44>
      hi2c->XferSize = hi2c->XferCount;
 800218e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002190:	9300      	str	r3, [sp, #0]
      hi2c->XferSize = hi2c->XferCount;
 8002192:	b292      	uxth	r2, r2
 8002194:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002196:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800219a:	b2d2      	uxtb	r2, r2
 800219c:	e7d5      	b.n	800214a <HAL_I2C_Master_Receive+0x76>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800219e:	f7ff fe1b 	bl	8001dd8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80021a2:	2800      	cmp	r0, #0
 80021a4:	d1b7      	bne.n	8002116 <HAL_I2C_Master_Receive+0x42>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80021a6:	6823      	ldr	r3, [r4, #0]
 80021a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021ac:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80021ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80021b0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 80021b2:	3301      	adds	r3, #1
 80021b4:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80021b6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	8563      	strh	r3, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021be:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80021c0:	3a01      	subs	r2, #1
 80021c2:	b292      	uxth	r2, r2
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021c4:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 80021c6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d0c2      	beq.n	8002152 <HAL_I2C_Master_Receive+0x7e>
 80021cc:	2a00      	cmp	r2, #0
 80021ce:	d1c0      	bne.n	8002152 <HAL_I2C_Master_Receive+0x7e>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80021d0:	9500      	str	r5, [sp, #0]
 80021d2:	463b      	mov	r3, r7
 80021d4:	2180      	movs	r1, #128	; 0x80
 80021d6:	4620      	mov	r0, r4
 80021d8:	f7ff fe46 	bl	8001e68 <I2C_WaitOnFlagUntilTimeout>
 80021dc:	2800      	cmp	r0, #0
 80021de:	d19a      	bne.n	8002116 <HAL_I2C_Master_Receive+0x42>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80021e0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	2bff      	cmp	r3, #255	; 0xff
 80021e6:	d903      	bls.n	80021f0 <HAL_I2C_Master_Receive+0x11c>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80021e8:	22ff      	movs	r2, #255	; 0xff
 80021ea:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80021ec:	9000      	str	r0, [sp, #0]
 80021ee:	e7aa      	b.n	8002146 <HAL_I2C_Master_Receive+0x72>
          hi2c->XferSize = hi2c->XferCount;
 80021f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f2:	9000      	str	r0, [sp, #0]
          hi2c->XferSize = hi2c->XferCount;
 80021f4:	b292      	uxth	r2, r2
 80021f6:	8522      	strh	r2, [r4, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021f8:	e7cd      	b.n	8002196 <HAL_I2C_Master_Receive+0xc2>
    return HAL_BUSY;
 80021fa:	2002      	movs	r0, #2
 80021fc:	e78c      	b.n	8002118 <HAL_I2C_Master_Receive+0x44>
 80021fe:	bf00      	nop
 8002200:	80002400 	.word	0x80002400

08002204 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002204:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002206:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800220a:	2b20      	cmp	r3, #32
 800220c:	b2dc      	uxtb	r4, r3
 800220e:	d11d      	bne.n	800224c <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002210:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002214:	2b01      	cmp	r3, #1
 8002216:	d019      	beq.n	800224c <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002218:	2324      	movs	r3, #36	; 0x24
 800221a:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800221e:	6803      	ldr	r3, [r0, #0]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	f022 0201 	bic.w	r2, r2, #1
 8002226:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800222e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	4311      	orrs	r1, r2
 8002234:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800223e:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002240:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8002244:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002248:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 800224a:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 800224c:	2002      	movs	r0, #2
 800224e:	e7fc      	b.n	800224a <HAL_I2CEx_ConfigAnalogFilter+0x46>

08002250 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002250:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002252:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8002256:	2b20      	cmp	r3, #32
 8002258:	b2dc      	uxtb	r4, r3
 800225a:	d11c      	bne.n	8002296 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800225c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8002260:	2b01      	cmp	r3, #1
 8002262:	d018      	beq.n	8002296 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002264:	2324      	movs	r3, #36	; 0x24
 8002266:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800226a:	6803      	ldr	r3, [r0, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	f022 0201 	bic.w	r2, r2, #1
 8002272:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002274:	681a      	ldr	r2, [r3, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002276:	f422 6270 	bic.w	r2, r2, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800227a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800227e:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	f042 0201 	orr.w	r2, r2, #1
 8002286:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002288:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800228a:	f880 4041 	strb.w	r4, [r0, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 800228e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

    return HAL_OK;
 8002292:	4618      	mov	r0, r3
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002294:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8002296:	2002      	movs	r0, #2
 8002298:	e7fc      	b.n	8002294 <HAL_I2CEx_ConfigDigitalFilter+0x44>
	...

0800229c <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800229c:	4b02      	ldr	r3, [pc, #8]	; (80022a8 <HAL_PWREx_GetVoltageRange+0xc>)
 800229e:	6818      	ldr	r0, [r3, #0]
#endif
}
 80022a0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	40007000 	.word	0x40007000

080022ac <HAL_PWREx_ControlVoltageScaling>:
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ac:	4a17      	ldr	r2, [pc, #92]	; (800230c <HAL_PWREx_ControlVoltageScaling+0x60>)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ae:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80022b8:	d11d      	bne.n	80022f6 <HAL_PWREx_ControlVoltageScaling+0x4a>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80022ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80022be:	d101      	bne.n	80022c4 <HAL_PWREx_ControlVoltageScaling+0x18>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80022c0:	2000      	movs	r0, #0
 80022c2:	4770      	bx	lr
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80022c4:	6813      	ldr	r3, [r2, #0]
 80022c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80022ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80022ce:	6013      	str	r3, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80022d0:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <HAL_PWREx_ControlVoltageScaling+0x64>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	2132      	movs	r1, #50	; 0x32
 80022d6:	434b      	muls	r3, r1
 80022d8:	490e      	ldr	r1, [pc, #56]	; (8002314 <HAL_PWREx_ControlVoltageScaling+0x68>)
 80022da:	fbb3 f3f1 	udiv	r3, r3, r1
 80022de:	3301      	adds	r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80022e0:	6951      	ldr	r1, [r2, #20]
 80022e2:	0549      	lsls	r1, r1, #21
 80022e4:	d500      	bpl.n	80022e8 <HAL_PWREx_ControlVoltageScaling+0x3c>
 80022e6:	b923      	cbnz	r3, 80022f2 <HAL_PWREx_ControlVoltageScaling+0x46>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80022e8:	6953      	ldr	r3, [r2, #20]
 80022ea:	055b      	lsls	r3, r3, #21
 80022ec:	d5e8      	bpl.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x14>
        return HAL_TIMEOUT;
 80022ee:	2003      	movs	r0, #3
}
 80022f0:	4770      	bx	lr
        wait_loop_index--;
 80022f2:	3b01      	subs	r3, #1
 80022f4:	e7f4      	b.n	80022e0 <HAL_PWREx_ControlVoltageScaling+0x34>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80022f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80022fa:	bf1f      	itttt	ne
 80022fc:	6813      	ldrne	r3, [r2, #0]
 80022fe:	f423 63c0 	bicne.w	r3, r3, #1536	; 0x600
 8002302:	f443 6380 	orrne.w	r3, r3, #1024	; 0x400
 8002306:	6013      	strne	r3, [r2, #0]
 8002308:	e7da      	b.n	80022c0 <HAL_PWREx_ControlVoltageScaling+0x14>
 800230a:	bf00      	nop
 800230c:	40007000 	.word	0x40007000
 8002310:	20000000 	.word	0x20000000
 8002314:	000f4240 	.word	0x000f4240

08002318 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002318:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800231a:	4d1e      	ldr	r5, [pc, #120]	; (8002394 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800231c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800231e:	00da      	lsls	r2, r3, #3
{
 8002320:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002322:	d518      	bpl.n	8002356 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002324:	f7ff ffba 	bl	800229c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002328:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 800232c:	d123      	bne.n	8002376 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800232e:	2c80      	cmp	r4, #128	; 0x80
 8002330:	d929      	bls.n	8002386 <RCC_SetFlashLatencyFromMSIRange+0x6e>
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002332:	2ca0      	cmp	r4, #160	; 0xa0
 8002334:	bf8c      	ite	hi
 8002336:	2002      	movhi	r0, #2
 8002338:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800233a:	4a17      	ldr	r2, [pc, #92]	; (8002398 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 800233c:	6813      	ldr	r3, [r2, #0]
 800233e:	f023 0307 	bic.w	r3, r3, #7
 8002342:	4303      	orrs	r3, r0
 8002344:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002346:	6813      	ldr	r3, [r2, #0]
 8002348:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 800234c:	1a18      	subs	r0, r3, r0
 800234e:	bf18      	it	ne
 8002350:	2001      	movne	r0, #1
 8002352:	b003      	add	sp, #12
 8002354:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8002356:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002358:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235c:	65ab      	str	r3, [r5, #88]	; 0x58
 800235e:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	9301      	str	r3, [sp, #4]
 8002366:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8002368:	f7ff ff98 	bl	800229c <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800236c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800236e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002372:	65ab      	str	r3, [r5, #88]	; 0x58
 8002374:	e7d8      	b.n	8002328 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8002376:	2c80      	cmp	r4, #128	; 0x80
 8002378:	d807      	bhi.n	800238a <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 800237a:	d008      	beq.n	800238e <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 800237c:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8002380:	4258      	negs	r0, r3
 8002382:	4158      	adcs	r0, r3
 8002384:	e7d9      	b.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002386:	2000      	movs	r0, #0
 8002388:	e7d7      	b.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 800238a:	2003      	movs	r0, #3
 800238c:	e7d5      	b.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 800238e:	2002      	movs	r0, #2
 8002390:	e7d3      	b.n	800233a <RCC_SetFlashLatencyFromMSIRange+0x22>
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000
 8002398:	40022000 	.word	0x40022000

0800239c <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800239c:	4b22      	ldr	r3, [pc, #136]	; (8002428 <HAL_RCC_GetSysClockFreq+0x8c>)
 800239e:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023a0:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80023a2:	f012 020c 	ands.w	r2, r2, #12
 80023a6:	d005      	beq.n	80023b4 <HAL_RCC_GetSysClockFreq+0x18>
 80023a8:	2a0c      	cmp	r2, #12
 80023aa:	d115      	bne.n	80023d8 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023ac:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80023b0:	2901      	cmp	r1, #1
 80023b2:	d118      	bne.n	80023e6 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b4:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80023b6:	481d      	ldr	r0, [pc, #116]	; (800242c <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80023b8:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023ba:	bf55      	itete	pl
 80023bc:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023c0:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80023c2:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80023c6:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 80023ca:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80023ce:	b34a      	cbz	r2, 8002424 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80023d0:	2a0c      	cmp	r2, #12
 80023d2:	d009      	beq.n	80023e8 <HAL_RCC_GetSysClockFreq+0x4c>
 80023d4:	2000      	movs	r0, #0
  return sysclockfreq;
 80023d6:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80023d8:	2a04      	cmp	r2, #4
 80023da:	d022      	beq.n	8002422 <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80023dc:	2a08      	cmp	r2, #8
 80023de:	4814      	ldr	r0, [pc, #80]	; (8002430 <HAL_RCC_GetSysClockFreq+0x94>)
 80023e0:	bf18      	it	ne
 80023e2:	2000      	movne	r0, #0
 80023e4:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80023e6:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 80023ee:	2a02      	cmp	r2, #2
 80023f0:	d015      	beq.n	800241e <HAL_RCC_GetSysClockFreq+0x82>
 80023f2:	490f      	ldr	r1, [pc, #60]	; (8002430 <HAL_RCC_GetSysClockFreq+0x94>)
 80023f4:	2a03      	cmp	r2, #3
 80023f6:	bf08      	it	eq
 80023f8:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80023fa:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80023fc:	68da      	ldr	r2, [r3, #12]
 80023fe:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8002402:	4342      	muls	r2, r0
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002404:	68d8      	ldr	r0, [r3, #12]
 8002406:	f3c0 6041 	ubfx	r0, r0, #25, #2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800240a:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800240e:	3001      	adds	r0, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002410:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002412:	0040      	lsls	r0, r0, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002414:	fbb2 f2f1 	udiv	r2, r2, r1
    sysclockfreq = pllvco / pllr;
 8002418:	fbb2 f0f0 	udiv	r0, r2, r0
 800241c:	4770      	bx	lr
      pllvco = HSI_VALUE;
 800241e:	4805      	ldr	r0, [pc, #20]	; (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
 8002420:	e7eb      	b.n	80023fa <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8002422:	4804      	ldr	r0, [pc, #16]	; (8002434 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000
 800242c:	08006340 	.word	0x08006340
 8002430:	007a1200 	.word	0x007a1200
 8002434:	00f42400 	.word	0x00f42400

08002438 <HAL_RCC_OscConfig>:
{
 8002438:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 800243c:	4605      	mov	r5, r0
 800243e:	b908      	cbnz	r0, 8002444 <HAL_RCC_OscConfig+0xc>
          return HAL_ERROR;
 8002440:	2001      	movs	r0, #1
 8002442:	e047      	b.n	80024d4 <HAL_RCC_OscConfig+0x9c>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002444:	4c94      	ldr	r4, [pc, #592]	; (8002698 <HAL_RCC_OscConfig+0x260>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002446:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002448:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800244a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800244c:	06db      	lsls	r3, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800244e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002452:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002456:	d575      	bpl.n	8002544 <HAL_RCC_OscConfig+0x10c>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002458:	b11e      	cbz	r6, 8002462 <HAL_RCC_OscConfig+0x2a>
 800245a:	2e0c      	cmp	r6, #12
 800245c:	d154      	bne.n	8002508 <HAL_RCC_OscConfig+0xd0>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800245e:	2f01      	cmp	r7, #1
 8002460:	d152      	bne.n	8002508 <HAL_RCC_OscConfig+0xd0>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002462:	6823      	ldr	r3, [r4, #0]
 8002464:	0798      	lsls	r0, r3, #30
 8002466:	d502      	bpl.n	800246e <HAL_RCC_OscConfig+0x36>
 8002468:	69ab      	ldr	r3, [r5, #24]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0e8      	beq.n	8002440 <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800246e:	6823      	ldr	r3, [r4, #0]
 8002470:	6a28      	ldr	r0, [r5, #32]
 8002472:	0719      	lsls	r1, r3, #28
 8002474:	bf56      	itet	pl
 8002476:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 800247a:	6823      	ldrmi	r3, [r4, #0]
 800247c:	091b      	lsrpl	r3, r3, #4
 800247e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002482:	4298      	cmp	r0, r3
 8002484:	d929      	bls.n	80024da <HAL_RCC_OscConfig+0xa2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002486:	f7ff ff47 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 800248a:	2800      	cmp	r0, #0
 800248c:	d1d8      	bne.n	8002440 <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800248e:	6823      	ldr	r3, [r4, #0]
 8002490:	f043 0308 	orr.w	r3, r3, #8
 8002494:	6023      	str	r3, [r4, #0]
 8002496:	6823      	ldr	r3, [r4, #0]
 8002498:	6a2a      	ldr	r2, [r5, #32]
 800249a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800249e:	4313      	orrs	r3, r2
 80024a0:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024a2:	6863      	ldr	r3, [r4, #4]
 80024a4:	69ea      	ldr	r2, [r5, #28]
 80024a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024aa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024ae:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024b0:	f7ff ff74 	bl	800239c <HAL_RCC_GetSysClockFreq>
 80024b4:	68a3      	ldr	r3, [r4, #8]
 80024b6:	4a79      	ldr	r2, [pc, #484]	; (800269c <HAL_RCC_OscConfig+0x264>)
 80024b8:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80024bc:	5cd3      	ldrb	r3, [r2, r3]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	40d8      	lsrs	r0, r3
 80024c4:	4b76      	ldr	r3, [pc, #472]	; (80026a0 <HAL_RCC_OscConfig+0x268>)
 80024c6:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 80024c8:	4b76      	ldr	r3, [pc, #472]	; (80026a4 <HAL_RCC_OscConfig+0x26c>)
 80024ca:	6818      	ldr	r0, [r3, #0]
 80024cc:	f7ff fa34 	bl	8001938 <HAL_InitTick>
        if(status != HAL_OK)
 80024d0:	2800      	cmp	r0, #0
 80024d2:	d037      	beq.n	8002544 <HAL_RCC_OscConfig+0x10c>
}
 80024d4:	b003      	add	sp, #12
 80024d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024da:	6823      	ldr	r3, [r4, #0]
 80024dc:	f043 0308 	orr.w	r3, r3, #8
 80024e0:	6023      	str	r3, [r4, #0]
 80024e2:	6823      	ldr	r3, [r4, #0]
 80024e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80024e8:	4303      	orrs	r3, r0
 80024ea:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024ec:	6863      	ldr	r3, [r4, #4]
 80024ee:	69ea      	ldr	r2, [r5, #28]
 80024f0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80024f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80024f8:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80024fa:	2e00      	cmp	r6, #0
 80024fc:	d1d8      	bne.n	80024b0 <HAL_RCC_OscConfig+0x78>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024fe:	f7ff ff0b 	bl	8002318 <RCC_SetFlashLatencyFromMSIRange>
 8002502:	2800      	cmp	r0, #0
 8002504:	d0d4      	beq.n	80024b0 <HAL_RCC_OscConfig+0x78>
 8002506:	e79b      	b.n	8002440 <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002508:	69ab      	ldr	r3, [r5, #24]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d03a      	beq.n	8002584 <HAL_RCC_OscConfig+0x14c>
        __HAL_RCC_MSI_ENABLE();
 800250e:	6823      	ldr	r3, [r4, #0]
 8002510:	f043 0301 	orr.w	r3, r3, #1
 8002514:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002516:	f7ff fa51 	bl	80019bc <HAL_GetTick>
 800251a:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	079a      	lsls	r2, r3, #30
 8002520:	d528      	bpl.n	8002574 <HAL_RCC_OscConfig+0x13c>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	f043 0308 	orr.w	r3, r3, #8
 8002528:	6023      	str	r3, [r4, #0]
 800252a:	6823      	ldr	r3, [r4, #0]
 800252c:	6a2a      	ldr	r2, [r5, #32]
 800252e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002532:	4313      	orrs	r3, r2
 8002534:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002536:	6863      	ldr	r3, [r4, #4]
 8002538:	69ea      	ldr	r2, [r5, #28]
 800253a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800253e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002542:	6063      	str	r3, [r4, #4]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002544:	682b      	ldr	r3, [r5, #0]
 8002546:	07d8      	lsls	r0, r3, #31
 8002548:	d42d      	bmi.n	80025a6 <HAL_RCC_OscConfig+0x16e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254a:	682b      	ldr	r3, [r5, #0]
 800254c:	0799      	lsls	r1, r3, #30
 800254e:	d46b      	bmi.n	8002628 <HAL_RCC_OscConfig+0x1f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002550:	682b      	ldr	r3, [r5, #0]
 8002552:	0718      	lsls	r0, r3, #28
 8002554:	f100 80a8 	bmi.w	80026a8 <HAL_RCC_OscConfig+0x270>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002558:	682b      	ldr	r3, [r5, #0]
 800255a:	0759      	lsls	r1, r3, #29
 800255c:	f100 80ce 	bmi.w	80026fc <HAL_RCC_OscConfig+0x2c4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002560:	682b      	ldr	r3, [r5, #0]
 8002562:	0699      	lsls	r1, r3, #26
 8002564:	f100 8137 	bmi.w	80027d6 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002568:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	f040 815d 	bne.w	800282a <HAL_RCC_OscConfig+0x3f2>
  return HAL_OK;
 8002570:	2000      	movs	r0, #0
 8002572:	e7af      	b.n	80024d4 <HAL_RCC_OscConfig+0x9c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002574:	f7ff fa22 	bl	80019bc <HAL_GetTick>
 8002578:	eba0 0008 	sub.w	r0, r0, r8
 800257c:	2802      	cmp	r0, #2
 800257e:	d9cd      	bls.n	800251c <HAL_RCC_OscConfig+0xe4>
            return HAL_TIMEOUT;
 8002580:	2003      	movs	r0, #3
 8002582:	e7a7      	b.n	80024d4 <HAL_RCC_OscConfig+0x9c>
        __HAL_RCC_MSI_DISABLE();
 8002584:	6823      	ldr	r3, [r4, #0]
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800258c:	f7ff fa16 	bl	80019bc <HAL_GetTick>
 8002590:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002592:	6823      	ldr	r3, [r4, #0]
 8002594:	079b      	lsls	r3, r3, #30
 8002596:	d5d5      	bpl.n	8002544 <HAL_RCC_OscConfig+0x10c>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002598:	f7ff fa10 	bl	80019bc <HAL_GetTick>
 800259c:	eba0 0008 	sub.w	r0, r0, r8
 80025a0:	2802      	cmp	r0, #2
 80025a2:	d9f6      	bls.n	8002592 <HAL_RCC_OscConfig+0x15a>
 80025a4:	e7ec      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80025a6:	2e08      	cmp	r6, #8
 80025a8:	d003      	beq.n	80025b2 <HAL_RCC_OscConfig+0x17a>
 80025aa:	2e0c      	cmp	r6, #12
 80025ac:	d108      	bne.n	80025c0 <HAL_RCC_OscConfig+0x188>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80025ae:	2f03      	cmp	r7, #3
 80025b0:	d106      	bne.n	80025c0 <HAL_RCC_OscConfig+0x188>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b2:	6823      	ldr	r3, [r4, #0]
 80025b4:	039a      	lsls	r2, r3, #14
 80025b6:	d5c8      	bpl.n	800254a <HAL_RCC_OscConfig+0x112>
 80025b8:	686b      	ldr	r3, [r5, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1c5      	bne.n	800254a <HAL_RCC_OscConfig+0x112>
 80025be:	e73f      	b.n	8002440 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c0:	686b      	ldr	r3, [r5, #4]
 80025c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025c6:	d110      	bne.n	80025ea <HAL_RCC_OscConfig+0x1b2>
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ce:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80025d0:	f7ff f9f4 	bl	80019bc <HAL_GetTick>
 80025d4:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	039b      	lsls	r3, r3, #14
 80025da:	d4b6      	bmi.n	800254a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025dc:	f7ff f9ee 	bl	80019bc <HAL_GetTick>
 80025e0:	eba0 0008 	sub.w	r0, r0, r8
 80025e4:	2864      	cmp	r0, #100	; 0x64
 80025e6:	d9f6      	bls.n	80025d6 <HAL_RCC_OscConfig+0x19e>
 80025e8:	e7ca      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025ee:	d104      	bne.n	80025fa <HAL_RCC_OscConfig+0x1c2>
 80025f0:	6823      	ldr	r3, [r4, #0]
 80025f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025f6:	6023      	str	r3, [r4, #0]
 80025f8:	e7e6      	b.n	80025c8 <HAL_RCC_OscConfig+0x190>
 80025fa:	6822      	ldr	r2, [r4, #0]
 80025fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002600:	6022      	str	r2, [r4, #0]
 8002602:	6822      	ldr	r2, [r4, #0]
 8002604:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002608:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800260a:	2b00      	cmp	r3, #0
 800260c:	d1e0      	bne.n	80025d0 <HAL_RCC_OscConfig+0x198>
        tickstart = HAL_GetTick();
 800260e:	f7ff f9d5 	bl	80019bc <HAL_GetTick>
 8002612:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002614:	6823      	ldr	r3, [r4, #0]
 8002616:	0398      	lsls	r0, r3, #14
 8002618:	d597      	bpl.n	800254a <HAL_RCC_OscConfig+0x112>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800261a:	f7ff f9cf 	bl	80019bc <HAL_GetTick>
 800261e:	eba0 0008 	sub.w	r0, r0, r8
 8002622:	2864      	cmp	r0, #100	; 0x64
 8002624:	d9f6      	bls.n	8002614 <HAL_RCC_OscConfig+0x1dc>
 8002626:	e7ab      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002628:	2e04      	cmp	r6, #4
 800262a:	d003      	beq.n	8002634 <HAL_RCC_OscConfig+0x1fc>
 800262c:	2e0c      	cmp	r6, #12
 800262e:	d110      	bne.n	8002652 <HAL_RCC_OscConfig+0x21a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002630:	2f02      	cmp	r7, #2
 8002632:	d10e      	bne.n	8002652 <HAL_RCC_OscConfig+0x21a>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002634:	6823      	ldr	r3, [r4, #0]
 8002636:	0559      	lsls	r1, r3, #21
 8002638:	d503      	bpl.n	8002642 <HAL_RCC_OscConfig+0x20a>
 800263a:	68eb      	ldr	r3, [r5, #12]
 800263c:	2b00      	cmp	r3, #0
 800263e:	f43f aeff 	beq.w	8002440 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002642:	6863      	ldr	r3, [r4, #4]
 8002644:	692a      	ldr	r2, [r5, #16]
 8002646:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 800264a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800264e:	6063      	str	r3, [r4, #4]
 8002650:	e77e      	b.n	8002550 <HAL_RCC_OscConfig+0x118>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002652:	68eb      	ldr	r3, [r5, #12]
 8002654:	b17b      	cbz	r3, 8002676 <HAL_RCC_OscConfig+0x23e>
        __HAL_RCC_HSI_ENABLE();
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800265c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800265e:	f7ff f9ad 	bl	80019bc <HAL_GetTick>
 8002662:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002664:	6823      	ldr	r3, [r4, #0]
 8002666:	055a      	lsls	r2, r3, #21
 8002668:	d4eb      	bmi.n	8002642 <HAL_RCC_OscConfig+0x20a>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266a:	f7ff f9a7 	bl	80019bc <HAL_GetTick>
 800266e:	1bc0      	subs	r0, r0, r7
 8002670:	2802      	cmp	r0, #2
 8002672:	d9f7      	bls.n	8002664 <HAL_RCC_OscConfig+0x22c>
 8002674:	e784      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
        __HAL_RCC_HSI_DISABLE();
 8002676:	6823      	ldr	r3, [r4, #0]
 8002678:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800267c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800267e:	f7ff f99d 	bl	80019bc <HAL_GetTick>
 8002682:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002684:	6823      	ldr	r3, [r4, #0]
 8002686:	055b      	lsls	r3, r3, #21
 8002688:	f57f af62 	bpl.w	8002550 <HAL_RCC_OscConfig+0x118>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff f996 	bl	80019bc <HAL_GetTick>
 8002690:	1bc0      	subs	r0, r0, r7
 8002692:	2802      	cmp	r0, #2
 8002694:	d9f6      	bls.n	8002684 <HAL_RCC_OscConfig+0x24c>
 8002696:	e773      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
 8002698:	40021000 	.word	0x40021000
 800269c:	08006327 	.word	0x08006327
 80026a0:	20000000 	.word	0x20000000
 80026a4:	20000008 	.word	0x20000008
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026a8:	696b      	ldr	r3, [r5, #20]
 80026aa:	b19b      	cbz	r3, 80026d4 <HAL_RCC_OscConfig+0x29c>
      __HAL_RCC_LSI_ENABLE();
 80026ac:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026b0:	f043 0301 	orr.w	r3, r3, #1
 80026b4:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026b8:	f7ff f980 	bl	80019bc <HAL_GetTick>
 80026bc:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026be:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026c2:	079a      	lsls	r2, r3, #30
 80026c4:	f53f af48 	bmi.w	8002558 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026c8:	f7ff f978 	bl	80019bc <HAL_GetTick>
 80026cc:	1bc0      	subs	r0, r0, r7
 80026ce:	2802      	cmp	r0, #2
 80026d0:	d9f5      	bls.n	80026be <HAL_RCC_OscConfig+0x286>
 80026d2:	e755      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_LSI_DISABLE();
 80026d4:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 80026e0:	f7ff f96c 	bl	80019bc <HAL_GetTick>
 80026e4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80026e6:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 80026ea:	079b      	lsls	r3, r3, #30
 80026ec:	f57f af34 	bpl.w	8002558 <HAL_RCC_OscConfig+0x120>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f0:	f7ff f964 	bl	80019bc <HAL_GetTick>
 80026f4:	1bc0      	subs	r0, r0, r7
 80026f6:	2802      	cmp	r0, #2
 80026f8:	d9f5      	bls.n	80026e6 <HAL_RCC_OscConfig+0x2ae>
 80026fa:	e741      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80026fc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80026fe:	00d8      	lsls	r0, r3, #3
 8002700:	d429      	bmi.n	8002756 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002702:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002708:	65a3      	str	r3, [r4, #88]	; 0x58
 800270a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800270c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002710:	9301      	str	r3, [sp, #4]
 8002712:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002714:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002718:	4f96      	ldr	r7, [pc, #600]	; (8002974 <HAL_RCC_OscConfig+0x53c>)
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	05d9      	lsls	r1, r3, #23
 800271e:	d51d      	bpl.n	800275c <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002720:	68ab      	ldr	r3, [r5, #8]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d12b      	bne.n	800277e <HAL_RCC_OscConfig+0x346>
 8002726:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800272a:	f043 0301 	orr.w	r3, r3, #1
 800272e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8002732:	f7ff f943 	bl	80019bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002736:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800273a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800273c:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002740:	079b      	lsls	r3, r3, #30
 8002742:	d542      	bpl.n	80027ca <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 8002744:	f1b8 0f00 	cmp.w	r8, #0
 8002748:	f43f af0a 	beq.w	8002560 <HAL_RCC_OscConfig+0x128>
      __HAL_RCC_PWR_CLK_DISABLE();
 800274c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800274e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002752:	65a3      	str	r3, [r4, #88]	; 0x58
 8002754:	e704      	b.n	8002560 <HAL_RCC_OscConfig+0x128>
    FlagStatus       pwrclkchanged = RESET;
 8002756:	f04f 0800 	mov.w	r8, #0
 800275a:	e7dd      	b.n	8002718 <HAL_RCC_OscConfig+0x2e0>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8002764:	f7ff f92a 	bl	80019bc <HAL_GetTick>
 8002768:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	05da      	lsls	r2, r3, #23
 800276e:	d4d7      	bmi.n	8002720 <HAL_RCC_OscConfig+0x2e8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002770:	f7ff f924 	bl	80019bc <HAL_GetTick>
 8002774:	eba0 0009 	sub.w	r0, r0, r9
 8002778:	2802      	cmp	r0, #2
 800277a:	d9f6      	bls.n	800276a <HAL_RCC_OscConfig+0x332>
 800277c:	e700      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800277e:	2b05      	cmp	r3, #5
 8002780:	d106      	bne.n	8002790 <HAL_RCC_OscConfig+0x358>
 8002782:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002786:	f043 0304 	orr.w	r3, r3, #4
 800278a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800278e:	e7ca      	b.n	8002726 <HAL_RCC_OscConfig+0x2ee>
 8002790:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002794:	f022 0201 	bic.w	r2, r2, #1
 8002798:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800279c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 80027a0:	f022 0204 	bic.w	r2, r2, #4
 80027a4:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1c2      	bne.n	8002732 <HAL_RCC_OscConfig+0x2fa>
      tickstart = HAL_GetTick();
 80027ac:	f7ff f906 	bl	80019bc <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027b0:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80027b4:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80027b6:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80027ba:	0798      	lsls	r0, r3, #30
 80027bc:	d5c2      	bpl.n	8002744 <HAL_RCC_OscConfig+0x30c>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff f8fd 	bl	80019bc <HAL_GetTick>
 80027c2:	1bc0      	subs	r0, r0, r7
 80027c4:	4548      	cmp	r0, r9
 80027c6:	d9f6      	bls.n	80027b6 <HAL_RCC_OscConfig+0x37e>
 80027c8:	e6da      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ca:	f7ff f8f7 	bl	80019bc <HAL_GetTick>
 80027ce:	1bc0      	subs	r0, r0, r7
 80027d0:	4548      	cmp	r0, r9
 80027d2:	d9b3      	bls.n	800273c <HAL_RCC_OscConfig+0x304>
 80027d4:	e6d4      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80027d8:	b19b      	cbz	r3, 8002802 <HAL_RCC_OscConfig+0x3ca>
      __HAL_RCC_HSI48_ENABLE();
 80027da:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80027de:	f043 0301 	orr.w	r3, r3, #1
 80027e2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 80027e6:	f7ff f8e9 	bl	80019bc <HAL_GetTick>
 80027ea:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ec:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 80027f0:	079a      	lsls	r2, r3, #30
 80027f2:	f53f aeb9 	bmi.w	8002568 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027f6:	f7ff f8e1 	bl	80019bc <HAL_GetTick>
 80027fa:	1bc0      	subs	r0, r0, r7
 80027fc:	2802      	cmp	r0, #2
 80027fe:	d9f5      	bls.n	80027ec <HAL_RCC_OscConfig+0x3b4>
 8002800:	e6be      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
      __HAL_RCC_HSI48_DISABLE();
 8002802:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 800280e:	f7ff f8d5 	bl	80019bc <HAL_GetTick>
 8002812:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002814:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8002818:	079b      	lsls	r3, r3, #30
 800281a:	f57f aea5 	bpl.w	8002568 <HAL_RCC_OscConfig+0x130>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800281e:	f7ff f8cd 	bl	80019bc <HAL_GetTick>
 8002822:	1bc0      	subs	r0, r0, r7
 8002824:	2802      	cmp	r0, #2
 8002826:	d9f5      	bls.n	8002814 <HAL_RCC_OscConfig+0x3dc>
 8002828:	e6aa      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800282a:	2b02      	cmp	r3, #2
 800282c:	f040 8088 	bne.w	8002940 <HAL_RCC_OscConfig+0x508>
      pll_config = RCC->PLLCFGR;
 8002830:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002832:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002834:	f003 0103 	and.w	r1, r3, #3
 8002838:	4291      	cmp	r1, r2
 800283a:	d122      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800283c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 800283e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002842:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002844:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 8002848:	d11b      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800284a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 800284c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002850:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8002854:	d115      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002856:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 8002858:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800285c:	ebb2 6fc1 	cmp.w	r2, r1, lsl #27
 8002860:	d10f      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002862:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002864:	0852      	lsrs	r2, r2, #1
 8002866:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 800286a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800286c:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 8002870:	d107      	bne.n	8002882 <HAL_RCC_OscConfig+0x44a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002872:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002874:	0852      	lsrs	r2, r2, #1
 8002876:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 800287a:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800287c:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 8002880:	d045      	beq.n	800290e <HAL_RCC_OscConfig+0x4d6>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002882:	2e0c      	cmp	r6, #12
 8002884:	f43f addc 	beq.w	8002440 <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002888:	6823      	ldr	r3, [r4, #0]
 800288a:	015e      	lsls	r6, r3, #5
 800288c:	f53f add8 	bmi.w	8002440 <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002890:	6823      	ldr	r3, [r4, #0]
 8002892:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002896:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002898:	f7ff f890 	bl	80019bc <HAL_GetTick>
 800289c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	0198      	lsls	r0, r3, #6
 80028a2:	d42e      	bmi.n	8002902 <HAL_RCC_OscConfig+0x4ca>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028a4:	68e2      	ldr	r2, [r4, #12]
 80028a6:	4b34      	ldr	r3, [pc, #208]	; (8002978 <HAL_RCC_OscConfig+0x540>)
 80028a8:	4013      	ands	r3, r2
 80028aa:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80028ac:	4313      	orrs	r3, r2
 80028ae:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80028b0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80028b4:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80028b6:	ea43 63c2 	orr.w	r3, r3, r2, lsl #27
 80028ba:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80028bc:	3a01      	subs	r2, #1
 80028be:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80028c2:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80028c4:	0852      	lsrs	r2, r2, #1
 80028c6:	3a01      	subs	r2, #1
 80028c8:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80028cc:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80028ce:	0852      	lsrs	r2, r2, #1
 80028d0:	3a01      	subs	r2, #1
 80028d2:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80028d6:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 80028d8:	6823      	ldr	r3, [r4, #0]
 80028da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028de:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028e0:	68e3      	ldr	r3, [r4, #12]
 80028e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028e6:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 80028e8:	f7ff f868 	bl	80019bc <HAL_GetTick>
 80028ec:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ee:	6823      	ldr	r3, [r4, #0]
 80028f0:	0199      	lsls	r1, r3, #6
 80028f2:	f53f ae3d 	bmi.w	8002570 <HAL_RCC_OscConfig+0x138>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028f6:	f7ff f861 	bl	80019bc <HAL_GetTick>
 80028fa:	1b40      	subs	r0, r0, r5
 80028fc:	2802      	cmp	r0, #2
 80028fe:	d9f6      	bls.n	80028ee <HAL_RCC_OscConfig+0x4b6>
 8002900:	e63e      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002902:	f7ff f85b 	bl	80019bc <HAL_GetTick>
 8002906:	1b80      	subs	r0, r0, r6
 8002908:	2802      	cmp	r0, #2
 800290a:	d9c8      	bls.n	800289e <HAL_RCC_OscConfig+0x466>
 800290c:	e638      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	6823      	ldr	r3, [r4, #0]
 8002910:	019a      	lsls	r2, r3, #6
 8002912:	f53f ae2d 	bmi.w	8002570 <HAL_RCC_OscConfig+0x138>
          __HAL_RCC_PLL_ENABLE();
 8002916:	6823      	ldr	r3, [r4, #0]
 8002918:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800291c:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800291e:	68e3      	ldr	r3, [r4, #12]
 8002920:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002924:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002926:	f7ff f849 	bl	80019bc <HAL_GetTick>
 800292a:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800292c:	6823      	ldr	r3, [r4, #0]
 800292e:	019b      	lsls	r3, r3, #6
 8002930:	f53f ae1e 	bmi.w	8002570 <HAL_RCC_OscConfig+0x138>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7ff f842 	bl	80019bc <HAL_GetTick>
 8002938:	1b40      	subs	r0, r0, r5
 800293a:	2802      	cmp	r0, #2
 800293c:	d9f6      	bls.n	800292c <HAL_RCC_OscConfig+0x4f4>
 800293e:	e61f      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002940:	2e0c      	cmp	r6, #12
 8002942:	f43f ad7d 	beq.w	8002440 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 8002946:	6823      	ldr	r3, [r4, #0]
 8002948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800294c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800294e:	f7ff f835 	bl	80019bc <HAL_GetTick>
 8002952:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002954:	6823      	ldr	r3, [r4, #0]
 8002956:	f013 7300 	ands.w	r3, r3, #33554432	; 0x2000000
 800295a:	d104      	bne.n	8002966 <HAL_RCC_OscConfig+0x52e>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800295c:	68e1      	ldr	r1, [r4, #12]
 800295e:	4a07      	ldr	r2, [pc, #28]	; (800297c <HAL_RCC_OscConfig+0x544>)
 8002960:	400a      	ands	r2, r1
 8002962:	60e2      	str	r2, [r4, #12]
 8002964:	e604      	b.n	8002570 <HAL_RCC_OscConfig+0x138>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002966:	f7ff f829 	bl	80019bc <HAL_GetTick>
 800296a:	1b40      	subs	r0, r0, r5
 800296c:	2802      	cmp	r0, #2
 800296e:	d9f1      	bls.n	8002954 <HAL_RCC_OscConfig+0x51c>
 8002970:	e606      	b.n	8002580 <HAL_RCC_OscConfig+0x148>
 8002972:	bf00      	nop
 8002974:	40007000 	.word	0x40007000
 8002978:	019d808c 	.word	0x019d808c
 800297c:	feeefffc 	.word	0xfeeefffc

08002980 <HAL_RCC_ClockConfig>:
{
 8002980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002984:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002986:	4604      	mov	r4, r0
 8002988:	b910      	cbnz	r0, 8002990 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800298a:	2001      	movs	r0, #1
}
 800298c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002990:	4a4b      	ldr	r2, [pc, #300]	; (8002ac0 <HAL_RCC_ClockConfig+0x140>)
 8002992:	6813      	ldr	r3, [r2, #0]
 8002994:	f003 0307 	and.w	r3, r3, #7
 8002998:	428b      	cmp	r3, r1
 800299a:	d32c      	bcc.n	80029f6 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800299c:	6820      	ldr	r0, [r4, #0]
 800299e:	0786      	lsls	r6, r0, #30
 80029a0:	d434      	bmi.n	8002a0c <HAL_RCC_ClockConfig+0x8c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029a2:	07c1      	lsls	r1, r0, #31
 80029a4:	d43f      	bmi.n	8002a26 <HAL_RCC_ClockConfig+0xa6>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a6:	6821      	ldr	r1, [r4, #0]
 80029a8:	078a      	lsls	r2, r1, #30
 80029aa:	d468      	bmi.n	8002a7e <HAL_RCC_ClockConfig+0xfe>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029ac:	4a44      	ldr	r2, [pc, #272]	; (8002ac0 <HAL_RCC_ClockConfig+0x140>)
 80029ae:	6813      	ldr	r3, [r2, #0]
 80029b0:	f003 0307 	and.w	r3, r3, #7
 80029b4:	42ab      	cmp	r3, r5
 80029b6:	d86f      	bhi.n	8002a98 <HAL_RCC_ClockConfig+0x118>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029b8:	f011 0f04 	tst.w	r1, #4
 80029bc:	4d41      	ldr	r5, [pc, #260]	; (8002ac4 <HAL_RCC_ClockConfig+0x144>)
 80029be:	d177      	bne.n	8002ab0 <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c0:	070b      	lsls	r3, r1, #28
 80029c2:	d506      	bpl.n	80029d2 <HAL_RCC_ClockConfig+0x52>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029c4:	68ab      	ldr	r3, [r5, #8]
 80029c6:	6922      	ldr	r2, [r4, #16]
 80029c8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80029cc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80029d0:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029d2:	f7ff fce3 	bl	800239c <HAL_RCC_GetSysClockFreq>
 80029d6:	68ab      	ldr	r3, [r5, #8]
 80029d8:	4a3b      	ldr	r2, [pc, #236]	; (8002ac8 <HAL_RCC_ClockConfig+0x148>)
 80029da:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 80029de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029e2:	5cd3      	ldrb	r3, [r2, r3]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	40d8      	lsrs	r0, r3
 80029ea:	4b38      	ldr	r3, [pc, #224]	; (8002acc <HAL_RCC_ClockConfig+0x14c>)
 80029ec:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80029ee:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_RCC_ClockConfig+0x150>)
 80029f0:	6818      	ldr	r0, [r3, #0]
 80029f2:	f7fe bfa1 	b.w	8001938 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	f023 0307 	bic.w	r3, r3, #7
 80029fc:	430b      	orrs	r3, r1
 80029fe:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a00:	6813      	ldr	r3, [r2, #0]
 8002a02:	f003 0307 	and.w	r3, r3, #7
 8002a06:	428b      	cmp	r3, r1
 8002a08:	d1bf      	bne.n	800298a <HAL_RCC_ClockConfig+0xa>
 8002a0a:	e7c7      	b.n	800299c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a0c:	4a2d      	ldr	r2, [pc, #180]	; (8002ac4 <HAL_RCC_ClockConfig+0x144>)
 8002a0e:	68a6      	ldr	r6, [r4, #8]
 8002a10:	6891      	ldr	r1, [r2, #8]
 8002a12:	f001 01f0 	and.w	r1, r1, #240	; 0xf0
 8002a16:	428e      	cmp	r6, r1
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a18:	bf81      	itttt	hi
 8002a1a:	6893      	ldrhi	r3, [r2, #8]
 8002a1c:	f023 03f0 	bichi.w	r3, r3, #240	; 0xf0
 8002a20:	4333      	orrhi	r3, r6
 8002a22:	6093      	strhi	r3, [r2, #8]
 8002a24:	e7bd      	b.n	80029a2 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a26:	6862      	ldr	r2, [r4, #4]
 8002a28:	4e26      	ldr	r6, [pc, #152]	; (8002ac4 <HAL_RCC_ClockConfig+0x144>)
 8002a2a:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a2c:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a2e:	d11a      	bne.n	8002a66 <HAL_RCC_ClockConfig+0xe6>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a30:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a34:	d0a9      	beq.n	800298a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a36:	68b3      	ldr	r3, [r6, #8]
 8002a38:	f023 0303 	bic.w	r3, r3, #3
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002a40:	f7fe ffbc 	bl	80019bc <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a44:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8002a48:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a4a:	68b3      	ldr	r3, [r6, #8]
 8002a4c:	6862      	ldr	r2, [r4, #4]
 8002a4e:	f003 030c 	and.w	r3, r3, #12
 8002a52:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002a56:	d0a6      	beq.n	80029a6 <HAL_RCC_ClockConfig+0x26>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a58:	f7fe ffb0 	bl	80019bc <HAL_GetTick>
 8002a5c:	1bc0      	subs	r0, r0, r7
 8002a5e:	4540      	cmp	r0, r8
 8002a60:	d9f3      	bls.n	8002a4a <HAL_RCC_ClockConfig+0xca>
        return HAL_TIMEOUT;
 8002a62:	2003      	movs	r0, #3
 8002a64:	e792      	b.n	800298c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a66:	2a02      	cmp	r2, #2
 8002a68:	d102      	bne.n	8002a70 <HAL_RCC_ClockConfig+0xf0>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a6a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8002a6e:	e7e1      	b.n	8002a34 <HAL_RCC_ClockConfig+0xb4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a70:	b912      	cbnz	r2, 8002a78 <HAL_RCC_ClockConfig+0xf8>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a72:	f013 0f02 	tst.w	r3, #2
 8002a76:	e7dd      	b.n	8002a34 <HAL_RCC_ClockConfig+0xb4>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a78:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8002a7c:	e7da      	b.n	8002a34 <HAL_RCC_ClockConfig+0xb4>
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a7e:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_RCC_ClockConfig+0x144>)
 8002a80:	68a6      	ldr	r6, [r4, #8]
 8002a82:	6890      	ldr	r0, [r2, #8]
 8002a84:	f000 00f0 	and.w	r0, r0, #240	; 0xf0
 8002a88:	4286      	cmp	r6, r0
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a8a:	bf3f      	itttt	cc
 8002a8c:	6893      	ldrcc	r3, [r2, #8]
 8002a8e:	f023 03f0 	biccc.w	r3, r3, #240	; 0xf0
 8002a92:	4333      	orrcc	r3, r6
 8002a94:	6093      	strcc	r3, [r2, #8]
 8002a96:	e789      	b.n	80029ac <HAL_RCC_ClockConfig+0x2c>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a98:	6813      	ldr	r3, [r2, #0]
 8002a9a:	f023 0307 	bic.w	r3, r3, #7
 8002a9e:	432b      	orrs	r3, r5
 8002aa0:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa2:	6813      	ldr	r3, [r2, #0]
 8002aa4:	f003 0307 	and.w	r3, r3, #7
 8002aa8:	42ab      	cmp	r3, r5
 8002aaa:	f47f af6e 	bne.w	800298a <HAL_RCC_ClockConfig+0xa>
 8002aae:	e783      	b.n	80029b8 <HAL_RCC_ClockConfig+0x38>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab0:	68ab      	ldr	r3, [r5, #8]
 8002ab2:	68e2      	ldr	r2, [r4, #12]
 8002ab4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	60ab      	str	r3, [r5, #8]
 8002abc:	e780      	b.n	80029c0 <HAL_RCC_ClockConfig+0x40>
 8002abe:	bf00      	nop
 8002ac0:	40022000 	.word	0x40022000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	08006327 	.word	0x08006327
 8002acc:	20000000 	.word	0x20000000
 8002ad0:	20000008 	.word	0x20000008

08002ad4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002ad4:	4b05      	ldr	r3, [pc, #20]	; (8002aec <HAL_RCC_GetPCLK1Freq+0x18>)
 8002ad6:	4a06      	ldr	r2, [pc, #24]	; (8002af0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002ade:	5cd3      	ldrb	r3, [r2, r3]
 8002ae0:	4a04      	ldr	r2, [pc, #16]	; (8002af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ae2:	6810      	ldr	r0, [r2, #0]
 8002ae4:	f003 031f 	and.w	r3, r3, #31
}
 8002ae8:	40d8      	lsrs	r0, r3
 8002aea:	4770      	bx	lr
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08006337 	.word	0x08006337
 8002af4:	20000000 	.word	0x20000000

08002af8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002afa:	4a06      	ldr	r2, [pc, #24]	; (8002b14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002b02:	5cd3      	ldrb	r3, [r2, r3]
 8002b04:	4a04      	ldr	r2, [pc, #16]	; (8002b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b06:	6810      	ldr	r0, [r2, #0]
 8002b08:	f003 031f 	and.w	r3, r3, #31
}
 8002b0c:	40d8      	lsrs	r0, r3
 8002b0e:	4770      	bx	lr
 8002b10:	40021000 	.word	0x40021000
 8002b14:	08006337 	.word	0x08006337
 8002b18:	20000000 	.word	0x20000000

08002b1c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b1e:	4c43      	ldr	r4, [pc, #268]	; (8002c2c <RCCEx_PLLSAI1_Config+0x110>)
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b20:	6803      	ldr	r3, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b22:	68e2      	ldr	r2, [r4, #12]
{
 8002b24:	4605      	mov	r5, r0
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b26:	0790      	lsls	r0, r2, #30
{
 8002b28:	460e      	mov	r6, r1
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b2a:	d039      	beq.n	8002ba0 <RCCEx_PLLSAI1_Config+0x84>
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b2c:	68e2      	ldr	r2, [r4, #12]
 8002b2e:	f002 0203 	and.w	r2, r2, #3
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d177      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x10a>
       ||
 8002b36:	2a00      	cmp	r2, #0
 8002b38:	d075      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0x10a>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b3a:	68e3      	ldr	r3, [r4, #12]
       ||
 8002b3c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8002b42:	3301      	adds	r3, #1
       ||
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d16e      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x10a>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b48:	6823      	ldr	r3, [r4, #0]
 8002b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b50:	f7fe ff34 	bl	80019bc <HAL_GetTick>
 8002b54:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b56:	6823      	ldr	r3, [r4, #0]
 8002b58:	011a      	lsls	r2, r3, #4
 8002b5a:	d440      	bmi.n	8002bde <RCCEx_PLLSAI1_Config+0xc2>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b5c:	68ab      	ldr	r3, [r5, #8]
 8002b5e:	0218      	lsls	r0, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8002b60:	2e00      	cmp	r6, #0
 8002b62:	d043      	beq.n	8002bec <RCCEx_PLLSAI1_Config+0xd0>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b64:	2e01      	cmp	r6, #1
 8002b66:	d14c      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xe6>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b68:	692a      	ldr	r2, [r5, #16]
 8002b6a:	6921      	ldr	r1, [r4, #16]
 8002b6c:	0852      	lsrs	r2, r2, #1
 8002b6e:	1e53      	subs	r3, r2, #1
 8002b70:	f421 02c0 	bic.w	r2, r1, #6291456	; 0x600000
 8002b74:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8002b78:	4302      	orrs	r2, r0
 8002b7a:	ea42 5243 	orr.w	r2, r2, r3, lsl #21
 8002b7e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002b80:	6823      	ldr	r3, [r4, #0]
 8002b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002b86:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b88:	f7fe ff18 	bl	80019bc <HAL_GetTick>
 8002b8c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002b8e:	6823      	ldr	r3, [r4, #0]
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	d542      	bpl.n	8002c1a <RCCEx_PLLSAI1_Config+0xfe>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002b94:	6923      	ldr	r3, [r4, #16]
 8002b96:	69aa      	ldr	r2, [r5, #24]
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	6123      	str	r3, [r4, #16]
 8002b9c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
 8002b9e:	e024      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xce>
    switch(PllSai1->PLLSAI1Source)
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d011      	beq.n	8002bc8 <RCCEx_PLLSAI1_Config+0xac>
 8002ba4:	2b03      	cmp	r3, #3
 8002ba6:	d013      	beq.n	8002bd0 <RCCEx_PLLSAI1_Config+0xb4>
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d13c      	bne.n	8002c26 <RCCEx_PLLSAI1_Config+0x10a>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	f012 0f02 	tst.w	r2, #2
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bb2:	d038      	beq.n	8002c26 <RCCEx_PLLSAI1_Config+0x10a>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002bb4:	68e0      	ldr	r0, [r4, #12]
 8002bb6:	686a      	ldr	r2, [r5, #4]
 8002bb8:	f020 0073 	bic.w	r0, r0, #115	; 0x73
 8002bbc:	3a01      	subs	r2, #1
 8002bbe:	4318      	orrs	r0, r3
 8002bc0:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8002bc4:	60e0      	str	r0, [r4, #12]
  if(status == HAL_OK)
 8002bc6:	e7bf      	b.n	8002b48 <RCCEx_PLLSAI1_Config+0x2c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bc8:	6822      	ldr	r2, [r4, #0]
 8002bca:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8002bce:	e7f0      	b.n	8002bb2 <RCCEx_PLLSAI1_Config+0x96>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bd0:	6822      	ldr	r2, [r4, #0]
 8002bd2:	0391      	lsls	r1, r2, #14
 8002bd4:	d4ee      	bmi.n	8002bb4 <RCCEx_PLLSAI1_Config+0x98>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bd6:	6822      	ldr	r2, [r4, #0]
 8002bd8:	f412 2f80 	tst.w	r2, #262144	; 0x40000
 8002bdc:	e7e9      	b.n	8002bb2 <RCCEx_PLLSAI1_Config+0x96>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bde:	f7fe feed 	bl	80019bc <HAL_GetTick>
 8002be2:	1bc0      	subs	r0, r0, r7
 8002be4:	2802      	cmp	r0, #2
 8002be6:	d9b6      	bls.n	8002b56 <RCCEx_PLLSAI1_Config+0x3a>
        status = HAL_TIMEOUT;
 8002be8:	2003      	movs	r0, #3
}
 8002bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bec:	6922      	ldr	r2, [r4, #16]
 8002bee:	68eb      	ldr	r3, [r5, #12]
 8002bf0:	ea40 63c3 	orr.w	r3, r0, r3, lsl #27
 8002bf4:	f022 4078 	bic.w	r0, r2, #4160749568	; 0xf8000000
 8002bf8:	f420 40fe 	bic.w	r0, r0, #32512	; 0x7f00
 8002bfc:	4303      	orrs	r3, r0
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bfe:	6123      	str	r3, [r4, #16]
 8002c00:	e7be      	b.n	8002b80 <RCCEx_PLLSAI1_Config+0x64>
 8002c02:	696b      	ldr	r3, [r5, #20]
 8002c04:	6922      	ldr	r2, [r4, #16]
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	1e59      	subs	r1, r3, #1
 8002c0a:	f022 63c0 	bic.w	r3, r2, #100663296	; 0x6000000
 8002c0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c12:	4303      	orrs	r3, r0
 8002c14:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
 8002c18:	e7f1      	b.n	8002bfe <RCCEx_PLLSAI1_Config+0xe2>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c1a:	f7fe fecf 	bl	80019bc <HAL_GetTick>
 8002c1e:	1b80      	subs	r0, r0, r6
 8002c20:	2802      	cmp	r0, #2
 8002c22:	d9b4      	bls.n	8002b8e <RCCEx_PLLSAI1_Config+0x72>
 8002c24:	e7e0      	b.n	8002be8 <RCCEx_PLLSAI1_Config+0xcc>
      status = HAL_ERROR;
 8002c26:	2001      	movs	r0, #1
 8002c28:	e7df      	b.n	8002bea <RCCEx_PLLSAI1_Config+0xce>
 8002c2a:	bf00      	nop
 8002c2c:	40021000 	.word	0x40021000

08002c30 <HAL_RCCEx_PeriphCLKConfig>:
{
 8002c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c34:	6805      	ldr	r5, [r0, #0]
 8002c36:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8002c3a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002c3c:	d009      	beq.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x22>
    switch(PeriphClkInit->Sai1ClockSelection)
 8002c3e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8002c40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8002c44:	d035      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x82>
 8002c46:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8002c4a:	d037      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	d040      	beq.n	8002cd2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c50:	2501      	movs	r5, #1
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c52:	6823      	ldr	r3, [r4, #0]
 8002c54:	039e      	lsls	r6, r3, #14
 8002c56:	d551      	bpl.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c58:	4e95      	ldr	r6, [pc, #596]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002c5a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002c5c:	00d8      	lsls	r0, r3, #3
 8002c5e:	d43f      	bmi.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0xb0>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c60:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c66:	65b3      	str	r3, [r6, #88]	; 0x58
 8002c68:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002c72:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c74:	f8df 823c 	ldr.w	r8, [pc, #572]	; 8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x284>
 8002c78:	f8d8 3000 	ldr.w	r3, [r8]
 8002c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c80:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8002c84:	f7fe fe9a 	bl	80019bc <HAL_GetTick>
 8002c88:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c8a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c8e:	05d9      	lsls	r1, r3, #23
 8002c90:	d528      	bpl.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    if(ret == HAL_OK)
 8002c92:	bb75      	cbnz	r5, 8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c94:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c98:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8002c9c:	f040 80c7 	bne.w	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ca0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002ca4:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8002cb0:	e01f      	b.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002cb2:	4a7f      	ldr	r2, [pc, #508]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cb4:	68d3      	ldr	r3, [r2, #12]
 8002cb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cba:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002cbc:	4a7c      	ldr	r2, [pc, #496]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002cbe:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8002cc0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002cc4:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8002cce:	2500      	movs	r5, #0
 8002cd0:	e7bf      	b.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x22>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002cd2:	3004      	adds	r0, #4
 8002cd4:	f7ff ff22 	bl	8002b1c <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8002cd8:	4605      	mov	r5, r0
 8002cda:	2800      	cmp	r0, #0
 8002cdc:	d1b9      	bne.n	8002c52 <HAL_RCCEx_PeriphCLKConfig+0x22>
 8002cde:	e7ed      	b.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    FlagStatus       pwrclkchanged = RESET;
 8002ce0:	2700      	movs	r7, #0
 8002ce2:	e7c7      	b.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x44>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ce4:	f7fe fe6a 	bl	80019bc <HAL_GetTick>
 8002ce8:	eba0 0009 	sub.w	r0, r0, r9
 8002cec:	2802      	cmp	r0, #2
 8002cee:	d9cc      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x5a>
        ret = HAL_TIMEOUT;
 8002cf0:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8002cf2:	b11f      	cbz	r7, 8002cfc <HAL_RCCEx_PeriphCLKConfig+0xcc>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8002cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfa:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002cfc:	6823      	ldr	r3, [r4, #0]
 8002cfe:	07df      	lsls	r7, r3, #31
 8002d00:	d508      	bpl.n	8002d14 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d02:	496b      	ldr	r1, [pc, #428]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d04:	6a20      	ldr	r0, [r4, #32]
 8002d06:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d0a:	f022 0203 	bic.w	r2, r2, #3
 8002d0e:	4302      	orrs	r2, r0
 8002d10:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d14:	079e      	lsls	r6, r3, #30
 8002d16:	d508      	bpl.n	8002d2a <HAL_RCCEx_PeriphCLKConfig+0xfa>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d18:	4965      	ldr	r1, [pc, #404]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002d1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d20:	f022 020c 	bic.w	r2, r2, #12
 8002d24:	4302      	orrs	r2, r0
 8002d26:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d2a:	0698      	lsls	r0, r3, #26
 8002d2c:	d508      	bpl.n	8002d40 <HAL_RCCEx_PeriphCLKConfig+0x110>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d2e:	4960      	ldr	r1, [pc, #384]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d30:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002d32:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d36:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d3a:	4302      	orrs	r2, r0
 8002d3c:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d40:	0599      	lsls	r1, r3, #22
 8002d42:	d508      	bpl.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d44:	495a      	ldr	r1, [pc, #360]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d46:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002d48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d4c:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8002d50:	4302      	orrs	r2, r0
 8002d52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d56:	055a      	lsls	r2, r3, #21
 8002d58:	d508      	bpl.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d5a:	4955      	ldr	r1, [pc, #340]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d5c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8002d5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d62:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8002d66:	4302      	orrs	r2, r0
 8002d68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d6c:	065f      	lsls	r7, r3, #25
 8002d6e:	d508      	bpl.n	8002d82 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d70:	494f      	ldr	r1, [pc, #316]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d72:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002d74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d78:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002d7c:	4302      	orrs	r2, r0
 8002d7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d82:	05de      	lsls	r6, r3, #23
 8002d84:	d508      	bpl.n	8002d98 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d86:	494a      	ldr	r1, [pc, #296]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d88:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8002d8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8002d8e:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8002d92:	4302      	orrs	r2, r0
 8002d94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002d98:	0498      	lsls	r0, r3, #18
 8002d9a:	d50f      	bpl.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002d9c:	4a44      	ldr	r2, [pc, #272]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002d9e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002da0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002da4:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002da8:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002daa:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002db2:	d166      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002db4:	68d3      	ldr	r3, [r2, #12]
 8002db6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dba:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	0359      	lsls	r1, r3, #13
 8002dc0:	d50f      	bpl.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dc2:	4a3b      	ldr	r2, [pc, #236]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dc4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002dc6:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002dca:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8002dce:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dd0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002dd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002dd8:	d15e      	bne.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x268>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dda:	68d3      	ldr	r3, [r2, #12]
 8002ddc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002de0:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002de2:	6823      	ldr	r3, [r4, #0]
 8002de4:	045a      	lsls	r2, r3, #17
 8002de6:	d512      	bpl.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1de>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002de8:	4931      	ldr	r1, [pc, #196]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002dea:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8002dec:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8002df0:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8002df4:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002df6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002dfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dfe:	d106      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x1de>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002e00:	2102      	movs	r1, #2
 8002e02:	1d20      	adds	r0, r4, #4
 8002e04:	f7ff fe8a 	bl	8002b1c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002e08:	2800      	cmp	r0, #0
 8002e0a:	bf18      	it	ne
 8002e0c:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e0e:	6823      	ldr	r3, [r4, #0]
 8002e10:	041b      	lsls	r3, r3, #16
 8002e12:	d508      	bpl.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e14:	4a26      	ldr	r2, [pc, #152]	; (8002eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002e16:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8002e18:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002e1c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e20:	430b      	orrs	r3, r1
 8002e22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8002e26:	4628      	mov	r0, r5
 8002e28:	b003      	add	sp, #12
 8002e2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002e2e:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8002e30:	4293      	cmp	r3, r2
 8002e32:	f43f af35 	beq.w	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e36:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e3a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e42:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e46:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e4a:	f422 7140 	bic.w	r1, r2, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e52:	07d2      	lsls	r2, r2, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e54:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8002e58:	f8c6 1090 	str.w	r1, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e5c:	f57f af20 	bpl.w	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x70>
        tickstart = HAL_GetTick();
 8002e60:	f7fe fdac 	bl	80019bc <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8002e68:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e6a:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8002e6e:	079b      	lsls	r3, r3, #30
 8002e70:	f53f af16 	bmi.w	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x70>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e74:	f7fe fda2 	bl	80019bc <HAL_GetTick>
 8002e78:	eba0 0008 	sub.w	r0, r0, r8
 8002e7c:	4548      	cmp	r0, r9
 8002e7e:	d9f4      	bls.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x23a>
 8002e80:	e736      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e82:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e86:	d199      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e88:	2101      	movs	r1, #1
 8002e8a:	1d20      	adds	r0, r4, #4
 8002e8c:	f7ff fe46 	bl	8002b1c <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8002e90:	2800      	cmp	r0, #0
 8002e92:	bf18      	it	ne
 8002e94:	4605      	movne	r5, r0
 8002e96:	e791      	b.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002e98:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8002e9c:	d1a1      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e9e:	2101      	movs	r1, #1
 8002ea0:	1d20      	adds	r0, r4, #4
 8002ea2:	f7ff fe3b 	bl	8002b1c <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8002ea6:	2800      	cmp	r0, #0
 8002ea8:	bf18      	it	ne
 8002eaa:	4605      	movne	r5, r0
 8002eac:	e799      	b.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40007000 	.word	0x40007000

08002eb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002eb8:	b570      	push	{r4, r5, r6, lr}
 8002eba:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8002ebc:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ebe:	6921      	ldr	r1, [r4, #16]
 8002ec0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ec2:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ec4:	69c0      	ldr	r0, [r0, #28]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	6961      	ldr	r1, [r4, #20]
 8002eca:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ecc:	4967      	ldr	r1, [pc, #412]	; (800306c <UART_SetConfig+0x1b4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ece:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ed0:	4029      	ands	r1, r5
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	68e1      	ldr	r1, [r4, #12]
 8002eda:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee2:	4a63      	ldr	r2, [pc, #396]	; (8003070 <UART_SetConfig+0x1b8>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ee4:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ee6:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ee8:	bf1c      	itt	ne
 8002eea:	6a22      	ldrne	r2, [r4, #32]
 8002eec:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef8:	4a5e      	ldr	r2, [pc, #376]	; (8003074 <UART_SetConfig+0x1bc>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d116      	bne.n	8002f2c <UART_SetConfig+0x74>
 8002efe:	4b5e      	ldr	r3, [pc, #376]	; (8003078 <UART_SetConfig+0x1c0>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	f200 80a7 	bhi.w	800305e <UART_SetConfig+0x1a6>
 8002f10:	4a5a      	ldr	r2, [pc, #360]	; (800307c <UART_SetConfig+0x1c4>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f14:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002f18:	d170      	bne.n	8002ffc <UART_SetConfig+0x144>
  {
    switch (clocksource)
 8002f1a:	2b08      	cmp	r3, #8
 8002f1c:	d820      	bhi.n	8002f60 <UART_SetConfig+0xa8>
 8002f1e:	e8df f003 	tbb	[pc, r3]
 8002f22:	a14f      	.short	0xa14f
 8002f24:	1f681f6b 	.word	0x1f681f6b
 8002f28:	1f1f      	.short	0x1f1f
 8002f2a:	53          	.byte	0x53
 8002f2b:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f2c:	4a54      	ldr	r2, [pc, #336]	; (8003080 <UART_SetConfig+0x1c8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d106      	bne.n	8002f40 <UART_SetConfig+0x88>
 8002f32:	4b51      	ldr	r3, [pc, #324]	; (8003078 <UART_SetConfig+0x1c0>)
 8002f34:	4a53      	ldr	r2, [pc, #332]	; (8003084 <UART_SetConfig+0x1cc>)
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	e7e8      	b.n	8002f12 <UART_SetConfig+0x5a>
 8002f40:	4a4b      	ldr	r2, [pc, #300]	; (8003070 <UART_SetConfig+0x1b8>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d10c      	bne.n	8002f60 <UART_SetConfig+0xa8>
 8002f46:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <UART_SetConfig+0x1c0>)
 8002f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f54:	d017      	beq.n	8002f86 <UART_SetConfig+0xce>
 8002f56:	d805      	bhi.n	8002f64 <UART_SetConfig+0xac>
 8002f58:	b153      	cbz	r3, 8002f70 <UART_SetConfig+0xb8>
 8002f5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f5e:	d00f      	beq.n	8002f80 <UART_SetConfig+0xc8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002f60:	2001      	movs	r0, #1
 8002f62:	e009      	b.n	8002f78 <UART_SetConfig+0xc0>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f68:	d1fa      	bne.n	8002f60 <UART_SetConfig+0xa8>
        pclk = (uint32_t) LSE_VALUE;
 8002f6a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002f6e:	e00b      	b.n	8002f88 <UART_SetConfig+0xd0>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f70:	f7ff fdb0 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002f74:	b940      	cbnz	r0, 8002f88 <UART_SetConfig+0xd0>
 8002f76:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f78:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002f7a:	e9c4 3319 	strd	r3, r3, [r4, #100]	; 0x64

  return ret;
}
 8002f7e:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetSysClockFreq();
 8002f80:	f7ff fa0c 	bl	800239c <HAL_RCC_GetSysClockFreq>
        break;
 8002f84:	e7f6      	b.n	8002f74 <UART_SetConfig+0xbc>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f86:	4840      	ldr	r0, [pc, #256]	; (8003088 <UART_SetConfig+0x1d0>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f88:	6862      	ldr	r2, [r4, #4]
 8002f8a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002f8e:	4283      	cmp	r3, r0
 8002f90:	d8e6      	bhi.n	8002f60 <UART_SetConfig+0xa8>
 8002f92:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 8002f96:	d8e3      	bhi.n	8002f60 <UART_SetConfig+0xa8>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f98:	0851      	lsrs	r1, r2, #1
 8002f9a:	2500      	movs	r5, #0
 8002f9c:	468c      	mov	ip, r1
 8002f9e:	f44f 7680 	mov.w	r6, #256	; 0x100
 8002fa2:	4629      	mov	r1, r5
 8002fa4:	fbe0 c106 	umlal	ip, r1, r0, r6
 8002fa8:	462b      	mov	r3, r5
 8002faa:	4660      	mov	r0, ip
 8002fac:	f7fd fe4c 	bl	8000c48 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fb0:	4b36      	ldr	r3, [pc, #216]	; (800308c <UART_SetConfig+0x1d4>)
 8002fb2:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d8d2      	bhi.n	8002f60 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	60d8      	str	r0, [r3, #12]
 8002fbe:	e7da      	b.n	8002f76 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fc0:	f7ff fd88 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002fc4:	2800      	cmp	r0, #0
 8002fc6:	d0d6      	beq.n	8002f76 <UART_SetConfig+0xbe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fc8:	6862      	ldr	r2, [r4, #4]
 8002fca:	0853      	lsrs	r3, r2, #1
 8002fcc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd0:	f64f 73ef 	movw	r3, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002fd4:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002fd8:	f1a0 0210 	sub.w	r2, r0, #16
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d8bf      	bhi.n	8002f60 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fe0:	f020 030f 	bic.w	r3, r0, #15
        huart->Instance->BRR = brrtemp;
 8002fe4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002fe6:	b29b      	uxth	r3, r3
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fe8:	f3c0 0042 	ubfx	r0, r0, #1, #3
        huart->Instance->BRR = brrtemp;
 8002fec:	4318      	orrs	r0, r3
 8002fee:	60d0      	str	r0, [r2, #12]
 8002ff0:	e7c1      	b.n	8002f76 <UART_SetConfig+0xbe>
        pclk = HAL_RCC_GetSysClockFreq();
 8002ff2:	f7ff f9d3 	bl	800239c <HAL_RCC_GetSysClockFreq>
        break;
 8002ff6:	e7e5      	b.n	8002fc4 <UART_SetConfig+0x10c>
        pclk = (uint32_t) HSI_VALUE;
 8002ff8:	4823      	ldr	r0, [pc, #140]	; (8003088 <UART_SetConfig+0x1d0>)
 8002ffa:	e7e5      	b.n	8002fc8 <UART_SetConfig+0x110>
    switch (clocksource)
 8002ffc:	2b08      	cmp	r3, #8
 8002ffe:	d8af      	bhi.n	8002f60 <UART_SetConfig+0xa8>
 8003000:	a201      	add	r2, pc, #4	; (adr r2, 8003008 <UART_SetConfig+0x150>)
 8003002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003006:	bf00      	nop
 8003008:	08003045 	.word	0x08003045
 800300c:	0800304f 	.word	0x0800304f
 8003010:	0800305b 	.word	0x0800305b
 8003014:	08002f61 	.word	0x08002f61
 8003018:	08003055 	.word	0x08003055
 800301c:	08002f61 	.word	0x08002f61
 8003020:	08002f61 	.word	0x08002f61
 8003024:	08002f61 	.word	0x08002f61
 8003028:	0800302d 	.word	0x0800302d
 800302c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003030:	6863      	ldr	r3, [r4, #4]
 8003032:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8003036:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303a:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800303e:	f1a0 0210 	sub.w	r2, r0, #16
 8003042:	e7b8      	b.n	8002fb6 <UART_SetConfig+0xfe>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003044:	f7ff fd46 	bl	8002ad4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003048:	2800      	cmp	r0, #0
 800304a:	d094      	beq.n	8002f76 <UART_SetConfig+0xbe>
 800304c:	e7f0      	b.n	8003030 <UART_SetConfig+0x178>
        pclk = HAL_RCC_GetPCLK2Freq();
 800304e:	f7ff fd53 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
        break;
 8003052:	e7f9      	b.n	8003048 <UART_SetConfig+0x190>
        pclk = HAL_RCC_GetSysClockFreq();
 8003054:	f7ff f9a2 	bl	800239c <HAL_RCC_GetSysClockFreq>
        break;
 8003058:	e7f6      	b.n	8003048 <UART_SetConfig+0x190>
        pclk = (uint32_t) HSI_VALUE;
 800305a:	480b      	ldr	r0, [pc, #44]	; (8003088 <UART_SetConfig+0x1d0>)
 800305c:	e7e8      	b.n	8003030 <UART_SetConfig+0x178>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800305e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003062:	d1f4      	bne.n	800304e <UART_SetConfig+0x196>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003064:	f7ff fd48 	bl	8002af8 <HAL_RCC_GetPCLK2Freq>
        break;
 8003068:	e7ac      	b.n	8002fc4 <UART_SetConfig+0x10c>
 800306a:	bf00      	nop
 800306c:	efff69f3 	.word	0xefff69f3
 8003070:	40008000 	.word	0x40008000
 8003074:	40013800 	.word	0x40013800
 8003078:	40021000 	.word	0x40021000
 800307c:	080064a4 	.word	0x080064a4
 8003080:	40004400 	.word	0x40004400
 8003084:	080064a7 	.word	0x080064a7
 8003088:	00f42400 	.word	0x00f42400
 800308c:	000ffcff 	.word	0x000ffcff

08003090 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003090:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8003092:	07da      	lsls	r2, r3, #31
{
 8003094:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003096:	d506      	bpl.n	80030a6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003098:	6801      	ldr	r1, [r0, #0]
 800309a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 800309c:	684a      	ldr	r2, [r1, #4]
 800309e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80030a2:	4322      	orrs	r2, r4
 80030a4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030a6:	079c      	lsls	r4, r3, #30
 80030a8:	d506      	bpl.n	80030b8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030aa:	6801      	ldr	r1, [r0, #0]
 80030ac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80030ae:	684a      	ldr	r2, [r1, #4]
 80030b0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030b4:	4322      	orrs	r2, r4
 80030b6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030b8:	0759      	lsls	r1, r3, #29
 80030ba:	d506      	bpl.n	80030ca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030bc:	6801      	ldr	r1, [r0, #0]
 80030be:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80030c0:	684a      	ldr	r2, [r1, #4]
 80030c2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030c6:	4322      	orrs	r2, r4
 80030c8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ca:	071a      	lsls	r2, r3, #28
 80030cc:	d506      	bpl.n	80030dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030ce:	6801      	ldr	r1, [r0, #0]
 80030d0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80030d2:	684a      	ldr	r2, [r1, #4]
 80030d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030d8:	4322      	orrs	r2, r4
 80030da:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80030dc:	06dc      	lsls	r4, r3, #27
 80030de:	d506      	bpl.n	80030ee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80030e0:	6801      	ldr	r1, [r0, #0]
 80030e2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80030e4:	688a      	ldr	r2, [r1, #8]
 80030e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80030ea:	4322      	orrs	r2, r4
 80030ec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80030ee:	0699      	lsls	r1, r3, #26
 80030f0:	d506      	bpl.n	8003100 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80030f2:	6801      	ldr	r1, [r0, #0]
 80030f4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80030f6:	688a      	ldr	r2, [r1, #8]
 80030f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80030fc:	4322      	orrs	r2, r4
 80030fe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003100:	065a      	lsls	r2, r3, #25
 8003102:	d50f      	bpl.n	8003124 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003104:	6801      	ldr	r1, [r0, #0]
 8003106:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003108:	684a      	ldr	r2, [r1, #4]
 800310a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800310e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003110:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003114:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003116:	d105      	bne.n	8003124 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003118:	684a      	ldr	r2, [r1, #4]
 800311a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800311c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003120:	4322      	orrs	r2, r4
 8003122:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003124:	061b      	lsls	r3, r3, #24
 8003126:	d506      	bpl.n	8003136 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003128:	6802      	ldr	r2, [r0, #0]
 800312a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800312c:	6853      	ldr	r3, [r2, #4]
 800312e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003132:	430b      	orrs	r3, r1
 8003134:	6053      	str	r3, [r2, #4]
  }
}
 8003136:	bd10      	pop	{r4, pc}

08003138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800313c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003140:	4604      	mov	r4, r0
 8003142:	460e      	mov	r6, r1
 8003144:	4615      	mov	r5, r2
 8003146:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	6822      	ldr	r2, [r4, #0]
 800314a:	69d3      	ldr	r3, [r2, #28]
 800314c:	ea36 0303 	bics.w	r3, r6, r3
 8003150:	bf0c      	ite	eq
 8003152:	2301      	moveq	r3, #1
 8003154:	2300      	movne	r3, #0
 8003156:	42ab      	cmp	r3, r5
 8003158:	d001      	beq.n	800315e <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 800315a:	2000      	movs	r0, #0
 800315c:	e025      	b.n	80031aa <UART_WaitOnFlagUntilTimeout+0x72>
    if (Timeout != HAL_MAX_DELAY)
 800315e:	f1b8 3fff 	cmp.w	r8, #4294967295
 8003162:	d0f2      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003164:	f7fe fc2a 	bl	80019bc <HAL_GetTick>
 8003168:	1bc0      	subs	r0, r0, r7
 800316a:	4540      	cmp	r0, r8
 800316c:	6820      	ldr	r0, [r4, #0]
 800316e:	d802      	bhi.n	8003176 <UART_WaitOnFlagUntilTimeout+0x3e>
 8003170:	f1b8 0f00 	cmp.w	r8, #0
 8003174:	d11b      	bne.n	80031ae <UART_WaitOnFlagUntilTimeout+0x76>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003176:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800317a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800317e:	e840 3200 	strex	r2, r3, [r0]
 8003182:	2a00      	cmp	r2, #0
 8003184:	d1f7      	bne.n	8003176 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003186:	f100 0308 	add.w	r3, r0, #8
 800318a:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800318e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	f100 0108 	add.w	r1, r0, #8
 8003196:	e841 3200 	strex	r2, r3, [r1]
 800319a:	2a00      	cmp	r2, #0
 800319c:	d1f3      	bne.n	8003186 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 800319e:	2320      	movs	r3, #32
 80031a0:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80031a2:	67e3      	str	r3, [r4, #124]	; 0x7c
          __HAL_UNLOCK(huart);
 80031a4:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
          return HAL_TIMEOUT;
 80031a8:	2003      	movs	r0, #3
}
 80031aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80031ae:	6803      	ldr	r3, [r0, #0]
 80031b0:	075a      	lsls	r2, r3, #29
 80031b2:	d5c9      	bpl.n	8003148 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031b4:	69c3      	ldr	r3, [r0, #28]
 80031b6:	051b      	lsls	r3, r3, #20
 80031b8:	d5c6      	bpl.n	8003148 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80031be:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031c0:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	e840 3200 	strex	r2, r3, [r0]
 80031cc:	2a00      	cmp	r2, #0
 80031ce:	d1f7      	bne.n	80031c0 <UART_WaitOnFlagUntilTimeout+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d0:	f100 0308 	add.w	r3, r0, #8
 80031d4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	f100 0108 	add.w	r1, r0, #8
 80031e0:	e841 3200 	strex	r2, r3, [r1]
 80031e4:	2a00      	cmp	r2, #0
 80031e6:	d1f3      	bne.n	80031d0 <UART_WaitOnFlagUntilTimeout+0x98>
          huart->gState = HAL_UART_STATE_READY;
 80031e8:	2320      	movs	r3, #32
 80031ea:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80031ec:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031ee:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
 80031f2:	e7d7      	b.n	80031a4 <UART_WaitOnFlagUntilTimeout+0x6c>

080031f4 <HAL_UART_Transmit>:
{
 80031f4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80031f8:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80031fa:	6f83      	ldr	r3, [r0, #120]	; 0x78
 80031fc:	2b20      	cmp	r3, #32
{
 80031fe:	4604      	mov	r4, r0
 8003200:	460e      	mov	r6, r1
 8003202:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003204:	d14e      	bne.n	80032a4 <HAL_UART_Transmit+0xb0>
    if ((pData == NULL) || (Size == 0U))
 8003206:	2900      	cmp	r1, #0
 8003208:	d04a      	beq.n	80032a0 <HAL_UART_Transmit+0xac>
 800320a:	2a00      	cmp	r2, #0
 800320c:	d048      	beq.n	80032a0 <HAL_UART_Transmit+0xac>
    __HAL_LOCK(huart);
 800320e:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
 8003212:	2b01      	cmp	r3, #1
 8003214:	d046      	beq.n	80032a4 <HAL_UART_Transmit+0xb0>
 8003216:	2301      	movs	r3, #1
 8003218:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800321c:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800321e:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003220:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003224:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8003226:	f7fe fbc9 	bl	80019bc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800322a:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 800322c:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003230:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003234:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003236:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800323a:	d103      	bne.n	8003244 <HAL_UART_Transmit+0x50>
 800323c:	6922      	ldr	r2, [r4, #16]
 800323e:	b90a      	cbnz	r2, 8003244 <HAL_UART_Transmit+0x50>
 8003240:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003242:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003244:	2200      	movs	r2, #0
 8003246:	f884 2074 	strb.w	r2, [r4, #116]	; 0x74
    while (huart->TxXferCount > 0U)
 800324a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800324e:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8003252:	b292      	uxth	r2, r2
 8003254:	b93a      	cbnz	r2, 8003266 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003256:	2140      	movs	r1, #64	; 0x40
 8003258:	4620      	mov	r0, r4
 800325a:	f7ff ff6d 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 800325e:	b950      	cbnz	r0, 8003276 <HAL_UART_Transmit+0x82>
    huart->gState = HAL_UART_STATE_READY;
 8003260:	2320      	movs	r3, #32
 8003262:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8003264:	e008      	b.n	8003278 <HAL_UART_Transmit+0x84>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003266:	2200      	movs	r2, #0
 8003268:	2180      	movs	r1, #128	; 0x80
 800326a:	4620      	mov	r0, r4
 800326c:	9303      	str	r3, [sp, #12]
 800326e:	f7ff ff63 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003272:	9b03      	ldr	r3, [sp, #12]
 8003274:	b118      	cbz	r0, 800327e <HAL_UART_Transmit+0x8a>
        return HAL_TIMEOUT;
 8003276:	2003      	movs	r0, #3
}
 8003278:	b004      	add	sp, #16
 800327a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800327e:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8003280:	b95e      	cbnz	r6, 800329a <HAL_UART_Transmit+0xa6>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003282:	f835 2b02 	ldrh.w	r2, [r5], #2
 8003286:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800328a:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800328c:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8003290:	3a01      	subs	r2, #1
 8003292:	b292      	uxth	r2, r2
 8003294:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8003298:	e7d7      	b.n	800324a <HAL_UART_Transmit+0x56>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800329a:	f816 2b01 	ldrb.w	r2, [r6], #1
 800329e:	e7f4      	b.n	800328a <HAL_UART_Transmit+0x96>
      return  HAL_ERROR;
 80032a0:	2001      	movs	r0, #1
 80032a2:	e7e9      	b.n	8003278 <HAL_UART_Transmit+0x84>
    return HAL_BUSY;
 80032a4:	2002      	movs	r0, #2
 80032a6:	e7e7      	b.n	8003278 <HAL_UART_Transmit+0x84>

080032a8 <UART_CheckIdleState>:
{
 80032a8:	b530      	push	{r4, r5, lr}
 80032aa:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032ac:	2500      	movs	r5, #0
{
 80032ae:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032b0:	f8c0 5080 	str.w	r5, [r0, #128]	; 0x80
  tickstart = HAL_GetTick();
 80032b4:	f7fe fb82 	bl	80019bc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032b8:	6822      	ldr	r2, [r4, #0]
 80032ba:	6812      	ldr	r2, [r2, #0]
 80032bc:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80032be:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032c0:	d415      	bmi.n	80032ee <UART_CheckIdleState+0x46>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80032c2:	6822      	ldr	r2, [r4, #0]
 80032c4:	6812      	ldr	r2, [r2, #0]
 80032c6:	0752      	lsls	r2, r2, #29
 80032c8:	d509      	bpl.n	80032de <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ca:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80032ce:	9200      	str	r2, [sp, #0]
 80032d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80032d4:	2200      	movs	r2, #0
 80032d6:	4620      	mov	r0, r4
 80032d8:	f7ff ff2e 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 80032dc:	b9a0      	cbnz	r0, 8003308 <UART_CheckIdleState+0x60>
  huart->gState = HAL_UART_STATE_READY;
 80032de:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032e0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80032e2:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80032e4:	f884 0074 	strb.w	r0, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80032e8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032ea:	6620      	str	r0, [r4, #96]	; 0x60
  return HAL_OK;
 80032ec:	e00d      	b.n	800330a <UART_CheckIdleState+0x62>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032ee:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80032f2:	9200      	str	r2, [sp, #0]
 80032f4:	9003      	str	r0, [sp, #12]
 80032f6:	462a      	mov	r2, r5
 80032f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80032fc:	4620      	mov	r0, r4
 80032fe:	f7ff ff1b 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8003302:	9b03      	ldr	r3, [sp, #12]
 8003304:	2800      	cmp	r0, #0
 8003306:	d0dc      	beq.n	80032c2 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8003308:	2003      	movs	r0, #3
}
 800330a:	b005      	add	sp, #20
 800330c:	bd30      	pop	{r4, r5, pc}

0800330e <HAL_UART_Init>:
{
 800330e:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003310:	4604      	mov	r4, r0
 8003312:	b340      	cbz	r0, 8003366 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003314:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8003316:	b91b      	cbnz	r3, 8003320 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003318:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
    HAL_UART_MspInit(huart);
 800331c:	f7fe f818 	bl	8001350 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003320:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003322:	2324      	movs	r3, #36	; 0x24
 8003324:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003326:	6813      	ldr	r3, [r2, #0]
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800332e:	4620      	mov	r0, r4
 8003330:	f7ff fdc2 	bl	8002eb8 <UART_SetConfig>
 8003334:	2801      	cmp	r0, #1
 8003336:	d016      	beq.n	8003366 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003338:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800333a:	b113      	cbz	r3, 8003342 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 800333c:	4620      	mov	r0, r4
 800333e:	f7ff fea7 	bl	8003090 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003342:	6823      	ldr	r3, [r4, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800334a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003352:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800335a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800335c:	601a      	str	r2, [r3, #0]
}
 800335e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8003362:	f7ff bfa1 	b.w	80032a8 <UART_CheckIdleState>
}
 8003366:	2001      	movs	r0, #1
 8003368:	bd10      	pop	{r4, pc}
	...

0800336c <__errno>:
 800336c:	4b01      	ldr	r3, [pc, #4]	; (8003374 <__errno+0x8>)
 800336e:	6818      	ldr	r0, [r3, #0]
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	2000000c 	.word	0x2000000c

08003378 <__libc_init_array>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	4d0d      	ldr	r5, [pc, #52]	; (80033b0 <__libc_init_array+0x38>)
 800337c:	4c0d      	ldr	r4, [pc, #52]	; (80033b4 <__libc_init_array+0x3c>)
 800337e:	1b64      	subs	r4, r4, r5
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	2600      	movs	r6, #0
 8003384:	42a6      	cmp	r6, r4
 8003386:	d109      	bne.n	800339c <__libc_init_array+0x24>
 8003388:	4d0b      	ldr	r5, [pc, #44]	; (80033b8 <__libc_init_array+0x40>)
 800338a:	4c0c      	ldr	r4, [pc, #48]	; (80033bc <__libc_init_array+0x44>)
 800338c:	f002 ff30 	bl	80061f0 <_init>
 8003390:	1b64      	subs	r4, r4, r5
 8003392:	10a4      	asrs	r4, r4, #2
 8003394:	2600      	movs	r6, #0
 8003396:	42a6      	cmp	r6, r4
 8003398:	d105      	bne.n	80033a6 <__libc_init_array+0x2e>
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	f855 3b04 	ldr.w	r3, [r5], #4
 80033a0:	4798      	blx	r3
 80033a2:	3601      	adds	r6, #1
 80033a4:	e7ee      	b.n	8003384 <__libc_init_array+0xc>
 80033a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80033aa:	4798      	blx	r3
 80033ac:	3601      	adds	r6, #1
 80033ae:	e7f2      	b.n	8003396 <__libc_init_array+0x1e>
 80033b0:	08006894 	.word	0x08006894
 80033b4:	08006894 	.word	0x08006894
 80033b8:	08006894 	.word	0x08006894
 80033bc:	08006898 	.word	0x08006898

080033c0 <memset>:
 80033c0:	4402      	add	r2, r0
 80033c2:	4603      	mov	r3, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <__cvt>:
 80033d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033d4:	ec55 4b10 	vmov	r4, r5, d0
 80033d8:	2d00      	cmp	r5, #0
 80033da:	460e      	mov	r6, r1
 80033dc:	4619      	mov	r1, r3
 80033de:	462b      	mov	r3, r5
 80033e0:	bfbb      	ittet	lt
 80033e2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80033e6:	461d      	movlt	r5, r3
 80033e8:	2300      	movge	r3, #0
 80033ea:	232d      	movlt	r3, #45	; 0x2d
 80033ec:	700b      	strb	r3, [r1, #0]
 80033ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80033f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80033f4:	4691      	mov	r9, r2
 80033f6:	f023 0820 	bic.w	r8, r3, #32
 80033fa:	bfbc      	itt	lt
 80033fc:	4622      	movlt	r2, r4
 80033fe:	4614      	movlt	r4, r2
 8003400:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003404:	d005      	beq.n	8003412 <__cvt+0x42>
 8003406:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800340a:	d100      	bne.n	800340e <__cvt+0x3e>
 800340c:	3601      	adds	r6, #1
 800340e:	2102      	movs	r1, #2
 8003410:	e000      	b.n	8003414 <__cvt+0x44>
 8003412:	2103      	movs	r1, #3
 8003414:	ab03      	add	r3, sp, #12
 8003416:	9301      	str	r3, [sp, #4]
 8003418:	ab02      	add	r3, sp, #8
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	ec45 4b10 	vmov	d0, r4, r5
 8003420:	4653      	mov	r3, sl
 8003422:	4632      	mov	r2, r6
 8003424:	f000 fd18 	bl	8003e58 <_dtoa_r>
 8003428:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800342c:	4607      	mov	r7, r0
 800342e:	d102      	bne.n	8003436 <__cvt+0x66>
 8003430:	f019 0f01 	tst.w	r9, #1
 8003434:	d022      	beq.n	800347c <__cvt+0xac>
 8003436:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800343a:	eb07 0906 	add.w	r9, r7, r6
 800343e:	d110      	bne.n	8003462 <__cvt+0x92>
 8003440:	783b      	ldrb	r3, [r7, #0]
 8003442:	2b30      	cmp	r3, #48	; 0x30
 8003444:	d10a      	bne.n	800345c <__cvt+0x8c>
 8003446:	2200      	movs	r2, #0
 8003448:	2300      	movs	r3, #0
 800344a:	4620      	mov	r0, r4
 800344c:	4629      	mov	r1, r5
 800344e:	f7fd fb3b 	bl	8000ac8 <__aeabi_dcmpeq>
 8003452:	b918      	cbnz	r0, 800345c <__cvt+0x8c>
 8003454:	f1c6 0601 	rsb	r6, r6, #1
 8003458:	f8ca 6000 	str.w	r6, [sl]
 800345c:	f8da 3000 	ldr.w	r3, [sl]
 8003460:	4499      	add	r9, r3
 8003462:	2200      	movs	r2, #0
 8003464:	2300      	movs	r3, #0
 8003466:	4620      	mov	r0, r4
 8003468:	4629      	mov	r1, r5
 800346a:	f7fd fb2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800346e:	b108      	cbz	r0, 8003474 <__cvt+0xa4>
 8003470:	f8cd 900c 	str.w	r9, [sp, #12]
 8003474:	2230      	movs	r2, #48	; 0x30
 8003476:	9b03      	ldr	r3, [sp, #12]
 8003478:	454b      	cmp	r3, r9
 800347a:	d307      	bcc.n	800348c <__cvt+0xbc>
 800347c:	9b03      	ldr	r3, [sp, #12]
 800347e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003480:	1bdb      	subs	r3, r3, r7
 8003482:	4638      	mov	r0, r7
 8003484:	6013      	str	r3, [r2, #0]
 8003486:	b004      	add	sp, #16
 8003488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800348c:	1c59      	adds	r1, r3, #1
 800348e:	9103      	str	r1, [sp, #12]
 8003490:	701a      	strb	r2, [r3, #0]
 8003492:	e7f0      	b.n	8003476 <__cvt+0xa6>

08003494 <__exponent>:
 8003494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003496:	4603      	mov	r3, r0
 8003498:	2900      	cmp	r1, #0
 800349a:	bfb8      	it	lt
 800349c:	4249      	neglt	r1, r1
 800349e:	f803 2b02 	strb.w	r2, [r3], #2
 80034a2:	bfb4      	ite	lt
 80034a4:	222d      	movlt	r2, #45	; 0x2d
 80034a6:	222b      	movge	r2, #43	; 0x2b
 80034a8:	2909      	cmp	r1, #9
 80034aa:	7042      	strb	r2, [r0, #1]
 80034ac:	dd2a      	ble.n	8003504 <__exponent+0x70>
 80034ae:	f10d 0407 	add.w	r4, sp, #7
 80034b2:	46a4      	mov	ip, r4
 80034b4:	270a      	movs	r7, #10
 80034b6:	46a6      	mov	lr, r4
 80034b8:	460a      	mov	r2, r1
 80034ba:	fb91 f6f7 	sdiv	r6, r1, r7
 80034be:	fb07 1516 	mls	r5, r7, r6, r1
 80034c2:	3530      	adds	r5, #48	; 0x30
 80034c4:	2a63      	cmp	r2, #99	; 0x63
 80034c6:	f104 34ff 	add.w	r4, r4, #4294967295
 80034ca:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80034ce:	4631      	mov	r1, r6
 80034d0:	dcf1      	bgt.n	80034b6 <__exponent+0x22>
 80034d2:	3130      	adds	r1, #48	; 0x30
 80034d4:	f1ae 0502 	sub.w	r5, lr, #2
 80034d8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80034dc:	1c44      	adds	r4, r0, #1
 80034de:	4629      	mov	r1, r5
 80034e0:	4561      	cmp	r1, ip
 80034e2:	d30a      	bcc.n	80034fa <__exponent+0x66>
 80034e4:	f10d 0209 	add.w	r2, sp, #9
 80034e8:	eba2 020e 	sub.w	r2, r2, lr
 80034ec:	4565      	cmp	r5, ip
 80034ee:	bf88      	it	hi
 80034f0:	2200      	movhi	r2, #0
 80034f2:	4413      	add	r3, r2
 80034f4:	1a18      	subs	r0, r3, r0
 80034f6:	b003      	add	sp, #12
 80034f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80034fe:	f804 2f01 	strb.w	r2, [r4, #1]!
 8003502:	e7ed      	b.n	80034e0 <__exponent+0x4c>
 8003504:	2330      	movs	r3, #48	; 0x30
 8003506:	3130      	adds	r1, #48	; 0x30
 8003508:	7083      	strb	r3, [r0, #2]
 800350a:	70c1      	strb	r1, [r0, #3]
 800350c:	1d03      	adds	r3, r0, #4
 800350e:	e7f1      	b.n	80034f4 <__exponent+0x60>

08003510 <_printf_float>:
 8003510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003514:	ed2d 8b02 	vpush	{d8}
 8003518:	b08d      	sub	sp, #52	; 0x34
 800351a:	460c      	mov	r4, r1
 800351c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8003520:	4616      	mov	r6, r2
 8003522:	461f      	mov	r7, r3
 8003524:	4605      	mov	r5, r0
 8003526:	f001 fa85 	bl	8004a34 <_localeconv_r>
 800352a:	f8d0 a000 	ldr.w	sl, [r0]
 800352e:	4650      	mov	r0, sl
 8003530:	f7fc fe4e 	bl	80001d0 <strlen>
 8003534:	2300      	movs	r3, #0
 8003536:	930a      	str	r3, [sp, #40]	; 0x28
 8003538:	6823      	ldr	r3, [r4, #0]
 800353a:	9305      	str	r3, [sp, #20]
 800353c:	f8d8 3000 	ldr.w	r3, [r8]
 8003540:	f894 b018 	ldrb.w	fp, [r4, #24]
 8003544:	3307      	adds	r3, #7
 8003546:	f023 0307 	bic.w	r3, r3, #7
 800354a:	f103 0208 	add.w	r2, r3, #8
 800354e:	f8c8 2000 	str.w	r2, [r8]
 8003552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003556:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800355a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800355e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8003562:	9307      	str	r3, [sp, #28]
 8003564:	f8cd 8018 	str.w	r8, [sp, #24]
 8003568:	ee08 0a10 	vmov	s16, r0
 800356c:	4b9f      	ldr	r3, [pc, #636]	; (80037ec <_printf_float+0x2dc>)
 800356e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003572:	f04f 32ff 	mov.w	r2, #4294967295
 8003576:	f7fd fad9 	bl	8000b2c <__aeabi_dcmpun>
 800357a:	bb88      	cbnz	r0, 80035e0 <_printf_float+0xd0>
 800357c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003580:	4b9a      	ldr	r3, [pc, #616]	; (80037ec <_printf_float+0x2dc>)
 8003582:	f04f 32ff 	mov.w	r2, #4294967295
 8003586:	f7fd fab3 	bl	8000af0 <__aeabi_dcmple>
 800358a:	bb48      	cbnz	r0, 80035e0 <_printf_float+0xd0>
 800358c:	2200      	movs	r2, #0
 800358e:	2300      	movs	r3, #0
 8003590:	4640      	mov	r0, r8
 8003592:	4649      	mov	r1, r9
 8003594:	f7fd faa2 	bl	8000adc <__aeabi_dcmplt>
 8003598:	b110      	cbz	r0, 80035a0 <_printf_float+0x90>
 800359a:	232d      	movs	r3, #45	; 0x2d
 800359c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035a0:	4b93      	ldr	r3, [pc, #588]	; (80037f0 <_printf_float+0x2e0>)
 80035a2:	4894      	ldr	r0, [pc, #592]	; (80037f4 <_printf_float+0x2e4>)
 80035a4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80035a8:	bf94      	ite	ls
 80035aa:	4698      	movls	r8, r3
 80035ac:	4680      	movhi	r8, r0
 80035ae:	2303      	movs	r3, #3
 80035b0:	6123      	str	r3, [r4, #16]
 80035b2:	9b05      	ldr	r3, [sp, #20]
 80035b4:	f023 0204 	bic.w	r2, r3, #4
 80035b8:	6022      	str	r2, [r4, #0]
 80035ba:	f04f 0900 	mov.w	r9, #0
 80035be:	9700      	str	r7, [sp, #0]
 80035c0:	4633      	mov	r3, r6
 80035c2:	aa0b      	add	r2, sp, #44	; 0x2c
 80035c4:	4621      	mov	r1, r4
 80035c6:	4628      	mov	r0, r5
 80035c8:	f000 f9d8 	bl	800397c <_printf_common>
 80035cc:	3001      	adds	r0, #1
 80035ce:	f040 8090 	bne.w	80036f2 <_printf_float+0x1e2>
 80035d2:	f04f 30ff 	mov.w	r0, #4294967295
 80035d6:	b00d      	add	sp, #52	; 0x34
 80035d8:	ecbd 8b02 	vpop	{d8}
 80035dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035e0:	4642      	mov	r2, r8
 80035e2:	464b      	mov	r3, r9
 80035e4:	4640      	mov	r0, r8
 80035e6:	4649      	mov	r1, r9
 80035e8:	f7fd faa0 	bl	8000b2c <__aeabi_dcmpun>
 80035ec:	b140      	cbz	r0, 8003600 <_printf_float+0xf0>
 80035ee:	464b      	mov	r3, r9
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	bfbc      	itt	lt
 80035f4:	232d      	movlt	r3, #45	; 0x2d
 80035f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80035fa:	487f      	ldr	r0, [pc, #508]	; (80037f8 <_printf_float+0x2e8>)
 80035fc:	4b7f      	ldr	r3, [pc, #508]	; (80037fc <_printf_float+0x2ec>)
 80035fe:	e7d1      	b.n	80035a4 <_printf_float+0x94>
 8003600:	6863      	ldr	r3, [r4, #4]
 8003602:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8003606:	9206      	str	r2, [sp, #24]
 8003608:	1c5a      	adds	r2, r3, #1
 800360a:	d13f      	bne.n	800368c <_printf_float+0x17c>
 800360c:	2306      	movs	r3, #6
 800360e:	6063      	str	r3, [r4, #4]
 8003610:	9b05      	ldr	r3, [sp, #20]
 8003612:	6861      	ldr	r1, [r4, #4]
 8003614:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003618:	2300      	movs	r3, #0
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	ab0a      	add	r3, sp, #40	; 0x28
 800361e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8003622:	ab09      	add	r3, sp, #36	; 0x24
 8003624:	ec49 8b10 	vmov	d0, r8, r9
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	6022      	str	r2, [r4, #0]
 800362c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8003630:	4628      	mov	r0, r5
 8003632:	f7ff fecd 	bl	80033d0 <__cvt>
 8003636:	9b06      	ldr	r3, [sp, #24]
 8003638:	9909      	ldr	r1, [sp, #36]	; 0x24
 800363a:	2b47      	cmp	r3, #71	; 0x47
 800363c:	4680      	mov	r8, r0
 800363e:	d108      	bne.n	8003652 <_printf_float+0x142>
 8003640:	1cc8      	adds	r0, r1, #3
 8003642:	db02      	blt.n	800364a <_printf_float+0x13a>
 8003644:	6863      	ldr	r3, [r4, #4]
 8003646:	4299      	cmp	r1, r3
 8003648:	dd41      	ble.n	80036ce <_printf_float+0x1be>
 800364a:	f1ab 0b02 	sub.w	fp, fp, #2
 800364e:	fa5f fb8b 	uxtb.w	fp, fp
 8003652:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8003656:	d820      	bhi.n	800369a <_printf_float+0x18a>
 8003658:	3901      	subs	r1, #1
 800365a:	465a      	mov	r2, fp
 800365c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8003660:	9109      	str	r1, [sp, #36]	; 0x24
 8003662:	f7ff ff17 	bl	8003494 <__exponent>
 8003666:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003668:	1813      	adds	r3, r2, r0
 800366a:	2a01      	cmp	r2, #1
 800366c:	4681      	mov	r9, r0
 800366e:	6123      	str	r3, [r4, #16]
 8003670:	dc02      	bgt.n	8003678 <_printf_float+0x168>
 8003672:	6822      	ldr	r2, [r4, #0]
 8003674:	07d2      	lsls	r2, r2, #31
 8003676:	d501      	bpl.n	800367c <_printf_float+0x16c>
 8003678:	3301      	adds	r3, #1
 800367a:	6123      	str	r3, [r4, #16]
 800367c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8003680:	2b00      	cmp	r3, #0
 8003682:	d09c      	beq.n	80035be <_printf_float+0xae>
 8003684:	232d      	movs	r3, #45	; 0x2d
 8003686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800368a:	e798      	b.n	80035be <_printf_float+0xae>
 800368c:	9a06      	ldr	r2, [sp, #24]
 800368e:	2a47      	cmp	r2, #71	; 0x47
 8003690:	d1be      	bne.n	8003610 <_printf_float+0x100>
 8003692:	2b00      	cmp	r3, #0
 8003694:	d1bc      	bne.n	8003610 <_printf_float+0x100>
 8003696:	2301      	movs	r3, #1
 8003698:	e7b9      	b.n	800360e <_printf_float+0xfe>
 800369a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800369e:	d118      	bne.n	80036d2 <_printf_float+0x1c2>
 80036a0:	2900      	cmp	r1, #0
 80036a2:	6863      	ldr	r3, [r4, #4]
 80036a4:	dd0b      	ble.n	80036be <_printf_float+0x1ae>
 80036a6:	6121      	str	r1, [r4, #16]
 80036a8:	b913      	cbnz	r3, 80036b0 <_printf_float+0x1a0>
 80036aa:	6822      	ldr	r2, [r4, #0]
 80036ac:	07d0      	lsls	r0, r2, #31
 80036ae:	d502      	bpl.n	80036b6 <_printf_float+0x1a6>
 80036b0:	3301      	adds	r3, #1
 80036b2:	440b      	add	r3, r1
 80036b4:	6123      	str	r3, [r4, #16]
 80036b6:	65a1      	str	r1, [r4, #88]	; 0x58
 80036b8:	f04f 0900 	mov.w	r9, #0
 80036bc:	e7de      	b.n	800367c <_printf_float+0x16c>
 80036be:	b913      	cbnz	r3, 80036c6 <_printf_float+0x1b6>
 80036c0:	6822      	ldr	r2, [r4, #0]
 80036c2:	07d2      	lsls	r2, r2, #31
 80036c4:	d501      	bpl.n	80036ca <_printf_float+0x1ba>
 80036c6:	3302      	adds	r3, #2
 80036c8:	e7f4      	b.n	80036b4 <_printf_float+0x1a4>
 80036ca:	2301      	movs	r3, #1
 80036cc:	e7f2      	b.n	80036b4 <_printf_float+0x1a4>
 80036ce:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80036d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80036d4:	4299      	cmp	r1, r3
 80036d6:	db05      	blt.n	80036e4 <_printf_float+0x1d4>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	6121      	str	r1, [r4, #16]
 80036dc:	07d8      	lsls	r0, r3, #31
 80036de:	d5ea      	bpl.n	80036b6 <_printf_float+0x1a6>
 80036e0:	1c4b      	adds	r3, r1, #1
 80036e2:	e7e7      	b.n	80036b4 <_printf_float+0x1a4>
 80036e4:	2900      	cmp	r1, #0
 80036e6:	bfd4      	ite	le
 80036e8:	f1c1 0202 	rsble	r2, r1, #2
 80036ec:	2201      	movgt	r2, #1
 80036ee:	4413      	add	r3, r2
 80036f0:	e7e0      	b.n	80036b4 <_printf_float+0x1a4>
 80036f2:	6823      	ldr	r3, [r4, #0]
 80036f4:	055a      	lsls	r2, r3, #21
 80036f6:	d407      	bmi.n	8003708 <_printf_float+0x1f8>
 80036f8:	6923      	ldr	r3, [r4, #16]
 80036fa:	4642      	mov	r2, r8
 80036fc:	4631      	mov	r1, r6
 80036fe:	4628      	mov	r0, r5
 8003700:	47b8      	blx	r7
 8003702:	3001      	adds	r0, #1
 8003704:	d12c      	bne.n	8003760 <_printf_float+0x250>
 8003706:	e764      	b.n	80035d2 <_printf_float+0xc2>
 8003708:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800370c:	f240 80e0 	bls.w	80038d0 <_printf_float+0x3c0>
 8003710:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003714:	2200      	movs	r2, #0
 8003716:	2300      	movs	r3, #0
 8003718:	f7fd f9d6 	bl	8000ac8 <__aeabi_dcmpeq>
 800371c:	2800      	cmp	r0, #0
 800371e:	d034      	beq.n	800378a <_printf_float+0x27a>
 8003720:	4a37      	ldr	r2, [pc, #220]	; (8003800 <_printf_float+0x2f0>)
 8003722:	2301      	movs	r3, #1
 8003724:	4631      	mov	r1, r6
 8003726:	4628      	mov	r0, r5
 8003728:	47b8      	blx	r7
 800372a:	3001      	adds	r0, #1
 800372c:	f43f af51 	beq.w	80035d2 <_printf_float+0xc2>
 8003730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003734:	429a      	cmp	r2, r3
 8003736:	db02      	blt.n	800373e <_printf_float+0x22e>
 8003738:	6823      	ldr	r3, [r4, #0]
 800373a:	07d8      	lsls	r0, r3, #31
 800373c:	d510      	bpl.n	8003760 <_printf_float+0x250>
 800373e:	ee18 3a10 	vmov	r3, s16
 8003742:	4652      	mov	r2, sl
 8003744:	4631      	mov	r1, r6
 8003746:	4628      	mov	r0, r5
 8003748:	47b8      	blx	r7
 800374a:	3001      	adds	r0, #1
 800374c:	f43f af41 	beq.w	80035d2 <_printf_float+0xc2>
 8003750:	f04f 0800 	mov.w	r8, #0
 8003754:	f104 091a 	add.w	r9, r4, #26
 8003758:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800375a:	3b01      	subs	r3, #1
 800375c:	4543      	cmp	r3, r8
 800375e:	dc09      	bgt.n	8003774 <_printf_float+0x264>
 8003760:	6823      	ldr	r3, [r4, #0]
 8003762:	079b      	lsls	r3, r3, #30
 8003764:	f100 8105 	bmi.w	8003972 <_printf_float+0x462>
 8003768:	68e0      	ldr	r0, [r4, #12]
 800376a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800376c:	4298      	cmp	r0, r3
 800376e:	bfb8      	it	lt
 8003770:	4618      	movlt	r0, r3
 8003772:	e730      	b.n	80035d6 <_printf_float+0xc6>
 8003774:	2301      	movs	r3, #1
 8003776:	464a      	mov	r2, r9
 8003778:	4631      	mov	r1, r6
 800377a:	4628      	mov	r0, r5
 800377c:	47b8      	blx	r7
 800377e:	3001      	adds	r0, #1
 8003780:	f43f af27 	beq.w	80035d2 <_printf_float+0xc2>
 8003784:	f108 0801 	add.w	r8, r8, #1
 8003788:	e7e6      	b.n	8003758 <_printf_float+0x248>
 800378a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	dc39      	bgt.n	8003804 <_printf_float+0x2f4>
 8003790:	4a1b      	ldr	r2, [pc, #108]	; (8003800 <_printf_float+0x2f0>)
 8003792:	2301      	movs	r3, #1
 8003794:	4631      	mov	r1, r6
 8003796:	4628      	mov	r0, r5
 8003798:	47b8      	blx	r7
 800379a:	3001      	adds	r0, #1
 800379c:	f43f af19 	beq.w	80035d2 <_printf_float+0xc2>
 80037a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80037a4:	4313      	orrs	r3, r2
 80037a6:	d102      	bne.n	80037ae <_printf_float+0x29e>
 80037a8:	6823      	ldr	r3, [r4, #0]
 80037aa:	07d9      	lsls	r1, r3, #31
 80037ac:	d5d8      	bpl.n	8003760 <_printf_float+0x250>
 80037ae:	ee18 3a10 	vmov	r3, s16
 80037b2:	4652      	mov	r2, sl
 80037b4:	4631      	mov	r1, r6
 80037b6:	4628      	mov	r0, r5
 80037b8:	47b8      	blx	r7
 80037ba:	3001      	adds	r0, #1
 80037bc:	f43f af09 	beq.w	80035d2 <_printf_float+0xc2>
 80037c0:	f04f 0900 	mov.w	r9, #0
 80037c4:	f104 0a1a 	add.w	sl, r4, #26
 80037c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80037ca:	425b      	negs	r3, r3
 80037cc:	454b      	cmp	r3, r9
 80037ce:	dc01      	bgt.n	80037d4 <_printf_float+0x2c4>
 80037d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80037d2:	e792      	b.n	80036fa <_printf_float+0x1ea>
 80037d4:	2301      	movs	r3, #1
 80037d6:	4652      	mov	r2, sl
 80037d8:	4631      	mov	r1, r6
 80037da:	4628      	mov	r0, r5
 80037dc:	47b8      	blx	r7
 80037de:	3001      	adds	r0, #1
 80037e0:	f43f aef7 	beq.w	80035d2 <_printf_float+0xc2>
 80037e4:	f109 0901 	add.w	r9, r9, #1
 80037e8:	e7ee      	b.n	80037c8 <_printf_float+0x2b8>
 80037ea:	bf00      	nop
 80037ec:	7fefffff 	.word	0x7fefffff
 80037f0:	080064b8 	.word	0x080064b8
 80037f4:	080064bc 	.word	0x080064bc
 80037f8:	080064c4 	.word	0x080064c4
 80037fc:	080064c0 	.word	0x080064c0
 8003800:	080064c8 	.word	0x080064c8
 8003804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8003806:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003808:	429a      	cmp	r2, r3
 800380a:	bfa8      	it	ge
 800380c:	461a      	movge	r2, r3
 800380e:	2a00      	cmp	r2, #0
 8003810:	4691      	mov	r9, r2
 8003812:	dc37      	bgt.n	8003884 <_printf_float+0x374>
 8003814:	f04f 0b00 	mov.w	fp, #0
 8003818:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800381c:	f104 021a 	add.w	r2, r4, #26
 8003820:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003822:	9305      	str	r3, [sp, #20]
 8003824:	eba3 0309 	sub.w	r3, r3, r9
 8003828:	455b      	cmp	r3, fp
 800382a:	dc33      	bgt.n	8003894 <_printf_float+0x384>
 800382c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003830:	429a      	cmp	r2, r3
 8003832:	db3b      	blt.n	80038ac <_printf_float+0x39c>
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	07da      	lsls	r2, r3, #31
 8003838:	d438      	bmi.n	80038ac <_printf_float+0x39c>
 800383a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800383c:	9a05      	ldr	r2, [sp, #20]
 800383e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8003840:	1a9a      	subs	r2, r3, r2
 8003842:	eba3 0901 	sub.w	r9, r3, r1
 8003846:	4591      	cmp	r9, r2
 8003848:	bfa8      	it	ge
 800384a:	4691      	movge	r9, r2
 800384c:	f1b9 0f00 	cmp.w	r9, #0
 8003850:	dc35      	bgt.n	80038be <_printf_float+0x3ae>
 8003852:	f04f 0800 	mov.w	r8, #0
 8003856:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800385a:	f104 0a1a 	add.w	sl, r4, #26
 800385e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	eba3 0309 	sub.w	r3, r3, r9
 8003868:	4543      	cmp	r3, r8
 800386a:	f77f af79 	ble.w	8003760 <_printf_float+0x250>
 800386e:	2301      	movs	r3, #1
 8003870:	4652      	mov	r2, sl
 8003872:	4631      	mov	r1, r6
 8003874:	4628      	mov	r0, r5
 8003876:	47b8      	blx	r7
 8003878:	3001      	adds	r0, #1
 800387a:	f43f aeaa 	beq.w	80035d2 <_printf_float+0xc2>
 800387e:	f108 0801 	add.w	r8, r8, #1
 8003882:	e7ec      	b.n	800385e <_printf_float+0x34e>
 8003884:	4613      	mov	r3, r2
 8003886:	4631      	mov	r1, r6
 8003888:	4642      	mov	r2, r8
 800388a:	4628      	mov	r0, r5
 800388c:	47b8      	blx	r7
 800388e:	3001      	adds	r0, #1
 8003890:	d1c0      	bne.n	8003814 <_printf_float+0x304>
 8003892:	e69e      	b.n	80035d2 <_printf_float+0xc2>
 8003894:	2301      	movs	r3, #1
 8003896:	4631      	mov	r1, r6
 8003898:	4628      	mov	r0, r5
 800389a:	9205      	str	r2, [sp, #20]
 800389c:	47b8      	blx	r7
 800389e:	3001      	adds	r0, #1
 80038a0:	f43f ae97 	beq.w	80035d2 <_printf_float+0xc2>
 80038a4:	9a05      	ldr	r2, [sp, #20]
 80038a6:	f10b 0b01 	add.w	fp, fp, #1
 80038aa:	e7b9      	b.n	8003820 <_printf_float+0x310>
 80038ac:	ee18 3a10 	vmov	r3, s16
 80038b0:	4652      	mov	r2, sl
 80038b2:	4631      	mov	r1, r6
 80038b4:	4628      	mov	r0, r5
 80038b6:	47b8      	blx	r7
 80038b8:	3001      	adds	r0, #1
 80038ba:	d1be      	bne.n	800383a <_printf_float+0x32a>
 80038bc:	e689      	b.n	80035d2 <_printf_float+0xc2>
 80038be:	9a05      	ldr	r2, [sp, #20]
 80038c0:	464b      	mov	r3, r9
 80038c2:	4442      	add	r2, r8
 80038c4:	4631      	mov	r1, r6
 80038c6:	4628      	mov	r0, r5
 80038c8:	47b8      	blx	r7
 80038ca:	3001      	adds	r0, #1
 80038cc:	d1c1      	bne.n	8003852 <_printf_float+0x342>
 80038ce:	e680      	b.n	80035d2 <_printf_float+0xc2>
 80038d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80038d2:	2a01      	cmp	r2, #1
 80038d4:	dc01      	bgt.n	80038da <_printf_float+0x3ca>
 80038d6:	07db      	lsls	r3, r3, #31
 80038d8:	d538      	bpl.n	800394c <_printf_float+0x43c>
 80038da:	2301      	movs	r3, #1
 80038dc:	4642      	mov	r2, r8
 80038de:	4631      	mov	r1, r6
 80038e0:	4628      	mov	r0, r5
 80038e2:	47b8      	blx	r7
 80038e4:	3001      	adds	r0, #1
 80038e6:	f43f ae74 	beq.w	80035d2 <_printf_float+0xc2>
 80038ea:	ee18 3a10 	vmov	r3, s16
 80038ee:	4652      	mov	r2, sl
 80038f0:	4631      	mov	r1, r6
 80038f2:	4628      	mov	r0, r5
 80038f4:	47b8      	blx	r7
 80038f6:	3001      	adds	r0, #1
 80038f8:	f43f ae6b 	beq.w	80035d2 <_printf_float+0xc2>
 80038fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8003900:	2200      	movs	r2, #0
 8003902:	2300      	movs	r3, #0
 8003904:	f7fd f8e0 	bl	8000ac8 <__aeabi_dcmpeq>
 8003908:	b9d8      	cbnz	r0, 8003942 <_printf_float+0x432>
 800390a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800390c:	f108 0201 	add.w	r2, r8, #1
 8003910:	3b01      	subs	r3, #1
 8003912:	4631      	mov	r1, r6
 8003914:	4628      	mov	r0, r5
 8003916:	47b8      	blx	r7
 8003918:	3001      	adds	r0, #1
 800391a:	d10e      	bne.n	800393a <_printf_float+0x42a>
 800391c:	e659      	b.n	80035d2 <_printf_float+0xc2>
 800391e:	2301      	movs	r3, #1
 8003920:	4652      	mov	r2, sl
 8003922:	4631      	mov	r1, r6
 8003924:	4628      	mov	r0, r5
 8003926:	47b8      	blx	r7
 8003928:	3001      	adds	r0, #1
 800392a:	f43f ae52 	beq.w	80035d2 <_printf_float+0xc2>
 800392e:	f108 0801 	add.w	r8, r8, #1
 8003932:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003934:	3b01      	subs	r3, #1
 8003936:	4543      	cmp	r3, r8
 8003938:	dcf1      	bgt.n	800391e <_printf_float+0x40e>
 800393a:	464b      	mov	r3, r9
 800393c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003940:	e6dc      	b.n	80036fc <_printf_float+0x1ec>
 8003942:	f04f 0800 	mov.w	r8, #0
 8003946:	f104 0a1a 	add.w	sl, r4, #26
 800394a:	e7f2      	b.n	8003932 <_printf_float+0x422>
 800394c:	2301      	movs	r3, #1
 800394e:	4642      	mov	r2, r8
 8003950:	e7df      	b.n	8003912 <_printf_float+0x402>
 8003952:	2301      	movs	r3, #1
 8003954:	464a      	mov	r2, r9
 8003956:	4631      	mov	r1, r6
 8003958:	4628      	mov	r0, r5
 800395a:	47b8      	blx	r7
 800395c:	3001      	adds	r0, #1
 800395e:	f43f ae38 	beq.w	80035d2 <_printf_float+0xc2>
 8003962:	f108 0801 	add.w	r8, r8, #1
 8003966:	68e3      	ldr	r3, [r4, #12]
 8003968:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800396a:	1a5b      	subs	r3, r3, r1
 800396c:	4543      	cmp	r3, r8
 800396e:	dcf0      	bgt.n	8003952 <_printf_float+0x442>
 8003970:	e6fa      	b.n	8003768 <_printf_float+0x258>
 8003972:	f04f 0800 	mov.w	r8, #0
 8003976:	f104 0919 	add.w	r9, r4, #25
 800397a:	e7f4      	b.n	8003966 <_printf_float+0x456>

0800397c <_printf_common>:
 800397c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003980:	4616      	mov	r6, r2
 8003982:	4699      	mov	r9, r3
 8003984:	688a      	ldr	r2, [r1, #8]
 8003986:	690b      	ldr	r3, [r1, #16]
 8003988:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800398c:	4293      	cmp	r3, r2
 800398e:	bfb8      	it	lt
 8003990:	4613      	movlt	r3, r2
 8003992:	6033      	str	r3, [r6, #0]
 8003994:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003998:	4607      	mov	r7, r0
 800399a:	460c      	mov	r4, r1
 800399c:	b10a      	cbz	r2, 80039a2 <_printf_common+0x26>
 800399e:	3301      	adds	r3, #1
 80039a0:	6033      	str	r3, [r6, #0]
 80039a2:	6823      	ldr	r3, [r4, #0]
 80039a4:	0699      	lsls	r1, r3, #26
 80039a6:	bf42      	ittt	mi
 80039a8:	6833      	ldrmi	r3, [r6, #0]
 80039aa:	3302      	addmi	r3, #2
 80039ac:	6033      	strmi	r3, [r6, #0]
 80039ae:	6825      	ldr	r5, [r4, #0]
 80039b0:	f015 0506 	ands.w	r5, r5, #6
 80039b4:	d106      	bne.n	80039c4 <_printf_common+0x48>
 80039b6:	f104 0a19 	add.w	sl, r4, #25
 80039ba:	68e3      	ldr	r3, [r4, #12]
 80039bc:	6832      	ldr	r2, [r6, #0]
 80039be:	1a9b      	subs	r3, r3, r2
 80039c0:	42ab      	cmp	r3, r5
 80039c2:	dc26      	bgt.n	8003a12 <_printf_common+0x96>
 80039c4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80039c8:	1e13      	subs	r3, r2, #0
 80039ca:	6822      	ldr	r2, [r4, #0]
 80039cc:	bf18      	it	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	0692      	lsls	r2, r2, #26
 80039d2:	d42b      	bmi.n	8003a2c <_printf_common+0xb0>
 80039d4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80039d8:	4649      	mov	r1, r9
 80039da:	4638      	mov	r0, r7
 80039dc:	47c0      	blx	r8
 80039de:	3001      	adds	r0, #1
 80039e0:	d01e      	beq.n	8003a20 <_printf_common+0xa4>
 80039e2:	6823      	ldr	r3, [r4, #0]
 80039e4:	68e5      	ldr	r5, [r4, #12]
 80039e6:	6832      	ldr	r2, [r6, #0]
 80039e8:	f003 0306 	and.w	r3, r3, #6
 80039ec:	2b04      	cmp	r3, #4
 80039ee:	bf08      	it	eq
 80039f0:	1aad      	subeq	r5, r5, r2
 80039f2:	68a3      	ldr	r3, [r4, #8]
 80039f4:	6922      	ldr	r2, [r4, #16]
 80039f6:	bf0c      	ite	eq
 80039f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80039fc:	2500      	movne	r5, #0
 80039fe:	4293      	cmp	r3, r2
 8003a00:	bfc4      	itt	gt
 8003a02:	1a9b      	subgt	r3, r3, r2
 8003a04:	18ed      	addgt	r5, r5, r3
 8003a06:	2600      	movs	r6, #0
 8003a08:	341a      	adds	r4, #26
 8003a0a:	42b5      	cmp	r5, r6
 8003a0c:	d11a      	bne.n	8003a44 <_printf_common+0xc8>
 8003a0e:	2000      	movs	r0, #0
 8003a10:	e008      	b.n	8003a24 <_printf_common+0xa8>
 8003a12:	2301      	movs	r3, #1
 8003a14:	4652      	mov	r2, sl
 8003a16:	4649      	mov	r1, r9
 8003a18:	4638      	mov	r0, r7
 8003a1a:	47c0      	blx	r8
 8003a1c:	3001      	adds	r0, #1
 8003a1e:	d103      	bne.n	8003a28 <_printf_common+0xac>
 8003a20:	f04f 30ff 	mov.w	r0, #4294967295
 8003a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a28:	3501      	adds	r5, #1
 8003a2a:	e7c6      	b.n	80039ba <_printf_common+0x3e>
 8003a2c:	18e1      	adds	r1, r4, r3
 8003a2e:	1c5a      	adds	r2, r3, #1
 8003a30:	2030      	movs	r0, #48	; 0x30
 8003a32:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003a36:	4422      	add	r2, r4
 8003a38:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003a3c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003a40:	3302      	adds	r3, #2
 8003a42:	e7c7      	b.n	80039d4 <_printf_common+0x58>
 8003a44:	2301      	movs	r3, #1
 8003a46:	4622      	mov	r2, r4
 8003a48:	4649      	mov	r1, r9
 8003a4a:	4638      	mov	r0, r7
 8003a4c:	47c0      	blx	r8
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d0e6      	beq.n	8003a20 <_printf_common+0xa4>
 8003a52:	3601      	adds	r6, #1
 8003a54:	e7d9      	b.n	8003a0a <_printf_common+0x8e>
	...

08003a58 <_printf_i>:
 8003a58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003a5c:	7e0f      	ldrb	r7, [r1, #24]
 8003a5e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003a60:	2f78      	cmp	r7, #120	; 0x78
 8003a62:	4691      	mov	r9, r2
 8003a64:	4680      	mov	r8, r0
 8003a66:	460c      	mov	r4, r1
 8003a68:	469a      	mov	sl, r3
 8003a6a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003a6e:	d807      	bhi.n	8003a80 <_printf_i+0x28>
 8003a70:	2f62      	cmp	r7, #98	; 0x62
 8003a72:	d80a      	bhi.n	8003a8a <_printf_i+0x32>
 8003a74:	2f00      	cmp	r7, #0
 8003a76:	f000 80d8 	beq.w	8003c2a <_printf_i+0x1d2>
 8003a7a:	2f58      	cmp	r7, #88	; 0x58
 8003a7c:	f000 80a3 	beq.w	8003bc6 <_printf_i+0x16e>
 8003a80:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a84:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003a88:	e03a      	b.n	8003b00 <_printf_i+0xa8>
 8003a8a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003a8e:	2b15      	cmp	r3, #21
 8003a90:	d8f6      	bhi.n	8003a80 <_printf_i+0x28>
 8003a92:	a101      	add	r1, pc, #4	; (adr r1, 8003a98 <_printf_i+0x40>)
 8003a94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003a98:	08003af1 	.word	0x08003af1
 8003a9c:	08003b05 	.word	0x08003b05
 8003aa0:	08003a81 	.word	0x08003a81
 8003aa4:	08003a81 	.word	0x08003a81
 8003aa8:	08003a81 	.word	0x08003a81
 8003aac:	08003a81 	.word	0x08003a81
 8003ab0:	08003b05 	.word	0x08003b05
 8003ab4:	08003a81 	.word	0x08003a81
 8003ab8:	08003a81 	.word	0x08003a81
 8003abc:	08003a81 	.word	0x08003a81
 8003ac0:	08003a81 	.word	0x08003a81
 8003ac4:	08003c11 	.word	0x08003c11
 8003ac8:	08003b35 	.word	0x08003b35
 8003acc:	08003bf3 	.word	0x08003bf3
 8003ad0:	08003a81 	.word	0x08003a81
 8003ad4:	08003a81 	.word	0x08003a81
 8003ad8:	08003c33 	.word	0x08003c33
 8003adc:	08003a81 	.word	0x08003a81
 8003ae0:	08003b35 	.word	0x08003b35
 8003ae4:	08003a81 	.word	0x08003a81
 8003ae8:	08003a81 	.word	0x08003a81
 8003aec:	08003bfb 	.word	0x08003bfb
 8003af0:	682b      	ldr	r3, [r5, #0]
 8003af2:	1d1a      	adds	r2, r3, #4
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	602a      	str	r2, [r5, #0]
 8003af8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003afc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003b00:	2301      	movs	r3, #1
 8003b02:	e0a3      	b.n	8003c4c <_printf_i+0x1f4>
 8003b04:	6820      	ldr	r0, [r4, #0]
 8003b06:	6829      	ldr	r1, [r5, #0]
 8003b08:	0606      	lsls	r6, r0, #24
 8003b0a:	f101 0304 	add.w	r3, r1, #4
 8003b0e:	d50a      	bpl.n	8003b26 <_printf_i+0xce>
 8003b10:	680e      	ldr	r6, [r1, #0]
 8003b12:	602b      	str	r3, [r5, #0]
 8003b14:	2e00      	cmp	r6, #0
 8003b16:	da03      	bge.n	8003b20 <_printf_i+0xc8>
 8003b18:	232d      	movs	r3, #45	; 0x2d
 8003b1a:	4276      	negs	r6, r6
 8003b1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b20:	485e      	ldr	r0, [pc, #376]	; (8003c9c <_printf_i+0x244>)
 8003b22:	230a      	movs	r3, #10
 8003b24:	e019      	b.n	8003b5a <_printf_i+0x102>
 8003b26:	680e      	ldr	r6, [r1, #0]
 8003b28:	602b      	str	r3, [r5, #0]
 8003b2a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003b2e:	bf18      	it	ne
 8003b30:	b236      	sxthne	r6, r6
 8003b32:	e7ef      	b.n	8003b14 <_printf_i+0xbc>
 8003b34:	682b      	ldr	r3, [r5, #0]
 8003b36:	6820      	ldr	r0, [r4, #0]
 8003b38:	1d19      	adds	r1, r3, #4
 8003b3a:	6029      	str	r1, [r5, #0]
 8003b3c:	0601      	lsls	r1, r0, #24
 8003b3e:	d501      	bpl.n	8003b44 <_printf_i+0xec>
 8003b40:	681e      	ldr	r6, [r3, #0]
 8003b42:	e002      	b.n	8003b4a <_printf_i+0xf2>
 8003b44:	0646      	lsls	r6, r0, #25
 8003b46:	d5fb      	bpl.n	8003b40 <_printf_i+0xe8>
 8003b48:	881e      	ldrh	r6, [r3, #0]
 8003b4a:	4854      	ldr	r0, [pc, #336]	; (8003c9c <_printf_i+0x244>)
 8003b4c:	2f6f      	cmp	r7, #111	; 0x6f
 8003b4e:	bf0c      	ite	eq
 8003b50:	2308      	moveq	r3, #8
 8003b52:	230a      	movne	r3, #10
 8003b54:	2100      	movs	r1, #0
 8003b56:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003b5a:	6865      	ldr	r5, [r4, #4]
 8003b5c:	60a5      	str	r5, [r4, #8]
 8003b5e:	2d00      	cmp	r5, #0
 8003b60:	bfa2      	ittt	ge
 8003b62:	6821      	ldrge	r1, [r4, #0]
 8003b64:	f021 0104 	bicge.w	r1, r1, #4
 8003b68:	6021      	strge	r1, [r4, #0]
 8003b6a:	b90e      	cbnz	r6, 8003b70 <_printf_i+0x118>
 8003b6c:	2d00      	cmp	r5, #0
 8003b6e:	d04d      	beq.n	8003c0c <_printf_i+0x1b4>
 8003b70:	4615      	mov	r5, r2
 8003b72:	fbb6 f1f3 	udiv	r1, r6, r3
 8003b76:	fb03 6711 	mls	r7, r3, r1, r6
 8003b7a:	5dc7      	ldrb	r7, [r0, r7]
 8003b7c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003b80:	4637      	mov	r7, r6
 8003b82:	42bb      	cmp	r3, r7
 8003b84:	460e      	mov	r6, r1
 8003b86:	d9f4      	bls.n	8003b72 <_printf_i+0x11a>
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d10b      	bne.n	8003ba4 <_printf_i+0x14c>
 8003b8c:	6823      	ldr	r3, [r4, #0]
 8003b8e:	07de      	lsls	r6, r3, #31
 8003b90:	d508      	bpl.n	8003ba4 <_printf_i+0x14c>
 8003b92:	6923      	ldr	r3, [r4, #16]
 8003b94:	6861      	ldr	r1, [r4, #4]
 8003b96:	4299      	cmp	r1, r3
 8003b98:	bfde      	ittt	le
 8003b9a:	2330      	movle	r3, #48	; 0x30
 8003b9c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ba0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003ba4:	1b52      	subs	r2, r2, r5
 8003ba6:	6122      	str	r2, [r4, #16]
 8003ba8:	f8cd a000 	str.w	sl, [sp]
 8003bac:	464b      	mov	r3, r9
 8003bae:	aa03      	add	r2, sp, #12
 8003bb0:	4621      	mov	r1, r4
 8003bb2:	4640      	mov	r0, r8
 8003bb4:	f7ff fee2 	bl	800397c <_printf_common>
 8003bb8:	3001      	adds	r0, #1
 8003bba:	d14c      	bne.n	8003c56 <_printf_i+0x1fe>
 8003bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003bc0:	b004      	add	sp, #16
 8003bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003bc6:	4835      	ldr	r0, [pc, #212]	; (8003c9c <_printf_i+0x244>)
 8003bc8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003bcc:	6829      	ldr	r1, [r5, #0]
 8003bce:	6823      	ldr	r3, [r4, #0]
 8003bd0:	f851 6b04 	ldr.w	r6, [r1], #4
 8003bd4:	6029      	str	r1, [r5, #0]
 8003bd6:	061d      	lsls	r5, r3, #24
 8003bd8:	d514      	bpl.n	8003c04 <_printf_i+0x1ac>
 8003bda:	07df      	lsls	r7, r3, #31
 8003bdc:	bf44      	itt	mi
 8003bde:	f043 0320 	orrmi.w	r3, r3, #32
 8003be2:	6023      	strmi	r3, [r4, #0]
 8003be4:	b91e      	cbnz	r6, 8003bee <_printf_i+0x196>
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	f023 0320 	bic.w	r3, r3, #32
 8003bec:	6023      	str	r3, [r4, #0]
 8003bee:	2310      	movs	r3, #16
 8003bf0:	e7b0      	b.n	8003b54 <_printf_i+0xfc>
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	f043 0320 	orr.w	r3, r3, #32
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	2378      	movs	r3, #120	; 0x78
 8003bfc:	4828      	ldr	r0, [pc, #160]	; (8003ca0 <_printf_i+0x248>)
 8003bfe:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c02:	e7e3      	b.n	8003bcc <_printf_i+0x174>
 8003c04:	0659      	lsls	r1, r3, #25
 8003c06:	bf48      	it	mi
 8003c08:	b2b6      	uxthmi	r6, r6
 8003c0a:	e7e6      	b.n	8003bda <_printf_i+0x182>
 8003c0c:	4615      	mov	r5, r2
 8003c0e:	e7bb      	b.n	8003b88 <_printf_i+0x130>
 8003c10:	682b      	ldr	r3, [r5, #0]
 8003c12:	6826      	ldr	r6, [r4, #0]
 8003c14:	6961      	ldr	r1, [r4, #20]
 8003c16:	1d18      	adds	r0, r3, #4
 8003c18:	6028      	str	r0, [r5, #0]
 8003c1a:	0635      	lsls	r5, r6, #24
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	d501      	bpl.n	8003c24 <_printf_i+0x1cc>
 8003c20:	6019      	str	r1, [r3, #0]
 8003c22:	e002      	b.n	8003c2a <_printf_i+0x1d2>
 8003c24:	0670      	lsls	r0, r6, #25
 8003c26:	d5fb      	bpl.n	8003c20 <_printf_i+0x1c8>
 8003c28:	8019      	strh	r1, [r3, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6123      	str	r3, [r4, #16]
 8003c2e:	4615      	mov	r5, r2
 8003c30:	e7ba      	b.n	8003ba8 <_printf_i+0x150>
 8003c32:	682b      	ldr	r3, [r5, #0]
 8003c34:	1d1a      	adds	r2, r3, #4
 8003c36:	602a      	str	r2, [r5, #0]
 8003c38:	681d      	ldr	r5, [r3, #0]
 8003c3a:	6862      	ldr	r2, [r4, #4]
 8003c3c:	2100      	movs	r1, #0
 8003c3e:	4628      	mov	r0, r5
 8003c40:	f7fc face 	bl	80001e0 <memchr>
 8003c44:	b108      	cbz	r0, 8003c4a <_printf_i+0x1f2>
 8003c46:	1b40      	subs	r0, r0, r5
 8003c48:	6060      	str	r0, [r4, #4]
 8003c4a:	6863      	ldr	r3, [r4, #4]
 8003c4c:	6123      	str	r3, [r4, #16]
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003c54:	e7a8      	b.n	8003ba8 <_printf_i+0x150>
 8003c56:	6923      	ldr	r3, [r4, #16]
 8003c58:	462a      	mov	r2, r5
 8003c5a:	4649      	mov	r1, r9
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	47d0      	blx	sl
 8003c60:	3001      	adds	r0, #1
 8003c62:	d0ab      	beq.n	8003bbc <_printf_i+0x164>
 8003c64:	6823      	ldr	r3, [r4, #0]
 8003c66:	079b      	lsls	r3, r3, #30
 8003c68:	d413      	bmi.n	8003c92 <_printf_i+0x23a>
 8003c6a:	68e0      	ldr	r0, [r4, #12]
 8003c6c:	9b03      	ldr	r3, [sp, #12]
 8003c6e:	4298      	cmp	r0, r3
 8003c70:	bfb8      	it	lt
 8003c72:	4618      	movlt	r0, r3
 8003c74:	e7a4      	b.n	8003bc0 <_printf_i+0x168>
 8003c76:	2301      	movs	r3, #1
 8003c78:	4632      	mov	r2, r6
 8003c7a:	4649      	mov	r1, r9
 8003c7c:	4640      	mov	r0, r8
 8003c7e:	47d0      	blx	sl
 8003c80:	3001      	adds	r0, #1
 8003c82:	d09b      	beq.n	8003bbc <_printf_i+0x164>
 8003c84:	3501      	adds	r5, #1
 8003c86:	68e3      	ldr	r3, [r4, #12]
 8003c88:	9903      	ldr	r1, [sp, #12]
 8003c8a:	1a5b      	subs	r3, r3, r1
 8003c8c:	42ab      	cmp	r3, r5
 8003c8e:	dcf2      	bgt.n	8003c76 <_printf_i+0x21e>
 8003c90:	e7eb      	b.n	8003c6a <_printf_i+0x212>
 8003c92:	2500      	movs	r5, #0
 8003c94:	f104 0619 	add.w	r6, r4, #25
 8003c98:	e7f5      	b.n	8003c86 <_printf_i+0x22e>
 8003c9a:	bf00      	nop
 8003c9c:	080064ca 	.word	0x080064ca
 8003ca0:	080064db 	.word	0x080064db

08003ca4 <strncpy>:
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	3901      	subs	r1, #1
 8003ca8:	4603      	mov	r3, r0
 8003caa:	b132      	cbz	r2, 8003cba <strncpy+0x16>
 8003cac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003cb0:	f803 4b01 	strb.w	r4, [r3], #1
 8003cb4:	3a01      	subs	r2, #1
 8003cb6:	2c00      	cmp	r4, #0
 8003cb8:	d1f7      	bne.n	8003caa <strncpy+0x6>
 8003cba:	441a      	add	r2, r3
 8003cbc:	2100      	movs	r1, #0
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d100      	bne.n	8003cc4 <strncpy+0x20>
 8003cc2:	bd10      	pop	{r4, pc}
 8003cc4:	f803 1b01 	strb.w	r1, [r3], #1
 8003cc8:	e7f9      	b.n	8003cbe <strncpy+0x1a>

08003cca <_vsniprintf_r>:
 8003cca:	b530      	push	{r4, r5, lr}
 8003ccc:	4614      	mov	r4, r2
 8003cce:	2c00      	cmp	r4, #0
 8003cd0:	b09b      	sub	sp, #108	; 0x6c
 8003cd2:	4605      	mov	r5, r0
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	da05      	bge.n	8003ce4 <_vsniprintf_r+0x1a>
 8003cd8:	238b      	movs	r3, #139	; 0x8b
 8003cda:	6003      	str	r3, [r0, #0]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	b01b      	add	sp, #108	; 0x6c
 8003ce2:	bd30      	pop	{r4, r5, pc}
 8003ce4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8003ce8:	f8ad 300c 	strh.w	r3, [sp, #12]
 8003cec:	bf14      	ite	ne
 8003cee:	f104 33ff 	addne.w	r3, r4, #4294967295
 8003cf2:	4623      	moveq	r3, r4
 8003cf4:	9302      	str	r3, [sp, #8]
 8003cf6:	9305      	str	r3, [sp, #20]
 8003cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cfc:	9100      	str	r1, [sp, #0]
 8003cfe:	9104      	str	r1, [sp, #16]
 8003d00:	f8ad 300e 	strh.w	r3, [sp, #14]
 8003d04:	4669      	mov	r1, sp
 8003d06:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8003d08:	f001 fb84 	bl	8005414 <_svfiprintf_r>
 8003d0c:	1c43      	adds	r3, r0, #1
 8003d0e:	bfbc      	itt	lt
 8003d10:	238b      	movlt	r3, #139	; 0x8b
 8003d12:	602b      	strlt	r3, [r5, #0]
 8003d14:	2c00      	cmp	r4, #0
 8003d16:	d0e3      	beq.n	8003ce0 <_vsniprintf_r+0x16>
 8003d18:	9b00      	ldr	r3, [sp, #0]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
 8003d1e:	e7df      	b.n	8003ce0 <_vsniprintf_r+0x16>

08003d20 <vsniprintf>:
 8003d20:	b507      	push	{r0, r1, r2, lr}
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	4613      	mov	r3, r2
 8003d26:	460a      	mov	r2, r1
 8003d28:	4601      	mov	r1, r0
 8003d2a:	4803      	ldr	r0, [pc, #12]	; (8003d38 <vsniprintf+0x18>)
 8003d2c:	6800      	ldr	r0, [r0, #0]
 8003d2e:	f7ff ffcc 	bl	8003cca <_vsniprintf_r>
 8003d32:	b003      	add	sp, #12
 8003d34:	f85d fb04 	ldr.w	pc, [sp], #4
 8003d38:	2000000c 	.word	0x2000000c

08003d3c <quorem>:
 8003d3c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d40:	6903      	ldr	r3, [r0, #16]
 8003d42:	690c      	ldr	r4, [r1, #16]
 8003d44:	42a3      	cmp	r3, r4
 8003d46:	4607      	mov	r7, r0
 8003d48:	f2c0 8081 	blt.w	8003e4e <quorem+0x112>
 8003d4c:	3c01      	subs	r4, #1
 8003d4e:	f101 0814 	add.w	r8, r1, #20
 8003d52:	f100 0514 	add.w	r5, r0, #20
 8003d56:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003d5a:	9301      	str	r3, [sp, #4]
 8003d5c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8003d60:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003d64:	3301      	adds	r3, #1
 8003d66:	429a      	cmp	r2, r3
 8003d68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8003d6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8003d70:	fbb2 f6f3 	udiv	r6, r2, r3
 8003d74:	d331      	bcc.n	8003dda <quorem+0x9e>
 8003d76:	f04f 0e00 	mov.w	lr, #0
 8003d7a:	4640      	mov	r0, r8
 8003d7c:	46ac      	mov	ip, r5
 8003d7e:	46f2      	mov	sl, lr
 8003d80:	f850 2b04 	ldr.w	r2, [r0], #4
 8003d84:	b293      	uxth	r3, r2
 8003d86:	fb06 e303 	mla	r3, r6, r3, lr
 8003d8a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	ebaa 0303 	sub.w	r3, sl, r3
 8003d94:	f8dc a000 	ldr.w	sl, [ip]
 8003d98:	0c12      	lsrs	r2, r2, #16
 8003d9a:	fa13 f38a 	uxtah	r3, r3, sl
 8003d9e:	fb06 e202 	mla	r2, r6, r2, lr
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	9b00      	ldr	r3, [sp, #0]
 8003da6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8003daa:	b292      	uxth	r2, r2
 8003dac:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8003db0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003db4:	f8bd 3000 	ldrh.w	r3, [sp]
 8003db8:	4581      	cmp	r9, r0
 8003dba:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003dbe:	f84c 3b04 	str.w	r3, [ip], #4
 8003dc2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8003dc6:	d2db      	bcs.n	8003d80 <quorem+0x44>
 8003dc8:	f855 300b 	ldr.w	r3, [r5, fp]
 8003dcc:	b92b      	cbnz	r3, 8003dda <quorem+0x9e>
 8003dce:	9b01      	ldr	r3, [sp, #4]
 8003dd0:	3b04      	subs	r3, #4
 8003dd2:	429d      	cmp	r5, r3
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	d32e      	bcc.n	8003e36 <quorem+0xfa>
 8003dd8:	613c      	str	r4, [r7, #16]
 8003dda:	4638      	mov	r0, r7
 8003ddc:	f001 f8c6 	bl	8004f6c <__mcmp>
 8003de0:	2800      	cmp	r0, #0
 8003de2:	db24      	blt.n	8003e2e <quorem+0xf2>
 8003de4:	3601      	adds	r6, #1
 8003de6:	4628      	mov	r0, r5
 8003de8:	f04f 0c00 	mov.w	ip, #0
 8003dec:	f858 2b04 	ldr.w	r2, [r8], #4
 8003df0:	f8d0 e000 	ldr.w	lr, [r0]
 8003df4:	b293      	uxth	r3, r2
 8003df6:	ebac 0303 	sub.w	r3, ip, r3
 8003dfa:	0c12      	lsrs	r2, r2, #16
 8003dfc:	fa13 f38e 	uxtah	r3, r3, lr
 8003e00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8003e04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8003e08:	b29b      	uxth	r3, r3
 8003e0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003e0e:	45c1      	cmp	r9, r8
 8003e10:	f840 3b04 	str.w	r3, [r0], #4
 8003e14:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8003e18:	d2e8      	bcs.n	8003dec <quorem+0xb0>
 8003e1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8003e1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8003e22:	b922      	cbnz	r2, 8003e2e <quorem+0xf2>
 8003e24:	3b04      	subs	r3, #4
 8003e26:	429d      	cmp	r5, r3
 8003e28:	461a      	mov	r2, r3
 8003e2a:	d30a      	bcc.n	8003e42 <quorem+0x106>
 8003e2c:	613c      	str	r4, [r7, #16]
 8003e2e:	4630      	mov	r0, r6
 8003e30:	b003      	add	sp, #12
 8003e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003e36:	6812      	ldr	r2, [r2, #0]
 8003e38:	3b04      	subs	r3, #4
 8003e3a:	2a00      	cmp	r2, #0
 8003e3c:	d1cc      	bne.n	8003dd8 <quorem+0x9c>
 8003e3e:	3c01      	subs	r4, #1
 8003e40:	e7c7      	b.n	8003dd2 <quorem+0x96>
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	3b04      	subs	r3, #4
 8003e46:	2a00      	cmp	r2, #0
 8003e48:	d1f0      	bne.n	8003e2c <quorem+0xf0>
 8003e4a:	3c01      	subs	r4, #1
 8003e4c:	e7eb      	b.n	8003e26 <quorem+0xea>
 8003e4e:	2000      	movs	r0, #0
 8003e50:	e7ee      	b.n	8003e30 <quorem+0xf4>
 8003e52:	0000      	movs	r0, r0
 8003e54:	0000      	movs	r0, r0
	...

08003e58 <_dtoa_r>:
 8003e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e5c:	ed2d 8b04 	vpush	{d8-d9}
 8003e60:	ec57 6b10 	vmov	r6, r7, d0
 8003e64:	b093      	sub	sp, #76	; 0x4c
 8003e66:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8003e68:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8003e6c:	9106      	str	r1, [sp, #24]
 8003e6e:	ee10 aa10 	vmov	sl, s0
 8003e72:	4604      	mov	r4, r0
 8003e74:	9209      	str	r2, [sp, #36]	; 0x24
 8003e76:	930c      	str	r3, [sp, #48]	; 0x30
 8003e78:	46bb      	mov	fp, r7
 8003e7a:	b975      	cbnz	r5, 8003e9a <_dtoa_r+0x42>
 8003e7c:	2010      	movs	r0, #16
 8003e7e:	f000 fddd 	bl	8004a3c <malloc>
 8003e82:	4602      	mov	r2, r0
 8003e84:	6260      	str	r0, [r4, #36]	; 0x24
 8003e86:	b920      	cbnz	r0, 8003e92 <_dtoa_r+0x3a>
 8003e88:	4ba7      	ldr	r3, [pc, #668]	; (8004128 <_dtoa_r+0x2d0>)
 8003e8a:	21ea      	movs	r1, #234	; 0xea
 8003e8c:	48a7      	ldr	r0, [pc, #668]	; (800412c <_dtoa_r+0x2d4>)
 8003e8e:	f001 fbd1 	bl	8005634 <__assert_func>
 8003e92:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8003e96:	6005      	str	r5, [r0, #0]
 8003e98:	60c5      	str	r5, [r0, #12]
 8003e9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003e9c:	6819      	ldr	r1, [r3, #0]
 8003e9e:	b151      	cbz	r1, 8003eb6 <_dtoa_r+0x5e>
 8003ea0:	685a      	ldr	r2, [r3, #4]
 8003ea2:	604a      	str	r2, [r1, #4]
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4093      	lsls	r3, r2
 8003ea8:	608b      	str	r3, [r1, #8]
 8003eaa:	4620      	mov	r0, r4
 8003eac:	f000 fe1c 	bl	8004ae8 <_Bfree>
 8003eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	601a      	str	r2, [r3, #0]
 8003eb6:	1e3b      	subs	r3, r7, #0
 8003eb8:	bfaa      	itet	ge
 8003eba:	2300      	movge	r3, #0
 8003ebc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8003ec0:	f8c8 3000 	strge.w	r3, [r8]
 8003ec4:	4b9a      	ldr	r3, [pc, #616]	; (8004130 <_dtoa_r+0x2d8>)
 8003ec6:	bfbc      	itt	lt
 8003ec8:	2201      	movlt	r2, #1
 8003eca:	f8c8 2000 	strlt.w	r2, [r8]
 8003ece:	ea33 030b 	bics.w	r3, r3, fp
 8003ed2:	d11b      	bne.n	8003f0c <_dtoa_r+0xb4>
 8003ed4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003ed6:	f242 730f 	movw	r3, #9999	; 0x270f
 8003eda:	6013      	str	r3, [r2, #0]
 8003edc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8003ee0:	4333      	orrs	r3, r6
 8003ee2:	f000 8592 	beq.w	8004a0a <_dtoa_r+0xbb2>
 8003ee6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003ee8:	b963      	cbnz	r3, 8003f04 <_dtoa_r+0xac>
 8003eea:	4b92      	ldr	r3, [pc, #584]	; (8004134 <_dtoa_r+0x2dc>)
 8003eec:	e022      	b.n	8003f34 <_dtoa_r+0xdc>
 8003eee:	4b92      	ldr	r3, [pc, #584]	; (8004138 <_dtoa_r+0x2e0>)
 8003ef0:	9301      	str	r3, [sp, #4]
 8003ef2:	3308      	adds	r3, #8
 8003ef4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8003ef6:	6013      	str	r3, [r2, #0]
 8003ef8:	9801      	ldr	r0, [sp, #4]
 8003efa:	b013      	add	sp, #76	; 0x4c
 8003efc:	ecbd 8b04 	vpop	{d8-d9}
 8003f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f04:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <_dtoa_r+0x2dc>)
 8003f06:	9301      	str	r3, [sp, #4]
 8003f08:	3303      	adds	r3, #3
 8003f0a:	e7f3      	b.n	8003ef4 <_dtoa_r+0x9c>
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2300      	movs	r3, #0
 8003f10:	4650      	mov	r0, sl
 8003f12:	4659      	mov	r1, fp
 8003f14:	f7fc fdd8 	bl	8000ac8 <__aeabi_dcmpeq>
 8003f18:	ec4b ab19 	vmov	d9, sl, fp
 8003f1c:	4680      	mov	r8, r0
 8003f1e:	b158      	cbz	r0, 8003f38 <_dtoa_r+0xe0>
 8003f20:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f22:	2301      	movs	r3, #1
 8003f24:	6013      	str	r3, [r2, #0]
 8003f26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 856b 	beq.w	8004a04 <_dtoa_r+0xbac>
 8003f2e:	4883      	ldr	r0, [pc, #524]	; (800413c <_dtoa_r+0x2e4>)
 8003f30:	6018      	str	r0, [r3, #0]
 8003f32:	1e43      	subs	r3, r0, #1
 8003f34:	9301      	str	r3, [sp, #4]
 8003f36:	e7df      	b.n	8003ef8 <_dtoa_r+0xa0>
 8003f38:	ec4b ab10 	vmov	d0, sl, fp
 8003f3c:	aa10      	add	r2, sp, #64	; 0x40
 8003f3e:	a911      	add	r1, sp, #68	; 0x44
 8003f40:	4620      	mov	r0, r4
 8003f42:	f001 f8b9 	bl	80050b8 <__d2b>
 8003f46:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8003f4a:	ee08 0a10 	vmov	s16, r0
 8003f4e:	2d00      	cmp	r5, #0
 8003f50:	f000 8084 	beq.w	800405c <_dtoa_r+0x204>
 8003f54:	ee19 3a90 	vmov	r3, s19
 8003f58:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003f5c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8003f60:	4656      	mov	r6, sl
 8003f62:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8003f66:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8003f6a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8003f6e:	4b74      	ldr	r3, [pc, #464]	; (8004140 <_dtoa_r+0x2e8>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	4630      	mov	r0, r6
 8003f74:	4639      	mov	r1, r7
 8003f76:	f7fc f987 	bl	8000288 <__aeabi_dsub>
 8003f7a:	a365      	add	r3, pc, #404	; (adr r3, 8004110 <_dtoa_r+0x2b8>)
 8003f7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f80:	f7fc fb3a 	bl	80005f8 <__aeabi_dmul>
 8003f84:	a364      	add	r3, pc, #400	; (adr r3, 8004118 <_dtoa_r+0x2c0>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc f97f 	bl	800028c <__adddf3>
 8003f8e:	4606      	mov	r6, r0
 8003f90:	4628      	mov	r0, r5
 8003f92:	460f      	mov	r7, r1
 8003f94:	f7fc fac6 	bl	8000524 <__aeabi_i2d>
 8003f98:	a361      	add	r3, pc, #388	; (adr r3, 8004120 <_dtoa_r+0x2c8>)
 8003f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f9e:	f7fc fb2b 	bl	80005f8 <__aeabi_dmul>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	4630      	mov	r0, r6
 8003fa8:	4639      	mov	r1, r7
 8003faa:	f7fc f96f 	bl	800028c <__adddf3>
 8003fae:	4606      	mov	r6, r0
 8003fb0:	460f      	mov	r7, r1
 8003fb2:	f7fc fdd1 	bl	8000b58 <__aeabi_d2iz>
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	9000      	str	r0, [sp, #0]
 8003fba:	2300      	movs	r3, #0
 8003fbc:	4630      	mov	r0, r6
 8003fbe:	4639      	mov	r1, r7
 8003fc0:	f7fc fd8c 	bl	8000adc <__aeabi_dcmplt>
 8003fc4:	b150      	cbz	r0, 8003fdc <_dtoa_r+0x184>
 8003fc6:	9800      	ldr	r0, [sp, #0]
 8003fc8:	f7fc faac 	bl	8000524 <__aeabi_i2d>
 8003fcc:	4632      	mov	r2, r6
 8003fce:	463b      	mov	r3, r7
 8003fd0:	f7fc fd7a 	bl	8000ac8 <__aeabi_dcmpeq>
 8003fd4:	b910      	cbnz	r0, 8003fdc <_dtoa_r+0x184>
 8003fd6:	9b00      	ldr	r3, [sp, #0]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	9300      	str	r3, [sp, #0]
 8003fdc:	9b00      	ldr	r3, [sp, #0]
 8003fde:	2b16      	cmp	r3, #22
 8003fe0:	d85a      	bhi.n	8004098 <_dtoa_r+0x240>
 8003fe2:	9a00      	ldr	r2, [sp, #0]
 8003fe4:	4b57      	ldr	r3, [pc, #348]	; (8004144 <_dtoa_r+0x2ec>)
 8003fe6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	ec51 0b19 	vmov	r0, r1, d9
 8003ff2:	f7fc fd73 	bl	8000adc <__aeabi_dcmplt>
 8003ff6:	2800      	cmp	r0, #0
 8003ff8:	d050      	beq.n	800409c <_dtoa_r+0x244>
 8003ffa:	9b00      	ldr	r3, [sp, #0]
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	9300      	str	r3, [sp, #0]
 8004000:	2300      	movs	r3, #0
 8004002:	930b      	str	r3, [sp, #44]	; 0x2c
 8004004:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8004006:	1b5d      	subs	r5, r3, r5
 8004008:	1e6b      	subs	r3, r5, #1
 800400a:	9305      	str	r3, [sp, #20]
 800400c:	bf45      	ittet	mi
 800400e:	f1c5 0301 	rsbmi	r3, r5, #1
 8004012:	9304      	strmi	r3, [sp, #16]
 8004014:	2300      	movpl	r3, #0
 8004016:	2300      	movmi	r3, #0
 8004018:	bf4c      	ite	mi
 800401a:	9305      	strmi	r3, [sp, #20]
 800401c:	9304      	strpl	r3, [sp, #16]
 800401e:	9b00      	ldr	r3, [sp, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	db3d      	blt.n	80040a0 <_dtoa_r+0x248>
 8004024:	9b05      	ldr	r3, [sp, #20]
 8004026:	9a00      	ldr	r2, [sp, #0]
 8004028:	920a      	str	r2, [sp, #40]	; 0x28
 800402a:	4413      	add	r3, r2
 800402c:	9305      	str	r3, [sp, #20]
 800402e:	2300      	movs	r3, #0
 8004030:	9307      	str	r3, [sp, #28]
 8004032:	9b06      	ldr	r3, [sp, #24]
 8004034:	2b09      	cmp	r3, #9
 8004036:	f200 8089 	bhi.w	800414c <_dtoa_r+0x2f4>
 800403a:	2b05      	cmp	r3, #5
 800403c:	bfc4      	itt	gt
 800403e:	3b04      	subgt	r3, #4
 8004040:	9306      	strgt	r3, [sp, #24]
 8004042:	9b06      	ldr	r3, [sp, #24]
 8004044:	f1a3 0302 	sub.w	r3, r3, #2
 8004048:	bfcc      	ite	gt
 800404a:	2500      	movgt	r5, #0
 800404c:	2501      	movle	r5, #1
 800404e:	2b03      	cmp	r3, #3
 8004050:	f200 8087 	bhi.w	8004162 <_dtoa_r+0x30a>
 8004054:	e8df f003 	tbb	[pc, r3]
 8004058:	59383a2d 	.word	0x59383a2d
 800405c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8004060:	441d      	add	r5, r3
 8004062:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8004066:	2b20      	cmp	r3, #32
 8004068:	bfc1      	itttt	gt
 800406a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800406e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8004072:	fa0b f303 	lslgt.w	r3, fp, r3
 8004076:	fa26 f000 	lsrgt.w	r0, r6, r0
 800407a:	bfda      	itte	le
 800407c:	f1c3 0320 	rsble	r3, r3, #32
 8004080:	fa06 f003 	lslle.w	r0, r6, r3
 8004084:	4318      	orrgt	r0, r3
 8004086:	f7fc fa3d 	bl	8000504 <__aeabi_ui2d>
 800408a:	2301      	movs	r3, #1
 800408c:	4606      	mov	r6, r0
 800408e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8004092:	3d01      	subs	r5, #1
 8004094:	930e      	str	r3, [sp, #56]	; 0x38
 8004096:	e76a      	b.n	8003f6e <_dtoa_r+0x116>
 8004098:	2301      	movs	r3, #1
 800409a:	e7b2      	b.n	8004002 <_dtoa_r+0x1aa>
 800409c:	900b      	str	r0, [sp, #44]	; 0x2c
 800409e:	e7b1      	b.n	8004004 <_dtoa_r+0x1ac>
 80040a0:	9b04      	ldr	r3, [sp, #16]
 80040a2:	9a00      	ldr	r2, [sp, #0]
 80040a4:	1a9b      	subs	r3, r3, r2
 80040a6:	9304      	str	r3, [sp, #16]
 80040a8:	4253      	negs	r3, r2
 80040aa:	9307      	str	r3, [sp, #28]
 80040ac:	2300      	movs	r3, #0
 80040ae:	930a      	str	r3, [sp, #40]	; 0x28
 80040b0:	e7bf      	b.n	8004032 <_dtoa_r+0x1da>
 80040b2:	2300      	movs	r3, #0
 80040b4:	9308      	str	r3, [sp, #32]
 80040b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	dc55      	bgt.n	8004168 <_dtoa_r+0x310>
 80040bc:	2301      	movs	r3, #1
 80040be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80040c2:	461a      	mov	r2, r3
 80040c4:	9209      	str	r2, [sp, #36]	; 0x24
 80040c6:	e00c      	b.n	80040e2 <_dtoa_r+0x28a>
 80040c8:	2301      	movs	r3, #1
 80040ca:	e7f3      	b.n	80040b4 <_dtoa_r+0x25c>
 80040cc:	2300      	movs	r3, #0
 80040ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d0:	9308      	str	r3, [sp, #32]
 80040d2:	9b00      	ldr	r3, [sp, #0]
 80040d4:	4413      	add	r3, r2
 80040d6:	9302      	str	r3, [sp, #8]
 80040d8:	3301      	adds	r3, #1
 80040da:	2b01      	cmp	r3, #1
 80040dc:	9303      	str	r3, [sp, #12]
 80040de:	bfb8      	it	lt
 80040e0:	2301      	movlt	r3, #1
 80040e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80040e4:	2200      	movs	r2, #0
 80040e6:	6042      	str	r2, [r0, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	f102 0614 	add.w	r6, r2, #20
 80040ee:	429e      	cmp	r6, r3
 80040f0:	6841      	ldr	r1, [r0, #4]
 80040f2:	d93d      	bls.n	8004170 <_dtoa_r+0x318>
 80040f4:	4620      	mov	r0, r4
 80040f6:	f000 fcb7 	bl	8004a68 <_Balloc>
 80040fa:	9001      	str	r0, [sp, #4]
 80040fc:	2800      	cmp	r0, #0
 80040fe:	d13b      	bne.n	8004178 <_dtoa_r+0x320>
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <_dtoa_r+0x2f0>)
 8004102:	4602      	mov	r2, r0
 8004104:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004108:	e6c0      	b.n	8003e8c <_dtoa_r+0x34>
 800410a:	2301      	movs	r3, #1
 800410c:	e7df      	b.n	80040ce <_dtoa_r+0x276>
 800410e:	bf00      	nop
 8004110:	636f4361 	.word	0x636f4361
 8004114:	3fd287a7 	.word	0x3fd287a7
 8004118:	8b60c8b3 	.word	0x8b60c8b3
 800411c:	3fc68a28 	.word	0x3fc68a28
 8004120:	509f79fb 	.word	0x509f79fb
 8004124:	3fd34413 	.word	0x3fd34413
 8004128:	080064f9 	.word	0x080064f9
 800412c:	08006510 	.word	0x08006510
 8004130:	7ff00000 	.word	0x7ff00000
 8004134:	080064f5 	.word	0x080064f5
 8004138:	080064ec 	.word	0x080064ec
 800413c:	080064c9 	.word	0x080064c9
 8004140:	3ff80000 	.word	0x3ff80000
 8004144:	08006600 	.word	0x08006600
 8004148:	0800656b 	.word	0x0800656b
 800414c:	2501      	movs	r5, #1
 800414e:	2300      	movs	r3, #0
 8004150:	9306      	str	r3, [sp, #24]
 8004152:	9508      	str	r5, [sp, #32]
 8004154:	f04f 33ff 	mov.w	r3, #4294967295
 8004158:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800415c:	2200      	movs	r2, #0
 800415e:	2312      	movs	r3, #18
 8004160:	e7b0      	b.n	80040c4 <_dtoa_r+0x26c>
 8004162:	2301      	movs	r3, #1
 8004164:	9308      	str	r3, [sp, #32]
 8004166:	e7f5      	b.n	8004154 <_dtoa_r+0x2fc>
 8004168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800416a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800416e:	e7b8      	b.n	80040e2 <_dtoa_r+0x28a>
 8004170:	3101      	adds	r1, #1
 8004172:	6041      	str	r1, [r0, #4]
 8004174:	0052      	lsls	r2, r2, #1
 8004176:	e7b8      	b.n	80040ea <_dtoa_r+0x292>
 8004178:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800417a:	9a01      	ldr	r2, [sp, #4]
 800417c:	601a      	str	r2, [r3, #0]
 800417e:	9b03      	ldr	r3, [sp, #12]
 8004180:	2b0e      	cmp	r3, #14
 8004182:	f200 809d 	bhi.w	80042c0 <_dtoa_r+0x468>
 8004186:	2d00      	cmp	r5, #0
 8004188:	f000 809a 	beq.w	80042c0 <_dtoa_r+0x468>
 800418c:	9b00      	ldr	r3, [sp, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	dd32      	ble.n	80041f8 <_dtoa_r+0x3a0>
 8004192:	4ab7      	ldr	r2, [pc, #732]	; (8004470 <_dtoa_r+0x618>)
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800419c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80041a0:	9b00      	ldr	r3, [sp, #0]
 80041a2:	05d8      	lsls	r0, r3, #23
 80041a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 80041a8:	d516      	bpl.n	80041d8 <_dtoa_r+0x380>
 80041aa:	4bb2      	ldr	r3, [pc, #712]	; (8004474 <_dtoa_r+0x61c>)
 80041ac:	ec51 0b19 	vmov	r0, r1, d9
 80041b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80041b4:	f7fc fb4a 	bl	800084c <__aeabi_ddiv>
 80041b8:	f007 070f 	and.w	r7, r7, #15
 80041bc:	4682      	mov	sl, r0
 80041be:	468b      	mov	fp, r1
 80041c0:	2503      	movs	r5, #3
 80041c2:	4eac      	ldr	r6, [pc, #688]	; (8004474 <_dtoa_r+0x61c>)
 80041c4:	b957      	cbnz	r7, 80041dc <_dtoa_r+0x384>
 80041c6:	4642      	mov	r2, r8
 80041c8:	464b      	mov	r3, r9
 80041ca:	4650      	mov	r0, sl
 80041cc:	4659      	mov	r1, fp
 80041ce:	f7fc fb3d 	bl	800084c <__aeabi_ddiv>
 80041d2:	4682      	mov	sl, r0
 80041d4:	468b      	mov	fp, r1
 80041d6:	e028      	b.n	800422a <_dtoa_r+0x3d2>
 80041d8:	2502      	movs	r5, #2
 80041da:	e7f2      	b.n	80041c2 <_dtoa_r+0x36a>
 80041dc:	07f9      	lsls	r1, r7, #31
 80041de:	d508      	bpl.n	80041f2 <_dtoa_r+0x39a>
 80041e0:	4640      	mov	r0, r8
 80041e2:	4649      	mov	r1, r9
 80041e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80041e8:	f7fc fa06 	bl	80005f8 <__aeabi_dmul>
 80041ec:	3501      	adds	r5, #1
 80041ee:	4680      	mov	r8, r0
 80041f0:	4689      	mov	r9, r1
 80041f2:	107f      	asrs	r7, r7, #1
 80041f4:	3608      	adds	r6, #8
 80041f6:	e7e5      	b.n	80041c4 <_dtoa_r+0x36c>
 80041f8:	f000 809b 	beq.w	8004332 <_dtoa_r+0x4da>
 80041fc:	9b00      	ldr	r3, [sp, #0]
 80041fe:	4f9d      	ldr	r7, [pc, #628]	; (8004474 <_dtoa_r+0x61c>)
 8004200:	425e      	negs	r6, r3
 8004202:	4b9b      	ldr	r3, [pc, #620]	; (8004470 <_dtoa_r+0x618>)
 8004204:	f006 020f 	and.w	r2, r6, #15
 8004208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800420c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004210:	ec51 0b19 	vmov	r0, r1, d9
 8004214:	f7fc f9f0 	bl	80005f8 <__aeabi_dmul>
 8004218:	1136      	asrs	r6, r6, #4
 800421a:	4682      	mov	sl, r0
 800421c:	468b      	mov	fp, r1
 800421e:	2300      	movs	r3, #0
 8004220:	2502      	movs	r5, #2
 8004222:	2e00      	cmp	r6, #0
 8004224:	d17a      	bne.n	800431c <_dtoa_r+0x4c4>
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1d3      	bne.n	80041d2 <_dtoa_r+0x37a>
 800422a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8082 	beq.w	8004336 <_dtoa_r+0x4de>
 8004232:	4b91      	ldr	r3, [pc, #580]	; (8004478 <_dtoa_r+0x620>)
 8004234:	2200      	movs	r2, #0
 8004236:	4650      	mov	r0, sl
 8004238:	4659      	mov	r1, fp
 800423a:	f7fc fc4f 	bl	8000adc <__aeabi_dcmplt>
 800423e:	2800      	cmp	r0, #0
 8004240:	d079      	beq.n	8004336 <_dtoa_r+0x4de>
 8004242:	9b03      	ldr	r3, [sp, #12]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d076      	beq.n	8004336 <_dtoa_r+0x4de>
 8004248:	9b02      	ldr	r3, [sp, #8]
 800424a:	2b00      	cmp	r3, #0
 800424c:	dd36      	ble.n	80042bc <_dtoa_r+0x464>
 800424e:	9b00      	ldr	r3, [sp, #0]
 8004250:	4650      	mov	r0, sl
 8004252:	4659      	mov	r1, fp
 8004254:	1e5f      	subs	r7, r3, #1
 8004256:	2200      	movs	r2, #0
 8004258:	4b88      	ldr	r3, [pc, #544]	; (800447c <_dtoa_r+0x624>)
 800425a:	f7fc f9cd 	bl	80005f8 <__aeabi_dmul>
 800425e:	9e02      	ldr	r6, [sp, #8]
 8004260:	4682      	mov	sl, r0
 8004262:	468b      	mov	fp, r1
 8004264:	3501      	adds	r5, #1
 8004266:	4628      	mov	r0, r5
 8004268:	f7fc f95c 	bl	8000524 <__aeabi_i2d>
 800426c:	4652      	mov	r2, sl
 800426e:	465b      	mov	r3, fp
 8004270:	f7fc f9c2 	bl	80005f8 <__aeabi_dmul>
 8004274:	4b82      	ldr	r3, [pc, #520]	; (8004480 <_dtoa_r+0x628>)
 8004276:	2200      	movs	r2, #0
 8004278:	f7fc f808 	bl	800028c <__adddf3>
 800427c:	46d0      	mov	r8, sl
 800427e:	46d9      	mov	r9, fp
 8004280:	4682      	mov	sl, r0
 8004282:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8004286:	2e00      	cmp	r6, #0
 8004288:	d158      	bne.n	800433c <_dtoa_r+0x4e4>
 800428a:	4b7e      	ldr	r3, [pc, #504]	; (8004484 <_dtoa_r+0x62c>)
 800428c:	2200      	movs	r2, #0
 800428e:	4640      	mov	r0, r8
 8004290:	4649      	mov	r1, r9
 8004292:	f7fb fff9 	bl	8000288 <__aeabi_dsub>
 8004296:	4652      	mov	r2, sl
 8004298:	465b      	mov	r3, fp
 800429a:	4680      	mov	r8, r0
 800429c:	4689      	mov	r9, r1
 800429e:	f7fc fc3b 	bl	8000b18 <__aeabi_dcmpgt>
 80042a2:	2800      	cmp	r0, #0
 80042a4:	f040 8295 	bne.w	80047d2 <_dtoa_r+0x97a>
 80042a8:	4652      	mov	r2, sl
 80042aa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80042ae:	4640      	mov	r0, r8
 80042b0:	4649      	mov	r1, r9
 80042b2:	f7fc fc13 	bl	8000adc <__aeabi_dcmplt>
 80042b6:	2800      	cmp	r0, #0
 80042b8:	f040 8289 	bne.w	80047ce <_dtoa_r+0x976>
 80042bc:	ec5b ab19 	vmov	sl, fp, d9
 80042c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	f2c0 8148 	blt.w	8004558 <_dtoa_r+0x700>
 80042c8:	9a00      	ldr	r2, [sp, #0]
 80042ca:	2a0e      	cmp	r2, #14
 80042cc:	f300 8144 	bgt.w	8004558 <_dtoa_r+0x700>
 80042d0:	4b67      	ldr	r3, [pc, #412]	; (8004470 <_dtoa_r+0x618>)
 80042d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80042d6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80042da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042dc:	2b00      	cmp	r3, #0
 80042de:	f280 80d5 	bge.w	800448c <_dtoa_r+0x634>
 80042e2:	9b03      	ldr	r3, [sp, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	f300 80d1 	bgt.w	800448c <_dtoa_r+0x634>
 80042ea:	f040 826f 	bne.w	80047cc <_dtoa_r+0x974>
 80042ee:	4b65      	ldr	r3, [pc, #404]	; (8004484 <_dtoa_r+0x62c>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	4640      	mov	r0, r8
 80042f4:	4649      	mov	r1, r9
 80042f6:	f7fc f97f 	bl	80005f8 <__aeabi_dmul>
 80042fa:	4652      	mov	r2, sl
 80042fc:	465b      	mov	r3, fp
 80042fe:	f7fc fc01 	bl	8000b04 <__aeabi_dcmpge>
 8004302:	9e03      	ldr	r6, [sp, #12]
 8004304:	4637      	mov	r7, r6
 8004306:	2800      	cmp	r0, #0
 8004308:	f040 8245 	bne.w	8004796 <_dtoa_r+0x93e>
 800430c:	9d01      	ldr	r5, [sp, #4]
 800430e:	2331      	movs	r3, #49	; 0x31
 8004310:	f805 3b01 	strb.w	r3, [r5], #1
 8004314:	9b00      	ldr	r3, [sp, #0]
 8004316:	3301      	adds	r3, #1
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	e240      	b.n	800479e <_dtoa_r+0x946>
 800431c:	07f2      	lsls	r2, r6, #31
 800431e:	d505      	bpl.n	800432c <_dtoa_r+0x4d4>
 8004320:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004324:	f7fc f968 	bl	80005f8 <__aeabi_dmul>
 8004328:	3501      	adds	r5, #1
 800432a:	2301      	movs	r3, #1
 800432c:	1076      	asrs	r6, r6, #1
 800432e:	3708      	adds	r7, #8
 8004330:	e777      	b.n	8004222 <_dtoa_r+0x3ca>
 8004332:	2502      	movs	r5, #2
 8004334:	e779      	b.n	800422a <_dtoa_r+0x3d2>
 8004336:	9f00      	ldr	r7, [sp, #0]
 8004338:	9e03      	ldr	r6, [sp, #12]
 800433a:	e794      	b.n	8004266 <_dtoa_r+0x40e>
 800433c:	9901      	ldr	r1, [sp, #4]
 800433e:	4b4c      	ldr	r3, [pc, #304]	; (8004470 <_dtoa_r+0x618>)
 8004340:	4431      	add	r1, r6
 8004342:	910d      	str	r1, [sp, #52]	; 0x34
 8004344:	9908      	ldr	r1, [sp, #32]
 8004346:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800434a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800434e:	2900      	cmp	r1, #0
 8004350:	d043      	beq.n	80043da <_dtoa_r+0x582>
 8004352:	494d      	ldr	r1, [pc, #308]	; (8004488 <_dtoa_r+0x630>)
 8004354:	2000      	movs	r0, #0
 8004356:	f7fc fa79 	bl	800084c <__aeabi_ddiv>
 800435a:	4652      	mov	r2, sl
 800435c:	465b      	mov	r3, fp
 800435e:	f7fb ff93 	bl	8000288 <__aeabi_dsub>
 8004362:	9d01      	ldr	r5, [sp, #4]
 8004364:	4682      	mov	sl, r0
 8004366:	468b      	mov	fp, r1
 8004368:	4649      	mov	r1, r9
 800436a:	4640      	mov	r0, r8
 800436c:	f7fc fbf4 	bl	8000b58 <__aeabi_d2iz>
 8004370:	4606      	mov	r6, r0
 8004372:	f7fc f8d7 	bl	8000524 <__aeabi_i2d>
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4640      	mov	r0, r8
 800437c:	4649      	mov	r1, r9
 800437e:	f7fb ff83 	bl	8000288 <__aeabi_dsub>
 8004382:	3630      	adds	r6, #48	; 0x30
 8004384:	f805 6b01 	strb.w	r6, [r5], #1
 8004388:	4652      	mov	r2, sl
 800438a:	465b      	mov	r3, fp
 800438c:	4680      	mov	r8, r0
 800438e:	4689      	mov	r9, r1
 8004390:	f7fc fba4 	bl	8000adc <__aeabi_dcmplt>
 8004394:	2800      	cmp	r0, #0
 8004396:	d163      	bne.n	8004460 <_dtoa_r+0x608>
 8004398:	4642      	mov	r2, r8
 800439a:	464b      	mov	r3, r9
 800439c:	4936      	ldr	r1, [pc, #216]	; (8004478 <_dtoa_r+0x620>)
 800439e:	2000      	movs	r0, #0
 80043a0:	f7fb ff72 	bl	8000288 <__aeabi_dsub>
 80043a4:	4652      	mov	r2, sl
 80043a6:	465b      	mov	r3, fp
 80043a8:	f7fc fb98 	bl	8000adc <__aeabi_dcmplt>
 80043ac:	2800      	cmp	r0, #0
 80043ae:	f040 80b5 	bne.w	800451c <_dtoa_r+0x6c4>
 80043b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043b4:	429d      	cmp	r5, r3
 80043b6:	d081      	beq.n	80042bc <_dtoa_r+0x464>
 80043b8:	4b30      	ldr	r3, [pc, #192]	; (800447c <_dtoa_r+0x624>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	4650      	mov	r0, sl
 80043be:	4659      	mov	r1, fp
 80043c0:	f7fc f91a 	bl	80005f8 <__aeabi_dmul>
 80043c4:	4b2d      	ldr	r3, [pc, #180]	; (800447c <_dtoa_r+0x624>)
 80043c6:	4682      	mov	sl, r0
 80043c8:	468b      	mov	fp, r1
 80043ca:	4640      	mov	r0, r8
 80043cc:	4649      	mov	r1, r9
 80043ce:	2200      	movs	r2, #0
 80043d0:	f7fc f912 	bl	80005f8 <__aeabi_dmul>
 80043d4:	4680      	mov	r8, r0
 80043d6:	4689      	mov	r9, r1
 80043d8:	e7c6      	b.n	8004368 <_dtoa_r+0x510>
 80043da:	4650      	mov	r0, sl
 80043dc:	4659      	mov	r1, fp
 80043de:	f7fc f90b 	bl	80005f8 <__aeabi_dmul>
 80043e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80043e4:	9d01      	ldr	r5, [sp, #4]
 80043e6:	930f      	str	r3, [sp, #60]	; 0x3c
 80043e8:	4682      	mov	sl, r0
 80043ea:	468b      	mov	fp, r1
 80043ec:	4649      	mov	r1, r9
 80043ee:	4640      	mov	r0, r8
 80043f0:	f7fc fbb2 	bl	8000b58 <__aeabi_d2iz>
 80043f4:	4606      	mov	r6, r0
 80043f6:	f7fc f895 	bl	8000524 <__aeabi_i2d>
 80043fa:	3630      	adds	r6, #48	; 0x30
 80043fc:	4602      	mov	r2, r0
 80043fe:	460b      	mov	r3, r1
 8004400:	4640      	mov	r0, r8
 8004402:	4649      	mov	r1, r9
 8004404:	f7fb ff40 	bl	8000288 <__aeabi_dsub>
 8004408:	f805 6b01 	strb.w	r6, [r5], #1
 800440c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800440e:	429d      	cmp	r5, r3
 8004410:	4680      	mov	r8, r0
 8004412:	4689      	mov	r9, r1
 8004414:	f04f 0200 	mov.w	r2, #0
 8004418:	d124      	bne.n	8004464 <_dtoa_r+0x60c>
 800441a:	4b1b      	ldr	r3, [pc, #108]	; (8004488 <_dtoa_r+0x630>)
 800441c:	4650      	mov	r0, sl
 800441e:	4659      	mov	r1, fp
 8004420:	f7fb ff34 	bl	800028c <__adddf3>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fc fb74 	bl	8000b18 <__aeabi_dcmpgt>
 8004430:	2800      	cmp	r0, #0
 8004432:	d173      	bne.n	800451c <_dtoa_r+0x6c4>
 8004434:	4652      	mov	r2, sl
 8004436:	465b      	mov	r3, fp
 8004438:	4913      	ldr	r1, [pc, #76]	; (8004488 <_dtoa_r+0x630>)
 800443a:	2000      	movs	r0, #0
 800443c:	f7fb ff24 	bl	8000288 <__aeabi_dsub>
 8004440:	4602      	mov	r2, r0
 8004442:	460b      	mov	r3, r1
 8004444:	4640      	mov	r0, r8
 8004446:	4649      	mov	r1, r9
 8004448:	f7fc fb48 	bl	8000adc <__aeabi_dcmplt>
 800444c:	2800      	cmp	r0, #0
 800444e:	f43f af35 	beq.w	80042bc <_dtoa_r+0x464>
 8004452:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8004454:	1e6b      	subs	r3, r5, #1
 8004456:	930f      	str	r3, [sp, #60]	; 0x3c
 8004458:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800445c:	2b30      	cmp	r3, #48	; 0x30
 800445e:	d0f8      	beq.n	8004452 <_dtoa_r+0x5fa>
 8004460:	9700      	str	r7, [sp, #0]
 8004462:	e049      	b.n	80044f8 <_dtoa_r+0x6a0>
 8004464:	4b05      	ldr	r3, [pc, #20]	; (800447c <_dtoa_r+0x624>)
 8004466:	f7fc f8c7 	bl	80005f8 <__aeabi_dmul>
 800446a:	4680      	mov	r8, r0
 800446c:	4689      	mov	r9, r1
 800446e:	e7bd      	b.n	80043ec <_dtoa_r+0x594>
 8004470:	08006600 	.word	0x08006600
 8004474:	080065d8 	.word	0x080065d8
 8004478:	3ff00000 	.word	0x3ff00000
 800447c:	40240000 	.word	0x40240000
 8004480:	401c0000 	.word	0x401c0000
 8004484:	40140000 	.word	0x40140000
 8004488:	3fe00000 	.word	0x3fe00000
 800448c:	9d01      	ldr	r5, [sp, #4]
 800448e:	4656      	mov	r6, sl
 8004490:	465f      	mov	r7, fp
 8004492:	4642      	mov	r2, r8
 8004494:	464b      	mov	r3, r9
 8004496:	4630      	mov	r0, r6
 8004498:	4639      	mov	r1, r7
 800449a:	f7fc f9d7 	bl	800084c <__aeabi_ddiv>
 800449e:	f7fc fb5b 	bl	8000b58 <__aeabi_d2iz>
 80044a2:	4682      	mov	sl, r0
 80044a4:	f7fc f83e 	bl	8000524 <__aeabi_i2d>
 80044a8:	4642      	mov	r2, r8
 80044aa:	464b      	mov	r3, r9
 80044ac:	f7fc f8a4 	bl	80005f8 <__aeabi_dmul>
 80044b0:	4602      	mov	r2, r0
 80044b2:	460b      	mov	r3, r1
 80044b4:	4630      	mov	r0, r6
 80044b6:	4639      	mov	r1, r7
 80044b8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80044bc:	f7fb fee4 	bl	8000288 <__aeabi_dsub>
 80044c0:	f805 6b01 	strb.w	r6, [r5], #1
 80044c4:	9e01      	ldr	r6, [sp, #4]
 80044c6:	9f03      	ldr	r7, [sp, #12]
 80044c8:	1bae      	subs	r6, r5, r6
 80044ca:	42b7      	cmp	r7, r6
 80044cc:	4602      	mov	r2, r0
 80044ce:	460b      	mov	r3, r1
 80044d0:	d135      	bne.n	800453e <_dtoa_r+0x6e6>
 80044d2:	f7fb fedb 	bl	800028c <__adddf3>
 80044d6:	4642      	mov	r2, r8
 80044d8:	464b      	mov	r3, r9
 80044da:	4606      	mov	r6, r0
 80044dc:	460f      	mov	r7, r1
 80044de:	f7fc fb1b 	bl	8000b18 <__aeabi_dcmpgt>
 80044e2:	b9d0      	cbnz	r0, 800451a <_dtoa_r+0x6c2>
 80044e4:	4642      	mov	r2, r8
 80044e6:	464b      	mov	r3, r9
 80044e8:	4630      	mov	r0, r6
 80044ea:	4639      	mov	r1, r7
 80044ec:	f7fc faec 	bl	8000ac8 <__aeabi_dcmpeq>
 80044f0:	b110      	cbz	r0, 80044f8 <_dtoa_r+0x6a0>
 80044f2:	f01a 0f01 	tst.w	sl, #1
 80044f6:	d110      	bne.n	800451a <_dtoa_r+0x6c2>
 80044f8:	4620      	mov	r0, r4
 80044fa:	ee18 1a10 	vmov	r1, s16
 80044fe:	f000 faf3 	bl	8004ae8 <_Bfree>
 8004502:	2300      	movs	r3, #0
 8004504:	9800      	ldr	r0, [sp, #0]
 8004506:	702b      	strb	r3, [r5, #0]
 8004508:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800450a:	3001      	adds	r0, #1
 800450c:	6018      	str	r0, [r3, #0]
 800450e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004510:	2b00      	cmp	r3, #0
 8004512:	f43f acf1 	beq.w	8003ef8 <_dtoa_r+0xa0>
 8004516:	601d      	str	r5, [r3, #0]
 8004518:	e4ee      	b.n	8003ef8 <_dtoa_r+0xa0>
 800451a:	9f00      	ldr	r7, [sp, #0]
 800451c:	462b      	mov	r3, r5
 800451e:	461d      	mov	r5, r3
 8004520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004524:	2a39      	cmp	r2, #57	; 0x39
 8004526:	d106      	bne.n	8004536 <_dtoa_r+0x6de>
 8004528:	9a01      	ldr	r2, [sp, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d1f7      	bne.n	800451e <_dtoa_r+0x6c6>
 800452e:	9901      	ldr	r1, [sp, #4]
 8004530:	2230      	movs	r2, #48	; 0x30
 8004532:	3701      	adds	r7, #1
 8004534:	700a      	strb	r2, [r1, #0]
 8004536:	781a      	ldrb	r2, [r3, #0]
 8004538:	3201      	adds	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]
 800453c:	e790      	b.n	8004460 <_dtoa_r+0x608>
 800453e:	4ba6      	ldr	r3, [pc, #664]	; (80047d8 <_dtoa_r+0x980>)
 8004540:	2200      	movs	r2, #0
 8004542:	f7fc f859 	bl	80005f8 <__aeabi_dmul>
 8004546:	2200      	movs	r2, #0
 8004548:	2300      	movs	r3, #0
 800454a:	4606      	mov	r6, r0
 800454c:	460f      	mov	r7, r1
 800454e:	f7fc fabb 	bl	8000ac8 <__aeabi_dcmpeq>
 8004552:	2800      	cmp	r0, #0
 8004554:	d09d      	beq.n	8004492 <_dtoa_r+0x63a>
 8004556:	e7cf      	b.n	80044f8 <_dtoa_r+0x6a0>
 8004558:	9a08      	ldr	r2, [sp, #32]
 800455a:	2a00      	cmp	r2, #0
 800455c:	f000 80d7 	beq.w	800470e <_dtoa_r+0x8b6>
 8004560:	9a06      	ldr	r2, [sp, #24]
 8004562:	2a01      	cmp	r2, #1
 8004564:	f300 80ba 	bgt.w	80046dc <_dtoa_r+0x884>
 8004568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800456a:	2a00      	cmp	r2, #0
 800456c:	f000 80b2 	beq.w	80046d4 <_dtoa_r+0x87c>
 8004570:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8004574:	9e07      	ldr	r6, [sp, #28]
 8004576:	9d04      	ldr	r5, [sp, #16]
 8004578:	9a04      	ldr	r2, [sp, #16]
 800457a:	441a      	add	r2, r3
 800457c:	9204      	str	r2, [sp, #16]
 800457e:	9a05      	ldr	r2, [sp, #20]
 8004580:	2101      	movs	r1, #1
 8004582:	441a      	add	r2, r3
 8004584:	4620      	mov	r0, r4
 8004586:	9205      	str	r2, [sp, #20]
 8004588:	f000 fb66 	bl	8004c58 <__i2b>
 800458c:	4607      	mov	r7, r0
 800458e:	2d00      	cmp	r5, #0
 8004590:	dd0c      	ble.n	80045ac <_dtoa_r+0x754>
 8004592:	9b05      	ldr	r3, [sp, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	dd09      	ble.n	80045ac <_dtoa_r+0x754>
 8004598:	42ab      	cmp	r3, r5
 800459a:	9a04      	ldr	r2, [sp, #16]
 800459c:	bfa8      	it	ge
 800459e:	462b      	movge	r3, r5
 80045a0:	1ad2      	subs	r2, r2, r3
 80045a2:	9204      	str	r2, [sp, #16]
 80045a4:	9a05      	ldr	r2, [sp, #20]
 80045a6:	1aed      	subs	r5, r5, r3
 80045a8:	1ad3      	subs	r3, r2, r3
 80045aa:	9305      	str	r3, [sp, #20]
 80045ac:	9b07      	ldr	r3, [sp, #28]
 80045ae:	b31b      	cbz	r3, 80045f8 <_dtoa_r+0x7a0>
 80045b0:	9b08      	ldr	r3, [sp, #32]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	f000 80af 	beq.w	8004716 <_dtoa_r+0x8be>
 80045b8:	2e00      	cmp	r6, #0
 80045ba:	dd13      	ble.n	80045e4 <_dtoa_r+0x78c>
 80045bc:	4639      	mov	r1, r7
 80045be:	4632      	mov	r2, r6
 80045c0:	4620      	mov	r0, r4
 80045c2:	f000 fc09 	bl	8004dd8 <__pow5mult>
 80045c6:	ee18 2a10 	vmov	r2, s16
 80045ca:	4601      	mov	r1, r0
 80045cc:	4607      	mov	r7, r0
 80045ce:	4620      	mov	r0, r4
 80045d0:	f000 fb58 	bl	8004c84 <__multiply>
 80045d4:	ee18 1a10 	vmov	r1, s16
 80045d8:	4680      	mov	r8, r0
 80045da:	4620      	mov	r0, r4
 80045dc:	f000 fa84 	bl	8004ae8 <_Bfree>
 80045e0:	ee08 8a10 	vmov	s16, r8
 80045e4:	9b07      	ldr	r3, [sp, #28]
 80045e6:	1b9a      	subs	r2, r3, r6
 80045e8:	d006      	beq.n	80045f8 <_dtoa_r+0x7a0>
 80045ea:	ee18 1a10 	vmov	r1, s16
 80045ee:	4620      	mov	r0, r4
 80045f0:	f000 fbf2 	bl	8004dd8 <__pow5mult>
 80045f4:	ee08 0a10 	vmov	s16, r0
 80045f8:	2101      	movs	r1, #1
 80045fa:	4620      	mov	r0, r4
 80045fc:	f000 fb2c 	bl	8004c58 <__i2b>
 8004600:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004602:	2b00      	cmp	r3, #0
 8004604:	4606      	mov	r6, r0
 8004606:	f340 8088 	ble.w	800471a <_dtoa_r+0x8c2>
 800460a:	461a      	mov	r2, r3
 800460c:	4601      	mov	r1, r0
 800460e:	4620      	mov	r0, r4
 8004610:	f000 fbe2 	bl	8004dd8 <__pow5mult>
 8004614:	9b06      	ldr	r3, [sp, #24]
 8004616:	2b01      	cmp	r3, #1
 8004618:	4606      	mov	r6, r0
 800461a:	f340 8081 	ble.w	8004720 <_dtoa_r+0x8c8>
 800461e:	f04f 0800 	mov.w	r8, #0
 8004622:	6933      	ldr	r3, [r6, #16]
 8004624:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8004628:	6918      	ldr	r0, [r3, #16]
 800462a:	f000 fac5 	bl	8004bb8 <__hi0bits>
 800462e:	f1c0 0020 	rsb	r0, r0, #32
 8004632:	9b05      	ldr	r3, [sp, #20]
 8004634:	4418      	add	r0, r3
 8004636:	f010 001f 	ands.w	r0, r0, #31
 800463a:	f000 8092 	beq.w	8004762 <_dtoa_r+0x90a>
 800463e:	f1c0 0320 	rsb	r3, r0, #32
 8004642:	2b04      	cmp	r3, #4
 8004644:	f340 808a 	ble.w	800475c <_dtoa_r+0x904>
 8004648:	f1c0 001c 	rsb	r0, r0, #28
 800464c:	9b04      	ldr	r3, [sp, #16]
 800464e:	4403      	add	r3, r0
 8004650:	9304      	str	r3, [sp, #16]
 8004652:	9b05      	ldr	r3, [sp, #20]
 8004654:	4403      	add	r3, r0
 8004656:	4405      	add	r5, r0
 8004658:	9305      	str	r3, [sp, #20]
 800465a:	9b04      	ldr	r3, [sp, #16]
 800465c:	2b00      	cmp	r3, #0
 800465e:	dd07      	ble.n	8004670 <_dtoa_r+0x818>
 8004660:	ee18 1a10 	vmov	r1, s16
 8004664:	461a      	mov	r2, r3
 8004666:	4620      	mov	r0, r4
 8004668:	f000 fc10 	bl	8004e8c <__lshift>
 800466c:	ee08 0a10 	vmov	s16, r0
 8004670:	9b05      	ldr	r3, [sp, #20]
 8004672:	2b00      	cmp	r3, #0
 8004674:	dd05      	ble.n	8004682 <_dtoa_r+0x82a>
 8004676:	4631      	mov	r1, r6
 8004678:	461a      	mov	r2, r3
 800467a:	4620      	mov	r0, r4
 800467c:	f000 fc06 	bl	8004e8c <__lshift>
 8004680:	4606      	mov	r6, r0
 8004682:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004684:	2b00      	cmp	r3, #0
 8004686:	d06e      	beq.n	8004766 <_dtoa_r+0x90e>
 8004688:	ee18 0a10 	vmov	r0, s16
 800468c:	4631      	mov	r1, r6
 800468e:	f000 fc6d 	bl	8004f6c <__mcmp>
 8004692:	2800      	cmp	r0, #0
 8004694:	da67      	bge.n	8004766 <_dtoa_r+0x90e>
 8004696:	9b00      	ldr	r3, [sp, #0]
 8004698:	3b01      	subs	r3, #1
 800469a:	ee18 1a10 	vmov	r1, s16
 800469e:	9300      	str	r3, [sp, #0]
 80046a0:	220a      	movs	r2, #10
 80046a2:	2300      	movs	r3, #0
 80046a4:	4620      	mov	r0, r4
 80046a6:	f000 fa41 	bl	8004b2c <__multadd>
 80046aa:	9b08      	ldr	r3, [sp, #32]
 80046ac:	ee08 0a10 	vmov	s16, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	f000 81b1 	beq.w	8004a18 <_dtoa_r+0xbc0>
 80046b6:	2300      	movs	r3, #0
 80046b8:	4639      	mov	r1, r7
 80046ba:	220a      	movs	r2, #10
 80046bc:	4620      	mov	r0, r4
 80046be:	f000 fa35 	bl	8004b2c <__multadd>
 80046c2:	9b02      	ldr	r3, [sp, #8]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	4607      	mov	r7, r0
 80046c8:	f300 808e 	bgt.w	80047e8 <_dtoa_r+0x990>
 80046cc:	9b06      	ldr	r3, [sp, #24]
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	dc51      	bgt.n	8004776 <_dtoa_r+0x91e>
 80046d2:	e089      	b.n	80047e8 <_dtoa_r+0x990>
 80046d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046d6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80046da:	e74b      	b.n	8004574 <_dtoa_r+0x71c>
 80046dc:	9b03      	ldr	r3, [sp, #12]
 80046de:	1e5e      	subs	r6, r3, #1
 80046e0:	9b07      	ldr	r3, [sp, #28]
 80046e2:	42b3      	cmp	r3, r6
 80046e4:	bfbf      	itttt	lt
 80046e6:	9b07      	ldrlt	r3, [sp, #28]
 80046e8:	9607      	strlt	r6, [sp, #28]
 80046ea:	1af2      	sublt	r2, r6, r3
 80046ec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80046ee:	bfb6      	itet	lt
 80046f0:	189b      	addlt	r3, r3, r2
 80046f2:	1b9e      	subge	r6, r3, r6
 80046f4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80046f6:	9b03      	ldr	r3, [sp, #12]
 80046f8:	bfb8      	it	lt
 80046fa:	2600      	movlt	r6, #0
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	bfb7      	itett	lt
 8004700:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8004704:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8004708:	1a9d      	sublt	r5, r3, r2
 800470a:	2300      	movlt	r3, #0
 800470c:	e734      	b.n	8004578 <_dtoa_r+0x720>
 800470e:	9e07      	ldr	r6, [sp, #28]
 8004710:	9d04      	ldr	r5, [sp, #16]
 8004712:	9f08      	ldr	r7, [sp, #32]
 8004714:	e73b      	b.n	800458e <_dtoa_r+0x736>
 8004716:	9a07      	ldr	r2, [sp, #28]
 8004718:	e767      	b.n	80045ea <_dtoa_r+0x792>
 800471a:	9b06      	ldr	r3, [sp, #24]
 800471c:	2b01      	cmp	r3, #1
 800471e:	dc18      	bgt.n	8004752 <_dtoa_r+0x8fa>
 8004720:	f1ba 0f00 	cmp.w	sl, #0
 8004724:	d115      	bne.n	8004752 <_dtoa_r+0x8fa>
 8004726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800472a:	b993      	cbnz	r3, 8004752 <_dtoa_r+0x8fa>
 800472c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004730:	0d1b      	lsrs	r3, r3, #20
 8004732:	051b      	lsls	r3, r3, #20
 8004734:	b183      	cbz	r3, 8004758 <_dtoa_r+0x900>
 8004736:	9b04      	ldr	r3, [sp, #16]
 8004738:	3301      	adds	r3, #1
 800473a:	9304      	str	r3, [sp, #16]
 800473c:	9b05      	ldr	r3, [sp, #20]
 800473e:	3301      	adds	r3, #1
 8004740:	9305      	str	r3, [sp, #20]
 8004742:	f04f 0801 	mov.w	r8, #1
 8004746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004748:	2b00      	cmp	r3, #0
 800474a:	f47f af6a 	bne.w	8004622 <_dtoa_r+0x7ca>
 800474e:	2001      	movs	r0, #1
 8004750:	e76f      	b.n	8004632 <_dtoa_r+0x7da>
 8004752:	f04f 0800 	mov.w	r8, #0
 8004756:	e7f6      	b.n	8004746 <_dtoa_r+0x8ee>
 8004758:	4698      	mov	r8, r3
 800475a:	e7f4      	b.n	8004746 <_dtoa_r+0x8ee>
 800475c:	f43f af7d 	beq.w	800465a <_dtoa_r+0x802>
 8004760:	4618      	mov	r0, r3
 8004762:	301c      	adds	r0, #28
 8004764:	e772      	b.n	800464c <_dtoa_r+0x7f4>
 8004766:	9b03      	ldr	r3, [sp, #12]
 8004768:	2b00      	cmp	r3, #0
 800476a:	dc37      	bgt.n	80047dc <_dtoa_r+0x984>
 800476c:	9b06      	ldr	r3, [sp, #24]
 800476e:	2b02      	cmp	r3, #2
 8004770:	dd34      	ble.n	80047dc <_dtoa_r+0x984>
 8004772:	9b03      	ldr	r3, [sp, #12]
 8004774:	9302      	str	r3, [sp, #8]
 8004776:	9b02      	ldr	r3, [sp, #8]
 8004778:	b96b      	cbnz	r3, 8004796 <_dtoa_r+0x93e>
 800477a:	4631      	mov	r1, r6
 800477c:	2205      	movs	r2, #5
 800477e:	4620      	mov	r0, r4
 8004780:	f000 f9d4 	bl	8004b2c <__multadd>
 8004784:	4601      	mov	r1, r0
 8004786:	4606      	mov	r6, r0
 8004788:	ee18 0a10 	vmov	r0, s16
 800478c:	f000 fbee 	bl	8004f6c <__mcmp>
 8004790:	2800      	cmp	r0, #0
 8004792:	f73f adbb 	bgt.w	800430c <_dtoa_r+0x4b4>
 8004796:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004798:	9d01      	ldr	r5, [sp, #4]
 800479a:	43db      	mvns	r3, r3
 800479c:	9300      	str	r3, [sp, #0]
 800479e:	f04f 0800 	mov.w	r8, #0
 80047a2:	4631      	mov	r1, r6
 80047a4:	4620      	mov	r0, r4
 80047a6:	f000 f99f 	bl	8004ae8 <_Bfree>
 80047aa:	2f00      	cmp	r7, #0
 80047ac:	f43f aea4 	beq.w	80044f8 <_dtoa_r+0x6a0>
 80047b0:	f1b8 0f00 	cmp.w	r8, #0
 80047b4:	d005      	beq.n	80047c2 <_dtoa_r+0x96a>
 80047b6:	45b8      	cmp	r8, r7
 80047b8:	d003      	beq.n	80047c2 <_dtoa_r+0x96a>
 80047ba:	4641      	mov	r1, r8
 80047bc:	4620      	mov	r0, r4
 80047be:	f000 f993 	bl	8004ae8 <_Bfree>
 80047c2:	4639      	mov	r1, r7
 80047c4:	4620      	mov	r0, r4
 80047c6:	f000 f98f 	bl	8004ae8 <_Bfree>
 80047ca:	e695      	b.n	80044f8 <_dtoa_r+0x6a0>
 80047cc:	2600      	movs	r6, #0
 80047ce:	4637      	mov	r7, r6
 80047d0:	e7e1      	b.n	8004796 <_dtoa_r+0x93e>
 80047d2:	9700      	str	r7, [sp, #0]
 80047d4:	4637      	mov	r7, r6
 80047d6:	e599      	b.n	800430c <_dtoa_r+0x4b4>
 80047d8:	40240000 	.word	0x40240000
 80047dc:	9b08      	ldr	r3, [sp, #32]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	f000 80ca 	beq.w	8004978 <_dtoa_r+0xb20>
 80047e4:	9b03      	ldr	r3, [sp, #12]
 80047e6:	9302      	str	r3, [sp, #8]
 80047e8:	2d00      	cmp	r5, #0
 80047ea:	dd05      	ble.n	80047f8 <_dtoa_r+0x9a0>
 80047ec:	4639      	mov	r1, r7
 80047ee:	462a      	mov	r2, r5
 80047f0:	4620      	mov	r0, r4
 80047f2:	f000 fb4b 	bl	8004e8c <__lshift>
 80047f6:	4607      	mov	r7, r0
 80047f8:	f1b8 0f00 	cmp.w	r8, #0
 80047fc:	d05b      	beq.n	80048b6 <_dtoa_r+0xa5e>
 80047fe:	6879      	ldr	r1, [r7, #4]
 8004800:	4620      	mov	r0, r4
 8004802:	f000 f931 	bl	8004a68 <_Balloc>
 8004806:	4605      	mov	r5, r0
 8004808:	b928      	cbnz	r0, 8004816 <_dtoa_r+0x9be>
 800480a:	4b87      	ldr	r3, [pc, #540]	; (8004a28 <_dtoa_r+0xbd0>)
 800480c:	4602      	mov	r2, r0
 800480e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8004812:	f7ff bb3b 	b.w	8003e8c <_dtoa_r+0x34>
 8004816:	693a      	ldr	r2, [r7, #16]
 8004818:	3202      	adds	r2, #2
 800481a:	0092      	lsls	r2, r2, #2
 800481c:	f107 010c 	add.w	r1, r7, #12
 8004820:	300c      	adds	r0, #12
 8004822:	f000 f913 	bl	8004a4c <memcpy>
 8004826:	2201      	movs	r2, #1
 8004828:	4629      	mov	r1, r5
 800482a:	4620      	mov	r0, r4
 800482c:	f000 fb2e 	bl	8004e8c <__lshift>
 8004830:	9b01      	ldr	r3, [sp, #4]
 8004832:	f103 0901 	add.w	r9, r3, #1
 8004836:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800483a:	4413      	add	r3, r2
 800483c:	9305      	str	r3, [sp, #20]
 800483e:	f00a 0301 	and.w	r3, sl, #1
 8004842:	46b8      	mov	r8, r7
 8004844:	9304      	str	r3, [sp, #16]
 8004846:	4607      	mov	r7, r0
 8004848:	4631      	mov	r1, r6
 800484a:	ee18 0a10 	vmov	r0, s16
 800484e:	f7ff fa75 	bl	8003d3c <quorem>
 8004852:	4641      	mov	r1, r8
 8004854:	9002      	str	r0, [sp, #8]
 8004856:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800485a:	ee18 0a10 	vmov	r0, s16
 800485e:	f000 fb85 	bl	8004f6c <__mcmp>
 8004862:	463a      	mov	r2, r7
 8004864:	9003      	str	r0, [sp, #12]
 8004866:	4631      	mov	r1, r6
 8004868:	4620      	mov	r0, r4
 800486a:	f000 fb9b 	bl	8004fa4 <__mdiff>
 800486e:	68c2      	ldr	r2, [r0, #12]
 8004870:	f109 3bff 	add.w	fp, r9, #4294967295
 8004874:	4605      	mov	r5, r0
 8004876:	bb02      	cbnz	r2, 80048ba <_dtoa_r+0xa62>
 8004878:	4601      	mov	r1, r0
 800487a:	ee18 0a10 	vmov	r0, s16
 800487e:	f000 fb75 	bl	8004f6c <__mcmp>
 8004882:	4602      	mov	r2, r0
 8004884:	4629      	mov	r1, r5
 8004886:	4620      	mov	r0, r4
 8004888:	9207      	str	r2, [sp, #28]
 800488a:	f000 f92d 	bl	8004ae8 <_Bfree>
 800488e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8004892:	ea43 0102 	orr.w	r1, r3, r2
 8004896:	9b04      	ldr	r3, [sp, #16]
 8004898:	430b      	orrs	r3, r1
 800489a:	464d      	mov	r5, r9
 800489c:	d10f      	bne.n	80048be <_dtoa_r+0xa66>
 800489e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048a2:	d02a      	beq.n	80048fa <_dtoa_r+0xaa2>
 80048a4:	9b03      	ldr	r3, [sp, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	dd02      	ble.n	80048b0 <_dtoa_r+0xa58>
 80048aa:	9b02      	ldr	r3, [sp, #8]
 80048ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80048b0:	f88b a000 	strb.w	sl, [fp]
 80048b4:	e775      	b.n	80047a2 <_dtoa_r+0x94a>
 80048b6:	4638      	mov	r0, r7
 80048b8:	e7ba      	b.n	8004830 <_dtoa_r+0x9d8>
 80048ba:	2201      	movs	r2, #1
 80048bc:	e7e2      	b.n	8004884 <_dtoa_r+0xa2c>
 80048be:	9b03      	ldr	r3, [sp, #12]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	db04      	blt.n	80048ce <_dtoa_r+0xa76>
 80048c4:	9906      	ldr	r1, [sp, #24]
 80048c6:	430b      	orrs	r3, r1
 80048c8:	9904      	ldr	r1, [sp, #16]
 80048ca:	430b      	orrs	r3, r1
 80048cc:	d122      	bne.n	8004914 <_dtoa_r+0xabc>
 80048ce:	2a00      	cmp	r2, #0
 80048d0:	ddee      	ble.n	80048b0 <_dtoa_r+0xa58>
 80048d2:	ee18 1a10 	vmov	r1, s16
 80048d6:	2201      	movs	r2, #1
 80048d8:	4620      	mov	r0, r4
 80048da:	f000 fad7 	bl	8004e8c <__lshift>
 80048de:	4631      	mov	r1, r6
 80048e0:	ee08 0a10 	vmov	s16, r0
 80048e4:	f000 fb42 	bl	8004f6c <__mcmp>
 80048e8:	2800      	cmp	r0, #0
 80048ea:	dc03      	bgt.n	80048f4 <_dtoa_r+0xa9c>
 80048ec:	d1e0      	bne.n	80048b0 <_dtoa_r+0xa58>
 80048ee:	f01a 0f01 	tst.w	sl, #1
 80048f2:	d0dd      	beq.n	80048b0 <_dtoa_r+0xa58>
 80048f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80048f8:	d1d7      	bne.n	80048aa <_dtoa_r+0xa52>
 80048fa:	2339      	movs	r3, #57	; 0x39
 80048fc:	f88b 3000 	strb.w	r3, [fp]
 8004900:	462b      	mov	r3, r5
 8004902:	461d      	mov	r5, r3
 8004904:	3b01      	subs	r3, #1
 8004906:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800490a:	2a39      	cmp	r2, #57	; 0x39
 800490c:	d071      	beq.n	80049f2 <_dtoa_r+0xb9a>
 800490e:	3201      	adds	r2, #1
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e746      	b.n	80047a2 <_dtoa_r+0x94a>
 8004914:	2a00      	cmp	r2, #0
 8004916:	dd07      	ble.n	8004928 <_dtoa_r+0xad0>
 8004918:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800491c:	d0ed      	beq.n	80048fa <_dtoa_r+0xaa2>
 800491e:	f10a 0301 	add.w	r3, sl, #1
 8004922:	f88b 3000 	strb.w	r3, [fp]
 8004926:	e73c      	b.n	80047a2 <_dtoa_r+0x94a>
 8004928:	9b05      	ldr	r3, [sp, #20]
 800492a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800492e:	4599      	cmp	r9, r3
 8004930:	d047      	beq.n	80049c2 <_dtoa_r+0xb6a>
 8004932:	ee18 1a10 	vmov	r1, s16
 8004936:	2300      	movs	r3, #0
 8004938:	220a      	movs	r2, #10
 800493a:	4620      	mov	r0, r4
 800493c:	f000 f8f6 	bl	8004b2c <__multadd>
 8004940:	45b8      	cmp	r8, r7
 8004942:	ee08 0a10 	vmov	s16, r0
 8004946:	f04f 0300 	mov.w	r3, #0
 800494a:	f04f 020a 	mov.w	r2, #10
 800494e:	4641      	mov	r1, r8
 8004950:	4620      	mov	r0, r4
 8004952:	d106      	bne.n	8004962 <_dtoa_r+0xb0a>
 8004954:	f000 f8ea 	bl	8004b2c <__multadd>
 8004958:	4680      	mov	r8, r0
 800495a:	4607      	mov	r7, r0
 800495c:	f109 0901 	add.w	r9, r9, #1
 8004960:	e772      	b.n	8004848 <_dtoa_r+0x9f0>
 8004962:	f000 f8e3 	bl	8004b2c <__multadd>
 8004966:	4639      	mov	r1, r7
 8004968:	4680      	mov	r8, r0
 800496a:	2300      	movs	r3, #0
 800496c:	220a      	movs	r2, #10
 800496e:	4620      	mov	r0, r4
 8004970:	f000 f8dc 	bl	8004b2c <__multadd>
 8004974:	4607      	mov	r7, r0
 8004976:	e7f1      	b.n	800495c <_dtoa_r+0xb04>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	9302      	str	r3, [sp, #8]
 800497c:	9d01      	ldr	r5, [sp, #4]
 800497e:	ee18 0a10 	vmov	r0, s16
 8004982:	4631      	mov	r1, r6
 8004984:	f7ff f9da 	bl	8003d3c <quorem>
 8004988:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800498c:	9b01      	ldr	r3, [sp, #4]
 800498e:	f805 ab01 	strb.w	sl, [r5], #1
 8004992:	1aea      	subs	r2, r5, r3
 8004994:	9b02      	ldr	r3, [sp, #8]
 8004996:	4293      	cmp	r3, r2
 8004998:	dd09      	ble.n	80049ae <_dtoa_r+0xb56>
 800499a:	ee18 1a10 	vmov	r1, s16
 800499e:	2300      	movs	r3, #0
 80049a0:	220a      	movs	r2, #10
 80049a2:	4620      	mov	r0, r4
 80049a4:	f000 f8c2 	bl	8004b2c <__multadd>
 80049a8:	ee08 0a10 	vmov	s16, r0
 80049ac:	e7e7      	b.n	800497e <_dtoa_r+0xb26>
 80049ae:	9b02      	ldr	r3, [sp, #8]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	bfc8      	it	gt
 80049b4:	461d      	movgt	r5, r3
 80049b6:	9b01      	ldr	r3, [sp, #4]
 80049b8:	bfd8      	it	le
 80049ba:	2501      	movle	r5, #1
 80049bc:	441d      	add	r5, r3
 80049be:	f04f 0800 	mov.w	r8, #0
 80049c2:	ee18 1a10 	vmov	r1, s16
 80049c6:	2201      	movs	r2, #1
 80049c8:	4620      	mov	r0, r4
 80049ca:	f000 fa5f 	bl	8004e8c <__lshift>
 80049ce:	4631      	mov	r1, r6
 80049d0:	ee08 0a10 	vmov	s16, r0
 80049d4:	f000 faca 	bl	8004f6c <__mcmp>
 80049d8:	2800      	cmp	r0, #0
 80049da:	dc91      	bgt.n	8004900 <_dtoa_r+0xaa8>
 80049dc:	d102      	bne.n	80049e4 <_dtoa_r+0xb8c>
 80049de:	f01a 0f01 	tst.w	sl, #1
 80049e2:	d18d      	bne.n	8004900 <_dtoa_r+0xaa8>
 80049e4:	462b      	mov	r3, r5
 80049e6:	461d      	mov	r5, r3
 80049e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80049ec:	2a30      	cmp	r2, #48	; 0x30
 80049ee:	d0fa      	beq.n	80049e6 <_dtoa_r+0xb8e>
 80049f0:	e6d7      	b.n	80047a2 <_dtoa_r+0x94a>
 80049f2:	9a01      	ldr	r2, [sp, #4]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d184      	bne.n	8004902 <_dtoa_r+0xaaa>
 80049f8:	9b00      	ldr	r3, [sp, #0]
 80049fa:	3301      	adds	r3, #1
 80049fc:	9300      	str	r3, [sp, #0]
 80049fe:	2331      	movs	r3, #49	; 0x31
 8004a00:	7013      	strb	r3, [r2, #0]
 8004a02:	e6ce      	b.n	80047a2 <_dtoa_r+0x94a>
 8004a04:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <_dtoa_r+0xbd4>)
 8004a06:	f7ff ba95 	b.w	8003f34 <_dtoa_r+0xdc>
 8004a0a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	f47f aa6e 	bne.w	8003eee <_dtoa_r+0x96>
 8004a12:	4b07      	ldr	r3, [pc, #28]	; (8004a30 <_dtoa_r+0xbd8>)
 8004a14:	f7ff ba8e 	b.w	8003f34 <_dtoa_r+0xdc>
 8004a18:	9b02      	ldr	r3, [sp, #8]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	dcae      	bgt.n	800497c <_dtoa_r+0xb24>
 8004a1e:	9b06      	ldr	r3, [sp, #24]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	f73f aea8 	bgt.w	8004776 <_dtoa_r+0x91e>
 8004a26:	e7a9      	b.n	800497c <_dtoa_r+0xb24>
 8004a28:	0800656b 	.word	0x0800656b
 8004a2c:	080064c8 	.word	0x080064c8
 8004a30:	080064ec 	.word	0x080064ec

08004a34 <_localeconv_r>:
 8004a34:	4800      	ldr	r0, [pc, #0]	; (8004a38 <_localeconv_r+0x4>)
 8004a36:	4770      	bx	lr
 8004a38:	20000160 	.word	0x20000160

08004a3c <malloc>:
 8004a3c:	4b02      	ldr	r3, [pc, #8]	; (8004a48 <malloc+0xc>)
 8004a3e:	4601      	mov	r1, r0
 8004a40:	6818      	ldr	r0, [r3, #0]
 8004a42:	f000 bc17 	b.w	8005274 <_malloc_r>
 8004a46:	bf00      	nop
 8004a48:	2000000c 	.word	0x2000000c

08004a4c <memcpy>:
 8004a4c:	440a      	add	r2, r1
 8004a4e:	4291      	cmp	r1, r2
 8004a50:	f100 33ff 	add.w	r3, r0, #4294967295
 8004a54:	d100      	bne.n	8004a58 <memcpy+0xc>
 8004a56:	4770      	bx	lr
 8004a58:	b510      	push	{r4, lr}
 8004a5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004a5e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004a62:	4291      	cmp	r1, r2
 8004a64:	d1f9      	bne.n	8004a5a <memcpy+0xe>
 8004a66:	bd10      	pop	{r4, pc}

08004a68 <_Balloc>:
 8004a68:	b570      	push	{r4, r5, r6, lr}
 8004a6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004a6c:	4604      	mov	r4, r0
 8004a6e:	460d      	mov	r5, r1
 8004a70:	b976      	cbnz	r6, 8004a90 <_Balloc+0x28>
 8004a72:	2010      	movs	r0, #16
 8004a74:	f7ff ffe2 	bl	8004a3c <malloc>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	6260      	str	r0, [r4, #36]	; 0x24
 8004a7c:	b920      	cbnz	r0, 8004a88 <_Balloc+0x20>
 8004a7e:	4b18      	ldr	r3, [pc, #96]	; (8004ae0 <_Balloc+0x78>)
 8004a80:	4818      	ldr	r0, [pc, #96]	; (8004ae4 <_Balloc+0x7c>)
 8004a82:	2166      	movs	r1, #102	; 0x66
 8004a84:	f000 fdd6 	bl	8005634 <__assert_func>
 8004a88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004a8c:	6006      	str	r6, [r0, #0]
 8004a8e:	60c6      	str	r6, [r0, #12]
 8004a90:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004a92:	68f3      	ldr	r3, [r6, #12]
 8004a94:	b183      	cbz	r3, 8004ab8 <_Balloc+0x50>
 8004a96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004a9e:	b9b8      	cbnz	r0, 8004ad0 <_Balloc+0x68>
 8004aa0:	2101      	movs	r1, #1
 8004aa2:	fa01 f605 	lsl.w	r6, r1, r5
 8004aa6:	1d72      	adds	r2, r6, #5
 8004aa8:	0092      	lsls	r2, r2, #2
 8004aaa:	4620      	mov	r0, r4
 8004aac:	f000 fb60 	bl	8005170 <_calloc_r>
 8004ab0:	b160      	cbz	r0, 8004acc <_Balloc+0x64>
 8004ab2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8004ab6:	e00e      	b.n	8004ad6 <_Balloc+0x6e>
 8004ab8:	2221      	movs	r2, #33	; 0x21
 8004aba:	2104      	movs	r1, #4
 8004abc:	4620      	mov	r0, r4
 8004abe:	f000 fb57 	bl	8005170 <_calloc_r>
 8004ac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ac4:	60f0      	str	r0, [r6, #12]
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1e4      	bne.n	8004a96 <_Balloc+0x2e>
 8004acc:	2000      	movs	r0, #0
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	6802      	ldr	r2, [r0, #0]
 8004ad2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8004adc:	e7f7      	b.n	8004ace <_Balloc+0x66>
 8004ade:	bf00      	nop
 8004ae0:	080064f9 	.word	0x080064f9
 8004ae4:	0800657c 	.word	0x0800657c

08004ae8 <_Bfree>:
 8004ae8:	b570      	push	{r4, r5, r6, lr}
 8004aea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	b976      	cbnz	r6, 8004b10 <_Bfree+0x28>
 8004af2:	2010      	movs	r0, #16
 8004af4:	f7ff ffa2 	bl	8004a3c <malloc>
 8004af8:	4602      	mov	r2, r0
 8004afa:	6268      	str	r0, [r5, #36]	; 0x24
 8004afc:	b920      	cbnz	r0, 8004b08 <_Bfree+0x20>
 8004afe:	4b09      	ldr	r3, [pc, #36]	; (8004b24 <_Bfree+0x3c>)
 8004b00:	4809      	ldr	r0, [pc, #36]	; (8004b28 <_Bfree+0x40>)
 8004b02:	218a      	movs	r1, #138	; 0x8a
 8004b04:	f000 fd96 	bl	8005634 <__assert_func>
 8004b08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8004b0c:	6006      	str	r6, [r0, #0]
 8004b0e:	60c6      	str	r6, [r0, #12]
 8004b10:	b13c      	cbz	r4, 8004b22 <_Bfree+0x3a>
 8004b12:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004b14:	6862      	ldr	r2, [r4, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b1c:	6021      	str	r1, [r4, #0]
 8004b1e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8004b22:	bd70      	pop	{r4, r5, r6, pc}
 8004b24:	080064f9 	.word	0x080064f9
 8004b28:	0800657c 	.word	0x0800657c

08004b2c <__multadd>:
 8004b2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b30:	690d      	ldr	r5, [r1, #16]
 8004b32:	4607      	mov	r7, r0
 8004b34:	460c      	mov	r4, r1
 8004b36:	461e      	mov	r6, r3
 8004b38:	f101 0c14 	add.w	ip, r1, #20
 8004b3c:	2000      	movs	r0, #0
 8004b3e:	f8dc 3000 	ldr.w	r3, [ip]
 8004b42:	b299      	uxth	r1, r3
 8004b44:	fb02 6101 	mla	r1, r2, r1, r6
 8004b48:	0c1e      	lsrs	r6, r3, #16
 8004b4a:	0c0b      	lsrs	r3, r1, #16
 8004b4c:	fb02 3306 	mla	r3, r2, r6, r3
 8004b50:	b289      	uxth	r1, r1
 8004b52:	3001      	adds	r0, #1
 8004b54:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8004b58:	4285      	cmp	r5, r0
 8004b5a:	f84c 1b04 	str.w	r1, [ip], #4
 8004b5e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8004b62:	dcec      	bgt.n	8004b3e <__multadd+0x12>
 8004b64:	b30e      	cbz	r6, 8004baa <__multadd+0x7e>
 8004b66:	68a3      	ldr	r3, [r4, #8]
 8004b68:	42ab      	cmp	r3, r5
 8004b6a:	dc19      	bgt.n	8004ba0 <__multadd+0x74>
 8004b6c:	6861      	ldr	r1, [r4, #4]
 8004b6e:	4638      	mov	r0, r7
 8004b70:	3101      	adds	r1, #1
 8004b72:	f7ff ff79 	bl	8004a68 <_Balloc>
 8004b76:	4680      	mov	r8, r0
 8004b78:	b928      	cbnz	r0, 8004b86 <__multadd+0x5a>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	4b0c      	ldr	r3, [pc, #48]	; (8004bb0 <__multadd+0x84>)
 8004b7e:	480d      	ldr	r0, [pc, #52]	; (8004bb4 <__multadd+0x88>)
 8004b80:	21b5      	movs	r1, #181	; 0xb5
 8004b82:	f000 fd57 	bl	8005634 <__assert_func>
 8004b86:	6922      	ldr	r2, [r4, #16]
 8004b88:	3202      	adds	r2, #2
 8004b8a:	f104 010c 	add.w	r1, r4, #12
 8004b8e:	0092      	lsls	r2, r2, #2
 8004b90:	300c      	adds	r0, #12
 8004b92:	f7ff ff5b 	bl	8004a4c <memcpy>
 8004b96:	4621      	mov	r1, r4
 8004b98:	4638      	mov	r0, r7
 8004b9a:	f7ff ffa5 	bl	8004ae8 <_Bfree>
 8004b9e:	4644      	mov	r4, r8
 8004ba0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8004ba4:	3501      	adds	r5, #1
 8004ba6:	615e      	str	r6, [r3, #20]
 8004ba8:	6125      	str	r5, [r4, #16]
 8004baa:	4620      	mov	r0, r4
 8004bac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004bb0:	0800656b 	.word	0x0800656b
 8004bb4:	0800657c 	.word	0x0800657c

08004bb8 <__hi0bits>:
 8004bb8:	0c03      	lsrs	r3, r0, #16
 8004bba:	041b      	lsls	r3, r3, #16
 8004bbc:	b9d3      	cbnz	r3, 8004bf4 <__hi0bits+0x3c>
 8004bbe:	0400      	lsls	r0, r0, #16
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8004bc6:	bf04      	itt	eq
 8004bc8:	0200      	lsleq	r0, r0, #8
 8004bca:	3308      	addeq	r3, #8
 8004bcc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8004bd0:	bf04      	itt	eq
 8004bd2:	0100      	lsleq	r0, r0, #4
 8004bd4:	3304      	addeq	r3, #4
 8004bd6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8004bda:	bf04      	itt	eq
 8004bdc:	0080      	lsleq	r0, r0, #2
 8004bde:	3302      	addeq	r3, #2
 8004be0:	2800      	cmp	r0, #0
 8004be2:	db05      	blt.n	8004bf0 <__hi0bits+0x38>
 8004be4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8004be8:	f103 0301 	add.w	r3, r3, #1
 8004bec:	bf08      	it	eq
 8004bee:	2320      	moveq	r3, #32
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	4770      	bx	lr
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e7e4      	b.n	8004bc2 <__hi0bits+0xa>

08004bf8 <__lo0bits>:
 8004bf8:	6803      	ldr	r3, [r0, #0]
 8004bfa:	f013 0207 	ands.w	r2, r3, #7
 8004bfe:	4601      	mov	r1, r0
 8004c00:	d00b      	beq.n	8004c1a <__lo0bits+0x22>
 8004c02:	07da      	lsls	r2, r3, #31
 8004c04:	d423      	bmi.n	8004c4e <__lo0bits+0x56>
 8004c06:	0798      	lsls	r0, r3, #30
 8004c08:	bf49      	itett	mi
 8004c0a:	085b      	lsrmi	r3, r3, #1
 8004c0c:	089b      	lsrpl	r3, r3, #2
 8004c0e:	2001      	movmi	r0, #1
 8004c10:	600b      	strmi	r3, [r1, #0]
 8004c12:	bf5c      	itt	pl
 8004c14:	600b      	strpl	r3, [r1, #0]
 8004c16:	2002      	movpl	r0, #2
 8004c18:	4770      	bx	lr
 8004c1a:	b298      	uxth	r0, r3
 8004c1c:	b9a8      	cbnz	r0, 8004c4a <__lo0bits+0x52>
 8004c1e:	0c1b      	lsrs	r3, r3, #16
 8004c20:	2010      	movs	r0, #16
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	b90a      	cbnz	r2, 8004c2a <__lo0bits+0x32>
 8004c26:	3008      	adds	r0, #8
 8004c28:	0a1b      	lsrs	r3, r3, #8
 8004c2a:	071a      	lsls	r2, r3, #28
 8004c2c:	bf04      	itt	eq
 8004c2e:	091b      	lsreq	r3, r3, #4
 8004c30:	3004      	addeq	r0, #4
 8004c32:	079a      	lsls	r2, r3, #30
 8004c34:	bf04      	itt	eq
 8004c36:	089b      	lsreq	r3, r3, #2
 8004c38:	3002      	addeq	r0, #2
 8004c3a:	07da      	lsls	r2, r3, #31
 8004c3c:	d403      	bmi.n	8004c46 <__lo0bits+0x4e>
 8004c3e:	085b      	lsrs	r3, r3, #1
 8004c40:	f100 0001 	add.w	r0, r0, #1
 8004c44:	d005      	beq.n	8004c52 <__lo0bits+0x5a>
 8004c46:	600b      	str	r3, [r1, #0]
 8004c48:	4770      	bx	lr
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	e7e9      	b.n	8004c22 <__lo0bits+0x2a>
 8004c4e:	2000      	movs	r0, #0
 8004c50:	4770      	bx	lr
 8004c52:	2020      	movs	r0, #32
 8004c54:	4770      	bx	lr
	...

08004c58 <__i2b>:
 8004c58:	b510      	push	{r4, lr}
 8004c5a:	460c      	mov	r4, r1
 8004c5c:	2101      	movs	r1, #1
 8004c5e:	f7ff ff03 	bl	8004a68 <_Balloc>
 8004c62:	4602      	mov	r2, r0
 8004c64:	b928      	cbnz	r0, 8004c72 <__i2b+0x1a>
 8004c66:	4b05      	ldr	r3, [pc, #20]	; (8004c7c <__i2b+0x24>)
 8004c68:	4805      	ldr	r0, [pc, #20]	; (8004c80 <__i2b+0x28>)
 8004c6a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8004c6e:	f000 fce1 	bl	8005634 <__assert_func>
 8004c72:	2301      	movs	r3, #1
 8004c74:	6144      	str	r4, [r0, #20]
 8004c76:	6103      	str	r3, [r0, #16]
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	bf00      	nop
 8004c7c:	0800656b 	.word	0x0800656b
 8004c80:	0800657c 	.word	0x0800657c

08004c84 <__multiply>:
 8004c84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c88:	4691      	mov	r9, r2
 8004c8a:	690a      	ldr	r2, [r1, #16]
 8004c8c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	bfb8      	it	lt
 8004c94:	460b      	movlt	r3, r1
 8004c96:	460c      	mov	r4, r1
 8004c98:	bfbc      	itt	lt
 8004c9a:	464c      	movlt	r4, r9
 8004c9c:	4699      	movlt	r9, r3
 8004c9e:	6927      	ldr	r7, [r4, #16]
 8004ca0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8004ca4:	68a3      	ldr	r3, [r4, #8]
 8004ca6:	6861      	ldr	r1, [r4, #4]
 8004ca8:	eb07 060a 	add.w	r6, r7, sl
 8004cac:	42b3      	cmp	r3, r6
 8004cae:	b085      	sub	sp, #20
 8004cb0:	bfb8      	it	lt
 8004cb2:	3101      	addlt	r1, #1
 8004cb4:	f7ff fed8 	bl	8004a68 <_Balloc>
 8004cb8:	b930      	cbnz	r0, 8004cc8 <__multiply+0x44>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	4b44      	ldr	r3, [pc, #272]	; (8004dd0 <__multiply+0x14c>)
 8004cbe:	4845      	ldr	r0, [pc, #276]	; (8004dd4 <__multiply+0x150>)
 8004cc0:	f240 115d 	movw	r1, #349	; 0x15d
 8004cc4:	f000 fcb6 	bl	8005634 <__assert_func>
 8004cc8:	f100 0514 	add.w	r5, r0, #20
 8004ccc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004cd0:	462b      	mov	r3, r5
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	4543      	cmp	r3, r8
 8004cd6:	d321      	bcc.n	8004d1c <__multiply+0x98>
 8004cd8:	f104 0314 	add.w	r3, r4, #20
 8004cdc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8004ce0:	f109 0314 	add.w	r3, r9, #20
 8004ce4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8004ce8:	9202      	str	r2, [sp, #8]
 8004cea:	1b3a      	subs	r2, r7, r4
 8004cec:	3a15      	subs	r2, #21
 8004cee:	f022 0203 	bic.w	r2, r2, #3
 8004cf2:	3204      	adds	r2, #4
 8004cf4:	f104 0115 	add.w	r1, r4, #21
 8004cf8:	428f      	cmp	r7, r1
 8004cfa:	bf38      	it	cc
 8004cfc:	2204      	movcc	r2, #4
 8004cfe:	9201      	str	r2, [sp, #4]
 8004d00:	9a02      	ldr	r2, [sp, #8]
 8004d02:	9303      	str	r3, [sp, #12]
 8004d04:	429a      	cmp	r2, r3
 8004d06:	d80c      	bhi.n	8004d22 <__multiply+0x9e>
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	dd03      	ble.n	8004d14 <__multiply+0x90>
 8004d0c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d05a      	beq.n	8004dca <__multiply+0x146>
 8004d14:	6106      	str	r6, [r0, #16]
 8004d16:	b005      	add	sp, #20
 8004d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1c:	f843 2b04 	str.w	r2, [r3], #4
 8004d20:	e7d8      	b.n	8004cd4 <__multiply+0x50>
 8004d22:	f8b3 a000 	ldrh.w	sl, [r3]
 8004d26:	f1ba 0f00 	cmp.w	sl, #0
 8004d2a:	d024      	beq.n	8004d76 <__multiply+0xf2>
 8004d2c:	f104 0e14 	add.w	lr, r4, #20
 8004d30:	46a9      	mov	r9, r5
 8004d32:	f04f 0c00 	mov.w	ip, #0
 8004d36:	f85e 2b04 	ldr.w	r2, [lr], #4
 8004d3a:	f8d9 1000 	ldr.w	r1, [r9]
 8004d3e:	fa1f fb82 	uxth.w	fp, r2
 8004d42:	b289      	uxth	r1, r1
 8004d44:	fb0a 110b 	mla	r1, sl, fp, r1
 8004d48:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8004d4c:	f8d9 2000 	ldr.w	r2, [r9]
 8004d50:	4461      	add	r1, ip
 8004d52:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d56:	fb0a c20b 	mla	r2, sl, fp, ip
 8004d5a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8004d5e:	b289      	uxth	r1, r1
 8004d60:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004d64:	4577      	cmp	r7, lr
 8004d66:	f849 1b04 	str.w	r1, [r9], #4
 8004d6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8004d6e:	d8e2      	bhi.n	8004d36 <__multiply+0xb2>
 8004d70:	9a01      	ldr	r2, [sp, #4]
 8004d72:	f845 c002 	str.w	ip, [r5, r2]
 8004d76:	9a03      	ldr	r2, [sp, #12]
 8004d78:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8004d7c:	3304      	adds	r3, #4
 8004d7e:	f1b9 0f00 	cmp.w	r9, #0
 8004d82:	d020      	beq.n	8004dc6 <__multiply+0x142>
 8004d84:	6829      	ldr	r1, [r5, #0]
 8004d86:	f104 0c14 	add.w	ip, r4, #20
 8004d8a:	46ae      	mov	lr, r5
 8004d8c:	f04f 0a00 	mov.w	sl, #0
 8004d90:	f8bc b000 	ldrh.w	fp, [ip]
 8004d94:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8004d98:	fb09 220b 	mla	r2, r9, fp, r2
 8004d9c:	4492      	add	sl, r2
 8004d9e:	b289      	uxth	r1, r1
 8004da0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8004da4:	f84e 1b04 	str.w	r1, [lr], #4
 8004da8:	f85c 2b04 	ldr.w	r2, [ip], #4
 8004dac:	f8be 1000 	ldrh.w	r1, [lr]
 8004db0:	0c12      	lsrs	r2, r2, #16
 8004db2:	fb09 1102 	mla	r1, r9, r2, r1
 8004db6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8004dba:	4567      	cmp	r7, ip
 8004dbc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8004dc0:	d8e6      	bhi.n	8004d90 <__multiply+0x10c>
 8004dc2:	9a01      	ldr	r2, [sp, #4]
 8004dc4:	50a9      	str	r1, [r5, r2]
 8004dc6:	3504      	adds	r5, #4
 8004dc8:	e79a      	b.n	8004d00 <__multiply+0x7c>
 8004dca:	3e01      	subs	r6, #1
 8004dcc:	e79c      	b.n	8004d08 <__multiply+0x84>
 8004dce:	bf00      	nop
 8004dd0:	0800656b 	.word	0x0800656b
 8004dd4:	0800657c 	.word	0x0800657c

08004dd8 <__pow5mult>:
 8004dd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ddc:	4615      	mov	r5, r2
 8004dde:	f012 0203 	ands.w	r2, r2, #3
 8004de2:	4606      	mov	r6, r0
 8004de4:	460f      	mov	r7, r1
 8004de6:	d007      	beq.n	8004df8 <__pow5mult+0x20>
 8004de8:	4c25      	ldr	r4, [pc, #148]	; (8004e80 <__pow5mult+0xa8>)
 8004dea:	3a01      	subs	r2, #1
 8004dec:	2300      	movs	r3, #0
 8004dee:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8004df2:	f7ff fe9b 	bl	8004b2c <__multadd>
 8004df6:	4607      	mov	r7, r0
 8004df8:	10ad      	asrs	r5, r5, #2
 8004dfa:	d03d      	beq.n	8004e78 <__pow5mult+0xa0>
 8004dfc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8004dfe:	b97c      	cbnz	r4, 8004e20 <__pow5mult+0x48>
 8004e00:	2010      	movs	r0, #16
 8004e02:	f7ff fe1b 	bl	8004a3c <malloc>
 8004e06:	4602      	mov	r2, r0
 8004e08:	6270      	str	r0, [r6, #36]	; 0x24
 8004e0a:	b928      	cbnz	r0, 8004e18 <__pow5mult+0x40>
 8004e0c:	4b1d      	ldr	r3, [pc, #116]	; (8004e84 <__pow5mult+0xac>)
 8004e0e:	481e      	ldr	r0, [pc, #120]	; (8004e88 <__pow5mult+0xb0>)
 8004e10:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8004e14:	f000 fc0e 	bl	8005634 <__assert_func>
 8004e18:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004e1c:	6004      	str	r4, [r0, #0]
 8004e1e:	60c4      	str	r4, [r0, #12]
 8004e20:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8004e24:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8004e28:	b94c      	cbnz	r4, 8004e3e <__pow5mult+0x66>
 8004e2a:	f240 2171 	movw	r1, #625	; 0x271
 8004e2e:	4630      	mov	r0, r6
 8004e30:	f7ff ff12 	bl	8004c58 <__i2b>
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c8 0008 	str.w	r0, [r8, #8]
 8004e3a:	4604      	mov	r4, r0
 8004e3c:	6003      	str	r3, [r0, #0]
 8004e3e:	f04f 0900 	mov.w	r9, #0
 8004e42:	07eb      	lsls	r3, r5, #31
 8004e44:	d50a      	bpl.n	8004e5c <__pow5mult+0x84>
 8004e46:	4639      	mov	r1, r7
 8004e48:	4622      	mov	r2, r4
 8004e4a:	4630      	mov	r0, r6
 8004e4c:	f7ff ff1a 	bl	8004c84 <__multiply>
 8004e50:	4639      	mov	r1, r7
 8004e52:	4680      	mov	r8, r0
 8004e54:	4630      	mov	r0, r6
 8004e56:	f7ff fe47 	bl	8004ae8 <_Bfree>
 8004e5a:	4647      	mov	r7, r8
 8004e5c:	106d      	asrs	r5, r5, #1
 8004e5e:	d00b      	beq.n	8004e78 <__pow5mult+0xa0>
 8004e60:	6820      	ldr	r0, [r4, #0]
 8004e62:	b938      	cbnz	r0, 8004e74 <__pow5mult+0x9c>
 8004e64:	4622      	mov	r2, r4
 8004e66:	4621      	mov	r1, r4
 8004e68:	4630      	mov	r0, r6
 8004e6a:	f7ff ff0b 	bl	8004c84 <__multiply>
 8004e6e:	6020      	str	r0, [r4, #0]
 8004e70:	f8c0 9000 	str.w	r9, [r0]
 8004e74:	4604      	mov	r4, r0
 8004e76:	e7e4      	b.n	8004e42 <__pow5mult+0x6a>
 8004e78:	4638      	mov	r0, r7
 8004e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004e7e:	bf00      	nop
 8004e80:	080066c8 	.word	0x080066c8
 8004e84:	080064f9 	.word	0x080064f9
 8004e88:	0800657c 	.word	0x0800657c

08004e8c <__lshift>:
 8004e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e90:	460c      	mov	r4, r1
 8004e92:	6849      	ldr	r1, [r1, #4]
 8004e94:	6923      	ldr	r3, [r4, #16]
 8004e96:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8004e9a:	68a3      	ldr	r3, [r4, #8]
 8004e9c:	4607      	mov	r7, r0
 8004e9e:	4691      	mov	r9, r2
 8004ea0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8004ea4:	f108 0601 	add.w	r6, r8, #1
 8004ea8:	42b3      	cmp	r3, r6
 8004eaa:	db0b      	blt.n	8004ec4 <__lshift+0x38>
 8004eac:	4638      	mov	r0, r7
 8004eae:	f7ff fddb 	bl	8004a68 <_Balloc>
 8004eb2:	4605      	mov	r5, r0
 8004eb4:	b948      	cbnz	r0, 8004eca <__lshift+0x3e>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	4b2a      	ldr	r3, [pc, #168]	; (8004f64 <__lshift+0xd8>)
 8004eba:	482b      	ldr	r0, [pc, #172]	; (8004f68 <__lshift+0xdc>)
 8004ebc:	f240 11d9 	movw	r1, #473	; 0x1d9
 8004ec0:	f000 fbb8 	bl	8005634 <__assert_func>
 8004ec4:	3101      	adds	r1, #1
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	e7ee      	b.n	8004ea8 <__lshift+0x1c>
 8004eca:	2300      	movs	r3, #0
 8004ecc:	f100 0114 	add.w	r1, r0, #20
 8004ed0:	f100 0210 	add.w	r2, r0, #16
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	4553      	cmp	r3, sl
 8004ed8:	db37      	blt.n	8004f4a <__lshift+0xbe>
 8004eda:	6920      	ldr	r0, [r4, #16]
 8004edc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8004ee0:	f104 0314 	add.w	r3, r4, #20
 8004ee4:	f019 091f 	ands.w	r9, r9, #31
 8004ee8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8004eec:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004ef0:	d02f      	beq.n	8004f52 <__lshift+0xc6>
 8004ef2:	f1c9 0e20 	rsb	lr, r9, #32
 8004ef6:	468a      	mov	sl, r1
 8004ef8:	f04f 0c00 	mov.w	ip, #0
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	fa02 f209 	lsl.w	r2, r2, r9
 8004f02:	ea42 020c 	orr.w	r2, r2, ip
 8004f06:	f84a 2b04 	str.w	r2, [sl], #4
 8004f0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f0e:	4298      	cmp	r0, r3
 8004f10:	fa22 fc0e 	lsr.w	ip, r2, lr
 8004f14:	d8f2      	bhi.n	8004efc <__lshift+0x70>
 8004f16:	1b03      	subs	r3, r0, r4
 8004f18:	3b15      	subs	r3, #21
 8004f1a:	f023 0303 	bic.w	r3, r3, #3
 8004f1e:	3304      	adds	r3, #4
 8004f20:	f104 0215 	add.w	r2, r4, #21
 8004f24:	4290      	cmp	r0, r2
 8004f26:	bf38      	it	cc
 8004f28:	2304      	movcc	r3, #4
 8004f2a:	f841 c003 	str.w	ip, [r1, r3]
 8004f2e:	f1bc 0f00 	cmp.w	ip, #0
 8004f32:	d001      	beq.n	8004f38 <__lshift+0xac>
 8004f34:	f108 0602 	add.w	r6, r8, #2
 8004f38:	3e01      	subs	r6, #1
 8004f3a:	4638      	mov	r0, r7
 8004f3c:	612e      	str	r6, [r5, #16]
 8004f3e:	4621      	mov	r1, r4
 8004f40:	f7ff fdd2 	bl	8004ae8 <_Bfree>
 8004f44:	4628      	mov	r0, r5
 8004f46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8004f4e:	3301      	adds	r3, #1
 8004f50:	e7c1      	b.n	8004ed6 <__lshift+0x4a>
 8004f52:	3904      	subs	r1, #4
 8004f54:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f58:	f841 2f04 	str.w	r2, [r1, #4]!
 8004f5c:	4298      	cmp	r0, r3
 8004f5e:	d8f9      	bhi.n	8004f54 <__lshift+0xc8>
 8004f60:	e7ea      	b.n	8004f38 <__lshift+0xac>
 8004f62:	bf00      	nop
 8004f64:	0800656b 	.word	0x0800656b
 8004f68:	0800657c 	.word	0x0800657c

08004f6c <__mcmp>:
 8004f6c:	b530      	push	{r4, r5, lr}
 8004f6e:	6902      	ldr	r2, [r0, #16]
 8004f70:	690c      	ldr	r4, [r1, #16]
 8004f72:	1b12      	subs	r2, r2, r4
 8004f74:	d10e      	bne.n	8004f94 <__mcmp+0x28>
 8004f76:	f100 0314 	add.w	r3, r0, #20
 8004f7a:	3114      	adds	r1, #20
 8004f7c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8004f80:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004f84:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8004f88:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8004f8c:	42a5      	cmp	r5, r4
 8004f8e:	d003      	beq.n	8004f98 <__mcmp+0x2c>
 8004f90:	d305      	bcc.n	8004f9e <__mcmp+0x32>
 8004f92:	2201      	movs	r2, #1
 8004f94:	4610      	mov	r0, r2
 8004f96:	bd30      	pop	{r4, r5, pc}
 8004f98:	4283      	cmp	r3, r0
 8004f9a:	d3f3      	bcc.n	8004f84 <__mcmp+0x18>
 8004f9c:	e7fa      	b.n	8004f94 <__mcmp+0x28>
 8004f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa2:	e7f7      	b.n	8004f94 <__mcmp+0x28>

08004fa4 <__mdiff>:
 8004fa4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004fa8:	460c      	mov	r4, r1
 8004faa:	4606      	mov	r6, r0
 8004fac:	4611      	mov	r1, r2
 8004fae:	4620      	mov	r0, r4
 8004fb0:	4690      	mov	r8, r2
 8004fb2:	f7ff ffdb 	bl	8004f6c <__mcmp>
 8004fb6:	1e05      	subs	r5, r0, #0
 8004fb8:	d110      	bne.n	8004fdc <__mdiff+0x38>
 8004fba:	4629      	mov	r1, r5
 8004fbc:	4630      	mov	r0, r6
 8004fbe:	f7ff fd53 	bl	8004a68 <_Balloc>
 8004fc2:	b930      	cbnz	r0, 8004fd2 <__mdiff+0x2e>
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	; (80050b0 <__mdiff+0x10c>)
 8004fc6:	4602      	mov	r2, r0
 8004fc8:	f240 2132 	movw	r1, #562	; 0x232
 8004fcc:	4839      	ldr	r0, [pc, #228]	; (80050b4 <__mdiff+0x110>)
 8004fce:	f000 fb31 	bl	8005634 <__assert_func>
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8004fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	bfa4      	itt	ge
 8004fde:	4643      	movge	r3, r8
 8004fe0:	46a0      	movge	r8, r4
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8004fe8:	bfa6      	itte	ge
 8004fea:	461c      	movge	r4, r3
 8004fec:	2500      	movge	r5, #0
 8004fee:	2501      	movlt	r5, #1
 8004ff0:	f7ff fd3a 	bl	8004a68 <_Balloc>
 8004ff4:	b920      	cbnz	r0, 8005000 <__mdiff+0x5c>
 8004ff6:	4b2e      	ldr	r3, [pc, #184]	; (80050b0 <__mdiff+0x10c>)
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	f44f 7110 	mov.w	r1, #576	; 0x240
 8004ffe:	e7e5      	b.n	8004fcc <__mdiff+0x28>
 8005000:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8005004:	6926      	ldr	r6, [r4, #16]
 8005006:	60c5      	str	r5, [r0, #12]
 8005008:	f104 0914 	add.w	r9, r4, #20
 800500c:	f108 0514 	add.w	r5, r8, #20
 8005010:	f100 0e14 	add.w	lr, r0, #20
 8005014:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8005018:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800501c:	f108 0210 	add.w	r2, r8, #16
 8005020:	46f2      	mov	sl, lr
 8005022:	2100      	movs	r1, #0
 8005024:	f859 3b04 	ldr.w	r3, [r9], #4
 8005028:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800502c:	fa1f f883 	uxth.w	r8, r3
 8005030:	fa11 f18b 	uxtah	r1, r1, fp
 8005034:	0c1b      	lsrs	r3, r3, #16
 8005036:	eba1 0808 	sub.w	r8, r1, r8
 800503a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800503e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8005042:	fa1f f888 	uxth.w	r8, r8
 8005046:	1419      	asrs	r1, r3, #16
 8005048:	454e      	cmp	r6, r9
 800504a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800504e:	f84a 3b04 	str.w	r3, [sl], #4
 8005052:	d8e7      	bhi.n	8005024 <__mdiff+0x80>
 8005054:	1b33      	subs	r3, r6, r4
 8005056:	3b15      	subs	r3, #21
 8005058:	f023 0303 	bic.w	r3, r3, #3
 800505c:	3304      	adds	r3, #4
 800505e:	3415      	adds	r4, #21
 8005060:	42a6      	cmp	r6, r4
 8005062:	bf38      	it	cc
 8005064:	2304      	movcc	r3, #4
 8005066:	441d      	add	r5, r3
 8005068:	4473      	add	r3, lr
 800506a:	469e      	mov	lr, r3
 800506c:	462e      	mov	r6, r5
 800506e:	4566      	cmp	r6, ip
 8005070:	d30e      	bcc.n	8005090 <__mdiff+0xec>
 8005072:	f10c 0203 	add.w	r2, ip, #3
 8005076:	1b52      	subs	r2, r2, r5
 8005078:	f022 0203 	bic.w	r2, r2, #3
 800507c:	3d03      	subs	r5, #3
 800507e:	45ac      	cmp	ip, r5
 8005080:	bf38      	it	cc
 8005082:	2200      	movcc	r2, #0
 8005084:	441a      	add	r2, r3
 8005086:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800508a:	b17b      	cbz	r3, 80050ac <__mdiff+0x108>
 800508c:	6107      	str	r7, [r0, #16]
 800508e:	e7a3      	b.n	8004fd8 <__mdiff+0x34>
 8005090:	f856 8b04 	ldr.w	r8, [r6], #4
 8005094:	fa11 f288 	uxtah	r2, r1, r8
 8005098:	1414      	asrs	r4, r2, #16
 800509a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800509e:	b292      	uxth	r2, r2
 80050a0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80050a4:	f84e 2b04 	str.w	r2, [lr], #4
 80050a8:	1421      	asrs	r1, r4, #16
 80050aa:	e7e0      	b.n	800506e <__mdiff+0xca>
 80050ac:	3f01      	subs	r7, #1
 80050ae:	e7ea      	b.n	8005086 <__mdiff+0xe2>
 80050b0:	0800656b 	.word	0x0800656b
 80050b4:	0800657c 	.word	0x0800657c

080050b8 <__d2b>:
 80050b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80050bc:	4689      	mov	r9, r1
 80050be:	2101      	movs	r1, #1
 80050c0:	ec57 6b10 	vmov	r6, r7, d0
 80050c4:	4690      	mov	r8, r2
 80050c6:	f7ff fccf 	bl	8004a68 <_Balloc>
 80050ca:	4604      	mov	r4, r0
 80050cc:	b930      	cbnz	r0, 80050dc <__d2b+0x24>
 80050ce:	4602      	mov	r2, r0
 80050d0:	4b25      	ldr	r3, [pc, #148]	; (8005168 <__d2b+0xb0>)
 80050d2:	4826      	ldr	r0, [pc, #152]	; (800516c <__d2b+0xb4>)
 80050d4:	f240 310a 	movw	r1, #778	; 0x30a
 80050d8:	f000 faac 	bl	8005634 <__assert_func>
 80050dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80050e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80050e4:	bb35      	cbnz	r5, 8005134 <__d2b+0x7c>
 80050e6:	2e00      	cmp	r6, #0
 80050e8:	9301      	str	r3, [sp, #4]
 80050ea:	d028      	beq.n	800513e <__d2b+0x86>
 80050ec:	4668      	mov	r0, sp
 80050ee:	9600      	str	r6, [sp, #0]
 80050f0:	f7ff fd82 	bl	8004bf8 <__lo0bits>
 80050f4:	9900      	ldr	r1, [sp, #0]
 80050f6:	b300      	cbz	r0, 800513a <__d2b+0x82>
 80050f8:	9a01      	ldr	r2, [sp, #4]
 80050fa:	f1c0 0320 	rsb	r3, r0, #32
 80050fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005102:	430b      	orrs	r3, r1
 8005104:	40c2      	lsrs	r2, r0
 8005106:	6163      	str	r3, [r4, #20]
 8005108:	9201      	str	r2, [sp, #4]
 800510a:	9b01      	ldr	r3, [sp, #4]
 800510c:	61a3      	str	r3, [r4, #24]
 800510e:	2b00      	cmp	r3, #0
 8005110:	bf14      	ite	ne
 8005112:	2202      	movne	r2, #2
 8005114:	2201      	moveq	r2, #1
 8005116:	6122      	str	r2, [r4, #16]
 8005118:	b1d5      	cbz	r5, 8005150 <__d2b+0x98>
 800511a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800511e:	4405      	add	r5, r0
 8005120:	f8c9 5000 	str.w	r5, [r9]
 8005124:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005128:	f8c8 0000 	str.w	r0, [r8]
 800512c:	4620      	mov	r0, r4
 800512e:	b003      	add	sp, #12
 8005130:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005138:	e7d5      	b.n	80050e6 <__d2b+0x2e>
 800513a:	6161      	str	r1, [r4, #20]
 800513c:	e7e5      	b.n	800510a <__d2b+0x52>
 800513e:	a801      	add	r0, sp, #4
 8005140:	f7ff fd5a 	bl	8004bf8 <__lo0bits>
 8005144:	9b01      	ldr	r3, [sp, #4]
 8005146:	6163      	str	r3, [r4, #20]
 8005148:	2201      	movs	r2, #1
 800514a:	6122      	str	r2, [r4, #16]
 800514c:	3020      	adds	r0, #32
 800514e:	e7e3      	b.n	8005118 <__d2b+0x60>
 8005150:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005154:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005158:	f8c9 0000 	str.w	r0, [r9]
 800515c:	6918      	ldr	r0, [r3, #16]
 800515e:	f7ff fd2b 	bl	8004bb8 <__hi0bits>
 8005162:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005166:	e7df      	b.n	8005128 <__d2b+0x70>
 8005168:	0800656b 	.word	0x0800656b
 800516c:	0800657c 	.word	0x0800657c

08005170 <_calloc_r>:
 8005170:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005172:	fba1 2402 	umull	r2, r4, r1, r2
 8005176:	b94c      	cbnz	r4, 800518c <_calloc_r+0x1c>
 8005178:	4611      	mov	r1, r2
 800517a:	9201      	str	r2, [sp, #4]
 800517c:	f000 f87a 	bl	8005274 <_malloc_r>
 8005180:	9a01      	ldr	r2, [sp, #4]
 8005182:	4605      	mov	r5, r0
 8005184:	b930      	cbnz	r0, 8005194 <_calloc_r+0x24>
 8005186:	4628      	mov	r0, r5
 8005188:	b003      	add	sp, #12
 800518a:	bd30      	pop	{r4, r5, pc}
 800518c:	220c      	movs	r2, #12
 800518e:	6002      	str	r2, [r0, #0]
 8005190:	2500      	movs	r5, #0
 8005192:	e7f8      	b.n	8005186 <_calloc_r+0x16>
 8005194:	4621      	mov	r1, r4
 8005196:	f7fe f913 	bl	80033c0 <memset>
 800519a:	e7f4      	b.n	8005186 <_calloc_r+0x16>

0800519c <_free_r>:
 800519c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800519e:	2900      	cmp	r1, #0
 80051a0:	d044      	beq.n	800522c <_free_r+0x90>
 80051a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051a6:	9001      	str	r0, [sp, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	f1a1 0404 	sub.w	r4, r1, #4
 80051ae:	bfb8      	it	lt
 80051b0:	18e4      	addlt	r4, r4, r3
 80051b2:	f000 fa9b 	bl	80056ec <__malloc_lock>
 80051b6:	4a1e      	ldr	r2, [pc, #120]	; (8005230 <_free_r+0x94>)
 80051b8:	9801      	ldr	r0, [sp, #4]
 80051ba:	6813      	ldr	r3, [r2, #0]
 80051bc:	b933      	cbnz	r3, 80051cc <_free_r+0x30>
 80051be:	6063      	str	r3, [r4, #4]
 80051c0:	6014      	str	r4, [r2, #0]
 80051c2:	b003      	add	sp, #12
 80051c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80051c8:	f000 ba96 	b.w	80056f8 <__malloc_unlock>
 80051cc:	42a3      	cmp	r3, r4
 80051ce:	d908      	bls.n	80051e2 <_free_r+0x46>
 80051d0:	6825      	ldr	r5, [r4, #0]
 80051d2:	1961      	adds	r1, r4, r5
 80051d4:	428b      	cmp	r3, r1
 80051d6:	bf01      	itttt	eq
 80051d8:	6819      	ldreq	r1, [r3, #0]
 80051da:	685b      	ldreq	r3, [r3, #4]
 80051dc:	1949      	addeq	r1, r1, r5
 80051de:	6021      	streq	r1, [r4, #0]
 80051e0:	e7ed      	b.n	80051be <_free_r+0x22>
 80051e2:	461a      	mov	r2, r3
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	b10b      	cbz	r3, 80051ec <_free_r+0x50>
 80051e8:	42a3      	cmp	r3, r4
 80051ea:	d9fa      	bls.n	80051e2 <_free_r+0x46>
 80051ec:	6811      	ldr	r1, [r2, #0]
 80051ee:	1855      	adds	r5, r2, r1
 80051f0:	42a5      	cmp	r5, r4
 80051f2:	d10b      	bne.n	800520c <_free_r+0x70>
 80051f4:	6824      	ldr	r4, [r4, #0]
 80051f6:	4421      	add	r1, r4
 80051f8:	1854      	adds	r4, r2, r1
 80051fa:	42a3      	cmp	r3, r4
 80051fc:	6011      	str	r1, [r2, #0]
 80051fe:	d1e0      	bne.n	80051c2 <_free_r+0x26>
 8005200:	681c      	ldr	r4, [r3, #0]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	6053      	str	r3, [r2, #4]
 8005206:	4421      	add	r1, r4
 8005208:	6011      	str	r1, [r2, #0]
 800520a:	e7da      	b.n	80051c2 <_free_r+0x26>
 800520c:	d902      	bls.n	8005214 <_free_r+0x78>
 800520e:	230c      	movs	r3, #12
 8005210:	6003      	str	r3, [r0, #0]
 8005212:	e7d6      	b.n	80051c2 <_free_r+0x26>
 8005214:	6825      	ldr	r5, [r4, #0]
 8005216:	1961      	adds	r1, r4, r5
 8005218:	428b      	cmp	r3, r1
 800521a:	bf04      	itt	eq
 800521c:	6819      	ldreq	r1, [r3, #0]
 800521e:	685b      	ldreq	r3, [r3, #4]
 8005220:	6063      	str	r3, [r4, #4]
 8005222:	bf04      	itt	eq
 8005224:	1949      	addeq	r1, r1, r5
 8005226:	6021      	streq	r1, [r4, #0]
 8005228:	6054      	str	r4, [r2, #4]
 800522a:	e7ca      	b.n	80051c2 <_free_r+0x26>
 800522c:	b003      	add	sp, #12
 800522e:	bd30      	pop	{r4, r5, pc}
 8005230:	20000354 	.word	0x20000354

08005234 <sbrk_aligned>:
 8005234:	b570      	push	{r4, r5, r6, lr}
 8005236:	4e0e      	ldr	r6, [pc, #56]	; (8005270 <sbrk_aligned+0x3c>)
 8005238:	460c      	mov	r4, r1
 800523a:	6831      	ldr	r1, [r6, #0]
 800523c:	4605      	mov	r5, r0
 800523e:	b911      	cbnz	r1, 8005246 <sbrk_aligned+0x12>
 8005240:	f000 f9e8 	bl	8005614 <_sbrk_r>
 8005244:	6030      	str	r0, [r6, #0]
 8005246:	4621      	mov	r1, r4
 8005248:	4628      	mov	r0, r5
 800524a:	f000 f9e3 	bl	8005614 <_sbrk_r>
 800524e:	1c43      	adds	r3, r0, #1
 8005250:	d00a      	beq.n	8005268 <sbrk_aligned+0x34>
 8005252:	1cc4      	adds	r4, r0, #3
 8005254:	f024 0403 	bic.w	r4, r4, #3
 8005258:	42a0      	cmp	r0, r4
 800525a:	d007      	beq.n	800526c <sbrk_aligned+0x38>
 800525c:	1a21      	subs	r1, r4, r0
 800525e:	4628      	mov	r0, r5
 8005260:	f000 f9d8 	bl	8005614 <_sbrk_r>
 8005264:	3001      	adds	r0, #1
 8005266:	d101      	bne.n	800526c <sbrk_aligned+0x38>
 8005268:	f04f 34ff 	mov.w	r4, #4294967295
 800526c:	4620      	mov	r0, r4
 800526e:	bd70      	pop	{r4, r5, r6, pc}
 8005270:	20000358 	.word	0x20000358

08005274 <_malloc_r>:
 8005274:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005278:	1ccd      	adds	r5, r1, #3
 800527a:	f025 0503 	bic.w	r5, r5, #3
 800527e:	3508      	adds	r5, #8
 8005280:	2d0c      	cmp	r5, #12
 8005282:	bf38      	it	cc
 8005284:	250c      	movcc	r5, #12
 8005286:	2d00      	cmp	r5, #0
 8005288:	4607      	mov	r7, r0
 800528a:	db01      	blt.n	8005290 <_malloc_r+0x1c>
 800528c:	42a9      	cmp	r1, r5
 800528e:	d905      	bls.n	800529c <_malloc_r+0x28>
 8005290:	230c      	movs	r3, #12
 8005292:	603b      	str	r3, [r7, #0]
 8005294:	2600      	movs	r6, #0
 8005296:	4630      	mov	r0, r6
 8005298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800529c:	4e2e      	ldr	r6, [pc, #184]	; (8005358 <_malloc_r+0xe4>)
 800529e:	f000 fa25 	bl	80056ec <__malloc_lock>
 80052a2:	6833      	ldr	r3, [r6, #0]
 80052a4:	461c      	mov	r4, r3
 80052a6:	bb34      	cbnz	r4, 80052f6 <_malloc_r+0x82>
 80052a8:	4629      	mov	r1, r5
 80052aa:	4638      	mov	r0, r7
 80052ac:	f7ff ffc2 	bl	8005234 <sbrk_aligned>
 80052b0:	1c43      	adds	r3, r0, #1
 80052b2:	4604      	mov	r4, r0
 80052b4:	d14d      	bne.n	8005352 <_malloc_r+0xde>
 80052b6:	6834      	ldr	r4, [r6, #0]
 80052b8:	4626      	mov	r6, r4
 80052ba:	2e00      	cmp	r6, #0
 80052bc:	d140      	bne.n	8005340 <_malloc_r+0xcc>
 80052be:	6823      	ldr	r3, [r4, #0]
 80052c0:	4631      	mov	r1, r6
 80052c2:	4638      	mov	r0, r7
 80052c4:	eb04 0803 	add.w	r8, r4, r3
 80052c8:	f000 f9a4 	bl	8005614 <_sbrk_r>
 80052cc:	4580      	cmp	r8, r0
 80052ce:	d13a      	bne.n	8005346 <_malloc_r+0xd2>
 80052d0:	6821      	ldr	r1, [r4, #0]
 80052d2:	3503      	adds	r5, #3
 80052d4:	1a6d      	subs	r5, r5, r1
 80052d6:	f025 0503 	bic.w	r5, r5, #3
 80052da:	3508      	adds	r5, #8
 80052dc:	2d0c      	cmp	r5, #12
 80052de:	bf38      	it	cc
 80052e0:	250c      	movcc	r5, #12
 80052e2:	4629      	mov	r1, r5
 80052e4:	4638      	mov	r0, r7
 80052e6:	f7ff ffa5 	bl	8005234 <sbrk_aligned>
 80052ea:	3001      	adds	r0, #1
 80052ec:	d02b      	beq.n	8005346 <_malloc_r+0xd2>
 80052ee:	6823      	ldr	r3, [r4, #0]
 80052f0:	442b      	add	r3, r5
 80052f2:	6023      	str	r3, [r4, #0]
 80052f4:	e00e      	b.n	8005314 <_malloc_r+0xa0>
 80052f6:	6822      	ldr	r2, [r4, #0]
 80052f8:	1b52      	subs	r2, r2, r5
 80052fa:	d41e      	bmi.n	800533a <_malloc_r+0xc6>
 80052fc:	2a0b      	cmp	r2, #11
 80052fe:	d916      	bls.n	800532e <_malloc_r+0xba>
 8005300:	1961      	adds	r1, r4, r5
 8005302:	42a3      	cmp	r3, r4
 8005304:	6025      	str	r5, [r4, #0]
 8005306:	bf18      	it	ne
 8005308:	6059      	strne	r1, [r3, #4]
 800530a:	6863      	ldr	r3, [r4, #4]
 800530c:	bf08      	it	eq
 800530e:	6031      	streq	r1, [r6, #0]
 8005310:	5162      	str	r2, [r4, r5]
 8005312:	604b      	str	r3, [r1, #4]
 8005314:	4638      	mov	r0, r7
 8005316:	f104 060b 	add.w	r6, r4, #11
 800531a:	f000 f9ed 	bl	80056f8 <__malloc_unlock>
 800531e:	f026 0607 	bic.w	r6, r6, #7
 8005322:	1d23      	adds	r3, r4, #4
 8005324:	1af2      	subs	r2, r6, r3
 8005326:	d0b6      	beq.n	8005296 <_malloc_r+0x22>
 8005328:	1b9b      	subs	r3, r3, r6
 800532a:	50a3      	str	r3, [r4, r2]
 800532c:	e7b3      	b.n	8005296 <_malloc_r+0x22>
 800532e:	6862      	ldr	r2, [r4, #4]
 8005330:	42a3      	cmp	r3, r4
 8005332:	bf0c      	ite	eq
 8005334:	6032      	streq	r2, [r6, #0]
 8005336:	605a      	strne	r2, [r3, #4]
 8005338:	e7ec      	b.n	8005314 <_malloc_r+0xa0>
 800533a:	4623      	mov	r3, r4
 800533c:	6864      	ldr	r4, [r4, #4]
 800533e:	e7b2      	b.n	80052a6 <_malloc_r+0x32>
 8005340:	4634      	mov	r4, r6
 8005342:	6876      	ldr	r6, [r6, #4]
 8005344:	e7b9      	b.n	80052ba <_malloc_r+0x46>
 8005346:	230c      	movs	r3, #12
 8005348:	603b      	str	r3, [r7, #0]
 800534a:	4638      	mov	r0, r7
 800534c:	f000 f9d4 	bl	80056f8 <__malloc_unlock>
 8005350:	e7a1      	b.n	8005296 <_malloc_r+0x22>
 8005352:	6025      	str	r5, [r4, #0]
 8005354:	e7de      	b.n	8005314 <_malloc_r+0xa0>
 8005356:	bf00      	nop
 8005358:	20000354 	.word	0x20000354

0800535c <__ssputs_r>:
 800535c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005360:	688e      	ldr	r6, [r1, #8]
 8005362:	429e      	cmp	r6, r3
 8005364:	4682      	mov	sl, r0
 8005366:	460c      	mov	r4, r1
 8005368:	4690      	mov	r8, r2
 800536a:	461f      	mov	r7, r3
 800536c:	d838      	bhi.n	80053e0 <__ssputs_r+0x84>
 800536e:	898a      	ldrh	r2, [r1, #12]
 8005370:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005374:	d032      	beq.n	80053dc <__ssputs_r+0x80>
 8005376:	6825      	ldr	r5, [r4, #0]
 8005378:	6909      	ldr	r1, [r1, #16]
 800537a:	eba5 0901 	sub.w	r9, r5, r1
 800537e:	6965      	ldr	r5, [r4, #20]
 8005380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005384:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005388:	3301      	adds	r3, #1
 800538a:	444b      	add	r3, r9
 800538c:	106d      	asrs	r5, r5, #1
 800538e:	429d      	cmp	r5, r3
 8005390:	bf38      	it	cc
 8005392:	461d      	movcc	r5, r3
 8005394:	0553      	lsls	r3, r2, #21
 8005396:	d531      	bpl.n	80053fc <__ssputs_r+0xa0>
 8005398:	4629      	mov	r1, r5
 800539a:	f7ff ff6b 	bl	8005274 <_malloc_r>
 800539e:	4606      	mov	r6, r0
 80053a0:	b950      	cbnz	r0, 80053b8 <__ssputs_r+0x5c>
 80053a2:	230c      	movs	r3, #12
 80053a4:	f8ca 3000 	str.w	r3, [sl]
 80053a8:	89a3      	ldrh	r3, [r4, #12]
 80053aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	f04f 30ff 	mov.w	r0, #4294967295
 80053b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b8:	6921      	ldr	r1, [r4, #16]
 80053ba:	464a      	mov	r2, r9
 80053bc:	f7ff fb46 	bl	8004a4c <memcpy>
 80053c0:	89a3      	ldrh	r3, [r4, #12]
 80053c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80053c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ca:	81a3      	strh	r3, [r4, #12]
 80053cc:	6126      	str	r6, [r4, #16]
 80053ce:	6165      	str	r5, [r4, #20]
 80053d0:	444e      	add	r6, r9
 80053d2:	eba5 0509 	sub.w	r5, r5, r9
 80053d6:	6026      	str	r6, [r4, #0]
 80053d8:	60a5      	str	r5, [r4, #8]
 80053da:	463e      	mov	r6, r7
 80053dc:	42be      	cmp	r6, r7
 80053de:	d900      	bls.n	80053e2 <__ssputs_r+0x86>
 80053e0:	463e      	mov	r6, r7
 80053e2:	6820      	ldr	r0, [r4, #0]
 80053e4:	4632      	mov	r2, r6
 80053e6:	4641      	mov	r1, r8
 80053e8:	f000 f966 	bl	80056b8 <memmove>
 80053ec:	68a3      	ldr	r3, [r4, #8]
 80053ee:	1b9b      	subs	r3, r3, r6
 80053f0:	60a3      	str	r3, [r4, #8]
 80053f2:	6823      	ldr	r3, [r4, #0]
 80053f4:	4433      	add	r3, r6
 80053f6:	6023      	str	r3, [r4, #0]
 80053f8:	2000      	movs	r0, #0
 80053fa:	e7db      	b.n	80053b4 <__ssputs_r+0x58>
 80053fc:	462a      	mov	r2, r5
 80053fe:	f000 f981 	bl	8005704 <_realloc_r>
 8005402:	4606      	mov	r6, r0
 8005404:	2800      	cmp	r0, #0
 8005406:	d1e1      	bne.n	80053cc <__ssputs_r+0x70>
 8005408:	6921      	ldr	r1, [r4, #16]
 800540a:	4650      	mov	r0, sl
 800540c:	f7ff fec6 	bl	800519c <_free_r>
 8005410:	e7c7      	b.n	80053a2 <__ssputs_r+0x46>
	...

08005414 <_svfiprintf_r>:
 8005414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005418:	4698      	mov	r8, r3
 800541a:	898b      	ldrh	r3, [r1, #12]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	b09d      	sub	sp, #116	; 0x74
 8005420:	4607      	mov	r7, r0
 8005422:	460d      	mov	r5, r1
 8005424:	4614      	mov	r4, r2
 8005426:	d50e      	bpl.n	8005446 <_svfiprintf_r+0x32>
 8005428:	690b      	ldr	r3, [r1, #16]
 800542a:	b963      	cbnz	r3, 8005446 <_svfiprintf_r+0x32>
 800542c:	2140      	movs	r1, #64	; 0x40
 800542e:	f7ff ff21 	bl	8005274 <_malloc_r>
 8005432:	6028      	str	r0, [r5, #0]
 8005434:	6128      	str	r0, [r5, #16]
 8005436:	b920      	cbnz	r0, 8005442 <_svfiprintf_r+0x2e>
 8005438:	230c      	movs	r3, #12
 800543a:	603b      	str	r3, [r7, #0]
 800543c:	f04f 30ff 	mov.w	r0, #4294967295
 8005440:	e0d1      	b.n	80055e6 <_svfiprintf_r+0x1d2>
 8005442:	2340      	movs	r3, #64	; 0x40
 8005444:	616b      	str	r3, [r5, #20]
 8005446:	2300      	movs	r3, #0
 8005448:	9309      	str	r3, [sp, #36]	; 0x24
 800544a:	2320      	movs	r3, #32
 800544c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005450:	f8cd 800c 	str.w	r8, [sp, #12]
 8005454:	2330      	movs	r3, #48	; 0x30
 8005456:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8005600 <_svfiprintf_r+0x1ec>
 800545a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800545e:	f04f 0901 	mov.w	r9, #1
 8005462:	4623      	mov	r3, r4
 8005464:	469a      	mov	sl, r3
 8005466:	f813 2b01 	ldrb.w	r2, [r3], #1
 800546a:	b10a      	cbz	r2, 8005470 <_svfiprintf_r+0x5c>
 800546c:	2a25      	cmp	r2, #37	; 0x25
 800546e:	d1f9      	bne.n	8005464 <_svfiprintf_r+0x50>
 8005470:	ebba 0b04 	subs.w	fp, sl, r4
 8005474:	d00b      	beq.n	800548e <_svfiprintf_r+0x7a>
 8005476:	465b      	mov	r3, fp
 8005478:	4622      	mov	r2, r4
 800547a:	4629      	mov	r1, r5
 800547c:	4638      	mov	r0, r7
 800547e:	f7ff ff6d 	bl	800535c <__ssputs_r>
 8005482:	3001      	adds	r0, #1
 8005484:	f000 80aa 	beq.w	80055dc <_svfiprintf_r+0x1c8>
 8005488:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800548a:	445a      	add	r2, fp
 800548c:	9209      	str	r2, [sp, #36]	; 0x24
 800548e:	f89a 3000 	ldrb.w	r3, [sl]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80a2 	beq.w	80055dc <_svfiprintf_r+0x1c8>
 8005498:	2300      	movs	r3, #0
 800549a:	f04f 32ff 	mov.w	r2, #4294967295
 800549e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054a2:	f10a 0a01 	add.w	sl, sl, #1
 80054a6:	9304      	str	r3, [sp, #16]
 80054a8:	9307      	str	r3, [sp, #28]
 80054aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80054ae:	931a      	str	r3, [sp, #104]	; 0x68
 80054b0:	4654      	mov	r4, sl
 80054b2:	2205      	movs	r2, #5
 80054b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80054b8:	4851      	ldr	r0, [pc, #324]	; (8005600 <_svfiprintf_r+0x1ec>)
 80054ba:	f7fa fe91 	bl	80001e0 <memchr>
 80054be:	9a04      	ldr	r2, [sp, #16]
 80054c0:	b9d8      	cbnz	r0, 80054fa <_svfiprintf_r+0xe6>
 80054c2:	06d0      	lsls	r0, r2, #27
 80054c4:	bf44      	itt	mi
 80054c6:	2320      	movmi	r3, #32
 80054c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054cc:	0711      	lsls	r1, r2, #28
 80054ce:	bf44      	itt	mi
 80054d0:	232b      	movmi	r3, #43	; 0x2b
 80054d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80054d6:	f89a 3000 	ldrb.w	r3, [sl]
 80054da:	2b2a      	cmp	r3, #42	; 0x2a
 80054dc:	d015      	beq.n	800550a <_svfiprintf_r+0xf6>
 80054de:	9a07      	ldr	r2, [sp, #28]
 80054e0:	4654      	mov	r4, sl
 80054e2:	2000      	movs	r0, #0
 80054e4:	f04f 0c0a 	mov.w	ip, #10
 80054e8:	4621      	mov	r1, r4
 80054ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 80054ee:	3b30      	subs	r3, #48	; 0x30
 80054f0:	2b09      	cmp	r3, #9
 80054f2:	d94e      	bls.n	8005592 <_svfiprintf_r+0x17e>
 80054f4:	b1b0      	cbz	r0, 8005524 <_svfiprintf_r+0x110>
 80054f6:	9207      	str	r2, [sp, #28]
 80054f8:	e014      	b.n	8005524 <_svfiprintf_r+0x110>
 80054fa:	eba0 0308 	sub.w	r3, r0, r8
 80054fe:	fa09 f303 	lsl.w	r3, r9, r3
 8005502:	4313      	orrs	r3, r2
 8005504:	9304      	str	r3, [sp, #16]
 8005506:	46a2      	mov	sl, r4
 8005508:	e7d2      	b.n	80054b0 <_svfiprintf_r+0x9c>
 800550a:	9b03      	ldr	r3, [sp, #12]
 800550c:	1d19      	adds	r1, r3, #4
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	9103      	str	r1, [sp, #12]
 8005512:	2b00      	cmp	r3, #0
 8005514:	bfbb      	ittet	lt
 8005516:	425b      	neglt	r3, r3
 8005518:	f042 0202 	orrlt.w	r2, r2, #2
 800551c:	9307      	strge	r3, [sp, #28]
 800551e:	9307      	strlt	r3, [sp, #28]
 8005520:	bfb8      	it	lt
 8005522:	9204      	strlt	r2, [sp, #16]
 8005524:	7823      	ldrb	r3, [r4, #0]
 8005526:	2b2e      	cmp	r3, #46	; 0x2e
 8005528:	d10c      	bne.n	8005544 <_svfiprintf_r+0x130>
 800552a:	7863      	ldrb	r3, [r4, #1]
 800552c:	2b2a      	cmp	r3, #42	; 0x2a
 800552e:	d135      	bne.n	800559c <_svfiprintf_r+0x188>
 8005530:	9b03      	ldr	r3, [sp, #12]
 8005532:	1d1a      	adds	r2, r3, #4
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	9203      	str	r2, [sp, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	bfb8      	it	lt
 800553c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005540:	3402      	adds	r4, #2
 8005542:	9305      	str	r3, [sp, #20]
 8005544:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005610 <_svfiprintf_r+0x1fc>
 8005548:	7821      	ldrb	r1, [r4, #0]
 800554a:	2203      	movs	r2, #3
 800554c:	4650      	mov	r0, sl
 800554e:	f7fa fe47 	bl	80001e0 <memchr>
 8005552:	b140      	cbz	r0, 8005566 <_svfiprintf_r+0x152>
 8005554:	2340      	movs	r3, #64	; 0x40
 8005556:	eba0 000a 	sub.w	r0, r0, sl
 800555a:	fa03 f000 	lsl.w	r0, r3, r0
 800555e:	9b04      	ldr	r3, [sp, #16]
 8005560:	4303      	orrs	r3, r0
 8005562:	3401      	adds	r4, #1
 8005564:	9304      	str	r3, [sp, #16]
 8005566:	f814 1b01 	ldrb.w	r1, [r4], #1
 800556a:	4826      	ldr	r0, [pc, #152]	; (8005604 <_svfiprintf_r+0x1f0>)
 800556c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005570:	2206      	movs	r2, #6
 8005572:	f7fa fe35 	bl	80001e0 <memchr>
 8005576:	2800      	cmp	r0, #0
 8005578:	d038      	beq.n	80055ec <_svfiprintf_r+0x1d8>
 800557a:	4b23      	ldr	r3, [pc, #140]	; (8005608 <_svfiprintf_r+0x1f4>)
 800557c:	bb1b      	cbnz	r3, 80055c6 <_svfiprintf_r+0x1b2>
 800557e:	9b03      	ldr	r3, [sp, #12]
 8005580:	3307      	adds	r3, #7
 8005582:	f023 0307 	bic.w	r3, r3, #7
 8005586:	3308      	adds	r3, #8
 8005588:	9303      	str	r3, [sp, #12]
 800558a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800558c:	4433      	add	r3, r6
 800558e:	9309      	str	r3, [sp, #36]	; 0x24
 8005590:	e767      	b.n	8005462 <_svfiprintf_r+0x4e>
 8005592:	fb0c 3202 	mla	r2, ip, r2, r3
 8005596:	460c      	mov	r4, r1
 8005598:	2001      	movs	r0, #1
 800559a:	e7a5      	b.n	80054e8 <_svfiprintf_r+0xd4>
 800559c:	2300      	movs	r3, #0
 800559e:	3401      	adds	r4, #1
 80055a0:	9305      	str	r3, [sp, #20]
 80055a2:	4619      	mov	r1, r3
 80055a4:	f04f 0c0a 	mov.w	ip, #10
 80055a8:	4620      	mov	r0, r4
 80055aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055ae:	3a30      	subs	r2, #48	; 0x30
 80055b0:	2a09      	cmp	r2, #9
 80055b2:	d903      	bls.n	80055bc <_svfiprintf_r+0x1a8>
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d0c5      	beq.n	8005544 <_svfiprintf_r+0x130>
 80055b8:	9105      	str	r1, [sp, #20]
 80055ba:	e7c3      	b.n	8005544 <_svfiprintf_r+0x130>
 80055bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80055c0:	4604      	mov	r4, r0
 80055c2:	2301      	movs	r3, #1
 80055c4:	e7f0      	b.n	80055a8 <_svfiprintf_r+0x194>
 80055c6:	ab03      	add	r3, sp, #12
 80055c8:	9300      	str	r3, [sp, #0]
 80055ca:	462a      	mov	r2, r5
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <_svfiprintf_r+0x1f8>)
 80055ce:	a904      	add	r1, sp, #16
 80055d0:	4638      	mov	r0, r7
 80055d2:	f7fd ff9d 	bl	8003510 <_printf_float>
 80055d6:	1c42      	adds	r2, r0, #1
 80055d8:	4606      	mov	r6, r0
 80055da:	d1d6      	bne.n	800558a <_svfiprintf_r+0x176>
 80055dc:	89ab      	ldrh	r3, [r5, #12]
 80055de:	065b      	lsls	r3, r3, #25
 80055e0:	f53f af2c 	bmi.w	800543c <_svfiprintf_r+0x28>
 80055e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80055e6:	b01d      	add	sp, #116	; 0x74
 80055e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055ec:	ab03      	add	r3, sp, #12
 80055ee:	9300      	str	r3, [sp, #0]
 80055f0:	462a      	mov	r2, r5
 80055f2:	4b06      	ldr	r3, [pc, #24]	; (800560c <_svfiprintf_r+0x1f8>)
 80055f4:	a904      	add	r1, sp, #16
 80055f6:	4638      	mov	r0, r7
 80055f8:	f7fe fa2e 	bl	8003a58 <_printf_i>
 80055fc:	e7eb      	b.n	80055d6 <_svfiprintf_r+0x1c2>
 80055fe:	bf00      	nop
 8005600:	080066d4 	.word	0x080066d4
 8005604:	080066de 	.word	0x080066de
 8005608:	08003511 	.word	0x08003511
 800560c:	0800535d 	.word	0x0800535d
 8005610:	080066da 	.word	0x080066da

08005614 <_sbrk_r>:
 8005614:	b538      	push	{r3, r4, r5, lr}
 8005616:	4d06      	ldr	r5, [pc, #24]	; (8005630 <_sbrk_r+0x1c>)
 8005618:	2300      	movs	r3, #0
 800561a:	4604      	mov	r4, r0
 800561c:	4608      	mov	r0, r1
 800561e:	602b      	str	r3, [r5, #0]
 8005620:	f7fb ff1a 	bl	8001458 <_sbrk>
 8005624:	1c43      	adds	r3, r0, #1
 8005626:	d102      	bne.n	800562e <_sbrk_r+0x1a>
 8005628:	682b      	ldr	r3, [r5, #0]
 800562a:	b103      	cbz	r3, 800562e <_sbrk_r+0x1a>
 800562c:	6023      	str	r3, [r4, #0]
 800562e:	bd38      	pop	{r3, r4, r5, pc}
 8005630:	2000035c 	.word	0x2000035c

08005634 <__assert_func>:
 8005634:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005636:	4614      	mov	r4, r2
 8005638:	461a      	mov	r2, r3
 800563a:	4b09      	ldr	r3, [pc, #36]	; (8005660 <__assert_func+0x2c>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4605      	mov	r5, r0
 8005640:	68d8      	ldr	r0, [r3, #12]
 8005642:	b14c      	cbz	r4, 8005658 <__assert_func+0x24>
 8005644:	4b07      	ldr	r3, [pc, #28]	; (8005664 <__assert_func+0x30>)
 8005646:	9100      	str	r1, [sp, #0]
 8005648:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800564c:	4906      	ldr	r1, [pc, #24]	; (8005668 <__assert_func+0x34>)
 800564e:	462b      	mov	r3, r5
 8005650:	f000 f80e 	bl	8005670 <fiprintf>
 8005654:	f000 faac 	bl	8005bb0 <abort>
 8005658:	4b04      	ldr	r3, [pc, #16]	; (800566c <__assert_func+0x38>)
 800565a:	461c      	mov	r4, r3
 800565c:	e7f3      	b.n	8005646 <__assert_func+0x12>
 800565e:	bf00      	nop
 8005660:	2000000c 	.word	0x2000000c
 8005664:	080066e5 	.word	0x080066e5
 8005668:	080066f2 	.word	0x080066f2
 800566c:	08006387 	.word	0x08006387

08005670 <fiprintf>:
 8005670:	b40e      	push	{r1, r2, r3}
 8005672:	b503      	push	{r0, r1, lr}
 8005674:	4601      	mov	r1, r0
 8005676:	ab03      	add	r3, sp, #12
 8005678:	4805      	ldr	r0, [pc, #20]	; (8005690 <fiprintf+0x20>)
 800567a:	f853 2b04 	ldr.w	r2, [r3], #4
 800567e:	6800      	ldr	r0, [r0, #0]
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	f000 f897 	bl	80057b4 <_vfiprintf_r>
 8005686:	b002      	add	sp, #8
 8005688:	f85d eb04 	ldr.w	lr, [sp], #4
 800568c:	b003      	add	sp, #12
 800568e:	4770      	bx	lr
 8005690:	2000000c 	.word	0x2000000c

08005694 <__ascii_mbtowc>:
 8005694:	b082      	sub	sp, #8
 8005696:	b901      	cbnz	r1, 800569a <__ascii_mbtowc+0x6>
 8005698:	a901      	add	r1, sp, #4
 800569a:	b142      	cbz	r2, 80056ae <__ascii_mbtowc+0x1a>
 800569c:	b14b      	cbz	r3, 80056b2 <__ascii_mbtowc+0x1e>
 800569e:	7813      	ldrb	r3, [r2, #0]
 80056a0:	600b      	str	r3, [r1, #0]
 80056a2:	7812      	ldrb	r2, [r2, #0]
 80056a4:	1e10      	subs	r0, r2, #0
 80056a6:	bf18      	it	ne
 80056a8:	2001      	movne	r0, #1
 80056aa:	b002      	add	sp, #8
 80056ac:	4770      	bx	lr
 80056ae:	4610      	mov	r0, r2
 80056b0:	e7fb      	b.n	80056aa <__ascii_mbtowc+0x16>
 80056b2:	f06f 0001 	mvn.w	r0, #1
 80056b6:	e7f8      	b.n	80056aa <__ascii_mbtowc+0x16>

080056b8 <memmove>:
 80056b8:	4288      	cmp	r0, r1
 80056ba:	b510      	push	{r4, lr}
 80056bc:	eb01 0402 	add.w	r4, r1, r2
 80056c0:	d902      	bls.n	80056c8 <memmove+0x10>
 80056c2:	4284      	cmp	r4, r0
 80056c4:	4623      	mov	r3, r4
 80056c6:	d807      	bhi.n	80056d8 <memmove+0x20>
 80056c8:	1e43      	subs	r3, r0, #1
 80056ca:	42a1      	cmp	r1, r4
 80056cc:	d008      	beq.n	80056e0 <memmove+0x28>
 80056ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 80056d2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80056d6:	e7f8      	b.n	80056ca <memmove+0x12>
 80056d8:	4402      	add	r2, r0
 80056da:	4601      	mov	r1, r0
 80056dc:	428a      	cmp	r2, r1
 80056de:	d100      	bne.n	80056e2 <memmove+0x2a>
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80056e6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80056ea:	e7f7      	b.n	80056dc <memmove+0x24>

080056ec <__malloc_lock>:
 80056ec:	4801      	ldr	r0, [pc, #4]	; (80056f4 <__malloc_lock+0x8>)
 80056ee:	f000 bc1f 	b.w	8005f30 <__retarget_lock_acquire_recursive>
 80056f2:	bf00      	nop
 80056f4:	20000360 	.word	0x20000360

080056f8 <__malloc_unlock>:
 80056f8:	4801      	ldr	r0, [pc, #4]	; (8005700 <__malloc_unlock+0x8>)
 80056fa:	f000 bc1a 	b.w	8005f32 <__retarget_lock_release_recursive>
 80056fe:	bf00      	nop
 8005700:	20000360 	.word	0x20000360

08005704 <_realloc_r>:
 8005704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005708:	4680      	mov	r8, r0
 800570a:	4614      	mov	r4, r2
 800570c:	460e      	mov	r6, r1
 800570e:	b921      	cbnz	r1, 800571a <_realloc_r+0x16>
 8005710:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005714:	4611      	mov	r1, r2
 8005716:	f7ff bdad 	b.w	8005274 <_malloc_r>
 800571a:	b92a      	cbnz	r2, 8005728 <_realloc_r+0x24>
 800571c:	f7ff fd3e 	bl	800519c <_free_r>
 8005720:	4625      	mov	r5, r4
 8005722:	4628      	mov	r0, r5
 8005724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005728:	f000 fc6a 	bl	8006000 <_malloc_usable_size_r>
 800572c:	4284      	cmp	r4, r0
 800572e:	4607      	mov	r7, r0
 8005730:	d802      	bhi.n	8005738 <_realloc_r+0x34>
 8005732:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005736:	d812      	bhi.n	800575e <_realloc_r+0x5a>
 8005738:	4621      	mov	r1, r4
 800573a:	4640      	mov	r0, r8
 800573c:	f7ff fd9a 	bl	8005274 <_malloc_r>
 8005740:	4605      	mov	r5, r0
 8005742:	2800      	cmp	r0, #0
 8005744:	d0ed      	beq.n	8005722 <_realloc_r+0x1e>
 8005746:	42bc      	cmp	r4, r7
 8005748:	4622      	mov	r2, r4
 800574a:	4631      	mov	r1, r6
 800574c:	bf28      	it	cs
 800574e:	463a      	movcs	r2, r7
 8005750:	f7ff f97c 	bl	8004a4c <memcpy>
 8005754:	4631      	mov	r1, r6
 8005756:	4640      	mov	r0, r8
 8005758:	f7ff fd20 	bl	800519c <_free_r>
 800575c:	e7e1      	b.n	8005722 <_realloc_r+0x1e>
 800575e:	4635      	mov	r5, r6
 8005760:	e7df      	b.n	8005722 <_realloc_r+0x1e>

08005762 <__sfputc_r>:
 8005762:	6893      	ldr	r3, [r2, #8]
 8005764:	3b01      	subs	r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	b410      	push	{r4}
 800576a:	6093      	str	r3, [r2, #8]
 800576c:	da08      	bge.n	8005780 <__sfputc_r+0x1e>
 800576e:	6994      	ldr	r4, [r2, #24]
 8005770:	42a3      	cmp	r3, r4
 8005772:	db01      	blt.n	8005778 <__sfputc_r+0x16>
 8005774:	290a      	cmp	r1, #10
 8005776:	d103      	bne.n	8005780 <__sfputc_r+0x1e>
 8005778:	f85d 4b04 	ldr.w	r4, [sp], #4
 800577c:	f000 b94a 	b.w	8005a14 <__swbuf_r>
 8005780:	6813      	ldr	r3, [r2, #0]
 8005782:	1c58      	adds	r0, r3, #1
 8005784:	6010      	str	r0, [r2, #0]
 8005786:	7019      	strb	r1, [r3, #0]
 8005788:	4608      	mov	r0, r1
 800578a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800578e:	4770      	bx	lr

08005790 <__sfputs_r>:
 8005790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005792:	4606      	mov	r6, r0
 8005794:	460f      	mov	r7, r1
 8005796:	4614      	mov	r4, r2
 8005798:	18d5      	adds	r5, r2, r3
 800579a:	42ac      	cmp	r4, r5
 800579c:	d101      	bne.n	80057a2 <__sfputs_r+0x12>
 800579e:	2000      	movs	r0, #0
 80057a0:	e007      	b.n	80057b2 <__sfputs_r+0x22>
 80057a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057a6:	463a      	mov	r2, r7
 80057a8:	4630      	mov	r0, r6
 80057aa:	f7ff ffda 	bl	8005762 <__sfputc_r>
 80057ae:	1c43      	adds	r3, r0, #1
 80057b0:	d1f3      	bne.n	800579a <__sfputs_r+0xa>
 80057b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080057b4 <_vfiprintf_r>:
 80057b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057b8:	460d      	mov	r5, r1
 80057ba:	b09d      	sub	sp, #116	; 0x74
 80057bc:	4614      	mov	r4, r2
 80057be:	4698      	mov	r8, r3
 80057c0:	4606      	mov	r6, r0
 80057c2:	b118      	cbz	r0, 80057cc <_vfiprintf_r+0x18>
 80057c4:	6983      	ldr	r3, [r0, #24]
 80057c6:	b90b      	cbnz	r3, 80057cc <_vfiprintf_r+0x18>
 80057c8:	f000 fb14 	bl	8005df4 <__sinit>
 80057cc:	4b89      	ldr	r3, [pc, #548]	; (80059f4 <_vfiprintf_r+0x240>)
 80057ce:	429d      	cmp	r5, r3
 80057d0:	d11b      	bne.n	800580a <_vfiprintf_r+0x56>
 80057d2:	6875      	ldr	r5, [r6, #4]
 80057d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057d6:	07d9      	lsls	r1, r3, #31
 80057d8:	d405      	bmi.n	80057e6 <_vfiprintf_r+0x32>
 80057da:	89ab      	ldrh	r3, [r5, #12]
 80057dc:	059a      	lsls	r2, r3, #22
 80057de:	d402      	bmi.n	80057e6 <_vfiprintf_r+0x32>
 80057e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80057e2:	f000 fba5 	bl	8005f30 <__retarget_lock_acquire_recursive>
 80057e6:	89ab      	ldrh	r3, [r5, #12]
 80057e8:	071b      	lsls	r3, r3, #28
 80057ea:	d501      	bpl.n	80057f0 <_vfiprintf_r+0x3c>
 80057ec:	692b      	ldr	r3, [r5, #16]
 80057ee:	b9eb      	cbnz	r3, 800582c <_vfiprintf_r+0x78>
 80057f0:	4629      	mov	r1, r5
 80057f2:	4630      	mov	r0, r6
 80057f4:	f000 f96e 	bl	8005ad4 <__swsetup_r>
 80057f8:	b1c0      	cbz	r0, 800582c <_vfiprintf_r+0x78>
 80057fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80057fc:	07dc      	lsls	r4, r3, #31
 80057fe:	d50e      	bpl.n	800581e <_vfiprintf_r+0x6a>
 8005800:	f04f 30ff 	mov.w	r0, #4294967295
 8005804:	b01d      	add	sp, #116	; 0x74
 8005806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580a:	4b7b      	ldr	r3, [pc, #492]	; (80059f8 <_vfiprintf_r+0x244>)
 800580c:	429d      	cmp	r5, r3
 800580e:	d101      	bne.n	8005814 <_vfiprintf_r+0x60>
 8005810:	68b5      	ldr	r5, [r6, #8]
 8005812:	e7df      	b.n	80057d4 <_vfiprintf_r+0x20>
 8005814:	4b79      	ldr	r3, [pc, #484]	; (80059fc <_vfiprintf_r+0x248>)
 8005816:	429d      	cmp	r5, r3
 8005818:	bf08      	it	eq
 800581a:	68f5      	ldreq	r5, [r6, #12]
 800581c:	e7da      	b.n	80057d4 <_vfiprintf_r+0x20>
 800581e:	89ab      	ldrh	r3, [r5, #12]
 8005820:	0598      	lsls	r0, r3, #22
 8005822:	d4ed      	bmi.n	8005800 <_vfiprintf_r+0x4c>
 8005824:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005826:	f000 fb84 	bl	8005f32 <__retarget_lock_release_recursive>
 800582a:	e7e9      	b.n	8005800 <_vfiprintf_r+0x4c>
 800582c:	2300      	movs	r3, #0
 800582e:	9309      	str	r3, [sp, #36]	; 0x24
 8005830:	2320      	movs	r3, #32
 8005832:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005836:	f8cd 800c 	str.w	r8, [sp, #12]
 800583a:	2330      	movs	r3, #48	; 0x30
 800583c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005a00 <_vfiprintf_r+0x24c>
 8005840:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005844:	f04f 0901 	mov.w	r9, #1
 8005848:	4623      	mov	r3, r4
 800584a:	469a      	mov	sl, r3
 800584c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005850:	b10a      	cbz	r2, 8005856 <_vfiprintf_r+0xa2>
 8005852:	2a25      	cmp	r2, #37	; 0x25
 8005854:	d1f9      	bne.n	800584a <_vfiprintf_r+0x96>
 8005856:	ebba 0b04 	subs.w	fp, sl, r4
 800585a:	d00b      	beq.n	8005874 <_vfiprintf_r+0xc0>
 800585c:	465b      	mov	r3, fp
 800585e:	4622      	mov	r2, r4
 8005860:	4629      	mov	r1, r5
 8005862:	4630      	mov	r0, r6
 8005864:	f7ff ff94 	bl	8005790 <__sfputs_r>
 8005868:	3001      	adds	r0, #1
 800586a:	f000 80aa 	beq.w	80059c2 <_vfiprintf_r+0x20e>
 800586e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005870:	445a      	add	r2, fp
 8005872:	9209      	str	r2, [sp, #36]	; 0x24
 8005874:	f89a 3000 	ldrb.w	r3, [sl]
 8005878:	2b00      	cmp	r3, #0
 800587a:	f000 80a2 	beq.w	80059c2 <_vfiprintf_r+0x20e>
 800587e:	2300      	movs	r3, #0
 8005880:	f04f 32ff 	mov.w	r2, #4294967295
 8005884:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005888:	f10a 0a01 	add.w	sl, sl, #1
 800588c:	9304      	str	r3, [sp, #16]
 800588e:	9307      	str	r3, [sp, #28]
 8005890:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005894:	931a      	str	r3, [sp, #104]	; 0x68
 8005896:	4654      	mov	r4, sl
 8005898:	2205      	movs	r2, #5
 800589a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800589e:	4858      	ldr	r0, [pc, #352]	; (8005a00 <_vfiprintf_r+0x24c>)
 80058a0:	f7fa fc9e 	bl	80001e0 <memchr>
 80058a4:	9a04      	ldr	r2, [sp, #16]
 80058a6:	b9d8      	cbnz	r0, 80058e0 <_vfiprintf_r+0x12c>
 80058a8:	06d1      	lsls	r1, r2, #27
 80058aa:	bf44      	itt	mi
 80058ac:	2320      	movmi	r3, #32
 80058ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058b2:	0713      	lsls	r3, r2, #28
 80058b4:	bf44      	itt	mi
 80058b6:	232b      	movmi	r3, #43	; 0x2b
 80058b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80058bc:	f89a 3000 	ldrb.w	r3, [sl]
 80058c0:	2b2a      	cmp	r3, #42	; 0x2a
 80058c2:	d015      	beq.n	80058f0 <_vfiprintf_r+0x13c>
 80058c4:	9a07      	ldr	r2, [sp, #28]
 80058c6:	4654      	mov	r4, sl
 80058c8:	2000      	movs	r0, #0
 80058ca:	f04f 0c0a 	mov.w	ip, #10
 80058ce:	4621      	mov	r1, r4
 80058d0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058d4:	3b30      	subs	r3, #48	; 0x30
 80058d6:	2b09      	cmp	r3, #9
 80058d8:	d94e      	bls.n	8005978 <_vfiprintf_r+0x1c4>
 80058da:	b1b0      	cbz	r0, 800590a <_vfiprintf_r+0x156>
 80058dc:	9207      	str	r2, [sp, #28]
 80058de:	e014      	b.n	800590a <_vfiprintf_r+0x156>
 80058e0:	eba0 0308 	sub.w	r3, r0, r8
 80058e4:	fa09 f303 	lsl.w	r3, r9, r3
 80058e8:	4313      	orrs	r3, r2
 80058ea:	9304      	str	r3, [sp, #16]
 80058ec:	46a2      	mov	sl, r4
 80058ee:	e7d2      	b.n	8005896 <_vfiprintf_r+0xe2>
 80058f0:	9b03      	ldr	r3, [sp, #12]
 80058f2:	1d19      	adds	r1, r3, #4
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	9103      	str	r1, [sp, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	bfbb      	ittet	lt
 80058fc:	425b      	neglt	r3, r3
 80058fe:	f042 0202 	orrlt.w	r2, r2, #2
 8005902:	9307      	strge	r3, [sp, #28]
 8005904:	9307      	strlt	r3, [sp, #28]
 8005906:	bfb8      	it	lt
 8005908:	9204      	strlt	r2, [sp, #16]
 800590a:	7823      	ldrb	r3, [r4, #0]
 800590c:	2b2e      	cmp	r3, #46	; 0x2e
 800590e:	d10c      	bne.n	800592a <_vfiprintf_r+0x176>
 8005910:	7863      	ldrb	r3, [r4, #1]
 8005912:	2b2a      	cmp	r3, #42	; 0x2a
 8005914:	d135      	bne.n	8005982 <_vfiprintf_r+0x1ce>
 8005916:	9b03      	ldr	r3, [sp, #12]
 8005918:	1d1a      	adds	r2, r3, #4
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	9203      	str	r2, [sp, #12]
 800591e:	2b00      	cmp	r3, #0
 8005920:	bfb8      	it	lt
 8005922:	f04f 33ff 	movlt.w	r3, #4294967295
 8005926:	3402      	adds	r4, #2
 8005928:	9305      	str	r3, [sp, #20]
 800592a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005a10 <_vfiprintf_r+0x25c>
 800592e:	7821      	ldrb	r1, [r4, #0]
 8005930:	2203      	movs	r2, #3
 8005932:	4650      	mov	r0, sl
 8005934:	f7fa fc54 	bl	80001e0 <memchr>
 8005938:	b140      	cbz	r0, 800594c <_vfiprintf_r+0x198>
 800593a:	2340      	movs	r3, #64	; 0x40
 800593c:	eba0 000a 	sub.w	r0, r0, sl
 8005940:	fa03 f000 	lsl.w	r0, r3, r0
 8005944:	9b04      	ldr	r3, [sp, #16]
 8005946:	4303      	orrs	r3, r0
 8005948:	3401      	adds	r4, #1
 800594a:	9304      	str	r3, [sp, #16]
 800594c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005950:	482c      	ldr	r0, [pc, #176]	; (8005a04 <_vfiprintf_r+0x250>)
 8005952:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005956:	2206      	movs	r2, #6
 8005958:	f7fa fc42 	bl	80001e0 <memchr>
 800595c:	2800      	cmp	r0, #0
 800595e:	d03f      	beq.n	80059e0 <_vfiprintf_r+0x22c>
 8005960:	4b29      	ldr	r3, [pc, #164]	; (8005a08 <_vfiprintf_r+0x254>)
 8005962:	bb1b      	cbnz	r3, 80059ac <_vfiprintf_r+0x1f8>
 8005964:	9b03      	ldr	r3, [sp, #12]
 8005966:	3307      	adds	r3, #7
 8005968:	f023 0307 	bic.w	r3, r3, #7
 800596c:	3308      	adds	r3, #8
 800596e:	9303      	str	r3, [sp, #12]
 8005970:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005972:	443b      	add	r3, r7
 8005974:	9309      	str	r3, [sp, #36]	; 0x24
 8005976:	e767      	b.n	8005848 <_vfiprintf_r+0x94>
 8005978:	fb0c 3202 	mla	r2, ip, r2, r3
 800597c:	460c      	mov	r4, r1
 800597e:	2001      	movs	r0, #1
 8005980:	e7a5      	b.n	80058ce <_vfiprintf_r+0x11a>
 8005982:	2300      	movs	r3, #0
 8005984:	3401      	adds	r4, #1
 8005986:	9305      	str	r3, [sp, #20]
 8005988:	4619      	mov	r1, r3
 800598a:	f04f 0c0a 	mov.w	ip, #10
 800598e:	4620      	mov	r0, r4
 8005990:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005994:	3a30      	subs	r2, #48	; 0x30
 8005996:	2a09      	cmp	r2, #9
 8005998:	d903      	bls.n	80059a2 <_vfiprintf_r+0x1ee>
 800599a:	2b00      	cmp	r3, #0
 800599c:	d0c5      	beq.n	800592a <_vfiprintf_r+0x176>
 800599e:	9105      	str	r1, [sp, #20]
 80059a0:	e7c3      	b.n	800592a <_vfiprintf_r+0x176>
 80059a2:	fb0c 2101 	mla	r1, ip, r1, r2
 80059a6:	4604      	mov	r4, r0
 80059a8:	2301      	movs	r3, #1
 80059aa:	e7f0      	b.n	800598e <_vfiprintf_r+0x1da>
 80059ac:	ab03      	add	r3, sp, #12
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	462a      	mov	r2, r5
 80059b2:	4b16      	ldr	r3, [pc, #88]	; (8005a0c <_vfiprintf_r+0x258>)
 80059b4:	a904      	add	r1, sp, #16
 80059b6:	4630      	mov	r0, r6
 80059b8:	f7fd fdaa 	bl	8003510 <_printf_float>
 80059bc:	4607      	mov	r7, r0
 80059be:	1c78      	adds	r0, r7, #1
 80059c0:	d1d6      	bne.n	8005970 <_vfiprintf_r+0x1bc>
 80059c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059c4:	07d9      	lsls	r1, r3, #31
 80059c6:	d405      	bmi.n	80059d4 <_vfiprintf_r+0x220>
 80059c8:	89ab      	ldrh	r3, [r5, #12]
 80059ca:	059a      	lsls	r2, r3, #22
 80059cc:	d402      	bmi.n	80059d4 <_vfiprintf_r+0x220>
 80059ce:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059d0:	f000 faaf 	bl	8005f32 <__retarget_lock_release_recursive>
 80059d4:	89ab      	ldrh	r3, [r5, #12]
 80059d6:	065b      	lsls	r3, r3, #25
 80059d8:	f53f af12 	bmi.w	8005800 <_vfiprintf_r+0x4c>
 80059dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80059de:	e711      	b.n	8005804 <_vfiprintf_r+0x50>
 80059e0:	ab03      	add	r3, sp, #12
 80059e2:	9300      	str	r3, [sp, #0]
 80059e4:	462a      	mov	r2, r5
 80059e6:	4b09      	ldr	r3, [pc, #36]	; (8005a0c <_vfiprintf_r+0x258>)
 80059e8:	a904      	add	r1, sp, #16
 80059ea:	4630      	mov	r0, r6
 80059ec:	f7fe f834 	bl	8003a58 <_printf_i>
 80059f0:	e7e4      	b.n	80059bc <_vfiprintf_r+0x208>
 80059f2:	bf00      	nop
 80059f4:	0800684c 	.word	0x0800684c
 80059f8:	0800686c 	.word	0x0800686c
 80059fc:	0800682c 	.word	0x0800682c
 8005a00:	080066d4 	.word	0x080066d4
 8005a04:	080066de 	.word	0x080066de
 8005a08:	08003511 	.word	0x08003511
 8005a0c:	08005791 	.word	0x08005791
 8005a10:	080066da 	.word	0x080066da

08005a14 <__swbuf_r>:
 8005a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a16:	460e      	mov	r6, r1
 8005a18:	4614      	mov	r4, r2
 8005a1a:	4605      	mov	r5, r0
 8005a1c:	b118      	cbz	r0, 8005a26 <__swbuf_r+0x12>
 8005a1e:	6983      	ldr	r3, [r0, #24]
 8005a20:	b90b      	cbnz	r3, 8005a26 <__swbuf_r+0x12>
 8005a22:	f000 f9e7 	bl	8005df4 <__sinit>
 8005a26:	4b21      	ldr	r3, [pc, #132]	; (8005aac <__swbuf_r+0x98>)
 8005a28:	429c      	cmp	r4, r3
 8005a2a:	d12b      	bne.n	8005a84 <__swbuf_r+0x70>
 8005a2c:	686c      	ldr	r4, [r5, #4]
 8005a2e:	69a3      	ldr	r3, [r4, #24]
 8005a30:	60a3      	str	r3, [r4, #8]
 8005a32:	89a3      	ldrh	r3, [r4, #12]
 8005a34:	071a      	lsls	r2, r3, #28
 8005a36:	d52f      	bpl.n	8005a98 <__swbuf_r+0x84>
 8005a38:	6923      	ldr	r3, [r4, #16]
 8005a3a:	b36b      	cbz	r3, 8005a98 <__swbuf_r+0x84>
 8005a3c:	6923      	ldr	r3, [r4, #16]
 8005a3e:	6820      	ldr	r0, [r4, #0]
 8005a40:	1ac0      	subs	r0, r0, r3
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	b2f6      	uxtb	r6, r6
 8005a46:	4283      	cmp	r3, r0
 8005a48:	4637      	mov	r7, r6
 8005a4a:	dc04      	bgt.n	8005a56 <__swbuf_r+0x42>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	4628      	mov	r0, r5
 8005a50:	f000 f93c 	bl	8005ccc <_fflush_r>
 8005a54:	bb30      	cbnz	r0, 8005aa4 <__swbuf_r+0x90>
 8005a56:	68a3      	ldr	r3, [r4, #8]
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	60a3      	str	r3, [r4, #8]
 8005a5c:	6823      	ldr	r3, [r4, #0]
 8005a5e:	1c5a      	adds	r2, r3, #1
 8005a60:	6022      	str	r2, [r4, #0]
 8005a62:	701e      	strb	r6, [r3, #0]
 8005a64:	6963      	ldr	r3, [r4, #20]
 8005a66:	3001      	adds	r0, #1
 8005a68:	4283      	cmp	r3, r0
 8005a6a:	d004      	beq.n	8005a76 <__swbuf_r+0x62>
 8005a6c:	89a3      	ldrh	r3, [r4, #12]
 8005a6e:	07db      	lsls	r3, r3, #31
 8005a70:	d506      	bpl.n	8005a80 <__swbuf_r+0x6c>
 8005a72:	2e0a      	cmp	r6, #10
 8005a74:	d104      	bne.n	8005a80 <__swbuf_r+0x6c>
 8005a76:	4621      	mov	r1, r4
 8005a78:	4628      	mov	r0, r5
 8005a7a:	f000 f927 	bl	8005ccc <_fflush_r>
 8005a7e:	b988      	cbnz	r0, 8005aa4 <__swbuf_r+0x90>
 8005a80:	4638      	mov	r0, r7
 8005a82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a84:	4b0a      	ldr	r3, [pc, #40]	; (8005ab0 <__swbuf_r+0x9c>)
 8005a86:	429c      	cmp	r4, r3
 8005a88:	d101      	bne.n	8005a8e <__swbuf_r+0x7a>
 8005a8a:	68ac      	ldr	r4, [r5, #8]
 8005a8c:	e7cf      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a8e:	4b09      	ldr	r3, [pc, #36]	; (8005ab4 <__swbuf_r+0xa0>)
 8005a90:	429c      	cmp	r4, r3
 8005a92:	bf08      	it	eq
 8005a94:	68ec      	ldreq	r4, [r5, #12]
 8005a96:	e7ca      	b.n	8005a2e <__swbuf_r+0x1a>
 8005a98:	4621      	mov	r1, r4
 8005a9a:	4628      	mov	r0, r5
 8005a9c:	f000 f81a 	bl	8005ad4 <__swsetup_r>
 8005aa0:	2800      	cmp	r0, #0
 8005aa2:	d0cb      	beq.n	8005a3c <__swbuf_r+0x28>
 8005aa4:	f04f 37ff 	mov.w	r7, #4294967295
 8005aa8:	e7ea      	b.n	8005a80 <__swbuf_r+0x6c>
 8005aaa:	bf00      	nop
 8005aac:	0800684c 	.word	0x0800684c
 8005ab0:	0800686c 	.word	0x0800686c
 8005ab4:	0800682c 	.word	0x0800682c

08005ab8 <__ascii_wctomb>:
 8005ab8:	b149      	cbz	r1, 8005ace <__ascii_wctomb+0x16>
 8005aba:	2aff      	cmp	r2, #255	; 0xff
 8005abc:	bf85      	ittet	hi
 8005abe:	238a      	movhi	r3, #138	; 0x8a
 8005ac0:	6003      	strhi	r3, [r0, #0]
 8005ac2:	700a      	strbls	r2, [r1, #0]
 8005ac4:	f04f 30ff 	movhi.w	r0, #4294967295
 8005ac8:	bf98      	it	ls
 8005aca:	2001      	movls	r0, #1
 8005acc:	4770      	bx	lr
 8005ace:	4608      	mov	r0, r1
 8005ad0:	4770      	bx	lr
	...

08005ad4 <__swsetup_r>:
 8005ad4:	4b32      	ldr	r3, [pc, #200]	; (8005ba0 <__swsetup_r+0xcc>)
 8005ad6:	b570      	push	{r4, r5, r6, lr}
 8005ad8:	681d      	ldr	r5, [r3, #0]
 8005ada:	4606      	mov	r6, r0
 8005adc:	460c      	mov	r4, r1
 8005ade:	b125      	cbz	r5, 8005aea <__swsetup_r+0x16>
 8005ae0:	69ab      	ldr	r3, [r5, #24]
 8005ae2:	b913      	cbnz	r3, 8005aea <__swsetup_r+0x16>
 8005ae4:	4628      	mov	r0, r5
 8005ae6:	f000 f985 	bl	8005df4 <__sinit>
 8005aea:	4b2e      	ldr	r3, [pc, #184]	; (8005ba4 <__swsetup_r+0xd0>)
 8005aec:	429c      	cmp	r4, r3
 8005aee:	d10f      	bne.n	8005b10 <__swsetup_r+0x3c>
 8005af0:	686c      	ldr	r4, [r5, #4]
 8005af2:	89a3      	ldrh	r3, [r4, #12]
 8005af4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005af8:	0719      	lsls	r1, r3, #28
 8005afa:	d42c      	bmi.n	8005b56 <__swsetup_r+0x82>
 8005afc:	06dd      	lsls	r5, r3, #27
 8005afe:	d411      	bmi.n	8005b24 <__swsetup_r+0x50>
 8005b00:	2309      	movs	r3, #9
 8005b02:	6033      	str	r3, [r6, #0]
 8005b04:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005b08:	81a3      	strh	r3, [r4, #12]
 8005b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0e:	e03e      	b.n	8005b8e <__swsetup_r+0xba>
 8005b10:	4b25      	ldr	r3, [pc, #148]	; (8005ba8 <__swsetup_r+0xd4>)
 8005b12:	429c      	cmp	r4, r3
 8005b14:	d101      	bne.n	8005b1a <__swsetup_r+0x46>
 8005b16:	68ac      	ldr	r4, [r5, #8]
 8005b18:	e7eb      	b.n	8005af2 <__swsetup_r+0x1e>
 8005b1a:	4b24      	ldr	r3, [pc, #144]	; (8005bac <__swsetup_r+0xd8>)
 8005b1c:	429c      	cmp	r4, r3
 8005b1e:	bf08      	it	eq
 8005b20:	68ec      	ldreq	r4, [r5, #12]
 8005b22:	e7e6      	b.n	8005af2 <__swsetup_r+0x1e>
 8005b24:	0758      	lsls	r0, r3, #29
 8005b26:	d512      	bpl.n	8005b4e <__swsetup_r+0x7a>
 8005b28:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b2a:	b141      	cbz	r1, 8005b3e <__swsetup_r+0x6a>
 8005b2c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b30:	4299      	cmp	r1, r3
 8005b32:	d002      	beq.n	8005b3a <__swsetup_r+0x66>
 8005b34:	4630      	mov	r0, r6
 8005b36:	f7ff fb31 	bl	800519c <_free_r>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6363      	str	r3, [r4, #52]	; 0x34
 8005b3e:	89a3      	ldrh	r3, [r4, #12]
 8005b40:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b44:	81a3      	strh	r3, [r4, #12]
 8005b46:	2300      	movs	r3, #0
 8005b48:	6063      	str	r3, [r4, #4]
 8005b4a:	6923      	ldr	r3, [r4, #16]
 8005b4c:	6023      	str	r3, [r4, #0]
 8005b4e:	89a3      	ldrh	r3, [r4, #12]
 8005b50:	f043 0308 	orr.w	r3, r3, #8
 8005b54:	81a3      	strh	r3, [r4, #12]
 8005b56:	6923      	ldr	r3, [r4, #16]
 8005b58:	b94b      	cbnz	r3, 8005b6e <__swsetup_r+0x9a>
 8005b5a:	89a3      	ldrh	r3, [r4, #12]
 8005b5c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b64:	d003      	beq.n	8005b6e <__swsetup_r+0x9a>
 8005b66:	4621      	mov	r1, r4
 8005b68:	4630      	mov	r0, r6
 8005b6a:	f000 fa09 	bl	8005f80 <__smakebuf_r>
 8005b6e:	89a0      	ldrh	r0, [r4, #12]
 8005b70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005b74:	f010 0301 	ands.w	r3, r0, #1
 8005b78:	d00a      	beq.n	8005b90 <__swsetup_r+0xbc>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	6963      	ldr	r3, [r4, #20]
 8005b80:	425b      	negs	r3, r3
 8005b82:	61a3      	str	r3, [r4, #24]
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b943      	cbnz	r3, 8005b9a <__swsetup_r+0xc6>
 8005b88:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005b8c:	d1ba      	bne.n	8005b04 <__swsetup_r+0x30>
 8005b8e:	bd70      	pop	{r4, r5, r6, pc}
 8005b90:	0781      	lsls	r1, r0, #30
 8005b92:	bf58      	it	pl
 8005b94:	6963      	ldrpl	r3, [r4, #20]
 8005b96:	60a3      	str	r3, [r4, #8]
 8005b98:	e7f4      	b.n	8005b84 <__swsetup_r+0xb0>
 8005b9a:	2000      	movs	r0, #0
 8005b9c:	e7f7      	b.n	8005b8e <__swsetup_r+0xba>
 8005b9e:	bf00      	nop
 8005ba0:	2000000c 	.word	0x2000000c
 8005ba4:	0800684c 	.word	0x0800684c
 8005ba8:	0800686c 	.word	0x0800686c
 8005bac:	0800682c 	.word	0x0800682c

08005bb0 <abort>:
 8005bb0:	b508      	push	{r3, lr}
 8005bb2:	2006      	movs	r0, #6
 8005bb4:	f000 fa54 	bl	8006060 <raise>
 8005bb8:	2001      	movs	r0, #1
 8005bba:	f7fb fc1f 	bl	80013fc <_exit>
	...

08005bc0 <__sflush_r>:
 8005bc0:	898a      	ldrh	r2, [r1, #12]
 8005bc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bc6:	4605      	mov	r5, r0
 8005bc8:	0710      	lsls	r0, r2, #28
 8005bca:	460c      	mov	r4, r1
 8005bcc:	d458      	bmi.n	8005c80 <__sflush_r+0xc0>
 8005bce:	684b      	ldr	r3, [r1, #4]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	dc05      	bgt.n	8005be0 <__sflush_r+0x20>
 8005bd4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	dc02      	bgt.n	8005be0 <__sflush_r+0x20>
 8005bda:	2000      	movs	r0, #0
 8005bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	d0f9      	beq.n	8005bda <__sflush_r+0x1a>
 8005be6:	2300      	movs	r3, #0
 8005be8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005bec:	682f      	ldr	r7, [r5, #0]
 8005bee:	602b      	str	r3, [r5, #0]
 8005bf0:	d032      	beq.n	8005c58 <__sflush_r+0x98>
 8005bf2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bf4:	89a3      	ldrh	r3, [r4, #12]
 8005bf6:	075a      	lsls	r2, r3, #29
 8005bf8:	d505      	bpl.n	8005c06 <__sflush_r+0x46>
 8005bfa:	6863      	ldr	r3, [r4, #4]
 8005bfc:	1ac0      	subs	r0, r0, r3
 8005bfe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005c00:	b10b      	cbz	r3, 8005c06 <__sflush_r+0x46>
 8005c02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005c04:	1ac0      	subs	r0, r0, r3
 8005c06:	2300      	movs	r3, #0
 8005c08:	4602      	mov	r2, r0
 8005c0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c0c:	6a21      	ldr	r1, [r4, #32]
 8005c0e:	4628      	mov	r0, r5
 8005c10:	47b0      	blx	r6
 8005c12:	1c43      	adds	r3, r0, #1
 8005c14:	89a3      	ldrh	r3, [r4, #12]
 8005c16:	d106      	bne.n	8005c26 <__sflush_r+0x66>
 8005c18:	6829      	ldr	r1, [r5, #0]
 8005c1a:	291d      	cmp	r1, #29
 8005c1c:	d82c      	bhi.n	8005c78 <__sflush_r+0xb8>
 8005c1e:	4a2a      	ldr	r2, [pc, #168]	; (8005cc8 <__sflush_r+0x108>)
 8005c20:	40ca      	lsrs	r2, r1
 8005c22:	07d6      	lsls	r6, r2, #31
 8005c24:	d528      	bpl.n	8005c78 <__sflush_r+0xb8>
 8005c26:	2200      	movs	r2, #0
 8005c28:	6062      	str	r2, [r4, #4]
 8005c2a:	04d9      	lsls	r1, r3, #19
 8005c2c:	6922      	ldr	r2, [r4, #16]
 8005c2e:	6022      	str	r2, [r4, #0]
 8005c30:	d504      	bpl.n	8005c3c <__sflush_r+0x7c>
 8005c32:	1c42      	adds	r2, r0, #1
 8005c34:	d101      	bne.n	8005c3a <__sflush_r+0x7a>
 8005c36:	682b      	ldr	r3, [r5, #0]
 8005c38:	b903      	cbnz	r3, 8005c3c <__sflush_r+0x7c>
 8005c3a:	6560      	str	r0, [r4, #84]	; 0x54
 8005c3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c3e:	602f      	str	r7, [r5, #0]
 8005c40:	2900      	cmp	r1, #0
 8005c42:	d0ca      	beq.n	8005bda <__sflush_r+0x1a>
 8005c44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c48:	4299      	cmp	r1, r3
 8005c4a:	d002      	beq.n	8005c52 <__sflush_r+0x92>
 8005c4c:	4628      	mov	r0, r5
 8005c4e:	f7ff faa5 	bl	800519c <_free_r>
 8005c52:	2000      	movs	r0, #0
 8005c54:	6360      	str	r0, [r4, #52]	; 0x34
 8005c56:	e7c1      	b.n	8005bdc <__sflush_r+0x1c>
 8005c58:	6a21      	ldr	r1, [r4, #32]
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	4628      	mov	r0, r5
 8005c5e:	47b0      	blx	r6
 8005c60:	1c41      	adds	r1, r0, #1
 8005c62:	d1c7      	bne.n	8005bf4 <__sflush_r+0x34>
 8005c64:	682b      	ldr	r3, [r5, #0]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d0c4      	beq.n	8005bf4 <__sflush_r+0x34>
 8005c6a:	2b1d      	cmp	r3, #29
 8005c6c:	d001      	beq.n	8005c72 <__sflush_r+0xb2>
 8005c6e:	2b16      	cmp	r3, #22
 8005c70:	d101      	bne.n	8005c76 <__sflush_r+0xb6>
 8005c72:	602f      	str	r7, [r5, #0]
 8005c74:	e7b1      	b.n	8005bda <__sflush_r+0x1a>
 8005c76:	89a3      	ldrh	r3, [r4, #12]
 8005c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c7c:	81a3      	strh	r3, [r4, #12]
 8005c7e:	e7ad      	b.n	8005bdc <__sflush_r+0x1c>
 8005c80:	690f      	ldr	r7, [r1, #16]
 8005c82:	2f00      	cmp	r7, #0
 8005c84:	d0a9      	beq.n	8005bda <__sflush_r+0x1a>
 8005c86:	0793      	lsls	r3, r2, #30
 8005c88:	680e      	ldr	r6, [r1, #0]
 8005c8a:	bf08      	it	eq
 8005c8c:	694b      	ldreq	r3, [r1, #20]
 8005c8e:	600f      	str	r7, [r1, #0]
 8005c90:	bf18      	it	ne
 8005c92:	2300      	movne	r3, #0
 8005c94:	eba6 0807 	sub.w	r8, r6, r7
 8005c98:	608b      	str	r3, [r1, #8]
 8005c9a:	f1b8 0f00 	cmp.w	r8, #0
 8005c9e:	dd9c      	ble.n	8005bda <__sflush_r+0x1a>
 8005ca0:	6a21      	ldr	r1, [r4, #32]
 8005ca2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005ca4:	4643      	mov	r3, r8
 8005ca6:	463a      	mov	r2, r7
 8005ca8:	4628      	mov	r0, r5
 8005caa:	47b0      	blx	r6
 8005cac:	2800      	cmp	r0, #0
 8005cae:	dc06      	bgt.n	8005cbe <__sflush_r+0xfe>
 8005cb0:	89a3      	ldrh	r3, [r4, #12]
 8005cb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005cb6:	81a3      	strh	r3, [r4, #12]
 8005cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005cbc:	e78e      	b.n	8005bdc <__sflush_r+0x1c>
 8005cbe:	4407      	add	r7, r0
 8005cc0:	eba8 0800 	sub.w	r8, r8, r0
 8005cc4:	e7e9      	b.n	8005c9a <__sflush_r+0xda>
 8005cc6:	bf00      	nop
 8005cc8:	20400001 	.word	0x20400001

08005ccc <_fflush_r>:
 8005ccc:	b538      	push	{r3, r4, r5, lr}
 8005cce:	690b      	ldr	r3, [r1, #16]
 8005cd0:	4605      	mov	r5, r0
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	b913      	cbnz	r3, 8005cdc <_fflush_r+0x10>
 8005cd6:	2500      	movs	r5, #0
 8005cd8:	4628      	mov	r0, r5
 8005cda:	bd38      	pop	{r3, r4, r5, pc}
 8005cdc:	b118      	cbz	r0, 8005ce6 <_fflush_r+0x1a>
 8005cde:	6983      	ldr	r3, [r0, #24]
 8005ce0:	b90b      	cbnz	r3, 8005ce6 <_fflush_r+0x1a>
 8005ce2:	f000 f887 	bl	8005df4 <__sinit>
 8005ce6:	4b14      	ldr	r3, [pc, #80]	; (8005d38 <_fflush_r+0x6c>)
 8005ce8:	429c      	cmp	r4, r3
 8005cea:	d11b      	bne.n	8005d24 <_fflush_r+0x58>
 8005cec:	686c      	ldr	r4, [r5, #4]
 8005cee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d0ef      	beq.n	8005cd6 <_fflush_r+0xa>
 8005cf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005cf8:	07d0      	lsls	r0, r2, #31
 8005cfa:	d404      	bmi.n	8005d06 <_fflush_r+0x3a>
 8005cfc:	0599      	lsls	r1, r3, #22
 8005cfe:	d402      	bmi.n	8005d06 <_fflush_r+0x3a>
 8005d00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d02:	f000 f915 	bl	8005f30 <__retarget_lock_acquire_recursive>
 8005d06:	4628      	mov	r0, r5
 8005d08:	4621      	mov	r1, r4
 8005d0a:	f7ff ff59 	bl	8005bc0 <__sflush_r>
 8005d0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005d10:	07da      	lsls	r2, r3, #31
 8005d12:	4605      	mov	r5, r0
 8005d14:	d4e0      	bmi.n	8005cd8 <_fflush_r+0xc>
 8005d16:	89a3      	ldrh	r3, [r4, #12]
 8005d18:	059b      	lsls	r3, r3, #22
 8005d1a:	d4dd      	bmi.n	8005cd8 <_fflush_r+0xc>
 8005d1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005d1e:	f000 f908 	bl	8005f32 <__retarget_lock_release_recursive>
 8005d22:	e7d9      	b.n	8005cd8 <_fflush_r+0xc>
 8005d24:	4b05      	ldr	r3, [pc, #20]	; (8005d3c <_fflush_r+0x70>)
 8005d26:	429c      	cmp	r4, r3
 8005d28:	d101      	bne.n	8005d2e <_fflush_r+0x62>
 8005d2a:	68ac      	ldr	r4, [r5, #8]
 8005d2c:	e7df      	b.n	8005cee <_fflush_r+0x22>
 8005d2e:	4b04      	ldr	r3, [pc, #16]	; (8005d40 <_fflush_r+0x74>)
 8005d30:	429c      	cmp	r4, r3
 8005d32:	bf08      	it	eq
 8005d34:	68ec      	ldreq	r4, [r5, #12]
 8005d36:	e7da      	b.n	8005cee <_fflush_r+0x22>
 8005d38:	0800684c 	.word	0x0800684c
 8005d3c:	0800686c 	.word	0x0800686c
 8005d40:	0800682c 	.word	0x0800682c

08005d44 <std>:
 8005d44:	2300      	movs	r3, #0
 8005d46:	b510      	push	{r4, lr}
 8005d48:	4604      	mov	r4, r0
 8005d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d52:	6083      	str	r3, [r0, #8]
 8005d54:	8181      	strh	r1, [r0, #12]
 8005d56:	6643      	str	r3, [r0, #100]	; 0x64
 8005d58:	81c2      	strh	r2, [r0, #14]
 8005d5a:	6183      	str	r3, [r0, #24]
 8005d5c:	4619      	mov	r1, r3
 8005d5e:	2208      	movs	r2, #8
 8005d60:	305c      	adds	r0, #92	; 0x5c
 8005d62:	f7fd fb2d 	bl	80033c0 <memset>
 8005d66:	4b05      	ldr	r3, [pc, #20]	; (8005d7c <std+0x38>)
 8005d68:	6263      	str	r3, [r4, #36]	; 0x24
 8005d6a:	4b05      	ldr	r3, [pc, #20]	; (8005d80 <std+0x3c>)
 8005d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d6e:	4b05      	ldr	r3, [pc, #20]	; (8005d84 <std+0x40>)
 8005d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d72:	4b05      	ldr	r3, [pc, #20]	; (8005d88 <std+0x44>)
 8005d74:	6224      	str	r4, [r4, #32]
 8005d76:	6323      	str	r3, [r4, #48]	; 0x30
 8005d78:	bd10      	pop	{r4, pc}
 8005d7a:	bf00      	nop
 8005d7c:	08006099 	.word	0x08006099
 8005d80:	080060bb 	.word	0x080060bb
 8005d84:	080060f3 	.word	0x080060f3
 8005d88:	08006117 	.word	0x08006117

08005d8c <_cleanup_r>:
 8005d8c:	4901      	ldr	r1, [pc, #4]	; (8005d94 <_cleanup_r+0x8>)
 8005d8e:	f000 b8af 	b.w	8005ef0 <_fwalk_reent>
 8005d92:	bf00      	nop
 8005d94:	08005ccd 	.word	0x08005ccd

08005d98 <__sfmoreglue>:
 8005d98:	b570      	push	{r4, r5, r6, lr}
 8005d9a:	2268      	movs	r2, #104	; 0x68
 8005d9c:	1e4d      	subs	r5, r1, #1
 8005d9e:	4355      	muls	r5, r2
 8005da0:	460e      	mov	r6, r1
 8005da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005da6:	f7ff fa65 	bl	8005274 <_malloc_r>
 8005daa:	4604      	mov	r4, r0
 8005dac:	b140      	cbz	r0, 8005dc0 <__sfmoreglue+0x28>
 8005dae:	2100      	movs	r1, #0
 8005db0:	e9c0 1600 	strd	r1, r6, [r0]
 8005db4:	300c      	adds	r0, #12
 8005db6:	60a0      	str	r0, [r4, #8]
 8005db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005dbc:	f7fd fb00 	bl	80033c0 <memset>
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	bd70      	pop	{r4, r5, r6, pc}

08005dc4 <__sfp_lock_acquire>:
 8005dc4:	4801      	ldr	r0, [pc, #4]	; (8005dcc <__sfp_lock_acquire+0x8>)
 8005dc6:	f000 b8b3 	b.w	8005f30 <__retarget_lock_acquire_recursive>
 8005dca:	bf00      	nop
 8005dcc:	20000361 	.word	0x20000361

08005dd0 <__sfp_lock_release>:
 8005dd0:	4801      	ldr	r0, [pc, #4]	; (8005dd8 <__sfp_lock_release+0x8>)
 8005dd2:	f000 b8ae 	b.w	8005f32 <__retarget_lock_release_recursive>
 8005dd6:	bf00      	nop
 8005dd8:	20000361 	.word	0x20000361

08005ddc <__sinit_lock_acquire>:
 8005ddc:	4801      	ldr	r0, [pc, #4]	; (8005de4 <__sinit_lock_acquire+0x8>)
 8005dde:	f000 b8a7 	b.w	8005f30 <__retarget_lock_acquire_recursive>
 8005de2:	bf00      	nop
 8005de4:	20000362 	.word	0x20000362

08005de8 <__sinit_lock_release>:
 8005de8:	4801      	ldr	r0, [pc, #4]	; (8005df0 <__sinit_lock_release+0x8>)
 8005dea:	f000 b8a2 	b.w	8005f32 <__retarget_lock_release_recursive>
 8005dee:	bf00      	nop
 8005df0:	20000362 	.word	0x20000362

08005df4 <__sinit>:
 8005df4:	b510      	push	{r4, lr}
 8005df6:	4604      	mov	r4, r0
 8005df8:	f7ff fff0 	bl	8005ddc <__sinit_lock_acquire>
 8005dfc:	69a3      	ldr	r3, [r4, #24]
 8005dfe:	b11b      	cbz	r3, 8005e08 <__sinit+0x14>
 8005e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e04:	f7ff bff0 	b.w	8005de8 <__sinit_lock_release>
 8005e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8005e0e:	4b13      	ldr	r3, [pc, #76]	; (8005e5c <__sinit+0x68>)
 8005e10:	4a13      	ldr	r2, [pc, #76]	; (8005e60 <__sinit+0x6c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8005e16:	42a3      	cmp	r3, r4
 8005e18:	bf04      	itt	eq
 8005e1a:	2301      	moveq	r3, #1
 8005e1c:	61a3      	streq	r3, [r4, #24]
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f000 f820 	bl	8005e64 <__sfp>
 8005e24:	6060      	str	r0, [r4, #4]
 8005e26:	4620      	mov	r0, r4
 8005e28:	f000 f81c 	bl	8005e64 <__sfp>
 8005e2c:	60a0      	str	r0, [r4, #8]
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 f818 	bl	8005e64 <__sfp>
 8005e34:	2200      	movs	r2, #0
 8005e36:	60e0      	str	r0, [r4, #12]
 8005e38:	2104      	movs	r1, #4
 8005e3a:	6860      	ldr	r0, [r4, #4]
 8005e3c:	f7ff ff82 	bl	8005d44 <std>
 8005e40:	68a0      	ldr	r0, [r4, #8]
 8005e42:	2201      	movs	r2, #1
 8005e44:	2109      	movs	r1, #9
 8005e46:	f7ff ff7d 	bl	8005d44 <std>
 8005e4a:	68e0      	ldr	r0, [r4, #12]
 8005e4c:	2202      	movs	r2, #2
 8005e4e:	2112      	movs	r1, #18
 8005e50:	f7ff ff78 	bl	8005d44 <std>
 8005e54:	2301      	movs	r3, #1
 8005e56:	61a3      	str	r3, [r4, #24]
 8005e58:	e7d2      	b.n	8005e00 <__sinit+0xc>
 8005e5a:	bf00      	nop
 8005e5c:	080064b4 	.word	0x080064b4
 8005e60:	08005d8d 	.word	0x08005d8d

08005e64 <__sfp>:
 8005e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e66:	4607      	mov	r7, r0
 8005e68:	f7ff ffac 	bl	8005dc4 <__sfp_lock_acquire>
 8005e6c:	4b1e      	ldr	r3, [pc, #120]	; (8005ee8 <__sfp+0x84>)
 8005e6e:	681e      	ldr	r6, [r3, #0]
 8005e70:	69b3      	ldr	r3, [r6, #24]
 8005e72:	b913      	cbnz	r3, 8005e7a <__sfp+0x16>
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7ff ffbd 	bl	8005df4 <__sinit>
 8005e7a:	3648      	adds	r6, #72	; 0x48
 8005e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e80:	3b01      	subs	r3, #1
 8005e82:	d503      	bpl.n	8005e8c <__sfp+0x28>
 8005e84:	6833      	ldr	r3, [r6, #0]
 8005e86:	b30b      	cbz	r3, 8005ecc <__sfp+0x68>
 8005e88:	6836      	ldr	r6, [r6, #0]
 8005e8a:	e7f7      	b.n	8005e7c <__sfp+0x18>
 8005e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e90:	b9d5      	cbnz	r5, 8005ec8 <__sfp+0x64>
 8005e92:	4b16      	ldr	r3, [pc, #88]	; (8005eec <__sfp+0x88>)
 8005e94:	60e3      	str	r3, [r4, #12]
 8005e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8005e9c:	f000 f847 	bl	8005f2e <__retarget_lock_init_recursive>
 8005ea0:	f7ff ff96 	bl	8005dd0 <__sfp_lock_release>
 8005ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8005eac:	6025      	str	r5, [r4, #0]
 8005eae:	61a5      	str	r5, [r4, #24]
 8005eb0:	2208      	movs	r2, #8
 8005eb2:	4629      	mov	r1, r5
 8005eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005eb8:	f7fd fa82 	bl	80033c0 <memset>
 8005ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ec8:	3468      	adds	r4, #104	; 0x68
 8005eca:	e7d9      	b.n	8005e80 <__sfp+0x1c>
 8005ecc:	2104      	movs	r1, #4
 8005ece:	4638      	mov	r0, r7
 8005ed0:	f7ff ff62 	bl	8005d98 <__sfmoreglue>
 8005ed4:	4604      	mov	r4, r0
 8005ed6:	6030      	str	r0, [r6, #0]
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	d1d5      	bne.n	8005e88 <__sfp+0x24>
 8005edc:	f7ff ff78 	bl	8005dd0 <__sfp_lock_release>
 8005ee0:	230c      	movs	r3, #12
 8005ee2:	603b      	str	r3, [r7, #0]
 8005ee4:	e7ee      	b.n	8005ec4 <__sfp+0x60>
 8005ee6:	bf00      	nop
 8005ee8:	080064b4 	.word	0x080064b4
 8005eec:	ffff0001 	.word	0xffff0001

08005ef0 <_fwalk_reent>:
 8005ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005ef4:	4606      	mov	r6, r0
 8005ef6:	4688      	mov	r8, r1
 8005ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005efc:	2700      	movs	r7, #0
 8005efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005f02:	f1b9 0901 	subs.w	r9, r9, #1
 8005f06:	d505      	bpl.n	8005f14 <_fwalk_reent+0x24>
 8005f08:	6824      	ldr	r4, [r4, #0]
 8005f0a:	2c00      	cmp	r4, #0
 8005f0c:	d1f7      	bne.n	8005efe <_fwalk_reent+0xe>
 8005f0e:	4638      	mov	r0, r7
 8005f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f14:	89ab      	ldrh	r3, [r5, #12]
 8005f16:	2b01      	cmp	r3, #1
 8005f18:	d907      	bls.n	8005f2a <_fwalk_reent+0x3a>
 8005f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005f1e:	3301      	adds	r3, #1
 8005f20:	d003      	beq.n	8005f2a <_fwalk_reent+0x3a>
 8005f22:	4629      	mov	r1, r5
 8005f24:	4630      	mov	r0, r6
 8005f26:	47c0      	blx	r8
 8005f28:	4307      	orrs	r7, r0
 8005f2a:	3568      	adds	r5, #104	; 0x68
 8005f2c:	e7e9      	b.n	8005f02 <_fwalk_reent+0x12>

08005f2e <__retarget_lock_init_recursive>:
 8005f2e:	4770      	bx	lr

08005f30 <__retarget_lock_acquire_recursive>:
 8005f30:	4770      	bx	lr

08005f32 <__retarget_lock_release_recursive>:
 8005f32:	4770      	bx	lr

08005f34 <__swhatbuf_r>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	460e      	mov	r6, r1
 8005f38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f3c:	2900      	cmp	r1, #0
 8005f3e:	b096      	sub	sp, #88	; 0x58
 8005f40:	4614      	mov	r4, r2
 8005f42:	461d      	mov	r5, r3
 8005f44:	da08      	bge.n	8005f58 <__swhatbuf_r+0x24>
 8005f46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	061a      	lsls	r2, r3, #24
 8005f50:	d410      	bmi.n	8005f74 <__swhatbuf_r+0x40>
 8005f52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005f56:	e00e      	b.n	8005f76 <__swhatbuf_r+0x42>
 8005f58:	466a      	mov	r2, sp
 8005f5a:	f000 f903 	bl	8006164 <_fstat_r>
 8005f5e:	2800      	cmp	r0, #0
 8005f60:	dbf1      	blt.n	8005f46 <__swhatbuf_r+0x12>
 8005f62:	9a01      	ldr	r2, [sp, #4]
 8005f64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005f68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005f6c:	425a      	negs	r2, r3
 8005f6e:	415a      	adcs	r2, r3
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	e7ee      	b.n	8005f52 <__swhatbuf_r+0x1e>
 8005f74:	2340      	movs	r3, #64	; 0x40
 8005f76:	2000      	movs	r0, #0
 8005f78:	6023      	str	r3, [r4, #0]
 8005f7a:	b016      	add	sp, #88	; 0x58
 8005f7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f80 <__smakebuf_r>:
 8005f80:	898b      	ldrh	r3, [r1, #12]
 8005f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005f84:	079d      	lsls	r5, r3, #30
 8005f86:	4606      	mov	r6, r0
 8005f88:	460c      	mov	r4, r1
 8005f8a:	d507      	bpl.n	8005f9c <__smakebuf_r+0x1c>
 8005f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f90:	6023      	str	r3, [r4, #0]
 8005f92:	6123      	str	r3, [r4, #16]
 8005f94:	2301      	movs	r3, #1
 8005f96:	6163      	str	r3, [r4, #20]
 8005f98:	b002      	add	sp, #8
 8005f9a:	bd70      	pop	{r4, r5, r6, pc}
 8005f9c:	ab01      	add	r3, sp, #4
 8005f9e:	466a      	mov	r2, sp
 8005fa0:	f7ff ffc8 	bl	8005f34 <__swhatbuf_r>
 8005fa4:	9900      	ldr	r1, [sp, #0]
 8005fa6:	4605      	mov	r5, r0
 8005fa8:	4630      	mov	r0, r6
 8005faa:	f7ff f963 	bl	8005274 <_malloc_r>
 8005fae:	b948      	cbnz	r0, 8005fc4 <__smakebuf_r+0x44>
 8005fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fb4:	059a      	lsls	r2, r3, #22
 8005fb6:	d4ef      	bmi.n	8005f98 <__smakebuf_r+0x18>
 8005fb8:	f023 0303 	bic.w	r3, r3, #3
 8005fbc:	f043 0302 	orr.w	r3, r3, #2
 8005fc0:	81a3      	strh	r3, [r4, #12]
 8005fc2:	e7e3      	b.n	8005f8c <__smakebuf_r+0xc>
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	; (8005ffc <__smakebuf_r+0x7c>)
 8005fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	6020      	str	r0, [r4, #0]
 8005fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005fd0:	81a3      	strh	r3, [r4, #12]
 8005fd2:	9b00      	ldr	r3, [sp, #0]
 8005fd4:	6163      	str	r3, [r4, #20]
 8005fd6:	9b01      	ldr	r3, [sp, #4]
 8005fd8:	6120      	str	r0, [r4, #16]
 8005fda:	b15b      	cbz	r3, 8005ff4 <__smakebuf_r+0x74>
 8005fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f8d1 	bl	8006188 <_isatty_r>
 8005fe6:	b128      	cbz	r0, 8005ff4 <__smakebuf_r+0x74>
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	f023 0303 	bic.w	r3, r3, #3
 8005fee:	f043 0301 	orr.w	r3, r3, #1
 8005ff2:	81a3      	strh	r3, [r4, #12]
 8005ff4:	89a0      	ldrh	r0, [r4, #12]
 8005ff6:	4305      	orrs	r5, r0
 8005ff8:	81a5      	strh	r5, [r4, #12]
 8005ffa:	e7cd      	b.n	8005f98 <__smakebuf_r+0x18>
 8005ffc:	08005d8d 	.word	0x08005d8d

08006000 <_malloc_usable_size_r>:
 8006000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006004:	1f18      	subs	r0, r3, #4
 8006006:	2b00      	cmp	r3, #0
 8006008:	bfbc      	itt	lt
 800600a:	580b      	ldrlt	r3, [r1, r0]
 800600c:	18c0      	addlt	r0, r0, r3
 800600e:	4770      	bx	lr

08006010 <_raise_r>:
 8006010:	291f      	cmp	r1, #31
 8006012:	b538      	push	{r3, r4, r5, lr}
 8006014:	4604      	mov	r4, r0
 8006016:	460d      	mov	r5, r1
 8006018:	d904      	bls.n	8006024 <_raise_r+0x14>
 800601a:	2316      	movs	r3, #22
 800601c:	6003      	str	r3, [r0, #0]
 800601e:	f04f 30ff 	mov.w	r0, #4294967295
 8006022:	bd38      	pop	{r3, r4, r5, pc}
 8006024:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006026:	b112      	cbz	r2, 800602e <_raise_r+0x1e>
 8006028:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800602c:	b94b      	cbnz	r3, 8006042 <_raise_r+0x32>
 800602e:	4620      	mov	r0, r4
 8006030:	f000 f830 	bl	8006094 <_getpid_r>
 8006034:	462a      	mov	r2, r5
 8006036:	4601      	mov	r1, r0
 8006038:	4620      	mov	r0, r4
 800603a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800603e:	f000 b817 	b.w	8006070 <_kill_r>
 8006042:	2b01      	cmp	r3, #1
 8006044:	d00a      	beq.n	800605c <_raise_r+0x4c>
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	d103      	bne.n	8006052 <_raise_r+0x42>
 800604a:	2316      	movs	r3, #22
 800604c:	6003      	str	r3, [r0, #0]
 800604e:	2001      	movs	r0, #1
 8006050:	e7e7      	b.n	8006022 <_raise_r+0x12>
 8006052:	2400      	movs	r4, #0
 8006054:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006058:	4628      	mov	r0, r5
 800605a:	4798      	blx	r3
 800605c:	2000      	movs	r0, #0
 800605e:	e7e0      	b.n	8006022 <_raise_r+0x12>

08006060 <raise>:
 8006060:	4b02      	ldr	r3, [pc, #8]	; (800606c <raise+0xc>)
 8006062:	4601      	mov	r1, r0
 8006064:	6818      	ldr	r0, [r3, #0]
 8006066:	f7ff bfd3 	b.w	8006010 <_raise_r>
 800606a:	bf00      	nop
 800606c:	2000000c 	.word	0x2000000c

08006070 <_kill_r>:
 8006070:	b538      	push	{r3, r4, r5, lr}
 8006072:	4d07      	ldr	r5, [pc, #28]	; (8006090 <_kill_r+0x20>)
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	4608      	mov	r0, r1
 800607a:	4611      	mov	r1, r2
 800607c:	602b      	str	r3, [r5, #0]
 800607e:	f7fb f9b5 	bl	80013ec <_kill>
 8006082:	1c43      	adds	r3, r0, #1
 8006084:	d102      	bne.n	800608c <_kill_r+0x1c>
 8006086:	682b      	ldr	r3, [r5, #0]
 8006088:	b103      	cbz	r3, 800608c <_kill_r+0x1c>
 800608a:	6023      	str	r3, [r4, #0]
 800608c:	bd38      	pop	{r3, r4, r5, pc}
 800608e:	bf00      	nop
 8006090:	2000035c 	.word	0x2000035c

08006094 <_getpid_r>:
 8006094:	f7fb b9a8 	b.w	80013e8 <_getpid>

08006098 <__sread>:
 8006098:	b510      	push	{r4, lr}
 800609a:	460c      	mov	r4, r1
 800609c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060a0:	f000 f894 	bl	80061cc <_read_r>
 80060a4:	2800      	cmp	r0, #0
 80060a6:	bfab      	itete	ge
 80060a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80060aa:	89a3      	ldrhlt	r3, [r4, #12]
 80060ac:	181b      	addge	r3, r3, r0
 80060ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80060b2:	bfac      	ite	ge
 80060b4:	6563      	strge	r3, [r4, #84]	; 0x54
 80060b6:	81a3      	strhlt	r3, [r4, #12]
 80060b8:	bd10      	pop	{r4, pc}

080060ba <__swrite>:
 80060ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060be:	461f      	mov	r7, r3
 80060c0:	898b      	ldrh	r3, [r1, #12]
 80060c2:	05db      	lsls	r3, r3, #23
 80060c4:	4605      	mov	r5, r0
 80060c6:	460c      	mov	r4, r1
 80060c8:	4616      	mov	r6, r2
 80060ca:	d505      	bpl.n	80060d8 <__swrite+0x1e>
 80060cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060d0:	2302      	movs	r3, #2
 80060d2:	2200      	movs	r2, #0
 80060d4:	f000 f868 	bl	80061a8 <_lseek_r>
 80060d8:	89a3      	ldrh	r3, [r4, #12]
 80060da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060e2:	81a3      	strh	r3, [r4, #12]
 80060e4:	4632      	mov	r2, r6
 80060e6:	463b      	mov	r3, r7
 80060e8:	4628      	mov	r0, r5
 80060ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060ee:	f000 b817 	b.w	8006120 <_write_r>

080060f2 <__sseek>:
 80060f2:	b510      	push	{r4, lr}
 80060f4:	460c      	mov	r4, r1
 80060f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060fa:	f000 f855 	bl	80061a8 <_lseek_r>
 80060fe:	1c43      	adds	r3, r0, #1
 8006100:	89a3      	ldrh	r3, [r4, #12]
 8006102:	bf15      	itete	ne
 8006104:	6560      	strne	r0, [r4, #84]	; 0x54
 8006106:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800610a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800610e:	81a3      	strheq	r3, [r4, #12]
 8006110:	bf18      	it	ne
 8006112:	81a3      	strhne	r3, [r4, #12]
 8006114:	bd10      	pop	{r4, pc}

08006116 <__sclose>:
 8006116:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800611a:	f000 b813 	b.w	8006144 <_close_r>
	...

08006120 <_write_r>:
 8006120:	b538      	push	{r3, r4, r5, lr}
 8006122:	4d07      	ldr	r5, [pc, #28]	; (8006140 <_write_r+0x20>)
 8006124:	4604      	mov	r4, r0
 8006126:	4608      	mov	r0, r1
 8006128:	4611      	mov	r1, r2
 800612a:	2200      	movs	r2, #0
 800612c:	602a      	str	r2, [r5, #0]
 800612e:	461a      	mov	r2, r3
 8006130:	f7fb f978 	bl	8001424 <_write>
 8006134:	1c43      	adds	r3, r0, #1
 8006136:	d102      	bne.n	800613e <_write_r+0x1e>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b103      	cbz	r3, 800613e <_write_r+0x1e>
 800613c:	6023      	str	r3, [r4, #0]
 800613e:	bd38      	pop	{r3, r4, r5, pc}
 8006140:	2000035c 	.word	0x2000035c

08006144 <_close_r>:
 8006144:	b538      	push	{r3, r4, r5, lr}
 8006146:	4d06      	ldr	r5, [pc, #24]	; (8006160 <_close_r+0x1c>)
 8006148:	2300      	movs	r3, #0
 800614a:	4604      	mov	r4, r0
 800614c:	4608      	mov	r0, r1
 800614e:	602b      	str	r3, [r5, #0]
 8006150:	f7fb f976 	bl	8001440 <_close>
 8006154:	1c43      	adds	r3, r0, #1
 8006156:	d102      	bne.n	800615e <_close_r+0x1a>
 8006158:	682b      	ldr	r3, [r5, #0]
 800615a:	b103      	cbz	r3, 800615e <_close_r+0x1a>
 800615c:	6023      	str	r3, [r4, #0]
 800615e:	bd38      	pop	{r3, r4, r5, pc}
 8006160:	2000035c 	.word	0x2000035c

08006164 <_fstat_r>:
 8006164:	b538      	push	{r3, r4, r5, lr}
 8006166:	4d07      	ldr	r5, [pc, #28]	; (8006184 <_fstat_r+0x20>)
 8006168:	2300      	movs	r3, #0
 800616a:	4604      	mov	r4, r0
 800616c:	4608      	mov	r0, r1
 800616e:	4611      	mov	r1, r2
 8006170:	602b      	str	r3, [r5, #0]
 8006172:	f7fb f968 	bl	8001446 <_fstat>
 8006176:	1c43      	adds	r3, r0, #1
 8006178:	d102      	bne.n	8006180 <_fstat_r+0x1c>
 800617a:	682b      	ldr	r3, [r5, #0]
 800617c:	b103      	cbz	r3, 8006180 <_fstat_r+0x1c>
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	bd38      	pop	{r3, r4, r5, pc}
 8006182:	bf00      	nop
 8006184:	2000035c 	.word	0x2000035c

08006188 <_isatty_r>:
 8006188:	b538      	push	{r3, r4, r5, lr}
 800618a:	4d06      	ldr	r5, [pc, #24]	; (80061a4 <_isatty_r+0x1c>)
 800618c:	2300      	movs	r3, #0
 800618e:	4604      	mov	r4, r0
 8006190:	4608      	mov	r0, r1
 8006192:	602b      	str	r3, [r5, #0]
 8006194:	f7fb f95c 	bl	8001450 <_isatty>
 8006198:	1c43      	adds	r3, r0, #1
 800619a:	d102      	bne.n	80061a2 <_isatty_r+0x1a>
 800619c:	682b      	ldr	r3, [r5, #0]
 800619e:	b103      	cbz	r3, 80061a2 <_isatty_r+0x1a>
 80061a0:	6023      	str	r3, [r4, #0]
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	2000035c 	.word	0x2000035c

080061a8 <_lseek_r>:
 80061a8:	b538      	push	{r3, r4, r5, lr}
 80061aa:	4d07      	ldr	r5, [pc, #28]	; (80061c8 <_lseek_r+0x20>)
 80061ac:	4604      	mov	r4, r0
 80061ae:	4608      	mov	r0, r1
 80061b0:	4611      	mov	r1, r2
 80061b2:	2200      	movs	r2, #0
 80061b4:	602a      	str	r2, [r5, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	f7fb f94c 	bl	8001454 <_lseek>
 80061bc:	1c43      	adds	r3, r0, #1
 80061be:	d102      	bne.n	80061c6 <_lseek_r+0x1e>
 80061c0:	682b      	ldr	r3, [r5, #0]
 80061c2:	b103      	cbz	r3, 80061c6 <_lseek_r+0x1e>
 80061c4:	6023      	str	r3, [r4, #0]
 80061c6:	bd38      	pop	{r3, r4, r5, pc}
 80061c8:	2000035c 	.word	0x2000035c

080061cc <_read_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	; (80061ec <_read_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fb f914 	bl	8001408 <_read>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_read_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_read_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	2000035c 	.word	0x2000035c

080061f0 <_init>:
 80061f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061f2:	bf00      	nop
 80061f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80061f6:	bc08      	pop	{r3}
 80061f8:	469e      	mov	lr, r3
 80061fa:	4770      	bx	lr

080061fc <_fini>:
 80061fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061fe:	bf00      	nop
 8006200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006202:	bc08      	pop	{r3}
 8006204:	469e      	mov	lr, r3
 8006206:	4770      	bx	lr
